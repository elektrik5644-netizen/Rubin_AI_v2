#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PLC Analysis API Server
–ê–Ω–∞–ª–∏–∑ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ PLC –ø—Ä–æ–≥—Ä–∞–º–º
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import re
import logging
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ PLC
try:
    from plc_analyzer import analyze_plc_file
    PLC_ANALYZER_AVAILABLE = True
except ImportError:
    PLC_ANALYZER_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ PLC
PLC_KNOWLEDGE = {
    "ladder_logic": {
        "description": "–†–µ–ª–µ–π–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è PLC",
        "elements": ["–∫–æ–Ω—Ç–∞–∫—Ç—ã", "–∫–∞—Ç—É—à–∫–∏", "—Ç–∞–π–º–µ—Ä—ã", "—Å—á–µ—Ç—á–∏–∫–∏", "–±–ª–æ–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π"],
        "keywords": ["ladder", "—Ä–µ–ª–µ–π–Ω–∞—è", "–ª–æ–≥–∏–∫–∞", "–∫–æ–Ω—Ç–∞–∫—Ç—ã", "–∫–∞—Ç—É—à–∫–∏"]
    },
    "function_blocks": {
        "description": "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ - –º–æ–¥—É–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã",
        "types": ["AND", "OR", "NOT", "TIMER", "COUNTER", "PID"],
        "keywords": ["—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏", "function blocks", "AND", "OR", "NOT"]
    },
    "data_types": {
        "description": "–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ PLC –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö",
        "types": ["BOOL", "INT", "REAL", "STRING", "ARRAY", "STRUCT"],
        "keywords": ["—Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö", "BOOL", "INT", "REAL", "STRING"]
    },
    "communication": {
        "description": "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã PLC",
        "protocols": ["Modbus", "Profibus", "Ethernet/IP", "OPC UA"],
        "keywords": ["–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è", "–ø—Ä–æ—Ç–æ–∫–æ–ª", "Modbus", "Profibus", "Ethernet"]
    }
}

def analyze_plc_content(content):
    """–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ PLC –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    analysis = {
        "syntax_errors": [],
        "warnings": [],
        "functions": {},
        "variables": {},
        "statistics": {}
    }
    
    lines = content.split('\n')
    
    # –ü–æ–∏—Å–∫ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    for i, line in enumerate(lines, 1):
        line = line.strip()
        if not line or line.startswith('//'):
            continue
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏
        if line.count('(') != line.count(')'):
            analysis["syntax_errors"].append(f"–°—Ç—Ä–æ–∫–∞ {i}: –ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        if 'VAR_' in line and not any(keyword in line for keyword in ['VAR_INPUT', 'VAR_OUTPUT', 'VAR_IN_OUT']):
            analysis["warnings"].append(f"–°—Ç—Ä–æ–∫–∞ {i}: –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è")
    
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    analysis["statistics"] = {
        "total_lines": len([l for l in lines if l.strip() and not l.strip().startswith('//')]),
        "comment_lines": len([l for l in lines if l.strip().startswith('//')]),
        "function_blocks": len([l for l in lines if 'FUNCTION_BLOCK' in l]),
        "variables": len([l for l in lines if 'VAR_' in l])
    }
    
    return analysis

def find_plc_knowledge(query):
    """–ü–æ–∏—Å–∫ –∑–Ω–∞–Ω–∏–π –ø–æ PLC"""
    query_lower = query.lower()
    results = []
    
    for topic, info in PLC_KNOWLEDGE.items():
        score = 0
        for keyword in info["keywords"]:
            if keyword.lower() in query_lower:
                score += 1
        
        if score > 0:
            results.append({
                "topic": topic,
                "description": info["description"],
                "score": score,
                "details": info
            })
    
    return sorted(results, key=lambda x: x["score"], reverse=True)

@app.route('/api/plc/analyze', methods=['POST'])
def analyze_plc():
    """–ê–Ω–∞–ª–∏–∑ PLC –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    try:
        data = request.get_json()
        file_path = data.get('file_path', '')
        action = data.get('action', 'analyze')
        
        if action == 'analyze':
            if file_path and os.path.exists(file_path):
                # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
                if PLC_ANALYZER_AVAILABLE:
                    result = analyze_plc_file(file_path)
                else:
                    # Fallback –∞–Ω–∞–ª–∏–∑
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    result = analyze_plc_content(content)
                
                return jsonify({
                    "success": True,
                    "file": file_path,
                    "analysis": result,
                    "timestamp": datetime.now().isoformat()
                })
            else:
                return jsonify({
                    "success": False,
                    "error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω"
                }), 400
        
        return jsonify({
            "success": False,
            "error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        }), 400
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ PLC: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
        }), 500

@app.route('/api/plc/knowledge', methods=['POST'])
def get_plc_knowledge():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –ø–æ PLC"""
    try:
        data = request.get_json()
        query = data.get('query', '')
        
        if not query:
            return jsonify({
                "success": False,
                "error": "–ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            }), 400
        
        knowledge = find_plc_knowledge(query)
        
        return jsonify({
            "success": True,
            "query": query,
            "knowledge": knowledge,
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π PLC: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π: {str(e)}"
        }), 500

@app.route('/api/health', methods=['GET'])
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è PLC Analysis API"""
    return jsonify({
        'service': 'PLC Analysis API',
        'status': 'healthy',
        'port': 8099,
        'version': '1.0',
        'capabilities': ['plc_analysis', 'code_review', 'syntax_check']
    })

@app.route('/api/plc/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "service": "PLC Analysis API",
        "status": "online",
        "version": "1.0",
        "plc_analyzer_available": PLC_ANALYZER_AVAILABLE,
        "timestamp": datetime.now().isoformat()
    })

@app.route('/api/plc/status', methods=['GET'])
def get_status():
    """–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "service": "PLC Analysis API",
        "status": "running",
        "port": 8099,
        "endpoints": [
            "/api/plc/analyze",
            "/api/plc/knowledge", 
            "/api/plc/health",
            "/api/plc/status"
        ],
        "capabilities": [
            "–ê–Ω–∞–ª–∏–∑ PLC –ø—Ä–æ–≥—Ä–∞–º–º",
            "–ü–æ–∏—Å–∫ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫",
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
            "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ PLC"
        ]
    })

if __name__ == '__main__':
    print("üîß PLC Analysis API Server –∑–∞–ø—É—â–µ–Ω")
    print("URL: http://localhost:8099")
    print("Endpoints:")
    print("  - POST /api/plc/analyze - –ê–Ω–∞–ª–∏–∑ PLC –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    print("  - POST /api/plc/knowledge - –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –ø–æ PLC")
    print("  - GET /api/plc/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    print("  - GET /api/plc/status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞")
    app.run(host='0.0.0.0', port=8099, debug=True)


