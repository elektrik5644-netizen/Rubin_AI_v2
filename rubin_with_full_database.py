#!/usr/bin/env python3
"""
Rubin AI —Å –ø–æ–ª–Ω–æ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
"""

import sqlite3
import json
import re
import os
from datetime import datetime
from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

class RubinWithFullDatabase:
    """Rubin AI —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ø–æ–ª–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
    
    def __init__(self):
        self.databases = {
            'main': 'rubin_ai_v2.db',
            'documents': 'rubin_ai_documents.db',
            'knowledge': 'rubin_knowledge_base.db',
            'learning': 'rubin_learning.db'
        }
        self.conversation_history = []
        self.load_test_documents()
    
    def load_test_documents(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ test_documents"""
        self.test_documents = {}
        test_docs_dir = 'test_documents'
        
        if os.path.exists(test_docs_dir):
            for filename in os.listdir(test_docs_dir):
                if filename.endswith('.txt') or filename.endswith('.py'):
                    file_path = os.path.join(test_docs_dir, filename)
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                            self.test_documents[filename] = {
                                'content': content,
                                'size': len(content),
                                'category': self.detect_category(filename)
                            }
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
    
    def detect_category(self, filename):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        filename_lower = filename.lower()
        if 'python' in filename_lower or 'programming' in filename_lower:
            return 'programming'
        elif 'electrical' in filename_lower or 'circuit' in filename_lower:
            return 'electronics'
        elif 'controller' in filename_lower or 'automation' in filename_lower:
            return 'automation'
        elif 'radio' in filename_lower:
            return 'radiomechanics'
        else:
            return 'general'
    
    def search_in_database(self, query, db_name='main'):
        """–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if db_name not in self.databases:
            return []
        
        db_path = self.databases[db_name]
        if not os.path.exists(db_path):
            return []
        
        try:
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            
            # –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ documents
            cursor.execute("""
                SELECT filename, content, category 
                FROM documents 
                WHERE content LIKE ? OR filename LIKE ?
                LIMIT 5
            """, (f'%{query}%', f'%{query}%'))
            
            results = cursor.fetchall()
            conn.close()
            
            return [{'filename': r[0], 'content': r[1], 'category': r[2]} for r in results]
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ {db_name}: {e}")
            return []
    
    def search_in_test_documents(self, query):
        """–ü–æ–∏—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö"""
        results = []
        query_lower = query.lower()
        
        for filename, doc_data in self.test_documents.items():
            content_lower = doc_data['content'].lower()
            if query_lower in content_lower:
                # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
                lines = doc_data['content'].split('\n')
                relevant_lines = []
                for i, line in enumerate(lines):
                    if query_lower in line.lower():
                        start = max(0, i-2)
                        end = min(len(lines), i+3)
                        relevant_lines.extend(lines[start:end])
                
                if relevant_lines:
                    results.append({
                        'filename': filename,
                        'content': '\n'.join(relevant_lines),
                        'category': doc_data['category'],
                        'size': doc_data['size']
                    })
        
        return results[:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    
    def solve_math(self, message):
        """–†–µ—à–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        # –ò—â–µ–º –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        pattern = r'(\d+)\s*([+\-*/])\s*(\d+)'
        match = re.search(pattern, message)
        
        if match:
            num1 = int(match.group(1))
            op = match.group(2)
            num2 = int(match.group(3))
            
            if op == '+':
                result = num1 + num2
            elif op == '-':
                result = num1 - num2
            elif op == '*':
                result = num1 * num2
            elif op == '/':
                result = num1 / num2 if num2 != 0 else "–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!"
            
            return f"üßÆ **–†–µ—à–µ–Ω–∏–µ:** {num1} {op} {num2} = {result}"
        
        return None
    
    def generate_response(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.conversation_history.append({
            'timestamp': datetime.now().isoformat(),
            'user_message': message,
            'category': None
        })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
        math_result = self.solve_math(message)
        if math_result:
            return {
                'response': math_result,
                'category': 'mathematics',
                'confidence': 0.9,
                'source': 'math_solver',
                'database_used': False
            }
        
        # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö
        db_results = []
        for db_name in self.databases:
            results = self.search_in_database(message, db_name)
            db_results.extend(results)
        
        # –ü–æ–∏—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
        test_results = self.search_in_test_documents(message)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_results = db_results + test_results
        
        if all_results:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            response_parts = []
            sources = []
            
            for result in all_results[:3]:  # –ë–µ—Ä–µ–º —Ç–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                filename = result.get('filename', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª')
                content = result.get('content', '')
                category = result.get('category', 'general')
                
                # –û–±—Ä–µ–∑–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                if len(content) > 500:
                    content = content[:500] + "..."
                
                response_parts.append(f"üìÑ **{filename}** ({category}):\n{content}")
                sources.append(filename)
            
            response = "\n\n".join(response_parts)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
            response += f"\n\nüìö **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** {', '.join(sources)}"
            
            return {
                'response': response,
                'category': 'knowledge_search',
                'confidence': 0.8,
                'source': 'database_search',
                'database_used': True,
                'sources_found': len(all_results)
            }
        else:
            # Fallback –æ—Ç–≤–µ—Ç
            return {
                'response': f"–Ø –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É '{message}' –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n‚Ä¢ –°–ø—Ä–æ—Å–∏—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏, —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏",
                'category': 'no_results',
                'confidence': 0.3,
                'source': 'fallback',
                'database_used': True,
                'sources_found': 0
            }

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä AI
rubin_ai = RubinWithFullDatabase()

@app.route('/api/chat', methods=['POST', 'OPTIONS'])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —á–∞—Ç–∞"""
    if request.method == 'OPTIONS':
        return '', 200
    
    try:
        data = request.get_json()
        message = data.get('message', '')
        
        if not message:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = rubin_ai.generate_response(message)
        response['timestamp'] = datetime.now().isoformat()
        
        return jsonify(response)
        
    except Exception as e:
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}',
            'response': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/api/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'system': 'Rubin AI with Full Database',
        'databases': list(rubin_ai.databases.keys()),
        'test_documents': len(rubin_ai.test_documents),
        'conversations': len(rubin_ai.conversation_history)
    })

@app.route('/api/stats')
def stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    return jsonify({
        'conversations': len(rubin_ai.conversation_history),
        'databases': {name: os.path.exists(path) for name, path in rubin_ai.databases.items()},
        'test_documents': {name: doc['size'] for name, doc in rubin_ai.test_documents.items()},
        'system': 'Rubin AI with Full Database',
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/search')
def search():
    """–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
    query = request.args.get('q', '')
    if not query:
        return jsonify({'error': '–ü–∞—Ä–∞–º–µ—Ç—Ä q –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
    
    # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö
    db_results = []
    for db_name in rubin_ai.databases:
        results = rubin_ai.search_in_database(query, db_name)
        db_results.extend(results)
    
    # –ü–æ–∏—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
    test_results = rubin_ai.search_in_test_documents(query)
    
    return jsonify({
        'query': query,
        'database_results': db_results,
        'test_document_results': test_results,
        'total_found': len(db_results) + len(test_results),
        'timestamp': datetime.now().isoformat()
    })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ Rubin AI —Å –ø–æ–ª–Ω–æ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π...")
    print("üì° API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:8086")
    print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: http://localhost:8086/api/health")
    print("üîç –ü–æ–∏—Å–∫: http://localhost:8086/api/search?q=python")
    print(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(rubin_ai.test_documents)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print(f"üóÑÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ {len(rubin_ai.databases)} –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
    app.run(host='0.0.0.0', port=8086, debug=True)












