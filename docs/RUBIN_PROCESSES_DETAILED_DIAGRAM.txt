ДЕТАЛЬНАЯ СХЕМА ПРОЦЕССОВ RUBIN IDE
====================================

ПРОЦЕСС ИНИЦИАЛИЗАЦИИ СИСТЕМЫ
==============================

┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                    ЗАПУСК СИСТЕМЫ                                            │
├─────────────────────────────────────────────────────────────────────────────────────────────────┤
│  1. ЗАПУСК C++ ЯДРА                                                                           │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ RubinEngine_Simple.exe                                                                     ││
│  │ • Загрузка конфигурации (master_dev_config.json)                                          ││
│  │ • Инициализация KernelManager                                                              ││
│  │ • Запуск HealthChecker                                                                     ││
│  │ • Инициализация EventBus                                                                   ││
│  │ • Настройка Logger                                                                         ││
│  │ • Загрузка модулей                                                                         ││
│  │ • Проверка зависимостей                                                                    ││
│  │ • Инициализация базы данных                                                                ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  2. ЗАПУСК PYTHON API СЕРВЕРОВ                                                                 │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ start_rubin_servers.py                                                                     ││
│  │ • Запуск rubin_simple_api.py (порт 8083)                                                  ││
│  │ • Запуск rubin_ai_chat_api.py (порт 8086)                                                 ││
│  │ • Запуск rubin_electrical_api.py (порт 8087)                                              ││
│  │ • Запуск rubin_mathematics_api.py (порт 8088)                                             ││
│  │ • Запуск rubin_radiomechanics_api.py (порт 8089)                                          ││
│  │ • Запуск rubin_controllers_api.py (порт 8090)                                             ││
│  │ • Запуск rubin_diagnostics_api.py (порт 8093)                                             ││
│  │ • Запуск yandex_disk_api.py (порт 8094)                                                   ││
│  │ • Запуск memory_api.py (порт 8094)                                                        ││
│  │ • Запуск rubin_context_api.py (порт 8096)                                                 ││
│  │ • Проверка доступности всех серверов                                                       ││
│  │ • Регистрация в ServiceDiscovery                                                           ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  3. ПОДКЛЮЧЕНИЕ К PMAC КОНТРОЛЛЕРАМ                                                           │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ PMACComInterface.cpp                                                                       ││
│  │ • Сканирование доступных контроллеров                                                      ││
│  │ • Установка соединения с каждым контроллером                                               ││
│  │ • Проверка состояния контроллеров                                                          ││
│  │ • Инициализация параметров                                                                 ││
│  │ • Запуск мониторинга                                                                       ││
│  │ • Калибровка датчиков                                                                      ││
│  │ • Тестирование функций                                                                     ││
│  │ • Логирование результатов                                                                  ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  4. ИНИЦИАЛИЗАЦИЯ БАЗЫ ЗНАНИЙ                                                                 │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ KnowledgeBase.cpp                                                                          ││
│  │ • Подключение к SQLite (rubin_knowledge_base.db)                                          ││
│  │ • Подключение к Qdrant (векторная база)                                                   ││
│  │ • Создание индексов                                                                        ││
│  │ • Загрузка существующих данных                                                             ││
│  │ • Проверка целостности                                                                     ││
│  │ • Оптимизация запросов                                                                     ││
│  │ • Запуск фоновых процессов                                                                 ││
│  │ • Мониторинг производительности                                                            ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  5. ЗАПУСК ДИАГНОСТИКИ                                                                        │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ ControllerDiagnostics.cpp                                                                  ││
│  │ • Проверка всех компонентов                                                                ││
│  │ • Анализ производительности                                                                ││
│  │ • Обнаружение ошибок                                                                       ││
│  │ • Генерация отчета                                                                         ││
│  │ • Уведомления о проблемах                                                                  ││
│  │ • Рекомендации по исправлению                                                              ││
│  │ • Запуск мониторинга                                                                       ││
│  │ • Логирование результатов                                                                  ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  6. ГОТОВНОСТЬ СИСТЕМЫ                                                                        │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ Система готова к работе                                                                    ││
│  │ • Все компоненты инициализированы                                                          ││
│  │ • PMAC контроллеры подключены                                                              ││
│  │ • API серверы запущены                                                                     ││
│  │ • База знаний доступна                                                                     ││
│  │ • Диагностика активна                                                                      ││
│  │ • Мониторинг работает                                                                      ││
│  │ • Логирование активно                                                                      ││
│  │ • Веб-интерфейс доступен                                                                   ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
└─────────────────────────────────────────────────────────────────────────────────────────────────┘

ПРОЦЕСС ОБРАБОТКИ ПОЛЬЗОВАТЕЛЬСКОГО ЗАПРОСА
============================================

┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                    ОБРАБОТКА ЗАПРОСА                                          │
├─────────────────────────────────────────────────────────────────────────────────────────────────┤
│  1. ПОЛУЧЕНИЕ ЗАПРОСА                                                                          │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ Пользователь отправляет запрос                                                             ││
│  │ • Ввод текста в веб-интерфейс                                                              ││
│  │ • Выбор типа запроса                                                                       ││
│  │ • Указание контекста                                                                       ││
│  │ • Прикрепление файлов (если необходимо)                                                    ││
│  │ • Настройка параметров                                                                     ││
│  │ • Отправка запроса                                                                         ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  2. ОБРАБОТКА В ВЕБ-ИНТЕРФЕЙСЕ                                                                 │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ RubinIDE.html                                                                              ││
│  │ • Валидация входных данных                                                                 ││
│  │ • Проверка формата                                                                         ││
│  │ • Обработка специальных символов                                                           ││
│  │ • Кодирование запроса                                                                      ││
│  │ • Добавление метаданных                                                                    ││
│  │ • Отправка на API сервер                                                                   ││
│  │ • Отображение индикатора загрузки                                                          ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  3. МАРШРУТИЗАЦИЯ ЗАПРОСА                                                                      │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ Intelligent Dispatcher                                                                     ││
│  │ • Анализ содержимого запроса                                                               ││
│  │ • Определение домена (программирование, электротехника, радиомеханика)                    ││
│  │ • Выбор подходящего API сервера                                                            ││
│  │ • Проверка доступности сервера                                                             ││
│  │ • Балансировка нагрузки                                                                    ││
│  │ • Логирование маршрутизации                                                                ││
│  │ • Обработка ошибок маршрутизации                                                           ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  4. ОБРАБОТКА В API СЕРВЕРЕ                                                                   │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ Специализированный API сервер                                                              ││
│  │ • Получение запроса                                                                        ││
│  │ • Валидация данных                                                                         ││
│  │ • Аутентификация (если необходимо)                                                         ││
│  │ • Проверка прав доступа                                                                    ││
│  │ • Обработка запроса                                                                        ││
│  │ • Интеграция с базой знаний                                                                ││
│  │ • Вызов AI провайдера                                                                      ││
│  │ • Формирование ответа                                                                      ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  5. ИНТЕГРАЦИЯ С БАЗОЙ ЗНАНИЙ                                                                 │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ KnowledgeBase.cpp                                                                          ││
│  │ • Поиск релевантной информации                                                             ││
│  │ • Анализ контекста                                                                         ││
│  │ • Извлечение данных                                                                        ││
│  │ • Форматирование информации                                                                ││
│  │ • Добавление в контекст                                                                    ││
│  │ • Кэширование результатов                                                                  ││
│  │ • Логирование запросов                                                                     ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  6. ОБРАБОТКА AI ПРОВАЙДЕРОМ                                                                  │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ AIProviderManager.cpp                                                                      ││
│  │ • Выбор подходящего провайдера                                                             ││
│  │ • Формирование промпта                                                                     ││
│  │ • Отправка запроса                                                                         ││
│  │ • Обработка ответа                                                                         ││
│  │ • Валидация результата                                                                     ││
│  │ • Fallback на альтернативный провайдер (при ошибке)                                       ││
│  │ • Логирование использования                                                                ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  7. ФОРМИРОВАНИЕ ОТВЕТА                                                                       │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ API сервер                                                                                 ││
│  │ • Получение ответа от AI                                                                   ││
│  │ • Обработка и форматирование                                                               ││
│  │ • Добавление метаданных                                                                    ││
│  │ • Валидация результата                                                                     ││
│  │ • Кэширование ответа                                                                       ││
│  │ • Логирование результата                                                                   ││
│  │ • Отправка ответа клиенту                                                                  ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  8. ОТОБРАЖЕНИЕ ОТВЕТА                                                                        │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ Веб-интерфейс                                                                              ││
│  │ • Получение ответа                                                                         ││
│  │ • Парсинг данных                                                                           ││
│  │ • Форматирование для отображения                                                           ││
│  │ • Добавление интерактивности                                                               ││
│  │ • Отображение результата                                                                   ││
│  │ • Сохранение в историю                                                                     ││
│  │ • Обновление интерфейса                                                                    ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
└─────────────────────────────────────────────────────────────────────────────────────────────────┘

ПРОЦЕСС МОНИТОРИНГА PMAC КОНТРОЛЛЕРА
=====================================

┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                    МОНИТОРИНГ PMAC                                           │
├─────────────────────────────────────────────────────────────────────────────────────────────────┤
│  1. СБОР ДАННЫХ С ДАТЧИКОВ                                                                    │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ PMAC контроллер                                                                            ││
│  │ • Сбор данных с датчиков (100-500мс)                                                      ││
│  │ • Температура                                                                              ││
│  │ • Напряжение                                                                               ││
│  │ • Ток                                                                                      ││
│  │ • Позиция осей                                                                             ││
│  │ • Скорость                                                                                 ││
│  │ • Ускорение                                                                                ││
│  │ • Состояние реле                                                                           ││
│  │ • Статус системы                                                                           ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  2. ПЕРЕДАЧА ДАННЫХ                                                                           │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ PMACComInterface.cpp                                                                       ││
│  │ • Получение данных от контроллера                                                          ││
│  │ • Проверка целостности                                                                     ││
│  │ • Валидация данных                                                                         ││
│  │ • Форматирование                                                                           ││
│  │ • Буферизация                                                                              ││
│  │ • Передача в систему мониторинга                                                           ││
│  │ • Логирование операций                                                                     ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  3. АНАЛИЗ ДАННЫХ                                                                             │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ HealthChecker.cpp                                                                          ││
│  │ • Анализ текущих значений                                                                  ││
│  │ • Сравнение с пороговыми значениями                                                        ││
│  │ • Обнаружение аномалий                                                                     ││
│  │ • Анализ трендов                                                                           ││
│  │ • Прогнозирование                                                                          ││
│  │ • Генерация алертов                                                                        ││
│  │ • Обновление статистики                                                                    ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  4. ОБРАБОТКА АЛЕРТОВ                                                                         │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ ControllerDiagnostics.cpp                                                                  ││
│  │ • Классификация алертов                                                                    ││
│  │ • Определение приоритета                                                                   ││
│  │ • Генерация уведомлений                                                                    ││
│  │ • Рекомендации по исправлению                                                              ││
│  │ • Автоматические действия (если возможно)                                                  ││
│  │ • Логирование событий                                                                      ││
│  │ • Обновление статуса                                                                       ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  5. ОБНОВЛЕНИЕ ИНТЕРФЕЙСА                                                                     │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ Веб-интерфейс                                                                              ││
│  │ • Получение обновленных данных                                                             ││
│  │ • Обновление графиков                                                                      ││
│  │ • Отображение алертов                                                                      ││
│  │ • Обновление статуса                                                                       ││
│  │ • Уведомления пользователя                                                                 ││
│  │ • Логирование изменений                                                                    ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
└─────────────────────────────────────────────────────────────────────────────────────────────────┘

ПРОЦЕСС СИНХРОНИЗАЦИИ YANDEX DISK
==================================

┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                    СИНХРОНИЗАЦИЯ YANDEX DISK                                  │
├─────────────────────────────────────────────────────────────────────────────────────────────────┤
│  1. СКАНИРОВАНИЕ ПАПКИ                                                                         │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ YandexDiskConnector                                                                        ││
│  │ • Сканирование папки C:\Users\elekt\YandexDisk                                            ││
│  │ • Обнаружение новых файлов                                                                 ││
│  │ • Проверка изменений существующих файлов                                                   ││
│  │ • Вычисление хешей файлов                                                                  ││
│  │ • Сравнение с базой данных                                                                 ││
│  │ • Определение файлов для обработки                                                         ││
│  │ • Логирование результатов сканирования                                                     ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  2. ИЗВЛЕЧЕНИЕ ТЕКСТА                                                                         │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ Обработка документов                                                                       ││
│  │ • PDF файлы: извлечение текста с помощью PyPDF2                                           ││
│  │ • DOCX файлы: извлечение текста с помощью python-docx                                     ││
│  │ • TXT файлы: прямое чтение                                                                 ││
│  │ • MD файлы: обработка markdown                                                             ││
│  │ • ZIP файлы: распаковка и обработка содержимого                                           ││
│  │ • Обработка ошибок                                                                         ││
│  │ • Логирование процесса                                                                     ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  3. КАТЕГОРИЗАЦИЯ ДОКУМЕНТОВ                                                                  │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ Анализ содержимого                                                                         ││
│  │ • Анализ текста на предмет технической тематики                                           ││
│  │ • Определение категории (электротехника, радиомеханика, программирование)                 ││
│  │ • Извлечение ключевых слов                                                                 ││
│  │ • Определение языка                                                                        ││
│  │ • Анализ структуры документа                                                               ││
│  │ • Генерация метаданных                                                                     ││
│  │ • Логирование категоризации                                                                ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  4. ДОБАВЛЕНИЕ В БАЗУ ЗНАНИЙ                                                                  │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ KnowledgeBase.cpp                                                                          ││
│  │ • Сохранение в SQLite базу                                                                 ││
│  │ • Создание векторных представлений                                                         ││
│  │ • Добавление в Qdrant                                                                      ││
│  │ • Индексация для поиска                                                                    ││
│  │ • Обновление метаданных                                                                    ││
│  │ • Оптимизация индексов                                                                     ││
│  │ • Логирование добавления                                                                   ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  5. ОБНОВЛЕНИЕ СТАТИСТИКИ                                                                     │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ yandex_disk_sync.db                                                                        ││
│  │ • Обновление таблицы processed_files                                                       ││
│  │ • Добавление записи о новом файле                                                          ││
│  │ • Обновление статистики                                                                    ││
│  │ • Логирование изменений                                                                    ││
│  │ • Создание резервной копии                                                                 ││
│  │ • Оптимизация базы данных                                                                  ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
└─────────────────────────────────────────────────────────────────────────────────────────────────┘

ПРОЦЕСС ЧАТ-БОТА
================

┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                    ОБРАБОТКА ЧАТА                                            │
├─────────────────────────────────────────────────────────────────────────────────────────────────┤
│  1. ПОЛУЧЕНИЕ СООБЩЕНИЯ                                                                        │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ Пользователь отправляет сообщение                                                          ││
│  │ • Ввод текста в чат                                                                        ││
│  │ • Выбор контекста (программирование, электротехника, радиомеханика)                       ││
│  │ • Прикрепление файлов (если необходимо)                                                    ││
│  │ • Отправка сообщения                                                                       ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  2. ОБРАБОТКА В API                                                                           │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ rubin_ai_chat_api.py                                                                       ││
│  │ • Получение сообщения                                                                      ││
│  │ • Валидация данных                                                                         ││
│  │ • Определение домена                                                                       ││
│  │ • Анализ контекста                                                                         ││
│  │ • Формирование промпта                                                                     ││
│  │ • Вызов C++ ChatManager                                                                    ││
│  │ • Обработка ответа                                                                         ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  3. ОБРАБОТКА В C++ ЯДРЕ                                                                      │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ ChatManager.cpp                                                                             ││
│  │ • Получение сообщения                                                                      ││
│  │ • Анализ контекста                                                                         ││
│  │ • Построение контекста для AI                                                              ││
│  │ • Вызов AI провайдера                                                                      ││
│  │ • Обработка ответа                                                                         ││
│  │ • Сохранение в историю                                                                     ││
│  │ • Обновление контекста                                                                     ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  4. ИНТЕГРАЦИЯ С AI ПРОВАЙДЕРОМ                                                                │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ OpenRouterClient.cpp                                                                       ││
│  │ • Формирование запроса                                                                     ││
│  │ • Отправка в OpenRouter API                                                                ││
│  │ • Обработка ответа                                                                         ││
│  │ • Валидация результата                                                                     ││
│  │ • Fallback на альтернативный провайдер (при ошибке)                                       ││
│  │ • Логирование использования                                                                ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  5. ВОЗВРАТ ОТВЕТА                                                                             │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ Обработка ответа                                                                            ││
│  │ • Получение ответа от AI                                                                   ││
│  │ • Форматирование для отображения                                                           ││
│  │ • Добавление метаданных                                                                    ││
│  │ • Сохранение в историю                                                                     ││
│  │ • Отправка клиенту                                                                         ││
│  │ • Обновление интерфейса                                                                    ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
└─────────────────────────────────────────────────────────────────────────────────────────────────┘

ПРОЦЕСС ОБРАБОТКИ ОШИБОК
=========================

┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                    ОБРАБОТКА ОШИБОК                                          │
├─────────────────────────────────────────────────────────────────────────────────────────────────┤
│  1. ОБНАРУЖЕНИЕ ОШИБКИ                                                                         │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ Система обнаруживает ошибку                                                                ││
│  │ • Ошибка в коде                                                                            ││
│  │ • Ошибка в PMAC контроллере                                                                ││
│  │ • Ошибка в API сервере                                                                     ││
│  │ • Ошибка в базе данных                                                                     ││
│  │ • Ошибка в AI провайдере                                                                   ││
│  │ • Ошибка в веб-интерфейсе                                                                  ││
│  │ • Ошибка в системе                                                                         ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  2. КЛАССИФИКАЦИЯ ОШИБКИ                                                                      │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ Logger.cpp                                                                                 ││
│  │ • Определение типа ошибки                                                                  ││
│  │ • Определение приоритета                                                                   ││
│  │ • Определение компонента                                                                    ││
│  │ • Анализ контекста                                                                         ││
│  │ • Генерация уникального ID                                                                 ││
│  │ • Добавление временной метки                                                               ││
│  │ • Логирование ошибки                                                                       ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  3. ОБРАБОТКА ОШИБКИ                                                                            │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ Обработка в зависимости от типа                                                            ││
│  │ • Критическая ошибка: аварийный останов                                                    ││
│  │ • Высокий приоритет: немедленное уведомление                                              ││
│  │ • Средний приоритет: уведомление в течение часа                                           ││
│  │ • Низкий приоритет: уведомление в течение дня                                             ││
│  │ • Информация: логирование                                                                  ││
│  │ • Автоматическое исправление (если возможно)                                              ││
│  │ • Рекомендации по исправлению                                                              ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  4. УВЕДОМЛЕНИЕ ПОЛЬЗОВАТЕЛЯ                                                                  │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ Уведомление пользователя                                                                   ││
│  │ • Отображение в веб-интерфейсе                                                             ││
│  │ • Звуковое уведомление                                                                     ││
│  │ • Email уведомление (планируется)                                                          ││
│  │ • Push уведомление (планируется)                                                           ││
│  │ • Логирование уведомления                                                                  ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
│                                     │                                                           │
│                                     ▼                                                           │
│  5. ИСПРАВЛЕНИЕ ОШИБКИ                                                                        │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────┐│
│  │ Исправление ошибки                                                                         ││
│  │ • Автоматическое исправление (если возможно)                                              ││
│  │ • Ручное исправление пользователем                                                        ││
│  │ • Исправление системным администратором                                                   ││
│  │ • Валидация исправления                                                                    ││
│  │ • Тестирование исправления                                                                 ││
│  │ • Логирование исправления                                                                  ││
│  └─────────────────────────────────────────────────────────────────────────────────────────────┘│
└─────────────────────────────────────────────────────────────────────────────────────────────────┘

Дата создания: 10.09.2025
Версия: Rubin IDE v1 "Ломовая лошадка"
Тип: Детальная схема процессов
