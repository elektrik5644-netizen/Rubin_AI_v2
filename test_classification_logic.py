#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

def test_classification_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é"""
    
    print("üß™ –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print("=" * 60)
    
    # –ö–æ–ø–∏—Ä—É–µ–º SERVERS –∏–∑ smart_dispatcher.py
    SERVERS = {
        'electrical': {
            'port': 8087,
            'endpoint': '/api/electrical/solve',
            'keywords': ['–∑–∞–∫–æ–Ω', '–∫–∏—Ä—Ö–≥–æ—Ñ–∞', '—Ä–µ–∑–∏—Å—Ç–æ—Ä', '—Ä–µ–∑–∏—Å—Ç–æ—Ä—ã', '—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä', '—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã', '–¥–∏–æ–¥', '–¥–∏–æ–¥—ã', '–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä', '–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã', '–∫–æ–Ω—Ç–∞–∫—Ç–æ—Ä', '—Ä–µ–ª–µ', '–º–æ—â–Ω–æ—Å—Ç—å', '—Ç–æ–∫', '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', '—Å—Ö–µ–º–∞', '—Å—Ö–µ–º—ã', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ', '—Ü–µ–ø–∏', '—Ç–∏—Ä–∏—Å—Ç–æ—Ä', '—Å–∏–º–∏—Å—Ç—Ä', '–æ–º', '–∑–∞–∫–æ–Ω –æ–º–∞', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è —Ü–µ–ø—å', '—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ', '–∫–∞—Ç—É—à–∫–∞', '–∏–Ω–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–µ–º–∫–æ—Å—Ç—å', '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏', 'power factor', 'cos œÜ', 'cosœÜ', '—Ä–µ–∞–∫—Ç–∏–≤–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω', '–ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã', '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞', '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã']
        },
        'physics': {
            'port': 8110,
            'endpoint': '/api/physics/explain',
            'keywords': ['—Ñ–æ—Ç–æ–Ω', '—ç–ª–µ–∫—Ç—Ä–æ–Ω', '–ø—Ä–æ—Ç–æ–Ω', '–Ω–µ–π—Ç—Ä–æ–Ω', '–∞—Ç–æ–º', '–º–æ–ª–µ–∫—É–ª–∞', '–∫–≤–∞–Ω—Ç', '–∫–≤–∞–Ω—Ç–æ–≤–∞—è', '—Ñ–∏–∑–∏–∫–∞', '–º–µ—Ö–∞–Ω–∏–∫–∞', '—Ç–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞', '–æ–ø—Ç–∏–∫–∞', '—ç–ª–µ–∫—Ç—Ä–æ–¥–∏–Ω–∞–º–∏–∫–∞', '—è–¥–µ—Ä–Ω–∞—è —Ñ–∏–∑–∏–∫–∞', '—Ä–µ–ª—è—Ç–∏–≤–∏—Å—Ç—Å–∫–∞—è', '—ç–π–Ω—à—Ç–µ–π–Ω', '–Ω—å—é—Ç–æ–Ω', '–∑–∞–∫–æ–Ω—ã –Ω—å—é—Ç–æ–Ω–∞', '–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è', '–º–∞–≥–Ω–µ—Ç–∏–∑–º', '—ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–µ –ø–æ–ª–µ', '–≤–æ–ª–Ω–∞', '—á–∞—Å—Ç–∏—Ü–∞', '—ç–Ω–µ—Ä–≥–∏—è', '–º–∞—Å—Å–∞', '—Å–∫–æ—Ä–æ—Å—Ç—å —Å–≤–µ—Ç–∞', '–ø–ª–∞–Ω–∫', '–±–æ–∑–æ–Ω', '—Ñ–µ—Ä–º–∏–æ–Ω', '—Å–ø–∏–Ω', '–æ—Ä–±–∏—Ç–∞–ª—å', '–∏–∑–æ—Ç–æ–ø', '—Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '—è–¥–µ—Ä–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è', '—Å–∏–Ω—Ç–µ–∑', '–¥–µ–ª–µ–Ω–∏–µ', '–ø–ª–∞–∑–º–∞', '—Å–≤–µ—Ä—Ö–ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç—å', '–∫—Ä–∏–æ–≥–µ–Ω–∏–∫–∞', '–ª–∞–∑–µ—Ä', '–ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫', '–¥–∏—ç–ª–µ–∫—Ç—Ä–∏–∫', '–ø—Ä–æ–≤–æ–¥–Ω–∏–∫', '–∏–∑–æ–ª—è—Ç–æ—Ä', '—á—Ç–æ —Ç–∞–∫–æ–µ', '—á—Ç–æ —Ç–∞–∫–æ–π', '–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏']
        },
        'general': {
            'port': 8085,
            'endpoint': '/api/chat',
            'keywords': ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–ø–æ–º–æ—â—å', 'help', '—Å–ø—Ä–∞–≤–∫–∞', '—Å—Ç–∞—Ç—É—Å', 'status', '—Ä–∞–±–æ—Ç–∞–µ—Ç', '–æ–Ω–ª–∞–π–Ω', '–∫–∞–∫', '–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏']
        }
    }
    
    def categorize_message(message):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message_lower = message.lower()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        scores = {}
        for category, config in SERVERS.items():
            score = sum(1 for keyword in config['keywords'] if keyword in message_lower)
            scores[category] = score
        
        print(f"üìä –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è '{message}':")
        for cat, score in scores.items():
            if score > 0:
                print(f"   {cat}: {score}")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        technical_categories = ['electrical', 'physics']
        technical_scores = {cat: scores.get(cat, 0) for cat in technical_categories if scores.get(cat, 0) > 0}
        
        print(f"üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—á–µ—Ç—á–∏–∫–∏: {technical_scores}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ñ–∏–∑–∏–∫–∏ - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ electrical
        if '—Ñ–æ—Ç–æ–Ω' in message_lower or '—ç–ª–µ–∫—Ç—Ä–æ–Ω' in message_lower or '–∞—Ç–æ–º' in message_lower or '–∫–≤–∞–Ω—Ç' in message_lower:
            if 'physics' in technical_scores and technical_scores['physics'] > 0:
                print(f"‚öõÔ∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–∏–∑–∏–∫–∏ —Å—Ä–∞–±–æ—Ç–∞–ª!")
                return 'physics'
        
        if technical_scores:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π
            best_technical = max(technical_scores, key=technical_scores.get)
            print(f"üéØ –í—ã–±—Ä–∞–Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {best_technical}")
            return best_technical
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        if scores and max(scores.values()) > 0:
            best_category = max(scores, key=scores.get)
            print(f"üìà –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —Å—á–µ—Ç—á–∏–∫—É: {best_category}")
            return best_category
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º general –∫–∞–∫ fallback
        print(f"‚ùì Fallback –∫ general")
        return 'general'
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    test_questions = [
        "—á—Ç–æ —Ç–∞–∫–æ–µ —Ñ–æ—Ç–æ–Ω?",
        "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω",
        "—á—Ç–æ —Ç–∞–∫–æ–µ –∞—Ç–æ–º?",
        "–æ–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é –º–µ—Ö–∞–Ω–∏–∫—É"
    ]
    
    for question in test_questions:
        print(f"\nüìù –í–æ–ø—Ä–æ—Å: {question}")
        result = categorize_message(question)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        print("-" * 40)

if __name__ == '__main__':
    test_classification_logic()



