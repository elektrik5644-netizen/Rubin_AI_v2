#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üßÆ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å –¥–ª—è Rubin AI
====================================================

–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ —Ñ–∏–∑–∏–∫–∏ –∏ —Ö–∏–º–∏–∏
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
- OCR –¥–ª—è —á—Ç–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã

–ê–≤—Ç–æ—Ä: Rubin AI System
–í–µ—Ä—Å–∏—è: 3.0
"""

import re
import math
import numpy as np
import sympy as sp
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
import cv2
import pytesseract
from typing import Dict, List, Tuple, Any, Optional, Union
from dataclasses import dataclass
from enum import Enum
import logging
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AdvancedProblemType(Enum):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á"""
    PHYSICS_FORMULAS = "—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ_—Ñ–æ—Ä–º—É–ª—ã"
    CHEMISTRY_CALCULATIONS = "—Ö–∏–º–∏—á–µ—Å–∫–∏–µ_—Ä–∞—Å—á–µ—Ç—ã"
    ENGINEERING_DESIGN = "–∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ_—Ä–∞—Å—á–µ—Ç—ã"
    STATISTICAL_ANALYSIS = "—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π_–∞–Ω–∞–ª–∏–∑"
    GRAPH_ANALYSIS = "–∞–Ω–∞–ª–∏–∑_–≥—Ä–∞—Ñ–∏–∫–æ–≤"
    DATA_VISUALIZATION = "–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è_–¥–∞–Ω–Ω—ã—Ö"
    FORMULA_CALCULATION = "—Ä–∞—Å—á–µ—Ç_–ø–æ_—Ñ–æ—Ä–º—É–ª–µ"
    IMAGE_ANALYSIS = "–∞–Ω–∞–ª–∏–∑_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"

@dataclass
class AdvancedSolution:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
    problem_type: AdvancedProblemType
    input_data: Dict[str, Any]
    solution_steps: List[str]
    final_answer: Union[float, str, Dict[str, Any]]
    verification: bool
    confidence: float
    explanation: str
    visualization: Optional[str] = None
    graph_data: Optional[Dict] = None

class PhysicsFormulaSolver:
    """–†–µ—à–∞—Ç–µ–ª—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª"""
    
    def __init__(self):
        self.formulas = {
            "–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è_—ç–Ω–µ—Ä–≥–∏—è": {
                "formula": "E = 0.5 * m * v¬≤",
                "variables": {"m": "–º–∞—Å—Å–∞ (–∫–≥)", "v": "—Å–∫–æ—Ä–æ—Å—Ç—å (–º/—Å)"},
                "units": "–î–∂",
                "description": "–ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è –¥–≤–∏–∂—É—â–µ–≥–æ—Å—è —Ç–µ–ª–∞"
            },
            "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è_—ç–Ω–µ—Ä–≥–∏—è": {
                "formula": "E = m * g * h",
                "variables": {"m": "–º–∞—Å—Å–∞ (–∫–≥)", "g": "—É—Å–∫–æ—Ä–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è (–º/—Å¬≤)", "h": "–≤—ã—Å–æ—Ç–∞ (–º)"},
                "units": "–î–∂",
                "description": "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è —Ç–µ–ª–∞ –≤ –ø–æ–ª–µ —Ç—è–∂–µ—Å—Ç–∏"
            },
            "–∑–∞–∫–æ–Ω_–æ–º–∞": {
                "formula": "U = I * R",
                "variables": {"U": "–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–í)", "I": "—Ç–æ–∫ (–ê)", "R": "—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ (–û–º)"},
                "units": "–í",
                "description": "–ó–∞–∫–æ–Ω –û–º–∞ –¥–ª—è —É—á–∞—Å—Ç–∫–∞ —Ü–µ–ø–∏"
            },
            "–º–æ—â–Ω–æ—Å—Ç—å": {
                "formula": "P = U * I",
                "variables": {"P": "–º–æ—â–Ω–æ—Å—Ç—å (–í—Ç)", "U": "–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–í)", "I": "—Ç–æ–∫ (–ê)"},
                "units": "–í—Ç",
                "description": "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è –º–æ—â–Ω–æ—Å—Ç—å"
            },
            "—Å–∏–ª–∞_—Ç—è–∂–µ—Å—Ç–∏": {
                "formula": "F = m * g",
                "variables": {"F": "—Å–∏–ª–∞ —Ç—è–∂–µ—Å—Ç–∏ (–ù)", "m": "–º–∞—Å—Å–∞ (–∫–≥)", "g": "—É—Å–∫–æ—Ä–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è (–º/—Å¬≤)"},
                "units": "–ù",
                "description": "–°–∏–ª–∞ —Ç—è–∂–µ—Å—Ç–∏"
            },
            "—É—Å–∫–æ—Ä–µ–Ω–∏–µ": {
                "formula": "a = (v - v‚ÇÄ) / t",
                "variables": {"a": "—É—Å–∫–æ—Ä–µ–Ω–∏–µ (–º/—Å¬≤)", "v": "–∫–æ–Ω–µ—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–º/—Å)", "v‚ÇÄ": "–Ω–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–º/—Å)", "t": "–≤—Ä–µ–º—è (—Å)"},
                "units": "–º/—Å¬≤",
                "description": "–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏"
            },
            "–ø—É—Ç—å": {
                "formula": "s = v‚ÇÄ * t + 0.5 * a * t¬≤",
                "variables": {"s": "–ø—É—Ç—å (–º)", "v‚ÇÄ": "–Ω–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–º/—Å)", "t": "–≤—Ä–µ–º—è (—Å)", "a": "—É—Å–∫–æ—Ä–µ–Ω–∏–µ (–º/—Å¬≤)"},
                "units": "–º",
                "description": "–ü—É—Ç—å –ø—Ä–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏"
            }
        }
    
    def solve_physics_formula(self, formula_name: str, variables: Dict[str, float]) -> AdvancedSolution:
        """–†–µ—à–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—É–ª—ã"""
        try:
            if formula_name not in self.formulas:
                return AdvancedSolution(
                    problem_type=AdvancedProblemType.PHYSICS_FORMULAS,
                    input_data={"formula": formula_name, "variables": variables},
                    solution_steps=["–§–æ—Ä–º—É–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"],
                    final_answer="–û—à–∏–±–∫–∞: —Ñ–æ—Ä–º—É–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    verification=False,
                    confidence=0.0,
                    explanation="–§–æ—Ä–º—É–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                )
            
            formula_info = self.formulas[formula_name]
            steps = []
            
            # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º—É–ª—É
            if formula_name == "–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è_—ç–Ω–µ—Ä–≥–∏—è":
                m, v = variables.get("m", 0), variables.get("v", 0)
                result = 0.5 * m * v**2
                steps.append(f"E = 0.5 * m * v¬≤")
                steps.append(f"E = 0.5 * {m} * {v}¬≤")
                steps.append(f"E = 0.5 * {m} * {v**2}")
                steps.append(f"E = {result} –î–∂")
                
            elif formula_name == "–∑–∞–∫–æ–Ω_–æ–º–∞":
                I, R = variables.get("I", 0), variables.get("R", 0)
                result = I * R
                steps.append(f"U = I * R")
                steps.append(f"U = {I} * {R}")
                steps.append(f"U = {result} –í")
                
            elif formula_name == "–º–æ—â–Ω–æ—Å—Ç—å":
                U, I = variables.get("U", 0), variables.get("I", 0)
                result = U * I
                steps.append(f"P = U * I")
                steps.append(f"P = {U} * {I}")
                steps.append(f"P = {result} –í—Ç")
                
            else:
                result = 0
                steps.append("–§–æ—Ä–º—É–ª–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
            
            return AdvancedSolution(
                problem_type=AdvancedProblemType.PHYSICS_FORMULAS,
                input_data={"formula": formula_name, "variables": variables},
                solution_steps=steps,
                final_answer=f"{result} {formula_info['units']}",
                verification=True,
                confidence=0.95,
                explanation=f"{formula_info['description']}. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result} {formula_info['units']}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—É–ª—ã: {e}")
            return AdvancedSolution(
                problem_type=AdvancedProblemType.PHYSICS_FORMULAS,
                input_data={"formula": formula_name, "variables": variables},
                solution_steps=["–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"],
                final_answer="–û—à–∏–±–∫–∞",
                verification=False,
                confidence=0.0,
                explanation=f"–û—à–∏–±–∫–∞: {e}"
            )

class GraphAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        self.tesseract_config = '--oem 3 --psm 6'
        
    def extract_text_from_graph(self, image_path: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        try:
            if not os.path.exists(image_path):
                return "–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image = cv2.imread(image_path)
            if image is None:
                return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            enhanced = cv2.equalizeHist(gray)
            
            # OCR
            text = pytesseract.image_to_string(enhanced, config=self.tesseract_config)
            return text.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OCR: {e}")
            return f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}"
    
    def analyze_graph_structure(self, image_path: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥—Ä–∞—Ñ–∏–∫–∞"""
        try:
            if not os.path.exists(image_path):
                return {"error": "–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            image = cv2.imread(image_path)
            if image is None:
                return {"error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"}
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            graph_type = self.detect_graph_type(image)
            
            # –ü–æ–∏—Å–∫ –æ—Å–µ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            axes = self.find_coordinate_axes(image)
            
            # –ü–æ–∏—Å–∫ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö
            data_points = self.find_data_points(image)
            
            return {
                "graph_type": graph_type,
                "axes": axes,
                "data_points": data_points,
                "image_size": image.shape
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return {"error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"}
    
    def detect_graph_type(self, image) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞"""
        try:
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            
            # –ü–æ–∏—Å–∫ –ª–∏–Ω–∏–π (–¥–ª—è –ª–∏–Ω–µ–π–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤)
            edges = cv2.Canny(gray, 50, 150)
            lines = cv2.HoughLinesP(edges, 1, np.pi/180, threshold=100, minLineLength=50, maxLineGap=10)
            
            if lines is not None and len(lines) > 5:
                return "line_graph"
            
            # –ü–æ–∏—Å–∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ (–¥–ª—è —Å—Ç–æ–ª–±—á–∞—Ç—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º)
            contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            rectangles = [c for c in contours if cv2.contourArea(c) > 1000]
            
            if len(rectangles) > 3:
                return "bar_chart"
            
            # –ü–æ–∏—Å–∫ –∫—Ä—É–≥–æ–≤ (–¥–ª—è –∫—Ä—É–≥–æ–≤—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º)
            circles = cv2.HoughCircles(gray, cv2.HOUGH_GRADIENT, 1, 20, param1=50, param2=30, minRadius=10, maxRadius=100)
            
            if circles is not None:
                return "pie_chart"
            
            return "unknown"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return "unknown"
    
    def find_coordinate_axes(self, image) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ –æ—Å–µ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        try:
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            edges = cv2.Canny(gray, 50, 150)
            
            # –ü–æ–∏—Å–∫ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
            horizontal_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (25, 1))
            vertical_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, 25))
            
            horizontal_lines = cv2.morphologyEx(edges, cv2.MORPH_OPEN, horizontal_kernel)
            vertical_lines = cv2.morphologyEx(edges, cv2.MORPH_OPEN, vertical_kernel)
            
            return {
                "horizontal_lines": np.sum(horizontal_lines > 0),
                "vertical_lines": np.sum(vertical_lines > 0)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ—Å–µ–π: {e}")
            return {"error": f"–û—à–∏–±–∫–∞: {e}"}
    
    def find_data_points(self, image) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            
            # –ü–æ–∏—Å–∫ –∫—Ä—É–≥–æ–≤ (—Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö)
            circles = cv2.HoughCircles(gray, cv2.HOUGH_GRADIENT, 1, 20, 
                                     param1=50, param2=30, minRadius=5, maxRadius=20)
            
            points = []
            if circles is not None:
                circles = np.round(circles[0, :]).astype("int")
                for (x, y, r) in circles:
                    points.append({"x": int(x), "y": int(y), "radius": int(r)})
            
            return points
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []

class DataVisualizer:
    """–°–æ–∑–¥–∞—Ç–µ–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        plt.style.use('seaborn-v0_8')
        self.colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']
    
    def create_line_graph(self, data: Dict[str, List[float]], title: str = "–ì—Ä–∞—Ñ–∏–∫", 
                         xlabel: str = "X", ylabel: str = "Y") -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
        try:
            fig, ax = plt.subplots(figsize=(10, 6))
            
            if isinstance(data, dict):
                for i, (key, values) in enumerate(data.items()):
                    ax.plot(values, label=key, color=self.colors[i % len(self.colors)], linewidth=2)
            else:
                ax.plot(data, color=self.colors[0], linewidth=2)
            
            ax.set_title(title, fontsize=14, fontweight='bold')
            ax.set_xlabel(xlabel, fontsize=12)
            ax.set_ylabel(ylabel, fontsize=12)
            ax.legend()
            ax.grid(True, alpha=0.3)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            filename = f"graph_{hash(title)}.png"
            fig.savefig(filename, dpi=300, bbox_inches='tight')
            plt.close(fig)
            
            return filename
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return f"–û—à–∏–±–∫–∞: {e}"
    
    def create_bar_chart(self, data: Dict[str, float], title: str = "–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞") -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã"""
        try:
            fig, ax = plt.subplots(figsize=(10, 6))
            
            categories = list(data.keys())
            values = list(data.values())
            
            bars = ax.bar(categories, values, color=self.colors[:len(categories)])
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, value in zip(bars, values):
                ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1,
                       f'{value}', ha='center', va='bottom')
            
            ax.set_title(title, fontsize=14, fontweight='bold')
            ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏—è', fontsize=12)
            plt.xticks(rotation=45)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            filename = f"bar_chart_{hash(title)}.png"
            fig.savefig(filename, dpi=300, bbox_inches='tight')
            plt.close(fig)
            
            return filename
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
            return f"–û—à–∏–±–∫–∞: {e}"
    
    def create_pie_chart(self, data: Dict[str, float], title: str = "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞") -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã"""
        try:
            fig, ax = plt.subplots(figsize=(8, 8))
            
            labels = list(data.keys())
            sizes = list(data.values())
            
            wedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%',
                                             colors=self.colors[:len(labels)],
                                             startangle=90)
            
            ax.set_title(title, fontsize=14, fontweight='bold')
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            filename = f"pie_chart_{hash(title)}.png"
            fig.savefig(filename, dpi=300, bbox_inches='tight')
            plt.close(fig)
            
            return filename
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
            return f"–û—à–∏–±–∫–∞: {e}"

class AdvancedMathSolver:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å"""
    
    def __init__(self):
        self.physics_solver = PhysicsFormulaSolver()
        self.graph_analyzer = GraphAnalyzer()
        self.data_visualizer = DataVisualizer()
        
    def solve_advanced_problem(self, question: str) -> AdvancedSolution:
        """–†–µ—à–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
            problem_type = self.classify_problem(question)
            
            if problem_type == AdvancedProblemType.PHYSICS_FORMULAS:
                return self.solve_physics_problem(question)
            elif problem_type == AdvancedProblemType.GRAPH_ANALYSIS:
                return self.solve_graph_problem(question)
            elif problem_type == AdvancedProblemType.DATA_VISUALIZATION:
                return self.solve_visualization_problem(question)
            else:
                return AdvancedSolution(
                    problem_type=AdvancedProblemType.UNKNOWN,
                    input_data={"question": question},
                    solution_steps=["–¢–∏–ø –∑–∞–¥–∞—á–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"],
                    final_answer="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∑–∞–¥–∞—á–∏",
                    verification=False,
                    confidence=0.0,
                    explanation="–ó–∞–¥–∞—á–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Ç–∏–ø–∞–º"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏: {e}")
            return AdvancedSolution(
                problem_type=AdvancedProblemType.UNKNOWN,
                input_data={"question": question},
                solution_steps=["–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"],
                final_answer="–û—à–∏–±–∫–∞",
                verification=False,
                confidence=0.0,
                explanation=f"–û—à–∏–±–∫–∞: {e}"
            )
    
    def classify_problem(self, question: str) -> AdvancedProblemType:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""
        question_lower = question.lower()
        
        # –§–∏–∑–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã
        physics_keywords = ["–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è", "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è", "–∑–∞–∫–æ–Ω –æ–º–∞", 
                          "–º–æ—â–Ω–æ—Å—Ç—å", "—Å–∏–ª–∞ —Ç—è–∂–µ—Å—Ç–∏", "—É—Å–∫–æ—Ä–µ–Ω–∏–µ", "–ø—É—Ç—å", "—Å–∫–æ—Ä–æ—Å—Ç—å"]
        if any(keyword in question_lower for keyword in physics_keywords):
            return AdvancedProblemType.PHYSICS_FORMULAS
        
        # –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        graph_keywords = ["–≥—Ä–∞—Ñ–∏–∫", "–¥–∏–∞–≥—Ä–∞–º–º–∞", "–∞–Ω–∞–ª–∏–∑", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–∫–∞—Ä—Ç–∏–Ω–∫–∞"]
        if any(keyword in question_lower for keyword in graph_keywords):
            return AdvancedProblemType.GRAPH_ANALYSIS
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        viz_keywords = ["–ø–æ—Å—Ç—Ä–æ–∏—Ç—å", "—Å–æ–∑–¥–∞—Ç—å", "–Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å", "–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è"]
        if any(keyword in question_lower for keyword in viz_keywords):
            return AdvancedProblemType.DATA_VISUALIZATION
        
        return AdvancedProblemType.UNKNOWN
    
    def solve_physics_problem(self, question: str) -> AdvancedSolution:
        """–†–µ—à–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏"""
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
            variables = self.extract_physics_variables(question)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã
            formula_name = self.detect_physics_formula(question)
            
            if formula_name:
                return self.physics_solver.solve_physics_formula(formula_name, variables)
            else:
                return AdvancedSolution(
                    problem_type=AdvancedProblemType.PHYSICS_FORMULAS,
                    input_data={"question": question},
                    solution_steps=["–§–æ—Ä–º—É–ª–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"],
                    final_answer="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É",
                    verification=False,
                    confidence=0.0,
                    explanation="–§–∏–∑–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏: {e}")
            return AdvancedSolution(
                problem_type=AdvancedProblemType.PHYSICS_FORMULAS,
                input_data={"question": question},
                solution_steps=["–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"],
                final_answer="–û—à–∏–±–∫–∞",
                verification=False,
                confidence=0.0,
                explanation=f"–û—à–∏–±–∫–∞: {e}"
            )
    
    def extract_physics_variables(self, question: str) -> Dict[str, float]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏"""
        variables = {}
        
        # –ü–æ–∏—Å–∫ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        numbers = re.findall(r'\d+(?:\.\d+)?', question)
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
        if "–º–∞—Å—Å–∞" in question.lower() and len(numbers) > 0:
            variables["m"] = float(numbers[0])
        if "—Å–∫–æ—Ä–æ—Å—Ç—å" in question.lower() and len(numbers) > 1:
            variables["v"] = float(numbers[1])
        if "—Ç–æ–∫" in question.lower() and len(numbers) > 0:
            variables["I"] = float(numbers[0])
        if "—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ" in question.lower() and len(numbers) > 1:
            variables["R"] = float(numbers[1])
        if "–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ" in question.lower() and len(numbers) > 0:
            variables["U"] = float(numbers[0])
        
        return variables
    
    def detect_physics_formula(self, question: str) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—É–ª—ã"""
        question_lower = question.lower()
        
        if "–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è" in question_lower:
            return "–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è_—ç–Ω–µ—Ä–≥–∏—è"
        elif "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è" in question_lower:
            return "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è_—ç–Ω–µ—Ä–≥–∏—è"
        elif "–∑–∞–∫–æ–Ω –æ–º–∞" in question_lower or ("–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ" in question_lower and "—Ç–æ–∫" in question_lower):
            return "–∑–∞–∫–æ–Ω_–æ–º–∞"
        elif "–º–æ—â–Ω–æ—Å—Ç—å" in question_lower:
            return "–º–æ—â–Ω–æ—Å—Ç—å"
        elif "—Å–∏–ª–∞ —Ç—è–∂–µ—Å—Ç–∏" in question_lower:
            return "—Å–∏–ª–∞_—Ç—è–∂–µ—Å—Ç–∏"
        elif "—É—Å–∫–æ—Ä–µ–Ω–∏–µ" in question_lower:
            return "—É—Å–∫–æ—Ä–µ–Ω–∏–µ"
        elif "–ø—É—Ç—å" in question_lower:
            return "–ø—É—Ç—å"
        
        return None
    
    def solve_graph_problem(self, question: str) -> AdvancedSolution:
        """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞"""
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            image_path = self.extract_image_path(question)
            
            if not image_path:
                return AdvancedSolution(
                    problem_type=AdvancedProblemType.GRAPH_ANALYSIS,
                    input_data={"question": question},
                    solution_steps=["–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω"],
                    final_answer="–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≥—Ä–∞—Ñ–∏–∫–∞",
                    verification=False,
                    confidence=0.0,
                    explanation="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                )
            
            # –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞
            graph_data = self.graph_analyzer.analyze_graph_structure(image_path)
            text_data = self.graph_analyzer.extract_text_from_graph(image_path)
            
            steps = [
                f"–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_path}",
                f"–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞: {graph_data.get('graph_type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text_data[:100]}..."
            ]
            
            return AdvancedSolution(
                problem_type=AdvancedProblemType.GRAPH_ANALYSIS,
                input_data={"question": question, "image_path": image_path},
                solution_steps=steps,
                final_answer=f"–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {graph_data.get('graph_type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                verification=True,
                confidence=0.8,
                explanation=f"–ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –¢–∏–ø: {graph_data.get('graph_type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                graph_data=graph_data
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return AdvancedSolution(
                problem_type=AdvancedProblemType.GRAPH_ANALYSIS,
                input_data={"question": question},
                solution_steps=["–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"],
                final_answer="–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞",
                verification=False,
                confidence=0.0,
                explanation=f"–û—à–∏–±–∫–∞: {e}"
            )
    
    def extract_image_path(self, question: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–∑ –≤–æ–ø—Ä–æ—Å–∞"""
        # –ü–æ–∏—Å–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
        paths = re.findall(r'[a-zA-Z]:\\[^\\/:*?"<>|]+\.[a-zA-Z]+|[a-zA-Z0-9_/.-]+\.(?:png|jpg|jpeg|gif|bmp)', question)
        return paths[0] if paths else None
    
    def solve_visualization_problem(self, question: str) -> AdvancedSolution:
        """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
            data = self.extract_data_from_question(question)
            
            if not data:
                return AdvancedSolution(
                    problem_type=AdvancedProblemType.DATA_VISUALIZATION,
                    input_data={"question": question},
                    solution_steps=["–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"],
                    final_answer="–£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏",
                    verification=False,
                    confidence=0.0,
                    explanation="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞"
                )
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            viz_type = self.detect_visualization_type(question)
            
            if viz_type == "line":
                filename = self.data_visualizer.create_line_graph(data, "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫")
            elif viz_type == "bar":
                filename = self.data_visualizer.create_bar_chart(data, "–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞")
            elif viz_type == "pie":
                filename = self.data_visualizer.create_pie_chart(data, "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞")
            else:
                filename = self.data_visualizer.create_line_graph(data, "–ì—Ä–∞—Ñ–∏–∫")
            
            return AdvancedSolution(
                problem_type=AdvancedProblemType.DATA_VISUALIZATION,
                input_data={"question": question, "data": data},
                solution_steps=[
                    f"–ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {list(data.keys())}",
                    f"–°–æ–∑–¥–∞–Ω –≥—Ä–∞—Ñ–∏–∫ —Ç–∏–ø–∞: {viz_type}",
                    f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: {filename}"
                ],
                final_answer=f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω: {filename}",
                verification=True,
                confidence=0.9,
                explanation=f"–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–∞–π–ª: {filename}",
                visualization=filename
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return AdvancedSolution(
                problem_type=AdvancedProblemType.DATA_VISUALIZATION,
                input_data={"question": question},
                solution_steps=["–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è"],
                final_answer="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞",
                verification=False,
                confidence=0.0,
                explanation=f"–û—à–∏–±–∫–∞: {e}"
            )
    
    def extract_data_from_question(self, question: str) -> Optional[Dict[str, List[float]]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–æ–ø—Ä–æ—Å–∞"""
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
        # –ü—Ä–∏–º–µ—Ä: "A: 1,2,3,4 B: 5,6,7,8"
        data_pattern = r'([A-Za-z]+):\s*([0-9.,\s]+)'
        matches = re.findall(data_pattern, question)
        
        if matches:
            data = {}
            for label, values_str in matches:
                values = [float(x.strip()) for x in values_str.split(',')]
                data[label] = values
            return data
        
        return None
    
    def detect_visualization_type(self, question: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        question_lower = question.lower()
        
        if "–ª–∏–Ω–µ–π–Ω—ã–π" in question_lower or "line" in question_lower:
            return "line"
        elif "—Å—Ç–æ–ª–±—á–∞—Ç–∞—è" in question_lower or "bar" in question_lower:
            return "bar"
        elif "–∫—Ä—É–≥–æ–≤–∞—è" in question_lower or "pie" in question_lower:
            return "pie"
        else:
            return "line"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    solver = AdvancedMathSolver()
    
    # –¢–µ—Å—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª
    physics_question = "–ù–∞–π—Ç–∏ –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫—É—é —ç–Ω–µ—Ä–≥–∏—é —Ç–µ–ª–∞ –º–∞—Å—Å–æ–π 2 –∫–≥, –¥–≤–∏–∂—É—â–µ–≥–æ—Å—è —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 10 –º/—Å"
    result = solver.solve_advanced_problem(physics_question)
    print(f"–§–∏–∑–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞: {result.final_answer}")
    print(f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {result.explanation}")
    
    # –¢–µ—Å—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    viz_question = "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ A: 1,2,3,4,5 B: 2,4,6,8,10"
    result = solver.solve_advanced_problem(viz_question)
    print(f"–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: {result.final_answer}")
    print(f"–§–∞–π–ª: {result.visualization}")










