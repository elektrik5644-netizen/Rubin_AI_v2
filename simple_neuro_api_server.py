#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Neuro API —Å–µ—Ä–≤–µ—Ä –¥–ª—è Rubin AI v2
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import logging
import json
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
NEURAL_KNOWLEDGE = {
    "–Ω–µ–π—Ä–æ—Å–µ—Ç—å": {
        "keywords": ["–Ω–µ–π—Ä–æ—Å–µ—Ç—å", "–Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å", "neural network", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"],
        "explanation": """
üß† **–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å** - —ç—Ç–æ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å, –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏.

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**
- **–ù–µ–π—Ä–æ–Ω—ã** - –±–∞–∑–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
- **–°–≤—è–∑–∏** - –ø–µ—Ä–µ–¥–∞—é—Ç —Å–∏–≥–Ω–∞–ª—ã –º–µ–∂–¥—É –Ω–µ–π—Ä–æ–Ω–∞–º–∏
- **–í–µ—Å–∞** - –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —Å–∏–ª—É —Å–≤—è–∑–µ–π
- **–§—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏** - –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –≤—ã—Ö–æ–¥ –Ω–µ–π—Ä–æ–Ω–∞

**–¢–∏–ø—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π:**
- **–ü–µ—Ä—Ü–µ–ø—Ç—Ä–æ–Ω** - –ø—Ä–æ—Å—Ç–µ–π—à–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å
- **–ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–π –ø–µ—Ä—Ü–µ–ø—Ç—Ä–æ–Ω** - –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–µ–≤
- **–°–≤–µ—Ä—Ç–æ—á–Ω—ã–µ —Å–µ—Ç–∏** - –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- **–†–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ —Å–µ—Ç–∏** - –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
- **–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã** - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

**–ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è:**
- –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
- –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        """,
        "examples": [
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç—å?",
            "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?"
        ]
    },
    "–æ–±—É—á–µ–Ω–∏–µ": {
        "keywords": ["–æ–±—É—á–µ–Ω–∏–µ", "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "training", "–æ–±—É—á–∞—Ç—å"],
        "explanation": """
üéì **–û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏** - –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—Å–æ–≤ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏.

**–¢–∏–ø—ã –æ–±—É—á–µ–Ω–∏—è:**
- **–° —É—á–∏—Ç–µ–ª–µ–º** - –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
- **–ë–µ–∑ —É—á–∏—Ç–µ–ª—è** - –ø–æ–∏—Å–∫ —Å–∫—Ä—ã—Ç—ã—Ö –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π
- **–° –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º** - –æ–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ

**–ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è:**
1. **–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è** - —Å–ª—É—á–∞–π–Ω—ã–µ –≤–µ—Å–∞
2. **–ü—Ä—è–º–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ** - –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞
3. **–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏** - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
4. **–û–±—Ä–∞—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ** - –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤–µ—Å–æ–≤
5. **–ü–æ–≤—Ç–æ—Ä** - –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏

**–ê–ª–≥–æ—Ä–∏—Ç–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:**
- –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫
- Adam
- RMSprop
- AdaGrad
        """,
        "examples": [
            "–ö–∞–∫ –æ–±—É—á–∞–µ—Ç—Å—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –æ–±—Ä–∞—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ?",
            "–û–±—ä—è—Å–Ω–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫"
        ]
    },
    "–≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ": {
        "keywords": ["–≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "deep learning", "–≥–ª—É–±–æ–∫–∞—è —Å–µ—Ç—å"],
        "explanation": """
üî¨ **–ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ** - –ø–æ–¥—Ä–∞–∑–¥–µ–ª –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏.

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
- **–ú–Ω–æ–≥–æ —Å–ª–æ–µ–≤** - –æ–±—ã—á–Ω–æ –±–æ–ª–µ–µ 3-—Ö
- **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤**
- **–ë–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã –¥–∞–Ω–Ω—ã—Ö**
- **–í—ã—Å–æ–∫–∞—è –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**

**–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:**
- **CNN** - —Å–≤–µ—Ä—Ç–æ—á–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- **RNN** - —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
- **LSTM** - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å
- **GRU** - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è LSTM
- **Transformer** - –≤–Ω–∏–º–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–∫—É—Ä—Å–∏–∏

**–ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è:**
- –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
- –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
- –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
        """,
        "examples": [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
            "–û–±—ä—è—Å–Ω–∏ CNN –∏ RNN",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Transformer?"
        ]
    }
}

def find_best_match(query):
    """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞."""
    query_lower = query.lower()
    
    best_match = None
    best_score = 0
    
    for topic, data in NEURAL_KNOWLEDGE.items():
        score = 0
        for keyword in data['keywords']:
            if keyword.lower() in query_lower:
                score += 1
        
        if score > best_score:
            best_score = score
            best_match = data
    
    if best_match and best_score > 0:
        return {
            'success': True,
            'response': best_match['explanation'],
            'topic': topic,
            'score': best_score
        }
    else:
        return {
            'success': True,
            'response': """
üß† **–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ**

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ:
‚Ä¢ **–ù–µ–π—Ä–æ—Å–µ—Ç—è—Ö** - –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
‚Ä¢ **–û–±—É—á–µ–Ω–∏–∏** - –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
‚Ä¢ **–ì–ª—É–±–æ–∫–æ–º –æ–±—É—á–µ–Ω–∏–∏** - CNN, RNN, Transformer
‚Ä¢ **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö** - –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ, NLP

–ó–∞–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∏ —è –¥–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç!
            """.strip(),
            'topic': 'general',
            'score': 0
        }

@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞."""
    return jsonify({
        'status': 'healthy',
        'message': 'Neuro API —Ä–∞–±–æ—Ç–∞–µ—Ç',
        'module': 'Neuro Repository API',
        'timestamp': datetime.now().isoformat()
    }), 200

@app.route('/api/neuro/status', methods=['GET'])
def neuro_status():
    """–°—Ç–∞—Ç—É—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤."""
    return jsonify({
        'status': 'active',
        'projects': len(NEURAL_KNOWLEDGE),
        'capabilities': [
            '–ê–Ω–∞–ª–∏–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤',
            '–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Ä–∞–±–æ—Ç—ã',
            '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é',
            '–ü–æ–º–æ—â—å —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞–º–∏ —Å–µ—Ç–µ–π'
        ],
        'knowledge_base': list(NEURAL_KNOWLEDGE.keys())
    }), 200

@app.route('/api/neuro/chat', methods=['POST'])
def neuro_chat():
    """–ß–∞—Ç —Å –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏."""
    try:
        data = request.get_json()
        message = data.get('message', '')
        
        if not message:
            return jsonify({
                'success': False,
                'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
            }), 400
        
        logger.info(f"Neuro API –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å: {message[:50]}...")
        
        # –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        result = find_best_match(message)
        
        return jsonify({
            'success': True,
            'response': result['response'],
            'topic': result['topic'],
            'confidence': result['score'],
            'timestamp': datetime.now().isoformat()
        }), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ neuro_chat: {e}")
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

@app.route('/api/neuro/knowledge', methods=['GET'])
def get_knowledge():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π."""
    return jsonify({
        'success': True,
        'knowledge': NEURAL_KNOWLEDGE,
        'total_topics': len(NEURAL_KNOWLEDGE)
    }), 200

@app.route('/api/neuro/projects', methods=['GET'])
def get_projects():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤."""
    projects = []
    for topic, data in NEURAL_KNOWLEDGE.items():
        projects.append({
            'name': topic,
            'description': data['explanation'][:100] + '...',
            'keywords': data['keywords'],
            'examples': data['examples']
        })
    
    return jsonify({
        'success': True,
        'projects': projects,
        'total': len(projects)
    }), 200

if __name__ == '__main__':
    print("üß† Neuro API Server –∑–∞–ø—É—â–µ–Ω")
    print("=" * 50)
    print("üåê URL: http://localhost:8090")
    print("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: –ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã")
    print("Endpoints:")
    print("  - GET /api/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    print("  - GET /api/neuro/status - –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print("  - POST /api/neuro/chat - –ß–∞—Ç —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏")
    print("  - GET /api/neuro/knowledge - –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
    print("  - GET /api/neuro/projects - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print("=" * 50)
    
    app.run(port=8090, debug=False, use_reloader=False)








