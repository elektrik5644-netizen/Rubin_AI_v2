#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Rubin AI
"""

import requests
import json
import time

def test_self_testing_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    base_url = "http://localhost:8102"
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –°–ê–ú–û–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø RUBIN AI")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: Health check
    print("\nüîç –¢–µ—Å—Ç 1: Health check")
    try:
        response = requests.get(f"{base_url}/api/self_testing/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health check: {data['status']}")
            print(f"   –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {data['total_servers']}")
            print(f"   –í—Å–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {data['total_capabilities']}")
        else:
            print(f"‚ùå Health check failed: HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ùå Health check error: {e}")
    
    # –¢–µ—Å—Ç 2: Server status
    print("\nüîç –¢–µ—Å—Ç 2: Server status")
    try:
        response = requests.get(f"{base_url}/api/self_testing/server_status", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Server status: {data['online_servers']}/{data['total_servers']} –æ–Ω–ª–∞–π–Ω")
            for server_id, status in data['server_status'].items():
                if status['status'] == 'online':
                    print(f"   ‚úÖ {status['name']} (–ø–æ—Ä—Ç {status['port']}) - –û–ù–õ–ê–ô–ù")
                else:
                    print(f"   ‚ùå {status['name']} (–ø–æ—Ä—Ç {status['port']}) - {status['status']}")
        else:
            print(f"‚ùå Server status failed: HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ùå Server status error: {e}")
    
    # –¢–µ—Å—Ç 3: Self description
    print("\nüîç –¢–µ—Å—Ç 3: Self description")
    try:
        response = requests.get(f"{base_url}/api/self_testing/self_description", timeout=15)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Self description generated")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {data['description'][:200]}...")
        else:
            print(f"‚ùå Self description failed: HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ùå Self description error: {e}")
    
    # –¢–µ—Å—Ç 4: Chat integration
    print("\nüîç –¢–µ—Å—Ç 4: Chat integration")
    try:
        response = requests.post(
            f"{base_url}/api/self_testing/chat_integration",
            json={"message": "—á—Ç–æ —É–º–µ–µ—à—å?"},
            timeout=10
        )
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Chat integration: {data['type']}")
            if data['type'] == 'self_description':
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {data['description'][:200]}...")
            elif data['type'] == 'server_status':
                print(f"   –°—Ç–∞—Ç—É—Å: {data['status_message'][:200]}...")
        else:
            print(f"‚ùå Chat integration failed: HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ùå Chat integration error: {e}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_self_testing_system()










