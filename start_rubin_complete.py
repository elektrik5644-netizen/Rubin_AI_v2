#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ Rubin AI v2.0 —Å —Å–∏—Å—Ç–µ–º–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import subprocess
import sys
import os
import time
import threading
from pathlib import Path

def start_server(script_path, port, name):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        print(f"üöÄ –ó–∞–ø—É—Å–∫ {name} –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
        process = subprocess.Popen([
            sys.executable, script_path
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, 
           creationflags=subprocess.CREATE_NEW_PROCESS_GROUP if sys.platform == "win32" else 0)
        
        print(f"‚úÖ {name} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
        return process
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {e}")
        return None

def check_port(port):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
    import socket
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(1)
            result = s.connect_ex(('127.0.0.1', port))
            return result == 0
    except:
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –ü–û–õ–ù–´–ô –ó–ê–ü–£–°–ö RUBIN AI v2.0")
    print("=" * 50)
    
    # –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    servers = [
        ("start_stable_server.py", 8084, "AI –ß–∞—Ç (–û—Å–Ω–æ–≤–Ω–æ–π)"),
        ("api/electrical_api.py", 8087, "–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞"),
        ("api/radiomechanics_api.py", 8089, "–†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞"),
        ("api/controllers_api.py", 8090, "–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã"),
        ("api/documents_api.py", 8088, "–î–æ–∫—É–º–µ–Ω—Ç—ã"),
        ("static_web_server.py", 8085, "–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –í–µ–±-—Å–µ—Ä–≤–µ—Ä")
    ]
    
    processes = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
    for script, port, name in servers:
        if os.path.exists(script):
            if not check_port(port):
                process = start_server(script, port, name)
                if process:
                    processes.append((process, name, port))
                time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
            else:
                print(f"‚ö†Ô∏è –ü–æ—Ä—Ç {port} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º {name}")
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª {script} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º {name}")
    
    print("\n" + "=" * 50)
    print("üìä –°–¢–ê–¢–£–° –ó–ê–ü–£–©–ï–ù–ù–´–• –°–ï–†–í–ï–†–û–í:")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤
    for process, name, port in processes:
        if process and process.poll() is None:
            print(f"‚úÖ {name}: –û–ù–õ–ê–ô–ù (–ø–æ—Ä—Ç {port}, PID: {process.pid})")
        else:
            print(f"‚ùå {name}: –û–§–§–õ–ê–ô–ù (–ø–æ—Ä—Ç {port})")
    
    print("\nüåê –î–û–°–¢–£–ü–ù–´–ï –ò–ù–¢–ï–†–§–ï–ô–°–´:")
    print("   ü§ñ AI –ß–∞—Ç: http://localhost:8084/RubinIDE.html")
    print("   ‚öôÔ∏è Developer: http://localhost:8084/RubinDeveloper.html")
    print("   üìä –°—Ç–∞—Ç—É—Å: http://localhost:8084/status_check.html")
    print("   üìö –î–æ–∫—É–º–µ–Ω—Ç—ã: http://localhost:8088/DocumentsManager.html")
    print("   üåê –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π: http://localhost:8085/RubinIDE.html")
    
    print("\nüîç –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï API:")
    print("   ‚ö° –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞: http://localhost:8087/api/electrical/status")
    print("   üì° –†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞: http://localhost:8089/api/radiomechanics/status")
    print("   üéõÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã: http://localhost:8090/api/controllers/status")
    print("   üìö –î–æ–∫—É–º–µ–Ω—Ç—ã API: http://localhost:8088/health")
    
    print("\n‚è≥ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
    
    try:
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while True:
            time.sleep(1)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
            active_processes = []
            for process, name, port in processes:
                if process and process.poll() is None:
                    active_processes.append((process, name, port))
            processes = active_processes
            
            if not processes:
                print("\n‚ö†Ô∏è –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                break
                
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        for process, name, port in processes:
            if process and process.poll() is None:
                try:
                    print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
                    process.terminate()
                    process.wait(timeout=5)
                    print(f"‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}")
        
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

if __name__ == "__main__":
    main()























