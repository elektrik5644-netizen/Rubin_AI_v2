#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö Rubin AI
"""

import sqlite3
import os

def check_databases():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –ë–ê–ó –î–ê–ù–ù–´–• RUBIN AI")
    print("=" * 50)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_files = [
        'rubin_ai_v2.db',
        'rubin_ai_documents.db', 
        'rubin_knowledge_base.db',
        'readable_knowledge_base.db',
        'rubin_learning.db',
        'rubin_knowledge_base_enhanced.db'
    ]
    
    for db_file in db_files:
        if os.path.exists(db_file):
            print(f'\nüìä {db_file}:')
            try:
                conn = sqlite3.connect(db_file)
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
                tables = cursor.fetchall()
                print(f'  üìã –¢–∞–±–ª–∏—Ü: {len(tables)}')
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤—ã—Ö 5 —Ç–∞–±–ª–∏—Ü
                for table in tables[:5]:
                    table_name = table[0]
                    try:
                        cursor.execute(f'SELECT COUNT(*) FROM "{table_name}";')
                        count = cursor.fetchone()[0]
                        print(f'    - {table_name}: {count} –∑–∞–ø–∏—Å–µ–π')
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
                        if table_name in ['documents', 'knowledge', 'content', 'texts'] and count > 0:
                            cursor.execute(f'SELECT * FROM "{table_name}" LIMIT 1;')
                            sample = cursor.fetchone()
                            if sample:
                                print(f'      –ü—Ä–∏–º–µ—Ä: {str(sample)[:100]}...')
                    except Exception as e:
                        print(f'    - {table_name}: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è - {e}')
                
                conn.close()
                
            except Exception as e:
                print(f'  ‚ùå –û—à–∏–±–∫–∞: {e}')
        else:
            print(f'\n‚ùå {db_file}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –ø–∞–ø–∫–µ test_documents
    print(f'\nüìÅ –î–û–ö–£–ú–ï–ù–¢–´ –í TEST_DOCUMENTS:')
    test_docs_dir = 'test_documents'
    if os.path.exists(test_docs_dir):
        files = os.listdir(test_docs_dir)
        print(f'  üìÑ –§–∞–π–ª–æ–≤: {len(files)}')
        for file in files:
            file_path = os.path.join(test_docs_dir, file)
            size = os.path.getsize(file_path)
            print(f'    - {file}: {size} –±–∞–π—Ç')
    else:
        print('  ‚ùå –ü–∞–ø–∫–∞ test_documents –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')

def show_sample_content():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
    
    print(f'\nüìñ –ü–†–ò–ú–ï–†–´ –°–û–î–ï–†–ñ–ò–ú–û–ì–û:')
    print("=" * 30)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–¥–Ω–æ–≥–æ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    doc_file = 'test_documents/radiomechanics_guide.txt'
    if os.path.exists(doc_file):
        print(f'\nüìÑ {doc_file}:')
        with open(doc_file, 'r', encoding='utf-8') as f:
            content = f.read()
            print(f'  –†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤')
            print(f'  –ù–∞—á–∞–ª–æ: {content[:200]}...')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    db_file = 'rubin_knowledge_base.db'
    if os.path.exists(db_file):
        print(f'\nüìä {db_file}:')
        try:
            conn = sqlite3.connect(db_file)
            cursor = conn.cursor()
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = cursor.fetchall()
            
            for table in tables:
                table_name = table[0]
                if 'content' in table_name.lower() or 'text' in table_name.lower():
                    cursor.execute(f'SELECT COUNT(*) FROM "{table_name}";')
                    count = cursor.fetchone()[0]
                    if count > 0:
                        cursor.execute(f'SELECT * FROM "{table_name}" LIMIT 1;')
                        sample = cursor.fetchone()
                        print(f'  –¢–∞–±–ª–∏—Ü–∞ {table_name}: {count} –∑–∞–ø–∏—Å–µ–π')
                        if sample:
                            print(f'    –ü—Ä–∏–º–µ—Ä: {str(sample)[:150]}...')
            
            conn.close()
        except Exception as e:
            print(f'  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}')

if __name__ == "__main__":
    check_databases()
    show_sample_content()
    
    print(f'\nüéØ –í–´–í–û–î–´:')
    print("1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü")
    print("2. –ï—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –ø–∞–ø–∫–µ test_documents")
    print("3. –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤")
    print("4. –ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ")












