#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ü§ñ GAI SERVER
=============
–°–µ—Ä–≤–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
"""

from flask import Flask, request, jsonify
import logging
from datetime import datetime
import random
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –®–∞–±–ª–æ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
TEXT_TEMPLATES = {
    "technical": [
        "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {topic}. –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ {principle}. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç {benefit}.",
        "–î–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task} —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {method}. –î–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç {advantage} –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ—Å—Ç–∏—á—å {result}.",
        "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã {problem} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è {solution}. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–ª—É—á–∏—Ç—å {outcome} –∏ —É–ª—É—á—à–∏—Ç—å {metric}."
    ],
    "creative": [
        "–í –º–∏—Ä–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π {topic} –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ {element1} –∏ {element2}. –≠—Ç–æ —Å–æ–∑–¥–∞–µ—Ç {effect} –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è {application}.",
        "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–µ–±–µ –±—É–¥—É—â–µ–µ, –≥–¥–µ {concept} —Å—Ç–∞–Ω–µ—Ç –Ω–µ–æ—Ç—ä–µ–º–ª–µ–º–æ–π —á–∞—Å—Ç—å—é {domain}. –≠—Ç–æ –∏–∑–º–µ–Ω–∏—Ç {aspect} –∏ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ {consequence}.",
        "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∫ {subject} —Ç—Ä–µ–±—É–µ—Ç {quality} –∏ {skill}. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å—Ç–∞–Ω–µ—Ç {achievement}, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–≤–∑–æ–π–¥–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è."
    ],
    "educational": [
        "–ò–∑—É—á–µ–Ω–∏–µ {subject} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–æ–Ω–∏–º–∞–Ω–∏—è {foundation}. –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –≤–∫–ª—é—á–∞—é—Ç {concept1}, {concept2} –∏ {concept3}. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç {example}.",
        "–î–ª—è –æ—Å–≤–æ–µ–Ω–∏—è {skill} –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑—É—á–∏—Ç—å {theory} –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å {practice}. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–≤–∏—Ç—å {ability} –∏ –¥–æ—Å—Ç–∏—á—å {goal}.",
        "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≤ –æ–±–ª–∞—Å—Ç–∏ {field} —Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–∞ {methodology}. –°—Ç—É–¥–µ–Ω—Ç—ã –∏–∑—É—á–∞—é—Ç {topics} –∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç –∑–Ω–∞–Ω–∏—è –≤ {projects}."
    ]
}

@app.route('/api/gai/generate_text', methods=['POST'])
def generate_text():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
    try:
        data = request.get_json()
        prompt = data.get('prompt', '')
        text_type = data.get('type', 'general')
        length = data.get('length', 'medium')
        
        logger.info(f"ü§ñ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {prompt}")
        
        if not prompt:
            return jsonify({
                "error": "–ü—Ä–æ–º–ø—Ç –Ω–µ —É–∫–∞–∑–∞–Ω",
                "solution": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"
            }), 400
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if text_type == 'technical':
            generated_text = generate_technical_text(prompt, length)
        elif text_type == 'creative':
            generated_text = generate_creative_text(prompt, length)
        elif text_type == 'educational':
            generated_text = generate_educational_text(prompt, length)
        else:
            generated_text = generate_general_text(prompt, length)
        
        return jsonify({
            "module": "gai",
            "prompt": prompt,
            "type": text_type,
            "length": length,
            "generated_text": generated_text,
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ GAI: {e}")
        return jsonify({"error": str(e)}), 500

def generate_technical_text(prompt, length):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
        keywords = extract_keywords(prompt)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω
        template = random.choice(TEXT_TEMPLATES["technical"])
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω
        generated = template.format(
            topic=keywords.get('topic', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ'),
            principle=keywords.get('principle', '–æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏'),
            benefit=keywords.get('benefit', '–≤—ã—Å–æ–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'),
            task=keywords.get('task', '–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏'),
            method=keywords.get('method', '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'),
            advantage=keywords.get('advantage', '–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'),
            result=keywords.get('result', '–∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'),
            problem=keywords.get('problem', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã'),
            solution=keywords.get('solution', '–∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è'),
            outcome=keywords.get('outcome', '–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'),
            metric=keywords.get('metric', '–æ–±—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
        )
        
        # –†–∞—Å—à–∏—Ä—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã
        if length == 'long':
            generated += f"""

**–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:**

–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—è {keywords.get('topic', '–¥–∞–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É')} –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ, –º–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤:

1. **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è**: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {keywords.get('method', '–ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π')}, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç {keywords.get('benefit', '–≤—ã—Å–æ–∫—É—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å')}.

2. **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è**: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö {keywords.get('principle', '–º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏')}, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –∏–∑–º–µ–Ω—è—é—â–∏–º—Å—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.

3. **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏**: –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–Ω–µ—à–Ω–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è {keywords.get('advantage', '–≥–∏–±–∫–æ—Å—Ç—å –∏ —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å')}.

**–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**

–î–ª—è —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:
- –ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
- –í—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
- –û–±–µ—Å–ø–µ—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

*–¢–µ–∫—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é Rubin AI GAI Server*"""
        
        return generated
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {str(e)}"

def generate_creative_text(prompt, length):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    try:
        keywords = extract_keywords(prompt)
        
        template = random.choice(TEXT_TEMPLATES["creative"])
        
        generated = template.format(
            topic=keywords.get('topic', '–∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'),
            element1=keywords.get('element1', '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞'),
            element2=keywords.get('element2', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π'),
            effect=keywords.get('effect', '—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'),
            application=keywords.get('application', '—Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π'),
            concept=keywords.get('concept', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç'),
            domain=keywords.get('domain', '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏'),
            aspect=keywords.get('aspect', '—Å–ø–æ—Å–æ–± –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è'),
            consequence=keywords.get('consequence', '—Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º'),
            subject=keywords.get('subject', '—Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏'),
            quality=keywords.get('quality', '–≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è'),
            skill=keywords.get('skill', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π'),
            achievement=keywords.get('achievement', '—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ')
        )
        
        if length == 'long':
            generated += f"""

**–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –∏–¥–µ–∏:**

–ú–∏—Ä {keywords.get('topic', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π')} –ø–æ–ª–æ–Ω –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞. –ö–∞–∂–¥–∞—è –Ω–æ–≤–∞—è –∏–¥–µ—è –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –Ω–∞—á–∞–ª–æ–º {keywords.get('effect', '—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è')} –≤ –Ω–µ–∏–∑–≤–µ–¥–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏.

**–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—Ö–∞:**

–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, –∫–∞–∫ {keywords.get('concept', '–ø—Ä–æ—Å—Ç–∞—è –∏–¥–µ—è')} –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ {keywords.get('achievement', '—Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–µ')}. –≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ç—Ä–µ–±—É–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ {keywords.get('quality', '—Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è')}, –Ω–æ –∏ {keywords.get('skill', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã')}.

**–ë—É–¥—É—â–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã:**

–í –±–ª–∏–∂–∞–π—à–µ–º –±—É–¥—É—â–µ–º –º—ã —É–≤–∏–¥–∏–º, –∫–∞–∫ {keywords.get('domain', '—Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏')} –±—É–¥—É—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –±–ª–∞–≥–æ–¥–∞—Ä—è {keywords.get('application', '–∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º')}. –≠—Ç–æ –æ—Ç–∫—Ä–æ–µ—Ç –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –¥–ª—è {keywords.get('consequence', '—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è')}.

*–¢–µ–∫—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é Rubin AI GAI Server*"""
        
        return generated
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {str(e)}"

def generate_educational_text(prompt, length):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    try:
        keywords = extract_keywords(prompt)
        
        template = random.choice(TEXT_TEMPLATES["educational"])
        
        generated = template.format(
            subject=keywords.get('subject', '–Ω–æ–≤–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã'),
            foundation=keywords.get('foundation', '–±–∞–∑–æ–≤—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤'),
            concept1=keywords.get('concept1', '–æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏'),
            concept2=keywords.get('concept2', '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã'),
            concept3=keywords.get('concept3', '–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π'),
            example=keywords.get('example', '—Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã'),
            skill=keywords.get('skill', '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –Ω–∞–≤—ã–∫–∞'),
            theory=keywords.get('theory', '—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π –±–∞–∑—ã'),
            practice=keywords.get('practice', '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π'),
            ability=keywords.get('ability', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏'),
            goal=keywords.get('goal', '–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π'),
            field=keywords.get('field', '–≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏'),
            methodology=keywords.get('methodology', '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–∏–∫'),
            topics=keywords.get('topics', '–∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã'),
            projects=keywords.get('projects', '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö')
        )
        
        if length == 'long':
            generated += f"""

**–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω:**

1. **–í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–º–µ—Ç**: –ò–∑—É—á–µ–Ω–∏–µ {keywords.get('foundation', '–æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤')} –∏ {keywords.get('concept1', '–±–∞–∑–æ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π')}.

2. **–£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ**: –û—Å–≤–æ–µ–Ω–∏–µ {keywords.get('concept2', '–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç–æ–¥–æ–≤')} –∏ {keywords.get('concept3', '—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫')}.

3. **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ**: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è {keywords.get('projects', '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤')} —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π.

**–ú–µ—Ç–æ–¥—ã –æ–±—É—á–µ–Ω–∏—è:**

- **–õ–µ–∫—Ü–∏–∏**: –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑—É—á–µ–Ω–∏–µ {keywords.get('theory', '–æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π')}
- **–°–µ–º–∏–Ω–∞—Ä—ã**: –û–±—Å—É–∂–¥–µ–Ω–∏–µ {keywords.get('topics', '–∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º')} –∏ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á
- **–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã**: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ {keywords.get('practice', '–∏–∑—É—á–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤')}
- **–ü—Ä–æ–µ–∫—Ç—ã**: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ {keywords.get('example', '—Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π')}

**–û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**

–£—Å–ø–µ—à–Ω–æ–µ –æ—Å–≤–æ–µ–Ω–∏–µ {keywords.get('subject', '–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã')} –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
- –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å–Ω–æ–≤
- –£–º–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∑–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ
- –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ä–µ—à–∞—Ç—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏
- –ö–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤

*–¢–µ–∫—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é Rubin AI GAI Server*"""
        
        return generated
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {str(e)}"

def generate_general_text(prompt, length):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    try:
        keywords = extract_keywords(prompt)
        
        generated = f"""**–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:**

–í–∞—à –∑–∞–ø—Ä–æ—Å "{prompt}" –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ Rubin AI. 

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:**
- {keywords.get('topic1', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã')}
- {keywords.get('topic2', '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ')}
- {keywords.get('topic3', '–ë—É–¥—É—â–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã')}

**–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:**
1. –ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
2. –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
3. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è
4. –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç–µ:
- –¢–∏–ø —Ç–µ–∫—Å—Ç–∞ (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π, –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π)
- –ñ–µ–ª–∞–µ–º—É—é –¥–ª–∏–Ω—É (–∫–æ—Ä–æ—Ç–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –¥–ª–∏–Ω–Ω—ã–π)
- –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

*–¢–µ–∫—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é Rubin AI GAI Server*"""
        
        return generated
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞: {str(e)}"

def extract_keywords(prompt):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞"""
    # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    words = prompt.lower().split()
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    keywords = {}
    
    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    for word in words:
        if len(word) > 3:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
            keywords[f'topic{len(keywords)+1}'] = word
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    keywords.update({
        'topic': '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
        'principle': '–∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã',
        'benefit': '–≤—ã—Å–æ–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        'method': '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã',
        'advantage': '–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞',
        'result': '–∂–µ–ª–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'
    })
    
    return keywords

@app.route('/api/gai/summarize', methods=['POST'])
def summarize_text():
    """–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞"""
    try:
        data = request.get_json()
        text = data.get('text', '')
        summary_length = data.get('length', 'medium')
        
        logger.info(f"ü§ñ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞")
        
        if not text:
            return jsonify({
                "error": "–¢–µ–∫—Å—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω",
                "solution": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –∏–∑–ª–æ–∂–µ–Ω–∏—è"
            }), 400
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
        sentences = text.split('.')
        key_sentences = sentences[:3] if len(sentences) >= 3 else sentences
        
        summary = f"""**–ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ:**

{'. '.join(key_sentences)}.

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:**
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
- –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã

**–î–ª–∏–Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:** {len(text)} —Å–∏–º–≤–æ–ª–æ–≤
**–î–ª–∏–Ω–∞ –∫—Ä–∞—Ç–∫–æ–≥–æ –∏–∑–ª–æ–∂–µ–Ω–∏—è:** {len('. '.join(key_sentences))} —Å–∏–º–≤–æ–ª–æ–≤
**–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è:** {len('. '.join(key_sentences))/len(text)*100:.1f}%

*–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é Rubin AI GAI Server*"""
        
        return jsonify({
            "module": "gai",
            "action": "summarize",
            "original_length": len(text),
            "summary_length": len(summary),
            "summary": summary,
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/api/health', methods=['GET'])
@app.route('/api/gai/health', methods=['GET'])
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "service": "gai",
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0",
        "capabilities": [
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞",
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞",
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞",
            "–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞",
            "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤",
            "–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç–∏–ª—è —Ç–µ–∫—Å—Ç–∞"
        ],
        "templates_available": len(TEXT_TEMPLATES)
    })

if __name__ == "__main__":
    print("ü§ñ GAI Server –∑–∞–ø—É—â–µ–Ω")
    print("URL: http://localhost:8104")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    print("  - POST /api/gai/generate_text - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞")
    print("  - POST /api/gai/summarize - —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞")
    print("  - GET /api/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    app.run(host='0.0.0.0', port=8104, debug=False)
