#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Arduino Nano Programming Database –¥–ª—è Rubin AI v2
–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é Arduino Nano
"""

import sqlite3
import json
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ArduinoNanoDatabase:
    """–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π –ø–æ Arduino Nano"""
    
    def __init__(self, db_path: str = "rubin_arduino_nano.db"):
        self.db_path = db_path
        self.connection = None
        self._initialize_database()
        
        logger.info(f"üîß Arduino Nano Database –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {db_path}")
    
    def _initialize_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.connection = sqlite3.connect(self.db_path)
            self.connection.row_factory = sqlite3.Row
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            self._create_tables()
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            self._populate_arduino_data()
            
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Arduino Nano –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def _create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        cursor = self.connection.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π Arduino
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS arduino_categories (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE NOT NULL,
                description TEXT,
                keywords TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–Ω–∞–Ω–∏–π –ø–æ Arduino
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS arduino_knowledge (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                category_id INTEGER,
                title TEXT NOT NULL,
                content TEXT NOT NULL,
                code_example TEXT,
                pinout_info TEXT,
                keywords TEXT,
                difficulty_level INTEGER DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (category_id) REFERENCES arduino_categories (id)
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ñ—É–Ω–∫—Ü–∏–π Arduino
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS arduino_functions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                function_name TEXT NOT NULL,
                description TEXT NOT NULL,
                syntax TEXT NOT NULL,
                parameters TEXT,
                return_value TEXT,
                example_code TEXT,
                category TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ Arduino
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS arduino_libraries (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                library_name TEXT NOT NULL,
                description TEXT NOT NULL,
                installation TEXT,
                usage_example TEXT,
                functions_list TEXT,
                category TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ Arduino
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS arduino_projects (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                project_name TEXT NOT NULL,
                description TEXT NOT NULL,
                components TEXT,
                code TEXT NOT NULL,
                circuit_diagram TEXT,
                difficulty_level INTEGER DEFAULT 1,
                category TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–∏–Ω–æ–≤ Arduino Nano
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS arduino_pins (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                pin_number INTEGER NOT NULL,
                pin_type TEXT NOT NULL,
                description TEXT,
                voltage_level TEXT,
                max_current TEXT,
                special_functions TEXT,
                usage_examples TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ—à–∏–±–æ–∫ –∏ —Ä–µ—à–µ–Ω–∏–π
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS arduino_troubleshooting (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                error_description TEXT NOT NULL,
                possible_causes TEXT,
                solutions TEXT,
                prevention_tips TEXT,
                category TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        self.connection.commit()
        logger.info("üìä –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Arduino Nano —Å–æ–∑–¥–∞–Ω—ã")
    
    def _populate_arduino_data(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏—è–º–∏ –ø–æ Arduino Nano"""
        cursor = self.connection.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute("SELECT COUNT(*) FROM arduino_categories")
        if cursor.fetchone()[0] > 0:
            logger.info("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Arduino —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ")
            return
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ Arduino
        categories = [
            ("basics", "–û—Å–Ω–æ–≤—ã Arduino Nano", "–æ—Å–Ω–æ–≤—ã,–Ω–∞—Å—Ç—Ä–æ–π–∫–∞,–ø–µ—Ä–≤—ã–π,—Å–∫–µ—Ç—á,–ø—Ä–æ–≥—Ä–∞–º–º–∞"),
            ("digital_io", "–¶–∏—Ñ—Ä–æ–≤—ã–µ –≤—Ö–æ–¥—ã –∏ –≤—ã—Ö–æ–¥—ã", "digital,pinMode,digitalWrite,digitalRead,–ø–∏–Ω,–≤—Ö–æ–¥,–≤—ã—Ö–æ–¥"),
            ("analog_io", "–ê–Ω–∞–ª–æ–≥–æ–≤—ã–µ –≤—Ö–æ–¥—ã –∏ –≤—ã—Ö–æ–¥—ã", "analog,analogRead,analogWrite,PWM,–∞–Ω–∞–ª–æ–≥,—Å–∏–≥–Ω–∞–ª"),
            ("communication", "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è", "serial,SPI,I2C,Wire,–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è,–ø–µ—Ä–µ–¥–∞—á–∞,–¥–∞–Ω–Ω—ã—Ö"),
            ("sensors", "–î–∞—Ç—á–∏–∫–∏", "–¥–∞—Ç—á–∏–∫,sensor,—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞,–≤–ª–∞–∂–Ω–æ—Å—Ç—å,—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ,–¥–≤–∏–∂–µ–Ω–∏–µ"),
            ("actuators", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "–º–æ—Ç–æ—Ä,—Å–µ—Ä–≤–æ,—Ä–µ–ª–µ,—Å–≤–µ—Ç–æ–¥–∏–æ–¥,–∑–≤—É–∫,–ø—Ä–∏–≤–æ–¥"),
            ("timing", "–¢–∞–π–º–µ—Ä—ã –∏ –∑–∞–¥–µ—Ä–∂–∫–∏", "delay,millis,micros,—Ç–∞–π–º–µ—Ä,–≤—Ä–µ–º—è,–∑–∞–¥–µ—Ä–∂–∫–∞"),
            ("interrupts", "–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏—è", "interrupt,attachInterrupt,detachInterrupt,–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ"),
            ("memory", "–ü–∞–º—è—Ç—å –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ", "EEPROM,–ø–∞–º—è—Ç—å,—Ö—Ä–∞–Ω–µ–Ω–∏–µ,–¥–∞–Ω–Ω—ã–µ,—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"),
            ("power", "–ü–∏—Ç–∞–Ω–∏–µ –∏ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ", "–ø–∏—Ç–∞–Ω–∏–µ,power,—ç–Ω–µ—Ä–≥–∏—è,–±–∞—Ç–∞—Ä–µ—è,USB,–ø–∏—Ç–∞–Ω–∏–µ"),
            ("libraries", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏", "–±–∏–±–ª–∏–æ—Ç–µ–∫–∞,library,–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ,—É—Å—Ç–∞–Ω–æ–≤–∫–∞,—Ñ—É–Ω–∫—Ü–∏–∏"),
            ("projects", "–ü—Ä–æ–µ–∫—Ç—ã", "–ø—Ä–æ–µ–∫—Ç,–ø—Ä–∏–º–µ—Ä,—Å—Ö–µ–º–∞,—Å–±–æ—Ä–∫–∞,–≥–æ—Ç–æ–≤—ã–π,–∫–æ–¥")
        ]
        
        for name, description, keywords in categories:
            cursor.execute("""
                INSERT INTO arduino_categories (name, description, keywords)
                VALUES (?, ?, ?)
            """, (name, description, keywords))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –ø–æ Arduino Nano
        knowledge_data = [
            # –û—Å–Ω–æ–≤—ã
            (1, "Arduino Nano - –æ–±–∑–æ—Ä", 
             """Arduino Nano - —ç—Ç–æ –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –Ω–∞ –±–∞–∑–µ ATmega328P.

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
- –ú–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä: ATmega328P
- –†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ: 5V
- –ü–∏—Ç–∞–Ω–∏–µ: USB –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ 7-12V
- –¶–∏—Ñ—Ä–æ–≤—ã–µ –ø–∏–Ω—ã: 14 (6 —Å PWM)
- –ê–Ω–∞–ª–æ–≥–æ–≤—ã–µ –ø–∏–Ω—ã: 8
- Flash –ø–∞–º—è—Ç—å: 32KB
- SRAM: 2KB
- EEPROM: 1KB
- –¢–∞–∫—Ç–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞: 16MHz

**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
- –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä (18x45mm)
- –ù–∏–∑–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
- –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- –ë–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
- –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –±–∏–±–ª–∏–æ—Ç–µ–∫""",
             """// –ë–∞–∑–æ–≤—ã–π —Å–∫–µ—Ç—á - –º–∏–≥–∞–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞
void setup() {
  pinMode(LED_BUILTIN, OUTPUT);
}

void loop() {
  digitalWrite(LED_BUILTIN, HIGH);
  delay(1000);
  digitalWrite(LED_BUILTIN, LOW);
  delay(1000);
}""",
             "D1-D13: —Ü–∏—Ñ—Ä–æ–≤—ã–µ –ø–∏–Ω—ã, A0-A7: –∞–Ω–∞–ª–æ–≥–æ–≤—ã–µ –ø–∏–Ω—ã, VCC: 5V, GND: –∑–µ–º–ª—è",
             "arduino,nano,–º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä,ATmega328P,–ø–ª–∞—Ç–∞,—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
             1),
            
            # –¶–∏—Ñ—Ä–æ–≤—ã–µ –ø–∏–Ω—ã
            (2, "–¶–∏—Ñ—Ä–æ–≤—ã–µ –ø–∏–Ω—ã Arduino Nano",
             """Arduino Nano –∏–º–µ–µ—Ç 14 —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø–∏–Ω–æ–≤ (D0-D13).

**–§—É–Ω–∫—Ü–∏–∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø–∏–Ω–æ–≤:**
- –í—Ö–æ–¥/–≤—ã—Ö–æ–¥: –≤—Å–µ –ø–∏–Ω—ã –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –≤—Ö–æ–¥—ã –∏–ª–∏ –≤—ã—Ö–æ–¥—ã
- PWM: –ø–∏–Ω—ã D3, D5, D6, D9, D10, D11 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –®–ò–ú
- –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: –ø–∏–Ω—ã D2 –∏ D3 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –≤–Ω–µ—à–Ω–∏–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
- Serial: –ø–∏–Ω—ã D0 (RX) –∏ D1 (TX) –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —Å–≤—è–∑–∏

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
- pinMode(pin, mode) - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–∏–Ω–∞
- digitalWrite(pin, value) - –∑–∞–ø–∏—Å—å —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
- digitalRead(pin) - —á—Ç–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è""",
             """// –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å —Ü–∏—Ñ—Ä–æ–≤—ã–º–∏ –ø–∏–Ω–∞–º–∏
void setup() {
  pinMode(13, OUTPUT);    // –ü–∏–Ω 13 –∫–∞–∫ –≤—ã—Ö–æ–¥
  pinMode(2, INPUT);      // –ü–∏–Ω 2 –∫–∞–∫ –≤—Ö–æ–¥
}

void loop() {
  // –ß–∏—Ç–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –ø–∏–Ω–µ 2
  int buttonState = digitalRead(2);
  
  // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞, –≤–∫–ª—é—á–∞–µ–º —Å–≤–µ—Ç–æ–¥–∏–æ–¥
  if (buttonState == HIGH) {
    digitalWrite(13, HIGH);
  } else {
    digitalWrite(13, LOW);
  }
}""",
             "D0-D13: —Ü–∏—Ñ—Ä–æ–≤—ã–µ –ø–∏–Ω—ã, D3,D5,D6,D9,D10,D11: PWM, D2,D3: –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è",
             "—Ü–∏—Ñ—Ä–æ–≤–æ–π,–ø–∏–Ω,pinMode,digitalWrite,digitalRead,PWM,–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ",
             1),
            
            # –ê–Ω–∞–ª–æ–≥–æ–≤—ã–µ –ø–∏–Ω—ã
            (3, "–ê–Ω–∞–ª–æ–≥–æ–≤—ã–µ –ø–∏–Ω—ã Arduino Nano",
             """Arduino Nano –∏–º–µ–µ—Ç 8 –∞–Ω–∞–ª–æ–≥–æ–≤—ã—Ö –ø–∏–Ω–æ–≤ (A0-A7).

**–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–Ω–∞–ª–æ–≥–æ–≤—ã—Ö –ø–∏–Ω–æ–≤:**
- –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 10 –±–∏—Ç (0-1023)
- –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: 0-5V
- –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: 100 –ú–û–º
- –í—Ä–µ–º—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: ~100 –º–∫—Å

**–§—É–Ω–∫—Ü–∏–∏:**
- analogRead(pin) - —á—Ç–µ–Ω–∏–µ –∞–Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
- analogReference(type) - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø–æ—Ä–Ω–æ–≥–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
- –ü–æ—Ç–µ–Ω—Ü–∏–æ–º–µ—Ç—Ä—ã
- –î–∞—Ç—á–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
- –î–∞—Ç—á–∏–∫–∏ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏
- –î–∞—Ç—á–∏–∫–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è""",
             """// –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –∞–Ω–∞–ª–æ–≥–æ–≤—ã–º–∏ –ø–∏–Ω–∞–º–∏
void setup() {
  Serial.begin(9600);
}

void loop() {
  // –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å –ø–æ—Ç–µ–Ω—Ü–∏–æ–º–µ—Ç—Ä–∞ –Ω–∞ –ø–∏–Ω–µ A0
  int sensorValue = analogRead(A0);
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ (0-5V)
  float voltage = sensorValue * (5.0 / 1023.0);
  
  // –í—ã–≤–æ–¥–∏–º –≤ Serial Monitor
  Serial.print("–ó–Ω–∞—á–µ–Ω–∏–µ: ");
  Serial.print(sensorValue);
  Serial.print(", –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: ");
  Serial.println(voltage);
  
  delay(100);
}""",
             "A0-A7: –∞–Ω–∞–ª–æ–≥–æ–≤—ã–µ –ø–∏–Ω—ã, 10 –±–∏—Ç, 0-1023, 0-5V",
             "–∞–Ω–∞–ª–æ–≥–æ–≤—ã–π,analogRead,–ø–æ—Ç–µ–Ω—Ü–∏–æ–º–µ—Ç—Ä,–¥–∞—Ç—á–∏–∫,–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ,—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ",
             1),
            
            # PWM
            (4, "–®–ò–ú (PWM) –Ω–∞ Arduino Nano",
             """PWM (Pulse Width Modulation) - —à–∏—Ä–æ—Ç–Ω–æ-–∏–º–ø—É–ª—å—Å–Ω–∞—è –º–æ–¥—É–ª—è—Ü–∏—è.

**–ü–∏–Ω—ã —Å PWM –Ω–∞ Arduino Nano:**
- D3, D5, D6, D9, D10, D11
- –ß–∞—Å—Ç–æ—Ç–∞: ~490 –ì—Ü (D5, D6: ~980 –ì—Ü)
- –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 8 –±–∏—Ç (0-255)

**–§—É–Ω–∫—Ü–∏—è analogWrite():**
- analogWrite(pin, value) - –≥–¥–µ value –æ—Ç 0 –¥–æ 255
- 0 = 0% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (0V)
- 127 = 50% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (~2.5V)
- 255 = 100% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (5V)

**–ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è:**
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç—å—é —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–≤
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å—é –º–æ—Ç–æ—Ä–æ–≤
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–≤—É–∫–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞–º–∏""",
             """// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PWM
void setup() {
  pinMode(9, OUTPUT);  // PWM –ø–∏–Ω
}

void loop() {
  // –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞
  for (int brightness = 0; brightness <= 255; brightness++) {
    analogWrite(9, brightness);
    delay(10);
  }
  
  for (int brightness = 255; brightness >= 0; brightness--) {
    analogWrite(9, brightness);
    delay(10);
  }
}""",
             "D3,D5,D6,D9,D10,D11: PWM –ø–∏–Ω—ã, 8 –±–∏—Ç, 0-255, ~490 –ì—Ü",
             "PWM,analogWrite,–®–ò–ú,–º–æ–¥—É–ª—è—Ü–∏—è,—è—Ä–∫–æ—Å—Ç—å,–º–æ—Ç–æ—Ä,—Å–µ—Ä–≤–æ",
             2),
            
            # Serial
            (5, "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å–≤—è–∑—å (Serial)",
             """Arduino Nano –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é —Å–≤—è–∑—å —á–µ—Ä–µ–∑ USB.

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
- Serial.begin(speed) - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
- Serial.print() - –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
- Serial.println() - –≤—ã–≤–æ–¥ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º —Å—Ç—Ä–æ–∫–∏
- Serial.available() - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
- Serial.read() - —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

**–°–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏:**
- 300, 600, 1200, 2400, 4800, 9600, 14400, 19200, 28800, 38400, 57600, 115200

**–ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è:**
- –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º
- –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Arduino —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö""",
             """// –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å Serial
void setup() {
  Serial.begin(9600);
  Serial.println("Arduino Nano –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");
}

void loop() {
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  Serial.print("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ");
  Serial.print(millis() / 1000);
  Serial.println(" —Å–µ–∫—É–Ω–¥");
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
  if (Serial.available() > 0) {
    String command = Serial.readString();
    Serial.print("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: ");
    Serial.println(command);
  }
  
  delay(1000);
}""",
             "D0: RX, D1: TX, USB, 9600, 115200",
             "Serial,–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è,—Å–≤—è–∑—å,USB,–æ—Ç–ª–∞–¥–∫–∞,–¥–∞–Ω–Ω—ã–µ,–∫–æ–º–∞–Ω–¥–∞",
             1)
        ]
        
        for category_id, title, content, code_example, pinout_info, keywords, difficulty in knowledge_data:
            cursor.execute("""
                INSERT INTO arduino_knowledge 
                (category_id, title, content, code_example, pinout_info, keywords, difficulty_level)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (category_id, title, content, code_example, pinout_info, keywords, difficulty))
        
        # –§—É–Ω–∫—Ü–∏–∏ Arduino
        functions_data = [
            ("pinMode", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–∏–Ω–∞", "pinMode(pin, mode)", 
             "pin: –Ω–æ–º–µ—Ä –ø–∏–Ω–∞, mode: INPUT, OUTPUT, INPUT_PULLUP",
             "void", 
             """void setup() {
  pinMode(13, OUTPUT);
  pinMode(2, INPUT_PULLUP);
}""", "basics"),
            
            ("digitalWrite", "–ó–∞–ø–∏—Å—å —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è", "digitalWrite(pin, value)",
             "pin: –Ω–æ–º–µ—Ä –ø–∏–Ω–∞, value: HIGH –∏–ª–∏ LOW",
             "void",
             """void loop() {
  digitalWrite(13, HIGH);
  delay(1000);
  digitalWrite(13, LOW);
  delay(1000);
}""", "digital_io"),
            
            ("digitalRead", "–ß—Ç–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è", "digitalRead(pin)",
             "pin: –Ω–æ–º–µ—Ä –ø–∏–Ω–∞",
             "int",
             """void loop() {
  int buttonState = digitalRead(2);
  if (buttonState == HIGH) {
    // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞
  }
}""", "digital_io"),
            
            ("analogRead", "–ß—Ç–µ–Ω–∏–µ –∞–Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è", "analogRead(pin)",
             "pin: –Ω–æ–º–µ—Ä –∞–Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –ø–∏–Ω–∞ (A0-A7)",
             "int",
             """void loop() {
  int sensorValue = analogRead(A0);
  Serial.println(sensorValue);
}""", "analog_io"),
            
            ("analogWrite", "–ó–∞–ø–∏—Å—å PWM –∑–Ω–∞—á–µ–Ω–∏—è", "analogWrite(pin, value)",
             "pin: PWM –ø–∏–Ω, value: 0-255",
             "void",
             """void loop() {
  analogWrite(9, 128);  // 50% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
}""", "analog_io"),
            
            ("delay", "–ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö", "delay(ms)",
             "ms: –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö",
             "void",
             """void loop() {
  digitalWrite(13, HIGH);
  delay(1000);  // 1 —Å–µ–∫—É–Ω–¥–∞
  digitalWrite(13, LOW);
  delay(1000);
}""", "timing"),
            
            ("millis", "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö", "millis()",
             "–ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
             "unsigned long",
             """void loop() {
  unsigned long currentTime = millis();
  Serial.println(currentTime);
}""", "timing"),
            
            ("Serial.begin", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —Å–≤—è–∑–∏", "Serial.begin(speed)",
             "speed: —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ (9600, 115200 –∏ —Ç.–¥.)",
             "void",
             """void setup() {
  Serial.begin(9600);
}""", "communication"),
            
            ("Serial.print", "–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö", "Serial.print(data)",
             "data: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞",
             "size_t",
             """void loop() {
  Serial.print("Hello ");
  Serial.print(42);
  Serial.println(" World!");
}""", "communication")
        ]
        
        for func_name, description, syntax, parameters, return_value, example_code, category in functions_data:
            cursor.execute("""
                INSERT INTO arduino_functions 
                (function_name, description, syntax, parameters, return_value, example_code, category)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (func_name, description, syntax, parameters, return_value, example_code, category))
        
        # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ Arduino
        libraries_data = [
            ("Servo", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞–º–∏", 
             "–°–∫–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ Library Manager –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é",
             """#include <Servo.h>
Servo myServo;

void setup() {
  myServo.attach(9);
}

void loop() {
  myServo.write(90);
  delay(1000);
  myServo.write(0);
  delay(1000);
}""",
             "attach(), write(), read(), detach()", "actuators"),
            
            ("Wire", "I2C –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è",
             "–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞",
             """#include <Wire.h>

void setup() {
  Wire.begin();
  Wire.beginTransmission(0x48);
  Wire.write(0x00);
  Wire.endTransmission();
}

void loop() {
  Wire.requestFrom(0x48, 2);
  while (Wire.available()) {
    byte data = Wire.read();
    Serial.println(data);
  }
  delay(1000);
}""",
             "begin(), beginTransmission(), write(), read(), endTransmission()", "communication"),
            
            ("EEPROM", "–†–∞–±–æ—Ç–∞ —Å —ç–Ω–µ—Ä–≥–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π –ø–∞–º—è—Ç—å—é",
             "–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞",
             """#include <EEPROM.h>

void setup() {
  EEPROM.write(0, 42);
  int value = EEPROM.read(0);
  Serial.println(value);
}

void loop() {
  // –ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã
}""",
             "read(), write(), update(), get(), put()", "memory"),
            
            ("SPI", "SPI –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è",
             "–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞",
             """#include <SPI.h>

void setup() {
  SPI.begin();
  digitalWrite(SS, HIGH);
}

void loop() {
  digitalWrite(SS, LOW);
  SPI.transfer(0x01);
  digitalWrite(SS, HIGH);
  delay(1000);
}""",
             "begin(), transfer(), setBitOrder(), setDataMode(), setClockDivider()", "communication")
        ]
        
        for lib_name, description, installation, usage_example, functions_list, category in libraries_data:
            cursor.execute("""
                INSERT INTO arduino_libraries 
                (library_name, description, installation, usage_example, functions_list, category)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (lib_name, description, installation, usage_example, functions_list, category))
        
        # –ü—Ä–æ–µ–∫—Ç—ã Arduino
        projects_data = [
            ("–ú–∏–≥–∞—é—â–∏–π —Å–≤–µ—Ç–æ–¥–∏–æ–¥", "–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç - –º–∏–≥–∞–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞",
             "Arduino Nano, USB –∫–∞–±–µ–ª—å",
             """void setup() {
  pinMode(LED_BUILTIN, OUTPUT);
}

void loop() {
  digitalWrite(LED_BUILTIN, HIGH);
  delay(1000);
  digitalWrite(LED_BUILTIN, LOW);
  delay(1000);
}""",
             "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Arduino Nano –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É —á–µ—Ä–µ–∑ USB", 1, "basics"),
            
            ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç—å—é —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞", "–ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é PWM",
             "Arduino Nano, —Å–≤–µ—Ç–æ–¥–∏–æ–¥, —Ä–µ–∑–∏—Å—Ç–æ—Ä 220 –û–º, –ø—Ä–æ–≤–æ–¥–∞",
             """void setup() {
  pinMode(9, OUTPUT);
}

void loop() {
  for (int brightness = 0; brightness <= 255; brightness++) {
    analogWrite(9, brightness);
    delay(10);
  }
  for (int brightness = 255; brightness >= 0; brightness--) {
    analogWrite(9, brightness);
    delay(10);
  }
}""",
             "–°–≤–µ—Ç–æ–¥–∏–æ–¥ –∫ –ø–∏–Ω—É 9 —á–µ—Ä–µ–∑ —Ä–µ–∑–∏—Å—Ç–æ—Ä 220 –û–º", 2, "analog_io"),
            
            ("–î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã LM35", "–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å –ø–æ–º–æ—â—å—é LM35",
             "Arduino Nano, –¥–∞—Ç—á–∏–∫ LM35, –ø—Ä–æ–≤–æ–¥–∞",
             """void setup() {
  Serial.begin(9600);
}

void loop() {
  int sensorValue = analogRead(A0);
  float voltage = sensorValue * (5.0 / 1023.0);
  float temperature = voltage * 100;  // LM35: 10mV/¬∞C
  
  Serial.print("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ");
  Serial.print(temperature);
  Serial.println(" ¬∞C");
  
  delay(1000);
}""",
             "LM35: VCC –∫ 5V, GND –∫ GND, OUT –∫ A0", 2, "sensors"),
            
            ("–°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–æ–º",
             "Arduino Nano, —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥ SG90, –ø—Ä–æ–≤–æ–¥–∞",
             """#include <Servo.h>
Servo myServo;

void setup() {
  myServo.attach(9);
}

void loop() {
  myServo.write(0);
  delay(1000);
  myServo.write(90);
  delay(1000);
  myServo.write(180);
  delay(1000);
}""",
             "–°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥: VCC –∫ 5V, GND –∫ GND, Signal –∫ –ø–∏–Ω—É 9", 2, "actuators")
        ]
        
        for project_name, description, components, code, circuit_diagram, difficulty_level, category in projects_data:
            cursor.execute("""
                INSERT INTO arduino_projects 
                (project_name, description, components, code, circuit_diagram, difficulty_level, category)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (project_name, description, components, code, circuit_diagram, difficulty_level, category))
        
        # –ü–∏–Ω—ã Arduino Nano
        pins_data = [
            (0, "Digital", "RX - –ø—Ä–∏–µ–º –¥–∞–Ω–Ω—ã—Ö", "0-5V", "40mA", "Serial RX", "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å–≤—è–∑—å"),
            (1, "Digital", "TX - –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö", "0-5V", "40mA", "Serial TX", "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å–≤—è–∑—å"),
            (2, "Digital", "–¶–∏—Ñ—Ä–æ–≤–æ–π –ø–∏–Ω", "0-5V", "40mA", "External Interrupt", "–ö–Ω–æ–ø–∫–∏, –¥–∞—Ç—á–∏–∫–∏"),
            (3, "Digital", "–¶–∏—Ñ—Ä–æ–≤–æ–π –ø–∏–Ω —Å PWM", "0-5V", "40mA", "PWM, External Interrupt", "–°–≤–µ—Ç–æ–¥–∏–æ–¥—ã, –º–æ—Ç–æ—Ä—ã"),
            (4, "Digital", "–¶–∏—Ñ—Ä–æ–≤–æ–π –ø–∏–Ω", "0-5V", "40mA", "None", "–û–±—â–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"),
            (5, "Digital", "–¶–∏—Ñ—Ä–æ–≤–æ–π –ø–∏–Ω —Å PWM", "0-5V", "40mA", "PWM", "–°–≤–µ—Ç–æ–¥–∏–æ–¥—ã, –º–æ—Ç–æ—Ä—ã"),
            (6, "Digital", "–¶–∏—Ñ—Ä–æ–≤–æ–π –ø–∏–Ω —Å PWM", "0-5V", "40mA", "PWM", "–°–≤–µ—Ç–æ–¥–∏–æ–¥—ã, –º–æ—Ç–æ—Ä—ã"),
            (7, "Digital", "–¶–∏—Ñ—Ä–æ–≤–æ–π –ø–∏–Ω", "0-5V", "40mA", "None", "–û–±—â–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"),
            (8, "Digital", "–¶–∏—Ñ—Ä–æ–≤–æ–π –ø–∏–Ω", "0-5V", "40mA", "None", "–û–±—â–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"),
            (9, "Digital", "–¶–∏—Ñ—Ä–æ–≤–æ–π –ø–∏–Ω —Å PWM", "0-5V", "40mA", "PWM", "–°–≤–µ—Ç–æ–¥–∏–æ–¥—ã, –º–æ—Ç–æ—Ä—ã, —Å–µ—Ä–≤–æ"),
            (10, "Digital", "–¶–∏—Ñ—Ä–æ–≤–æ–π –ø–∏–Ω —Å PWM", "0-5V", "40mA", "PWM", "–°–≤–µ—Ç–æ–¥–∏–æ–¥—ã, –º–æ—Ç–æ—Ä—ã"),
            (11, "Digital", "–¶–∏—Ñ—Ä–æ–≤–æ–π –ø–∏–Ω —Å PWM", "0-5V", "40mA", "PWM", "–°–≤–µ—Ç–æ–¥–∏–æ–¥—ã, –º–æ—Ç–æ—Ä—ã"),
            (12, "Digital", "–¶–∏—Ñ—Ä–æ–≤–æ–π –ø–∏–Ω", "0-5V", "40mA", "None", "–û–±—â–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"),
            (13, "Digital", "–¶–∏—Ñ—Ä–æ–≤–æ–π –ø–∏–Ω", "0-5V", "40mA", "Built-in LED", "–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–æ–¥–∏–æ–¥"),
            (14, "Analog", "–ê–Ω–∞–ª–æ–≥–æ–≤—ã–π –ø–∏–Ω A0", "0-5V", "100 –ú–û–º", "ADC", "–ü–æ—Ç–µ–Ω—Ü–∏–æ–º–µ—Ç—Ä—ã, –¥–∞—Ç—á–∏–∫–∏"),
            (15, "Analog", "–ê–Ω–∞–ª–æ–≥–æ–≤—ã–π –ø–∏–Ω A1", "0-5V", "100 –ú–û–º", "ADC", "–ü–æ—Ç–µ–Ω—Ü–∏–æ–º–µ—Ç—Ä—ã, –¥–∞—Ç—á–∏–∫–∏"),
            (16, "Analog", "–ê–Ω–∞–ª–æ–≥–æ–≤—ã–π –ø–∏–Ω A2", "0-5V", "100 –ú–û–º", "ADC", "–ü–æ—Ç–µ–Ω—Ü–∏–æ–º–µ—Ç—Ä—ã, –¥–∞—Ç—á–∏–∫–∏"),
            (17, "Analog", "–ê–Ω–∞–ª–æ–≥–æ–≤—ã–π –ø–∏–Ω A3", "0-5V", "100 –ú–û–º", "ADC", "–ü–æ—Ç–µ–Ω—Ü–∏–æ–º–µ—Ç—Ä—ã, –¥–∞—Ç—á–∏–∫–∏"),
            (18, "Analog", "–ê–Ω–∞–ª–æ–≥–æ–≤—ã–π –ø–∏–Ω A4", "0-5V", "100 –ú–û–º", "ADC, I2C SDA", "–î–∞—Ç—á–∏–∫–∏, I2C"),
            (19, "Analog", "–ê–Ω–∞–ª–æ–≥–æ–≤—ã–π –ø–∏–Ω A5", "0-5V", "100 –ú–û–º", "ADC, I2C SCL", "–î–∞—Ç—á–∏–∫–∏, I2C"),
            (20, "Analog", "–ê–Ω–∞–ª–æ–≥–æ–≤—ã–π –ø–∏–Ω A6", "0-5V", "100 –ú–û–º", "ADC", "–ü–æ—Ç–µ–Ω—Ü–∏–æ–º–µ—Ç—Ä—ã, –¥–∞—Ç—á–∏–∫–∏"),
            (21, "Analog", "–ê–Ω–∞–ª–æ–≥–æ–≤—ã–π –ø–∏–Ω A7", "0-5V", "100 –ú–û–º", "ADC", "–ü–æ—Ç–µ–Ω—Ü–∏–æ–º–µ—Ç—Ä—ã, –¥–∞—Ç—á–∏–∫–∏")
        ]
        
        for pin_number, pin_type, description, voltage_level, max_current, special_functions, usage_examples in pins_data:
            cursor.execute("""
                INSERT INTO arduino_pins 
                (pin_number, pin_type, description, voltage_level, max_current, special_functions, usage_examples)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (pin_number, pin_type, description, voltage_level, max_current, special_functions, usage_examples))
        
        # –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
        troubleshooting_data = [
            ("Arduino –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º",
             "–ü—Ä–æ–±–ª–µ–º—ã —Å –¥—Ä–∞–π–≤–µ—Ä–∞–º–∏, –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω—ã–π USB –∫–∞–±–µ–ª—å, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç",
             "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä–∞–π–≤–µ—Ä—ã CH340 –∏–ª–∏ CP2102\n2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π USB –∫–∞–±–µ–ª—å\n3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä—Ç–∞ –≤ IDE\n4. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ Arduino",
             "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ USB –∫–∞–±–µ–ª–∏, –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –¥—Ä–∞–π–≤–µ—Ä—ã", "basics"),
            
            ("–°–∫–µ—Ç—á –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è",
             "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç, –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–º, –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å",
             "1. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç (Tools > Port)\n2. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–ª–∞—Ç—É (Tools > Board)\n3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É Reset –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π\n4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
             "–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä—Ç–∞ –∏ –ø–ª–∞—Ç—ã", "basics"),
            
            ("–°–≤–µ—Ç–æ–¥–∏–æ–¥ –Ω–µ –º–∏–≥–∞–µ—Ç",
             "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω—ã–π —Å–≤–µ—Ç–æ–¥–∏–æ–¥, –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–æ–º",
             "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—è—Ä–Ω–æ—Å—Ç—å —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞\n2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∏–Ω–∞\n3. –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä 220 –û–º\n4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –Ω–∞ –æ—à–∏–±–∫–∏",
             "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ç–æ–∫–∞", "digital_io"),
            
            ("–ê–Ω–∞–ª–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã",
             "–ü–æ–º–µ—Ö–∏, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ, –ø–ª–æ—Ö–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
             "1. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä 100nF –∫ –∞–Ω–∞–ª–æ–≥–æ–≤–æ–º—É –ø–∏–Ω—É\n2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ\n3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π\n4. –î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –≤ –∫–æ–¥–µ",
             "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤", "analog_io"),
            
            ("PWM –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
             "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∏–Ω, –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–æ–º, –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å",
             "1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ PWM –ø–∏–Ω (3,5,6,9,10,11)\n2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å analogWrite()\n3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π (0-255)\n4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏",
             "–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ, —á—Ç–æ –ø–∏–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç PWM", "analog_io")
        ]
        
        for error_description, possible_causes, solutions, prevention_tips, category in troubleshooting_data:
            cursor.execute("""
                INSERT INTO arduino_troubleshooting 
                (error_description, possible_causes, solutions, prevention_tips, category)
                VALUES (?, ?, ?, ?, ?)
            """, (error_description, possible_causes, solutions, prevention_tips, category))
        
        self.connection.commit()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Arduino Nano –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏")
    
    def search_knowledge(self, query: str, category: Optional[str] = None) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –∑–Ω–∞–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        cursor = self.connection.cursor()
        
        if category:
            cursor.execute("""
                SELECT ak.*, ac.name as category_name
                FROM arduino_knowledge ak
                JOIN arduino_categories ac ON ak.category_id = ac.id
                WHERE ac.name = ? AND (
                    ak.title LIKE ? OR 
                    ak.content LIKE ? OR 
                    ak.keywords LIKE ?
                )
                ORDER BY ak.difficulty_level
            """, (category, f"%{query}%", f"%{query}%", f"%{query}%"))
        else:
            cursor.execute("""
                SELECT ak.*, ac.name as category_name
                FROM arduino_knowledge ak
                JOIN arduino_categories ac ON ak.category_id = ac.id
                WHERE ak.title LIKE ? OR 
                      ak.content LIKE ? OR 
                      ak.keywords LIKE ?
                ORDER BY ak.difficulty_level
            """, (f"%{query}%", f"%{query}%", f"%{query}%"))
        
        results = []
        for row in cursor.fetchall():
            results.append(dict(row))
        
        return results
    
    def get_function_info(self, function_name: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ—É–Ω–∫—Ü–∏–∏"""
        cursor = self.connection.cursor()
        cursor.execute("""
            SELECT * FROM arduino_functions 
            WHERE function_name = ?
        """, (function_name,))
        
        row = cursor.fetchone()
        return dict(row) if row else None
    
    def get_library_info(self, library_name: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ"""
        cursor = self.connection.cursor()
        cursor.execute("""
            SELECT * FROM arduino_libraries 
            WHERE library_name = ?
        """, (library_name,))
        
        row = cursor.fetchone()
        return dict(row) if row else None
    
    def get_project_info(self, project_name: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        cursor = self.connection.cursor()
        cursor.execute("""
            SELECT * FROM arduino_projects 
            WHERE project_name LIKE ?
        """, (f"%{project_name}%",))
        
        row = cursor.fetchone()
        return dict(row) if row else None
    
    def get_pin_info(self, pin_number: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∏–Ω–µ"""
        cursor = self.connection.cursor()
        cursor.execute("""
            SELECT * FROM arduino_pins 
            WHERE pin_number = ?
        """, (pin_number,))
        
        row = cursor.fetchone()
        return dict(row) if row else None
    
    def get_troubleshooting(self, error_keywords: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º"""
        cursor = self.connection.cursor()
        cursor.execute("""
            SELECT * FROM arduino_troubleshooting 
            WHERE error_description LIKE ? OR 
                  possible_causes LIKE ? OR 
                  solutions LIKE ?
        """, (f"%{error_keywords}%", f"%{error_keywords}%", f"%{error_keywords}%"))
        
        results = []
        for row in cursor.fetchall():
            results.append(dict(row))
        
        return results
    
    def get_categories(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        cursor = self.connection.cursor()
        cursor.execute("SELECT * FROM arduino_categories ORDER BY name")
        
        results = []
        for row in cursor.fetchall():
            results.append(dict(row))
        
        return results
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.connection:
            self.connection.close()
            logger.info("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Arduino Nano –∑–∞–∫—Ä—ã—Ç–æ")

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Arduino Nano")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = ArduinoNanoDatabase()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    print("\nüìö –ü–æ–∏—Å–∫ –∑–Ω–∞–Ω–∏–π –ø–æ '—Å–≤–µ—Ç–æ–¥–∏–æ–¥':")
    results = db.search_knowledge("—Å–≤–µ—Ç–æ–¥–∏–æ–¥")
    for result in results[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print(f"- {result['title']} ({result['category_name']})")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    print("\n‚öôÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—É–Ω–∫—Ü–∏–∏ 'digitalWrite':")
    func_info = db.get_function_info("digitalWrite")
    if func_info:
        print(f"–°–∏–Ω—Ç–∞–∫—Å–∏—Å: {func_info['syntax']}")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {func_info['description']}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    print("\nüì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ 'Servo':")
    lib_info = db.get_library_info("Servo")
    if lib_info:
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {lib_info['description']}")
        print(f"–§—É–Ω–∫—Ü–∏–∏: {lib_info['functions_list']}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã
    print("\nüöÄ –ü—Ä–æ–µ–∫—Ç—ã Arduino:")
    projects = db.get_project_info("—Å–≤–µ—Ç–æ–¥–∏–æ–¥")
    if projects:
        print(f"–ü—Ä–æ–µ–∫—Ç: {projects['project_name']}")
        print(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {projects['components']}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∏–Ω—ã
    print("\nüìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏–Ω–µ 13:")
    pin_info = db.get_pin_info(13)
    if pin_info:
        print(f"–¢–∏–ø: {pin_info['pin_type']}")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {pin_info['description']}")
        print(f"–û—Å–æ–±—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {pin_info['special_functions']}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
    print("\nüîß –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º:")
    troubleshooting = db.get_troubleshooting("–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    for item in troubleshooting[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print(f"- {item['error_description']}")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    db.close()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()





