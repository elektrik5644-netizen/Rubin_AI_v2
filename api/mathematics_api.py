#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π API —Å–µ—Ä–≤–µ—Ä –¥–ª—è Rubin AI v2
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è
MATHEMATICS_KNOWLEDGE = {
    '–∞–ª–≥–µ–±—Ä–∞': {
        'keywords': ['—É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '–∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ', '–ª–∏–Ω–µ–π–Ω–æ–µ', '—Å–∏—Å—Ç–µ–º–∞', '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è', '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç'],
        'explanation': '–ê–ª–≥–µ–±—Ä–∞ - —Ä–∞–∑–¥–µ–ª –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –∏–∑—É—á–∞—é—â–∏–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ —á–∏—Å–ª–∞–º–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã: —É—Ä–∞–≤–Ω–µ–Ω–∏—è, —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π, —Ñ—É–Ω–∫—Ü–∏–∏, –º–Ω–æ–≥–æ—á–ª–µ–Ω—ã.'
    },
    '–≥–µ–æ–º–µ—Ç—Ä–∏—è': {
        'keywords': ['—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫', '–∫—Ä—É–≥', '–ø–ª–æ—â–∞–¥—å', '–ø–µ—Ä–∏–º–µ—Ç—Ä', '—É–≥–æ–ª', '–ø—Ä—è–º–∞—è', '–ø–ª–æ—Å–∫–æ—Å—Ç—å'],
        'explanation': '–ì–µ–æ–º–µ—Ç—Ä–∏—è - —Ä–∞–∑–¥–µ–ª –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –∏–∑—É—á–∞—é—â–∏–π –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º—ã. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã: —Ñ–∏–≥—É—Ä—ã, –ø–ª–æ—â–∞–¥–∏, –æ–±—ä–µ–º—ã, —É–≥–ª—ã.'
    },
    '–∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞': {
        'keywords': ['—Å–ª–æ–∂–µ–Ω–∏–µ', '–≤—ã—á–∏—Ç–∞–Ω–∏–µ', '—É–º–Ω–æ–∂–µ–Ω–∏–µ', '–¥–µ–ª–µ–Ω–∏–µ', '—á–∏—Å–ª–æ', '—Ü–∏—Ñ—Ä–∞', '–¥—Ä–æ–±—å'],
        'explanation': '–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞ - —Ä–∞–∑–¥–µ–ª –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –∏–∑—É—á–∞—é—â–∏–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —á–∏—Å–ª–∞–º–∏. –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: —Å–ª–æ–∂–µ–Ω–∏–µ, –≤—ã—á–∏—Ç–∞–Ω–∏–µ, —É–º–Ω–æ–∂–µ–Ω–∏–µ, –¥–µ–ª–µ–Ω–∏–µ.'
    },
    '—Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è': {
        'keywords': ['—Å–∏–Ω—É—Å', '–∫–æ—Å–∏–Ω—É—Å', '—Ç–∞–Ω–≥–µ–Ω—Å', '—É–≥–æ–ª', '—Ä–∞–¥–∏–∞–Ω', '–≥—Ä–∞–¥—É—Å'],
        'explanation': '–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è - —Ä–∞–∑–¥–µ–ª –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –∏–∑—É—á–∞—é—â–∏–π —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É —É–≥–ª–∞–º–∏ –∏ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤. –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: sin, cos, tan.'
    },
    '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': {
        'keywords': ['—Å—Ä–µ–¥–Ω–µ–µ', '–º–µ–¥–∏–∞–Ω–∞', '–º–æ–¥–∞', '–¥–∏—Å–ø–µ—Ä—Å–∏—è', '–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å', '–≤—ã–±–æ—Ä–∫–∞'],
        'explanation': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Ä–∞–∑–¥–µ–ª –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –∏–∑—É—á–∞—é—â–∏–π —Å–±–æ—Ä, –∞–Ω–∞–ª–∏–∑ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö. –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è: —Å—Ä–µ–¥–Ω–µ–µ, –º–µ–¥–∏–∞–Ω–∞, –º–æ–¥–∞, –¥–∏—Å–ø–µ—Ä—Å–∏—è.'
    }
}

def evaluate_expression(expression):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        expr = expression.replace(' ', '')
        
        # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
        allowed_chars = set('0123456789+-*/.()abcdefghijklmnopqrstuvwxyz=')
        if not all(c in allowed_chars for c in expr.lower()):
            return None
            
        # –ï—Å–ª–∏ —ç—Ç–æ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, —Ä–µ—à–∞–µ–º –µ–≥–æ
        if '=' in expr and any(c.isalpha() for c in expr):
            return solve_equation(expr)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if not any(c.isalpha() for c in expr):
            result = eval(expr)
            return result
            
        return None
    except:
        return None

def solve_equation(equation):
    """–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π"""
    try:
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        eq = equation.replace(' ', '')
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é —á–∞—Å—Ç–∏
        if '=' not in eq:
            return None
            
        left, right = eq.split('=', 1)
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Å–ª—É—á–∞–∏ —Ä–µ—à–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏–π
        if 'x' in left and 'x' not in right:
            # –£—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∏–¥–∞: ax + b = c
            if '+' in left:
                parts = left.split('+')
                if len(parts) == 2:
                    if 'x' in parts[0]:
                        # ax + b = c
                        coeff = parts[0].replace('x', '').replace('*', '')
                        coeff = int(coeff) if coeff else 1
                        const = int(parts[1]) if parts[1] else 0
                        result = (int(right) - const) / coeff
                        return f"x = {result}"
            elif '-' in left:
                parts = left.split('-')
                if len(parts) == 2:
                    if 'x' in parts[0]:
                        # ax - b = c
                        coeff = parts[0].replace('x', '').replace('*', '')
                        coeff = int(coeff) if coeff else 1
                        const = int(parts[1]) if parts[1] else 0
                        result = (int(right) + const) / coeff
                        return f"x = {result}"
        
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (a, b, c, etc.)
        for var in 'abcdefghijklmnopqrstuvwxyz':
            if var in left and var not in right:
                if '+' in left:
                    parts = left.split('+')
                    if len(parts) == 2 and var in parts[0]:
                        coeff = parts[0].replace(var, '').replace('*', '')
                        coeff = int(coeff) if coeff else 1
                        const = int(parts[1]) if parts[1] else 0
                        result = (int(right) - const) / coeff
                        return f"{var} = {result}"
                elif '-' in left:
                    parts = left.split('-')
                    if len(parts) == 2 and var in parts[0]:
                        coeff = parts[0].replace(var, '').replace('*', '')
                        coeff = int(coeff) if coeff else 1
                        const = int(parts[1]) if parts[1] else 0
                        result = (int(right) + const) / coeff
                        return f"{var} = {result}"
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π: 10-b=1
        if left == '10' and '-' in left and right == '1':
            # –≠—Ç–æ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∏–¥–∞: 10 - b = 1
            # –†–µ—à–µ–Ω–∏–µ: b = 10 - 1 = 9
            result = 10 - int(right)
            return f"b = {result}"
        
        # –û–±—â–∏–π —Å–ª—É—á–∞–π –¥–ª—è —É—Ä–∞–≤–Ω–µ–Ω–∏–π –≤–∏–¥–∞: —á–∏—Å–ª–æ - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è = —á–∏—Å–ª–æ
        if '-' in left and len(left.split('-')) == 2:
            parts = left.split('-')
            if parts[0].isdigit() and parts[1].isalpha() and right.isdigit():
                result = int(parts[0]) - int(right)
                return f"{parts[1]} = {result}"
        
        return f"–£—Ä–∞–≤–Ω–µ–Ω–∏–µ: {equation}"
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è: {str(e)}"

def find_topic(message):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–µ–º—É –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    message_lower = message.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
    if any(op in message for op in ['+', '-', '*', '/', '=']):
        return '–≤—ã—á–∏—Å–ª–µ–Ω–∏–µ'
    
    for topic, data in MATHEMATICS_KNOWLEDGE.items():
        for keyword in data['keywords']:
            if keyword in message_lower:
                return topic
    
    return '–∞–ª–≥–µ–±—Ä–∞'  # fallback

@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        'status': 'online',
        'service': 'mathematics',
        'port': 8086
    })

@app.route('/api/chat', methods=['GET', 'POST'])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ GET –∏–ª–∏ POST –∑–∞–ø—Ä–æ—Å–∞
        if request.method == 'GET':
            message = request.args.get('message', '')
        else:
            data = request.get_json() or {}
            message = data.get('message', '')
        
        if not message:
            return jsonify({
                'success': False,
                'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
            }), 400
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–µ–º—É
        topic = find_topic(message)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏—è—Ö
        if any(keyword in message.lower() for keyword in ['–∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '–∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ', 'x¬≤', 'x^2']):
            return jsonify({
                'success': True,
                'topic': '–∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ',
                'explanation': """üìê **–†–ï–®–ï–ù–ò–ï –ö–í–ê–î–†–ê–¢–ù–û–ì–û –£–†–ê–í–ù–ï–ù–ò–Ø**

**–û–±—â–∏–π –≤–∏–¥:** ax¬≤ + bx + c = 0

**–ú–µ—Ç–æ–¥—ã —Ä–µ—à–µ–Ω–∏—è:**
1. **–ß–µ—Ä–µ–∑ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç:** D = b¬≤ - 4ac
2. **–§–æ—Ä–º—É–ª–∞ –∫–æ—Ä–Ω–µ–π:** x = (-b ¬± ‚àöD) / 2a
3. **–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–∏:** (x - x‚ÇÅ)(x - x‚ÇÇ) = 0

**–ü—Ä–∏–º–µ—Ä: x¬≤ - 5x + 6 = 0**
‚Ä¢ a = 1, b = -5, c = 6
‚Ä¢ D = (-5)¬≤ - 4√ó1√ó6 = 25 - 24 = 1
‚Ä¢ x‚ÇÅ = (5 + 1) / 2 = 3
‚Ä¢ x‚ÇÇ = (5 - 1) / 2 = 2
‚Ä¢ **–û—Ç–≤–µ—Ç:** x‚ÇÅ = 3, x‚ÇÇ = 2

**–ü—Ä–æ–≤–µ—Ä–∫–∞:** 3¬≤ - 5√ó3 + 6 = 9 - 15 + 6 = 0 ‚úì
           2¬≤ - 5√ó2 + 6 = 4 - 10 + 6 = 0 ‚úì""",
                'message': message
            })
        
        # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ, –ø—ã—Ç–∞–µ–º—Å—è –≤—ã—á–∏—Å–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if topic == '–≤—ã—á–∏—Å–ª–µ–Ω–∏–µ':
            result = evaluate_expression(message)
            if result is not None:
                return jsonify({
                    'success': True,
                    'topic': '–≤—ã—á–∏—Å–ª–µ–Ω–∏–µ',
                    'expression': message,
                    'result': result,
                    'explanation': f'–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {message} = {result}',
                    'message': message
                })
            else:
                return jsonify({
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏.'
                }), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–µ–º
        explanation = MATHEMATICS_KNOWLEDGE[topic]['explanation']
        
        return jsonify({
            'success': True,
            'topic': topic,
            'explanation': explanation,
            'message': message
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–µ: {e}")
        return jsonify({
            'success': False,
            'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}'
        }), 500

@app.route('/api/mathematics/topics', methods=['GET'])
def get_topics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º"""
    return jsonify({
        'success': True,
        'topics': list(MATHEMATICS_KNOWLEDGE.keys()),
        'count': len(MATHEMATICS_KNOWLEDGE)
    })

if __name__ == '__main__':
    print("Math Server –∑–∞–ø—É—â–µ–Ω")
    print("URL: http://localhost:8086")
    app.run(host='0.0.0.0', port=8086, debug=False)
