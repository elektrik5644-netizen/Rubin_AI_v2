#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ó–∞–ø—É—Å–∫ Rubin AI v2.0 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
"""

import os
import sys
import time
import subprocess
import signal
import psutil
from pathlib import Path

def kill_python_processes():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python"""
    print("üîß –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    
    try:
        # –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                if proc.info['name'] and 'python' in proc.info['name'].lower():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å
                    cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
                    if any(keyword in cmdline for keyword in ['rubin', 'api', 'server']):
                        print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ Python: {proc.info['name']} (PID: {proc.info['pid']})")
                        proc.terminate()
                        proc.wait(timeout=5)
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.TimeoutExpired):
                pass
                
        time.sleep(2)
        print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã –æ—á–∏—â–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        'sentence_transformers',
        'faiss',
        'numpy',
        'flask',
        'flask_cors'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package}")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: python install_vector_search_dependencies.py")
        return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def start_server(script_path, name, port=None):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        print(f"üöÄ –ó–∞–ø—É—Å–∫ {name}...")
        
        # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        process = subprocess.Popen(
            [sys.executable, script_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        time.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        if process.poll() is None:
            print(f"‚úÖ {name} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            if port:
                print(f"   –ü–æ—Ä—Ç: {port}")
            return process
        else:
            stdout, stderr = process.communicate()
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}")
            print(f"   stdout: {stdout}")
            print(f"   stderr: {stderr}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {e}")
        return None

def check_server_health(port, name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        import requests
        response = requests.get(f"http://localhost:{port}/health", timeout=5)
        if response.status_code == 200:
            print(f"‚úÖ {name} - –û–ù–õ–ê–ô–ù")
            return True
        else:
            print(f"‚ö†Ô∏è {name} - –ü–†–û–ë–õ–ï–ú–´ (–∫–æ–¥: {response.status_code})")
            return False
    except:
        print(f"‚ùå {name} - –û–§–§–õ–ê–ô–ù")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –ó–ê–ü–£–°–ö RUBIN AI v2.0 –° –í–ï–ö–¢–û–†–ù–´–ú –ü–û–ò–°–ö–û–ú")
    print("=" * 60)
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    kill_python_processes()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        print("\n‚ùå –ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python install_vector_search_dependencies.py")
        return False
    
    # –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    servers = [
        {
            'script': 'api/rubin_ai_v2_simple.py',
            'name': 'AI –ß–∞—Ç (8084)',
            'port': 8084
        },
        {
            'script': 'api/electrical_api.py',
            'name': '–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ (8087)',
            'port': 8087
        },
        {
            'script': 'api/radiomechanics_api.py',
            'name': '–†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞ (8089)',
            'port': 8089
        },
        {
            'script': 'api/controllers_api.py',
            'name': '–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã (8090)',
            'port': 8090
        },
        {
            'script': 'api/documents_api.py',
            'name': '–î–æ–∫—É–º–µ–Ω—Ç—ã (8088)',
            'port': 8088
        },
        {
            'script': 'api/vector_search_api.py',
            'name': '–í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (8091)',
            'port': 8091
        },
        {
            'script': 'static_web_server.py',
            'name': '–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (8085)',
            'port': 8085
        }
    ]
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
    processes = []
    print("\nüöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
    
    for server in servers:
        process = start_server(server['script'], server['name'], server['port'])
        if process:
            processes.append((process, server['name']))
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
    time.sleep(5)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤:")
    online_count = 0
    
    for server in servers:
        if check_server_health(server['port'], server['name']):
            online_count += 1
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüìà –°—Ç–∞—Ç—É—Å: {online_count}/{len(servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤ –æ–Ω–ª–∞–π–Ω")
    
    if online_count == len(servers):
        print("üéâ –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:")
        print("   - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8085/RubinIDE.html")
        print("   - AI –ß–∞—Ç API: http://localhost:8084/api/chat")
        print("   - –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫: http://localhost:8091/api/hybrid/search")
        print("   - –î–æ–∫—É–º–µ–Ω—Ç—ã API: http://localhost:8088/health")
        
        print("\nüí° –î–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("   python index_documents_for_vector_search.py")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            print("\n‚èπÔ∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...")
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            for process, name in processes:
                try:
                    process.terminate()
                    process.wait(timeout=5)
                    print(f"‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except:
                    try:
                        process.kill()
                        print(f"üî® {name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                    except:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {name}")
            
            print("üëã –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        return False

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")






















