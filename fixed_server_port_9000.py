#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –°–ï–†–í–ï–† –ù–ê –ü–û–†–¢–£ 9000
–ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä —Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç—å—é –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
neural_ai = None
enhanced_dispatcher = None

def initialize_components():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    global neural_ai, enhanced_dispatcher
    
    try:
        logger.info("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏...")
        from neural_rubin import get_neural_rubin
        neural_ai = get_neural_rubin()
        logger.info("‚úÖ –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: {e}")
        neural_ai = None
    
    try:
        logger.info("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞...")
        from intelligent_dispatcher import get_intelligent_dispatcher
        enhanced_dispatcher = get_intelligent_dispatcher()
        logger.info("‚úÖ –î–∏—Å–ø–µ—Ç—á–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {e}")
        enhanced_dispatcher = None

@app.route('/api/health')
def health():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'name': 'Fixed Rubin AI Server',
        'version': '2.0-FIXED',
        'neural_network': neural_ai is not None,
        'enhanced_dispatcher': enhanced_dispatcher is not None,
        'port': 9000,
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/chat', methods=['POST'])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π chat endpoint —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
    try:
        data = request.get_json()
        message = data.get('message', '').strip()
        category = data.get('category', '')
        
        if not message:
            return jsonify({'error': '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}), 400
        
        logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {message[:50]}... (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")
        
        # –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã
        quick_responses = {
            '–ø—Ä–∏–≤–µ—Ç': 'üß† –ü—Ä–∏–≤–µ—Ç! –Ø –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Rubin AI —Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç—å—é –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏!',
            '—Ç–µ—Å—Ç': '‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –∞–∫—Ç–∏–≤–Ω–∞!'
        }
        
        if message.lower() in quick_responses:
            return jsonify({
                'response': quick_responses[message.lower()],
                'provider': 'Fixed Rubin AI (Quick Response)',
                'category': 'general',
                'neural_network': True,
                'enhanced_integration': True,
                'success': True
            })
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if neural_ai:
            try:
                logger.info("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å...")
                response = neural_ai.generate_response(message)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
                response['fixed_server'] = True
                response['port'] = 9000
                response['timestamp'] = datetime.now().isoformat()
                
                logger.info(f"‚úÖ –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –æ—Ç–≤–µ—Ç–∏–ª–∞: {response.get('provider', 'N/A')}")
                return jsonify(response)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: {e}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if enhanced_dispatcher:
            try:
                logger.info("üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä...")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                detected_category = enhanced_dispatcher.analyze_request_category(message)
                logger.info(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {detected_category}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
                request_data = {'message': message}
                
                if detected_category == 'programming':
                    response = enhanced_dispatcher._handle_programming_request(request_data)
                elif detected_category == 'electrical':
                    response = enhanced_dispatcher._handle_electrical_request(request_data)
                elif detected_category.startswith('mathematics'):
                    response = enhanced_dispatcher._handle_mathematical_request(request_data)
                else:
                    response = enhanced_dispatcher._handle_general_request(request_data)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
                response['fixed_server'] = True
                response['port'] = 9000
                response['timestamp'] = datetime.now().isoformat()
                
                logger.info(f"‚úÖ –î–∏—Å–ø–µ—Ç—á–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª: {response.get('provider', 'N/A')}")
                return jsonify(response)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {e}")
        
        # Fallback –æ—Ç–≤–µ—Ç
        return jsonify({
            'response': f'''üö® –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –°–ï–†–í–ï–† –ù–ê –ü–û–†–¢–£ 9000

–í–∞—à –≤–æ–ø—Ä–æ—Å: "{message}"

‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ —ç—Ç–æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Å–µ—Ä–≤–µ—Ä!
‚úÖ –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å: {'–î–æ—Å—Ç—É–ø–Ω–∞' if neural_ai else '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}
‚úÖ –î–∏—Å–ø–µ—Ç—á–µ—Ä: {'–î–æ—Å—Ç—É–ø–µ–Ω' if enhanced_dispatcher else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}

–≠—Ç–æ –ù–ï –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç!''',
            'provider': 'Fixed Rubin AI (Fallback)',
            'category': 'system',
            'fixed_server': True,
            'port': 9000,
            'success': True
        })
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}',
            'fixed_server': True,
            'port': 9000
        }), 500

if __name__ == '__main__':
    print("--- STARTING FIXED SERVER ON PORT 9000 ---")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    initialize_components()
    
    print("üìç –°–µ—Ä–≤–µ—Ä: http://localhost:9000")
    print("üß™ –¢–µ—Å—Ç: http://localhost:9000/api/health")
    print("üîß –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å RubinDeveloper –Ω–∞ –ø–æ—Ä—Ç 9000")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    app.run(host='0.0.0.0', port=9000, debug=False, threaded=True)