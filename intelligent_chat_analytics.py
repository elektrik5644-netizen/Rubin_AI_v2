#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ —É–ª—É—á—à–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã Rubin AI
"""

import logging
import requests
import time
from datetime import datetime
from typing import Dict, List, Optional, Any
from response_analytics import get_quality_controller
from enhanced_smart_dispatcher import get_enhanced_dispatcher
from intelligent_knowledge_chat import get_rubin_chat

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class IntelligentChatWithAnalytics:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —á–∞—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤"""
    
    def __init__(self):
        self.quality_controller = get_quality_controller()
        self.enhanced_dispatcher = get_enhanced_dispatcher()
        self.knowledge_chat = get_rubin_chat()
        self.chat_history = []
        self.analytics_history = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.auto_improvement_enabled = True
        self.quality_threshold = 0.6
        self.max_improvement_attempts = 2
    
    def process_question(self, question: str, user_id: str = "default") -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å —Å –ø–æ–ª–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
        try:
            logger.info(f"üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–æ–ø—Ä–æ—Å: {question[:50]}...")
            
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä
            dispatcher_result = self.enhanced_dispatcher.route_question(question)
            
            if not dispatcher_result['success']:
                return self._create_error_response(question, dispatcher_result['response'])
            
            # –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
            quality_result = self.quality_controller.process_response(
                question, 
                dispatcher_result['response'], 
                dispatcher_result['server_type']
            )
            
            # –®–∞–≥ 3: –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
            knowledge_enhancement = self._get_knowledge_enhancement(question, user_id)
            
            # –®–∞–≥ 4: –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            final_response = self._create_final_response(
                quality_result, 
                knowledge_enhancement, 
                dispatcher_result
            )
            
            # –®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self._save_to_history(question, final_response, quality_result, user_id)
            
            # –®–∞–≥ 6: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {
                'question': question,
                'response': final_response,
                'user_id': user_id,
                'timestamp': datetime.now().isoformat(),
                'analytics': {
                    'quality_score': quality_result['analysis']['quality_score'],
                    'quality_status': quality_result['quality_status'],
                    'correction_applied': quality_result['correction_applied'],
                    'issues_found': len(quality_result['analysis']['issues']),
                    'suggestions_count': len(quality_result['analysis']['suggestions']),
                    'knowledge_enhanced': bool(knowledge_enhancement)
                },
                'metadata': {
                    'server_type': dispatcher_result['server_type'],
                    'complexity': dispatcher_result['complexity'],
                    'response_length': len(final_response),
                    'processing_time': time.time()
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            return self._create_error_response(question, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
    
    def _create_error_response(self, question: str, error_message: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ"""
        return {
            'question': question,
            'response': f"‚ùå {error_message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            'user_id': 'system',
            'timestamp': datetime.now().isoformat(),
            'analytics': {
                'quality_score': 0.0,
                'quality_status': 'error',
                'correction_applied': False,
                'issues_found': 1,
                'suggestions_count': 0,
                'knowledge_enhanced': False
            },
            'metadata': {
                'server_type': 'error',
                'complexity': {'level': 'unknown'},
                'response_length': len(error_message),
                'processing_time': time.time()
            }
        }
    
    def _get_knowledge_enhancement(self, question: str, user_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        try:
            knowledge_result = self.knowledge_chat.process_message(question, user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π
            if '–ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å' in knowledge_result:
                return knowledge_result
            
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            if len(knowledge_result) > 50 and '–ù–µ –Ω–∞—à–µ–ª' not in knowledge_result:
                return knowledge_result
            
            return None
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π: {e}")
            return None
    
    def _create_final_response(self, quality_result: Dict[str, Any], 
                              knowledge_enhancement: Optional[str],
                              dispatcher_result: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        response_parts = []
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π)
        main_response = quality_result['final_response']
        response_parts.append(main_response)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ
        if quality_result['correction_applied']:
            response_parts.append(f"\n**üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –£–õ–£–ß–®–ï–ù–ò–ï:**")
            response_parts.append(f"–û—Ç–≤–µ—Ç –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ª—É—á—à–µ–Ω –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞.")
            response_parts.append(f"–ë–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞: {quality_result['analysis']['quality_score']}/1.0")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        if knowledge_enhancement:
            response_parts.append(f"\n**üß† –î–û–ü–û–õ–ù–ï–ù–ò–Ø –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô:**")
            response_parts.append(knowledge_enhancement)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ
        if quality_result['analysis']['issues']:
            response_parts.append(f"\n**üìä –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê:**")
            response_parts.append(f"‚Ä¢ –°—Ç–∞—Ç—É—Å –∫–∞—á–µ—Å—Ç–≤–∞: {quality_result['quality_status']}")
            response_parts.append(f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(quality_result['analysis']['issues'])}")
            
            if quality_result['analysis']['suggestions']:
                response_parts.append(f"‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:")
                for suggestion in quality_result['analysis']['suggestions'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    response_parts.append(f"  - {suggestion}")
        
        return '\n'.join(response_parts)
    
    def _save_to_history(self, question: str, response: str, 
                        quality_result: Dict[str, Any], user_id: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        # –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
        chat_entry = {
            'question': question,
            'response': response,
            'user_id': user_id,
            'timestamp': datetime.now().isoformat(),
            'quality_score': quality_result['analysis']['quality_score']
        }
        self.chat_history.append(chat_entry)
        
        # –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        analytics_entry = {
            'question': question,
            'quality_analysis': quality_result['analysis'],
            'correction_applied': quality_result['correction_applied'],
            'quality_status': quality_result['quality_status'],
            'timestamp': datetime.now().isoformat()
        }
        self.analytics_history.append(analytics_entry)
    
    def get_chat_history(self, user_id: str = "default", limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
        user_history = [entry for entry in self.chat_history if entry['user_id'] == user_id]
        return user_history[-limit:]
    
    def get_analytics_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        if not self.analytics_history:
            return {'message': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'}
        
        total_responses = len(self.analytics_history)
        avg_quality = sum(entry['quality_analysis']['quality_score'] 
                         for entry in self.analytics_history) / total_responses
        
        corrections_applied = sum(1 for entry in self.analytics_history 
                                if entry['correction_applied'])
        
        quality_distribution = {}
        for entry in self.analytics_history:
            status = entry['quality_status']
            quality_distribution[status] = quality_distribution.get(status, 0) + 1
        
        return {
            'total_responses': total_responses,
            'average_quality_score': round(avg_quality, 2),
            'corrections_applied': corrections_applied,
            'correction_rate': round(corrections_applied / total_responses * 100, 1),
            'quality_distribution': quality_distribution,
            'recent_trend': self._calculate_recent_trend()
        }
    
    def _calculate_recent_trend(self) -> str:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ä–µ–Ω–¥ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã"""
        if len(self.analytics_history) < 5:
            return 'insufficient_data'
        
        recent_scores = [entry['quality_analysis']['quality_score'] 
                        for entry in self.analytics_history[-5:]]
        
        if recent_scores[-1] > recent_scores[0]:
            return 'improving'
        elif recent_scores[-1] < recent_scores[0]:
            return 'declining'
        else:
            return 'stable'
    
    def configure_settings(self, auto_improvement: bool = None, 
                          quality_threshold: float = None):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–∞—Ç–∞"""
        if auto_improvement is not None:
            self.auto_improvement_enabled = auto_improvement
        if quality_threshold is not None:
            self.quality_threshold = quality_threshold
            self.quality_controller.configure_quality_settings(threshold=quality_threshold)
        
        logger.info(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: auto_improvement={self.auto_improvement_enabled}, threshold={self.quality_threshold}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
intelligent_chat = None

def get_intelligent_chat():
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞"""
    global intelligent_chat
    if intelligent_chat is None:
        intelligent_chat = IntelligentChatWithAnalytics()
    return intelligent_chat

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π")
    
    chat = get_intelligent_chat()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    test_questions = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–∫–æ–Ω –û–º–∞?",
        "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x^2 + 5x + 6 = 0",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä?",
        "–ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ Python –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏",
        "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –ü–õ–ö"
    ]
    
    for i, question in enumerate(test_questions, 1):
        print(f"\n{'='*80}")
        print(f"–í–æ–ø—Ä–æ—Å {i}: {question}")
        print(f"{'='*80}")
        
        result = chat.process_question(question)
        
        print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ: {result['analytics']['quality_score']}")
        print(f"üéØ –°—Ç–∞—Ç—É—Å: {result['analytics']['quality_status']}")
        print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {result['analytics']['correction_applied']}")
        print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º: {result['analytics']['issues_found']}")
        print(f"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {result['analytics']['suggestions_count']}")
        print(f"üß† –£–ª—É—á—à–µ–Ω –∑–Ω–∞–Ω–∏—è–º–∏: {result['analytics']['knowledge_enhanced']}")
        print(f"üìè –î–ª–∏–Ω–∞: {result['metadata']['response_length']} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print(f"\nüìù –û—Ç–≤–µ—Ç:")
        print(result['response'][:300] + "..." if len(result['response']) > 300 else result['response'])
        
        time.sleep(1)
    
    # –°–≤–æ–¥–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    print(f"\n{'='*80}")
    print("üìä –°–í–û–î–ö–ê –ê–ù–ê–õ–ò–¢–ò–ö–ò")
    print(f"{'='*80}")
    
    summary = chat.get_analytics_summary()
    print(f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {summary['total_responses']}")
    print(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {summary['average_quality_score']}")
    print(f"‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {summary['corrections_applied']}")
    print(f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {summary['correction_rate']}%")
    print(f"‚Ä¢ –¢—Ä–µ–Ω–¥ –∫–∞—á–µ—Å—Ç–≤–∞: {summary['recent_trend']}")
    print(f"‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞: {summary['quality_distribution']}")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")










