#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–æ–∫ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è Rubin AI
–ü–æ–∑–≤–æ–ª—è–µ—Ç Rubin AI –∏–∑—É—á–∞—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
"""

import os
import sys
import sqlite3
import hashlib
import mimetypes
import json
import re
from pathlib import Path
import logging
from datetime import datetime
from typing import Dict, List, Optional, Tuple
import shutil

class ProjectFolderReader:
    """–°–∏—Å—Ç–µ–º–∞ —á—Ç–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–ø–æ–∫ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    
    def __init__(self, db_path="rubin_project_knowledge.db"):
        self.db_path = db_path
        self.setup_logging()
        self.setup_database()
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.supported_extensions = {
            # –ö–æ–¥
            '.py', '.js', '.ts', '.java', '.cpp', '.c', '.cs', '.php', '.rb', '.go', '.rs',
            '.swift', '.kt', '.scala', '.r', '.m', '.pl', '.sh', '.bash', '.ps1',
            # –í–µ–±
            '.html', '.htm', '.css', '.scss', '.sass', '.less', '.vue', '.jsx', '.tsx',
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            '.json', '.xml', '.yaml', '.yml', '.toml', '.ini', '.cfg', '.conf',
            # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
            '.md', '.rst', '.txt', '.doc', '.docx', '.pdf', '.rtf',
            # –î–∞–Ω–Ω—ã–µ
            '.csv', '.sql', '.db', '.sqlite', '.sqlite3',
            # –î—Ä—É–≥–∏–µ
            '.dockerfile', '.gitignore', '.env', '.gitattributes'
        }
        
        # –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –ø–∞–ø–∫–∏
        self.excluded_dirs = {
            '__pycache__', '.git', '.svn', '.hg', 'node_modules', '.vscode', 
            '.idea', 'venv', 'env', '.env', 'build', 'dist', 'target',
            '.pytest_cache', '.coverage', 'coverage', '.nyc_output',
            'logs', 'log', 'tmp', 'temp', '.DS_Store', 'Thumbs.db'
        }
        
        # –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã
        self.excluded_files = {
            '.gitignore', '.gitattributes', '.DS_Store', 'Thumbs.db',
            'package-lock.json', 'yarn.lock', 'Pipfile.lock'
        }
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('project_reader.log', encoding='utf-8'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        self.logger = logging.getLogger(__name__)
        
    def setup_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS projects (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    project_name TEXT NOT NULL,
                    project_path TEXT UNIQUE NOT NULL,
                    project_type TEXT,
                    description TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_analyzed TIMESTAMP,
                    total_files INTEGER DEFAULT 0,
                    total_size INTEGER DEFAULT 0,
                    language_stats TEXT,  -- JSON —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —è–∑—ã–∫–æ–≤
                    framework_stats TEXT, -- JSON —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤
                    UNIQUE(project_path)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS project_files (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    project_id INTEGER,
                    file_path TEXT NOT NULL,
                    file_name TEXT NOT NULL,
                    file_extension TEXT,
                    file_size INTEGER,
                    file_type TEXT,
                    content_hash TEXT,
                    content_preview TEXT,  -- –ü–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤
                    full_content TEXT,     -- –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                    language TEXT,
                    framework TEXT,
                    complexity_score INTEGER DEFAULT 0,
                    line_count INTEGER DEFAULT 0,
                    function_count INTEGER DEFAULT 0,
                    class_count INTEGER DEFAULT 0,
                    import_count INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (project_id) REFERENCES projects (id),
                    UNIQUE(project_id, file_path)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS project_components (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    project_id INTEGER,
                    component_type TEXT NOT NULL,  -- 'class', 'function', 'module', 'api', 'database'
                    component_name TEXT NOT NULL,
                    file_id INTEGER,
                    line_start INTEGER,
                    line_end INTEGER,
                    description TEXT,
                    dependencies TEXT,  -- JSON —Å–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                    complexity_score INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (project_id) REFERENCES projects (id),
                    FOREIGN KEY (file_id) REFERENCES project_files (id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –∑–Ω–∞–Ω–∏–π –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS project_knowledge (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    project_id INTEGER,
                    knowledge_type TEXT NOT NULL,  -- 'pattern', 'architecture', 'best_practice', 'anti_pattern'
                    title TEXT NOT NULL,
                    description TEXT,
                    code_example TEXT,
                    file_id INTEGER,
                    line_start INTEGER,
                    line_end INTEGER,
                    tags TEXT,  -- JSON —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
                    confidence_score REAL DEFAULT 0.0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (project_id) REFERENCES projects (id),
                    FOREIGN KEY (file_id) REFERENCES project_files (id)
                )
            ''')
            
            # –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            cursor.execute('''
                CREATE INDEX IF NOT EXISTS idx_project_files_path 
                ON project_files(project_id, file_path)
            ''')
            
            cursor.execute('''
                CREATE INDEX IF NOT EXISTS idx_project_components_type 
                ON project_components(project_id, component_type)
            ''')
            
            conn.commit()
            conn.close()
            
            self.logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            
    def analyze_project_folder(self, project_path: str, project_name: str = None) -> bool:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            project_path = Path(project_path)
            
            if not project_path.exists():
                self.logger.error(f"‚ùå –ü—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {project_path}")
                return False
                
            if not project_path.is_dir():
                self.logger.error(f"‚ùå –ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π: {project_path}")
                return False
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞
            if not project_name:
                project_name = project_path.name
                
            self.logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞: {project_name}")
            self.logger.info(f"üìÅ –ü—É—Ç—å: {project_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç
            project_id = self.get_project_id(project_path)
            if project_id:
                self.logger.info(f"üìã –ü—Ä–æ–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ (ID: {project_id})")
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                self.update_project_analysis_time(project_id)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
                project_id = self.create_project_record(project_path, project_name)
                if not project_id:
                    return False
                    
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
            analysis_result = self.analyze_project_files(project_id, project_path)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–∞
            self.update_project_stats(project_id, analysis_result)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self.extract_architectural_components(project_id)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞–Ω–∏—è –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            self.extract_project_knowledge(project_id)
            
            self.logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ {project_name} –∑–∞–≤–µ—Ä—à–µ–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return False
            
    def get_project_id(self, project_path: Path) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –ø—É—Ç–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute(
                "SELECT id FROM projects WHERE project_path = ?",
                (str(project_path),)
            )
            
            result = cursor.fetchone()
            conn.close()
            
            return result[0] if result else None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return None
            
    def create_project_record(self, project_path: Path, project_name: str) -> Optional[int]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞
            project_type = self.detect_project_type(project_path)
            
            cursor.execute('''
                INSERT INTO projects (project_name, project_path, project_type, description)
                VALUES (?, ?, ?, ?)
            ''', (project_name, str(project_path), project_type, f"–ü—Ä–æ–µ–∫—Ç {project_name}"))
            
            project_id = cursor.lastrowid
            conn.commit()
            conn.close()
            
            self.logger.info(f"üìã –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –ø—Ä–æ–µ–∫—Ç–∞: {project_name} (ID: {project_id})")
            return project_id
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return None
            
    def detect_project_type(self, project_path: Path) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏ —Ñ–∞–π–ª–∞–º"""
        indicators = {
            'Python': ['requirements.txt', 'setup.py', 'pyproject.toml', 'Pipfile', '__init__.py'],
            'Node.js': ['package.json', 'package-lock.json', 'yarn.lock', 'node_modules'],
            'Java': ['pom.xml', 'build.gradle', 'Maven', 'src/main/java'],
            'C++': ['CMakeLists.txt', 'Makefile', '*.cpp', '*.h'],
            'C#': ['*.csproj', '*.sln', 'Program.cs'],
            'PHP': ['composer.json', 'index.php', '*.php'],
            'Ruby': ['Gemfile', 'Rakefile', '*.rb'],
            'Go': ['go.mod', 'go.sum', 'main.go'],
            'Rust': ['Cargo.toml', 'Cargo.lock', 'src/main.rs'],
            'Docker': ['Dockerfile', 'docker-compose.yml'],
            'Web': ['index.html', 'style.css', 'app.js'],
            'React': ['src/App.js', 'src/App.jsx', 'public/index.html'],
            'Vue': ['src/App.vue', 'vue.config.js'],
            'Angular': ['angular.json', 'src/app/app.component.ts']
        }
        
        scores = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for project_type, indicators_list in indicators.items():
            score = 0
            for indicator in indicators_list:
                if '*' in indicator:
                    # –ü–∞—Ç—Ç–µ—Ä–Ω —Ñ–∞–π–ª–æ–≤
                    pattern = indicator.replace('*', '')
                    for file_path in project_path.rglob(f'*{pattern}'):
                        if file_path.is_file():
                            score += 1
                else:
                    # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞
                    indicator_path = project_path / indicator
                    if indicator_path.exists():
                        score += 1
                        
            scores[project_type] = score
            
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∏–ø —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Å—á–µ—Ç–æ–º
        if scores:
            best_type = max(scores, key=scores.get)
            if scores[best_type] > 0:
                return best_type
                
        return 'Unknown'
        
    def analyze_project_files(self, project_id: int, project_path: Path) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        self.logger.info(f"üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ (ID: {project_id})")
        
        total_files = 0
        analyzed_files = 0
        total_size = 0
        language_stats = {}
        framework_stats = {}
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ —Ñ–∞–π–ª–æ–≤
        for file_path in project_path.rglob('*'):
            if file_path.is_file():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                if self.should_skip_file(file_path):
                    continue
                    
                total_files += 1
                
                try:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
                    file_info = self.analyze_single_file(project_id, file_path)
                    
                    if file_info:
                        analyzed_files += 1
                        total_size += file_info.get('file_size', 0)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —è–∑—ã–∫–æ–≤
                        language = file_info.get('language', 'Unknown')
                        language_stats[language] = language_stats.get(language, 0) + 1
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤
                        framework = file_info.get('framework', 'None')
                        if framework != 'None':
                            framework_stats[framework] = framework_stats.get(framework, 0) + 1
                            
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                    
        self.logger.info(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {analyzed_files} –∏–∑ {total_files} —Ñ–∞–π–ª–æ–≤")
        
        return {
            'total_files': total_files,
            'analyzed_files': analyzed_files,
            'total_size': total_size,
            'language_stats': language_stats,
            'framework_stats': framework_stats
        }
        
    def should_skip_file(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        if file_path.suffix.lower() not in self.supported_extensions:
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ –ø–∞–ø–∫–∏
        for part in file_path.parts:
            if part in self.excluded_dirs:
                return True
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã
        if file_path.name in self.excluded_files:
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ 10MB)
        try:
            if file_path.stat().st_size > 10 * 1024 * 1024:
                return True
        except:
            pass
            
        return False
        
    def analyze_single_file(self, project_id: int, file_path: Path) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_size = file_path.stat().st_size
            file_extension = file_path.suffix.lower()
            file_type = mimetypes.guess_type(str(file_path))[0] or 'unknown'
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            content = self.read_file_content(file_path)
            if content is None:
                return None
                
            # –°–æ–∑–¥–∞–µ–º —Ö–µ—à —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            content_hash = hashlib.md5(content.encode('utf-8')).hexdigest()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
            language = self.detect_programming_language(file_extension, content)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—Ä–µ–π–º–≤–æ—Ä–∫
            framework = self.detect_framework(content, language)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ–¥–∞
            complexity_analysis = self.analyze_code_complexity(content, language)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            content_preview = content[:1000] if len(content) > 1000 else content
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            full_content = content if len(content) < 50000 else None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR REPLACE INTO project_files (
                    project_id, file_path, file_name, file_extension, file_size,
                    file_type, content_hash, content_preview, full_content,
                    language, framework, complexity_score, line_count,
                    function_count, class_count, import_count
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                project_id, str(file_path), file_path.name, file_extension,
                file_size, file_type, content_hash, content_preview, full_content,
                language, framework, complexity_analysis['complexity_score'],
                complexity_analysis['line_count'], complexity_analysis['function_count'],
                complexity_analysis['class_count'], complexity_analysis['import_count']
            ))
            
            conn.commit()
            conn.close()
            
            return {
                'file_size': file_size,
                'language': language,
                'framework': framework,
                'complexity_score': complexity_analysis['complexity_score'],
                'line_count': complexity_analysis['line_count']
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return None
            
    def read_file_content(self, file_path: Path) -> Optional[str]:
        """–ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–¥–∏—Ä–æ–≤–æ–∫"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            encodings = ['utf-8', 'utf-8-sig', 'cp1251', 'latin1', 'ascii']
            
            for encoding in encodings:
                try:
                    with open(file_path, 'r', encoding=encoding, errors='ignore') as f:
                        content = f.read()
                        return content
                except UnicodeDecodeError:
                    continue
                    
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, —á–∏—Ç–∞–µ–º –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª
            with open(file_path, 'rb') as f:
                content = f.read()
                return content.decode('utf-8', errors='ignore')
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return None
            
    def detect_programming_language(self, file_extension: str, content: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
        language_map = {
            '.py': 'Python',
            '.js': 'JavaScript',
            '.ts': 'TypeScript',
            '.java': 'Java',
            '.cpp': 'C++',
            '.c': 'C',
            '.cs': 'C#',
            '.php': 'PHP',
            '.rb': 'Ruby',
            '.go': 'Go',
            '.rs': 'Rust',
            '.swift': 'Swift',
            '.kt': 'Kotlin',
            '.scala': 'Scala',
            '.r': 'R',
            '.m': 'Objective-C',
            '.pl': 'Perl',
            '.sh': 'Shell',
            '.bash': 'Bash',
            '.ps1': 'PowerShell',
            '.html': 'HTML',
            '.css': 'CSS',
            '.scss': 'SCSS',
            '.sass': 'Sass',
            '.less': 'Less',
            '.vue': 'Vue',
            '.jsx': 'JSX',
            '.tsx': 'TSX',
            '.json': 'JSON',
            '.xml': 'XML',
            '.yaml': 'YAML',
            '.yml': 'YAML',
            '.toml': 'TOML',
            '.ini': 'INI',
            '.cfg': 'Config',
            '.conf': 'Config',
            '.md': 'Markdown',
            '.rst': 'reStructuredText',
            '.txt': 'Text',
            '.sql': 'SQL',
            '.dockerfile': 'Dockerfile',
            '.env': 'Environment'
        }
        
        return language_map.get(file_extension, 'Unknown')
        
    def detect_framework(self, content: str, language: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É"""
        frameworks = {
            'Python': {
                'Django': ['django', 'from django', 'import django'],
                'Flask': ['flask', 'from flask', 'import flask'],
                'FastAPI': ['fastapi', 'from fastapi', 'import fastapi'],
                'PyTorch': ['torch', 'import torch', 'from torch'],
                'TensorFlow': ['tensorflow', 'import tensorflow', 'from tensorflow'],
                'Pandas': ['pandas', 'import pandas', 'from pandas'],
                'NumPy': ['numpy', 'import numpy', 'from numpy']
            },
            'JavaScript': {
                'React': ['react', 'import React', 'from react'],
                'Vue': ['vue', 'import Vue', 'from vue'],
                'Angular': ['angular', 'import angular', 'from angular'],
                'Express': ['express', 'import express', 'from express'],
                'Node.js': ['node', 'require(', 'module.exports']
            },
            'Java': {
                'Spring': ['spring', 'import org.springframework'],
                'Hibernate': ['hibernate', 'import org.hibernate'],
                'Maven': ['maven', 'pom.xml']
            }
        }
        
        if language in frameworks:
            content_lower = content.lower()
            for framework, indicators in frameworks[language].items():
                for indicator in indicators:
                    if indicator in content_lower:
                        return framework
                        
        return 'None'
        
    def analyze_code_complexity(self, content: str, language: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞"""
        lines = content.split('\n')
        line_count = len(lines)
        
        # –ü–æ–¥—Å—á–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π, –∫–ª–∞—Å—Å–æ–≤ –∏ –∏–º–ø–æ—Ä—Ç–æ–≤
        function_count = 0
        class_count = 0
        import_count = 0
        
        if language == 'Python':
            function_count = len(re.findall(r'^\s*def\s+\w+', content, re.MULTILINE))
            class_count = len(re.findall(r'^\s*class\s+\w+', content, re.MULTILINE))
            import_count = len(re.findall(r'^\s*(import|from)\s+', content, re.MULTILINE))
        elif language in ['JavaScript', 'TypeScript']:
            function_count = len(re.findall(r'function\s+\w+|const\s+\w+\s*=\s*\(|let\s+\w+\s*=\s*\(', content))
            class_count = len(re.findall(r'class\s+\w+', content))
            import_count = len(re.findall(r'import\s+', content))
        elif language == 'Java':
            function_count = len(re.findall(r'public\s+\w+\s+\w+\s*\(|private\s+\w+\s+\w+\s*\(', content))
            class_count = len(re.findall(r'public\s+class\s+\w+|private\s+class\s+\w+', content))
            import_count = len(re.findall(r'import\s+', content))
            
        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        complexity_score = min(100, (function_count * 2 + class_count * 3 + import_count) // 10)
        
        return {
            'line_count': line_count,
            'function_count': function_count,
            'class_count': class_count,
            'import_count': import_count,
            'complexity_score': complexity_score
        }
        
    def extract_architectural_components(self, project_id: int):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        self.logger.info(f"üèóÔ∏è –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
            cursor.execute('''
                SELECT id, file_path, language, full_content 
                FROM project_files 
                WHERE project_id = ? AND language IN ('Python', 'JavaScript', 'TypeScript', 'Java', 'C++', 'C#')
            ''', (project_id,))
            
            files = cursor.fetchall()
            
            for file_id, file_path, language, content in files:
                if not content:
                    continue
                    
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
                components = self.extract_components_from_file(content, language, file_path)
                
                for component in components:
                    cursor.execute('''
                        INSERT INTO project_components (
                            project_id, component_type, component_name, file_id,
                            line_start, line_end, description, complexity_score
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        project_id, component['type'], component['name'], file_id,
                        component['line_start'], component['line_end'], 
                        component['description'], component['complexity']
                    ))
                    
            conn.commit()
            conn.close()
            
            self.logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            
    def extract_components_from_file(self, content: str, language: str, file_path: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        components = []
        lines = content.split('\n')
        
        if language == 'Python':
            # –ö–ª–∞—Å—Å—ã
            for i, line in enumerate(lines):
                class_match = re.match(r'^\s*class\s+(\w+)', line)
                if class_match:
                    class_name = class_match.group(1)
                    components.append({
                        'type': 'class',
                        'name': class_name,
                        'line_start': i + 1,
                        'line_end': self.find_class_end(lines, i),
                        'description': f"–ö–ª–∞—Å—Å {class_name}",
                        'complexity': self.calculate_class_complexity(lines, i)
                    })
                    
            # –§—É–Ω–∫—Ü–∏–∏
            for i, line in enumerate(lines):
                func_match = re.match(r'^\s*def\s+(\w+)', line)
                if func_match:
                    func_name = func_match.group(1)
                    components.append({
                        'type': 'function',
                        'name': func_name,
                        'line_start': i + 1,
                        'line_end': self.find_function_end(lines, i),
                        'description': f"–§—É–Ω–∫—Ü–∏—è {func_name}",
                        'complexity': self.calculate_function_complexity(lines, i)
                    })
                    
        elif language in ['JavaScript', 'TypeScript']:
            # –ö–ª–∞—Å—Å—ã
            for i, line in enumerate(lines):
                class_match = re.match(r'^\s*class\s+(\w+)', line)
                if class_match:
                    class_name = class_match.group(1)
                    components.append({
                        'type': 'class',
                        'name': class_name,
                        'line_start': i + 1,
                        'line_end': self.find_js_class_end(lines, i),
                        'description': f"–ö–ª–∞—Å—Å {class_name}",
                        'complexity': 5  # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞
                    })
                    
        return components
        
    def find_class_end(self, lines: List[str], start_line: int) -> int:
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ü–∞ –∫–ª–∞—Å—Å–∞ –≤ Python"""
        indent_level = len(lines[start_line]) - len(lines[start_line].lstrip())
        
        for i in range(start_line + 1, len(lines)):
            line = lines[i]
            if line.strip() == '':
                continue
            current_indent = len(line) - len(line.lstrip())
            if current_indent <= indent_level:
                return i
                
        return len(lines)
        
    def find_function_end(self, lines: List[str], start_line: int) -> int:
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ü–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ Python"""
        return self.find_class_end(lines, start_line)  # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
        
    def find_js_class_end(self, lines: List[str], start_line: int) -> int:
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ü–∞ –∫–ª–∞—Å—Å–∞ –≤ JavaScript"""
        brace_count = 0
        in_class = False
        
        for i in range(start_line, len(lines)):
            line = lines[i]
            if '{' in line:
                brace_count += line.count('{')
                in_class = True
            if '}' in line:
                brace_count -= line.count('}')
                if in_class and brace_count == 0:
                    return i + 1
                    
        return len(lines)
        
    def calculate_class_complexity(self, lines: List[str], start_line: int) -> int:
        """–†–∞—Å—á–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–¥–æ–≤ –∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        complexity = 0
        indent_level = len(lines[start_line]) - len(lines[start_line].lstrip())
        
        for i in range(start_line + 1, len(lines)):
            line = lines[i]
            if line.strip() == '':
                continue
            current_indent = len(line) - len(line.lstrip())
            if current_indent <= indent_level:
                break
            if re.match(r'^\s*def\s+', line):
                complexity += 2
            elif re.match(r'^\s*self\.\w+', line):
                complexity += 1
                
        return min(complexity, 20)
        
    def calculate_function_complexity(self, lines: List[str], start_line: int) -> int:
        """–†–∞—Å—á–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª–æ–≤–∏–π –∏ —Ü–∏–∫–ª–æ–≤
        complexity = 1  # –ë–∞–∑–æ–≤–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        indent_level = len(lines[start_line]) - len(lines[start_line].lstrip())
        
        for i in range(start_line + 1, len(lines)):
            line = lines[i]
            if line.strip() == '':
                continue
            current_indent = len(line) - len(line.lstrip())
            if current_indent <= indent_level:
                break
            if re.search(r'\b(if|elif|else|for|while|try|except|with)\b', line):
                complexity += 1
                
        return min(complexity, 10)
        
    def extract_project_knowledge(self, project_id: int):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞"""
        self.logger.info(f"üß† –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞–Ω–∏—è –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
            cursor.execute('''
                SELECT id, file_path, language, full_content 
                FROM project_files 
                WHERE project_id = ? AND full_content IS NOT NULL
            ''', (project_id,))
            
            files = cursor.fetchall()
            
            for file_id, file_path, language, content in files:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                patterns = self.extract_design_patterns(content, language)
                
                for pattern in patterns:
                    cursor.execute('''
                        INSERT INTO project_knowledge (
                            project_id, knowledge_type, title, description,
                            code_example, file_id, line_start, line_end,
                            tags, confidence_score
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        project_id, 'pattern', pattern['title'], pattern['description'],
                        pattern['code_example'], file_id, pattern['line_start'],
                        pattern['line_end'], json.dumps(pattern['tags']), pattern['confidence']
                    ))
                    
            conn.commit()
            conn.close()
            
            self.logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∑–Ω–∞–Ω–∏–π –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π: {e}")
            
    def extract_design_patterns(self, content: str, language: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        patterns = []
        lines = content.split('\n')
        
        # Singleton –ø–∞—Ç—Ç–µ—Ä–Ω
        if language == 'Python':
            singleton_pattern = re.search(r'class\s+(\w+).*?__new__.*?if.*?instance.*?return.*?instance', content, re.DOTALL)
            if singleton_pattern:
                patterns.append({
                    'title': 'Singleton Pattern',
                    'description': '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Singleton',
                    'code_example': singleton_pattern.group(0),
                    'line_start': 1,
                    'line_end': len(lines),
                    'tags': ['design_pattern', 'singleton', 'creational'],
                    'confidence': 0.8
                })
                
        # Factory –ø–∞—Ç—Ç–µ—Ä–Ω
        factory_pattern = re.search(r'class\s+(\w+Factory)', content)
        if factory_pattern:
            patterns.append({
                'title': 'Factory Pattern',
                'description': '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Factory',
                'code_example': factory_pattern.group(0),
                'line_start': 1,
                'line_end': len(lines),
                'tags': ['design_pattern', 'factory', 'creational'],
                'confidence': 0.7
            })
            
        return patterns
        
    def update_project_stats(self, project_id: int, analysis_result: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE projects SET 
                    total_files = ?, 
                    total_size = ?,
                    language_stats = ?,
                    framework_stats = ?,
                    last_analyzed = CURRENT_TIMESTAMP
                WHERE id = ?
            ''', (
                analysis_result['analyzed_files'],
                analysis_result['total_size'],
                json.dumps(analysis_result['language_stats']),
                json.dumps(analysis_result['framework_stats']),
                project_id
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            
    def update_project_analysis_time(self, project_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE projects SET last_analyzed = CURRENT_TIMESTAMP WHERE id = ?
            ''', (project_id,))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            
    def get_project_summary(self, project_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç—É"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
            cursor.execute('SELECT * FROM projects WHERE id = ?', (project_id,))
            project = cursor.fetchone()
            
            if not project:
                return None
                
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
            cursor.execute('''
                SELECT COUNT(*), SUM(file_size), AVG(complexity_score)
                FROM project_files WHERE project_id = ?
            ''', (project_id,))
            file_stats = cursor.fetchone()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            cursor.execute('''
                SELECT component_type, COUNT(*) 
                FROM project_components 
                WHERE project_id = ? 
                GROUP BY component_type
            ''', (project_id,))
            component_stats = cursor.fetchall()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–Ω–∞–Ω–∏–π
            cursor.execute('''
                SELECT knowledge_type, COUNT(*) 
                FROM project_knowledge 
                WHERE project_id = ? 
                GROUP BY knowledge_type
            ''', (project_id,))
            knowledge_stats = cursor.fetchall()
            
            conn.close()
            
            return {
                'project': project,
                'file_stats': file_stats,
                'component_stats': component_stats,
                'knowledge_stats': knowledge_stats
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return None
            
    def search_in_projects(self, query: str, project_ids: List[int] = None) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü–æ–∏—Å–∫ –≤ —Ñ–∞–π–ª–∞—Ö
            if project_ids:
                placeholders = ','.join('?' * len(project_ids))
                cursor.execute(f'''
                    SELECT pf.*, p.project_name 
                    FROM project_files pf
                    JOIN projects p ON pf.project_id = p.id
                    WHERE pf.project_id IN ({placeholders})
                    AND (pf.content_preview LIKE ? OR pf.file_name LIKE ?)
                ''', project_ids + [f'%{query}%', f'%{query}%'])
            else:
                cursor.execute('''
                    SELECT pf.*, p.project_name 
                    FROM project_files pf
                    JOIN projects p ON pf.project_id = p.id
                    WHERE pf.content_preview LIKE ? OR pf.file_name LIKE ?
                ''', (f'%{query}%', f'%{query}%'))
                
            results = cursor.fetchall()
            conn.close()
            
            return results
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return []
            
    def get_all_projects(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT p.*, 
                       COUNT(pf.id) as file_count,
                       SUM(pf.file_size) as total_size
                FROM projects p
                LEFT JOIN project_files pf ON p.id = pf.project_id
                GROUP BY p.id
                ORDER BY p.last_analyzed DESC
            ''')
            
            projects = cursor.fetchall()
            conn.close()
            
            return projects
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
            return []


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –°–ò–°–¢–ï–ú–ê –ß–¢–ï–ù–ò–Ø –ü–ê–ü–û–ö –î–†–£–ì–ò–• –ü–†–û–ï–ö–¢–û–í –î–õ–Ø RUBIN AI")
    print("=" * 60)
    
    reader = ProjectFolderReader()
    
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    test_project_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ").strip()
    
    if not test_project_path:
        print("‚ùå –ü—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
        
    if not os.path.exists(test_project_path):
        print(f"‚ùå –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_project_path}")
        return
        
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
    success = reader.analyze_project_folder(test_project_path)
    
    if success:
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        projects = reader.get_all_projects()
        print(f"\nüìã –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –±–∞–∑–µ: {len(projects)}")
        
        for project in projects:
            print(f"  - {project[1]} ({project[2]}) - {project[8]} —Ñ–∞–π–ª–æ–≤")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞")


if __name__ == "__main__":
    main()





