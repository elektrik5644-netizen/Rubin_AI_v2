#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –µ–¥–∏–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
"""

import sqlite3
import os
from datetime import datetime

def migrate_knowledge_bases():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –±–∞–∑ –∑–Ω–∞–Ω–∏–π –≤ –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
    
    print("üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –ë–ê–ó –ó–ù–ê–ù–ò–ô")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–π –±–∞–∑—ã
    if not os.path.exists('rubin_unified_knowledge.db'):
        print("‚ùå –ï–¥–∏–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ cleanup_databases.py")
        return
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –µ–¥–∏–Ω–æ–π –±–∞–∑–µ
    unified_db = sqlite3.connect('rubin_unified_knowledge.db')
    unified_cursor = unified_db.cursor()
    
    # –°–ø–∏—Å–æ–∫ –±–∞–∑ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
    knowledge_bases = [
        'rubin_knowledge_base.db',
        'rubin_knowledge_base_enhanced.db',
        'rubin_knowledge_base_unified.db',
        'readable_knowledge_base.db'
    ]
    
    total_migrated = 0
    
    for db_file in knowledge_bases:
        if os.path.exists(db_file):
            print(f"üìä –ú–∏–≥—Ä–∏—Ä—É—é {db_file}...")
            
            try:
                source_db = sqlite3.connect(db_file)
                source_cursor = source_db.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
                source_cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
                tables = source_cursor.fetchall()
                
                db_migrated = 0
                
                for table in tables:
                    table_name = table[0]
                    if table_name.startswith('knowledge') or table_name.startswith('documents'):
                        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                        source_cursor.execute(f"PRAGMA table_info({table_name})")
                        columns = source_cursor.fetchall()
                        
                        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                        source_cursor.execute(f"SELECT * FROM {table_name}")
                        rows = source_cursor.fetchall()
                        
                        for row in rows:
                            try:
                                # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ö–µ–º—É
                                title = row[1] if len(row) > 1 else 'Unknown'
                                content = row[2] if len(row) > 2 else ''
                                category = row[3] if len(row) > 3 else 'general'
                                tags = row[4] if len(row) > 4 else ''
                                
                                unified_cursor.execute('''
                                    INSERT INTO unified_knowledge 
                                    (title, content, category, tags, difficulty_level, source_file)
                                    VALUES (?, ?, ?, ?, ?, ?)
                                ''', (
                                    title,
                                    content,
                                    category,
                                    tags,
                                    'medium',
                                    db_file
                                ))
                                
                                db_migrated += 1
                                
                            except Exception as e:
                                print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
                                continue
                        
                        print(f"  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {table_name}")
                
                source_db.close()
                total_migrated += db_migrated
                print(f"üìà –í—Å–µ–≥–æ –∏–∑ {db_file}: {db_migrated} –∑–∞–ø–∏—Å–µ–π")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ {db_file}: {e}")
        else:
            print(f"‚ÑπÔ∏è {db_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é")
    
    unified_db.commit()
    unified_db.close()
    
    print(f"\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_migrated}")
    print("üìÅ –ï–¥–∏–Ω–∞—è –±–∞–∑–∞: rubin_unified_knowledge.db")

def migrate_learning_data():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è"""
    
    print("\nüß† –ú–ò–ì–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –≤ –µ–¥–∏–Ω–æ–π –±–∞–∑–µ
    unified_db = sqlite3.connect('rubin_unified_knowledge.db')
    unified_cursor = unified_db.cursor()
    
    unified_cursor.execute('''
        CREATE TABLE IF NOT EXISTS learning_interactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id TEXT,
            question TEXT NOT NULL,
            answer TEXT NOT NULL,
            category TEXT,
            confidence_score REAL,
            user_rating INTEGER,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            source_db TEXT
        )
    ''')
    
    # –°–ø–∏—Å–æ–∫ –±–∞–∑ –æ–±—É—á–µ–Ω–∏—è
    learning_bases = [
        'rubin_learning.db',
        'rubin_simple_learning.db',
        'rubin_understanding.db'
    ]
    
    total_learning_migrated = 0
    
    for db_file in learning_bases:
        if os.path.exists(db_file):
            print(f"üìö –ú–∏–≥—Ä–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è –∏–∑ {db_file}...")
            
            try:
                source_db = sqlite3.connect(db_file)
                source_cursor = source_db.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
                source_cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
                tables = source_cursor.fetchall()
                
                db_learning_migrated = 0
                
                for table in tables:
                    table_name = table[0]
                    if 'interaction' in table_name.lower() or 'learning' in table_name.lower():
                        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è
                        source_cursor.execute(f"SELECT * FROM {table_name}")
                        rows = source_cursor.fetchall()
                        
                        for row in rows:
                            try:
                                # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ö–µ–º—É
                                user_id = row[1] if len(row) > 1 else None
                                question = row[2] if len(row) > 2 else ''
                                answer = row[3] if len(row) > 3 else ''
                                category = row[4] if len(row) > 4 else 'general'
                                
                                unified_cursor.execute('''
                                    INSERT INTO learning_interactions 
                                    (user_id, question, answer, category, source_db)
                                    VALUES (?, ?, ?, ?, ?)
                                ''', (
                                    user_id,
                                    question,
                                    answer,
                                    category,
                                    db_file
                                ))
                                
                                db_learning_migrated += 1
                                
                            except Exception as e:
                                print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –æ–±—É—á–µ–Ω–∏—è: {e}")
                                continue
                        
                        print(f"  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π –æ–±—É—á–µ–Ω–∏—è –∏–∑ {table_name}")
                
                source_db.close()
                total_learning_migrated += db_learning_migrated
                print(f"üìà –í—Å–µ–≥–æ –∏–∑ {db_file}: {db_learning_migrated} –∑–∞–ø–∏—Å–µ–π –æ–±—É—á–µ–Ω–∏—è")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è –∏–∑ {db_file}: {e}")
        else:
            print(f"‚ÑπÔ∏è {db_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é")
    
    unified_db.commit()
    unified_db.close()
    
    print(f"\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –æ–±—É—á–µ–Ω–∏—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_learning_migrated}")

def create_performance_indexes():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    print("\n‚ö° –°–û–ó–î–ê–ù–ò–ï –ò–ù–î–ï–ö–°–û–í –î–õ–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 50)
    
    try:
        unified_db = sqlite3.connect('rubin_unified_knowledge.db')
        unified_cursor = unified_db.cursor()
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
        indexes = [
            "CREATE INDEX IF NOT EXISTS idx_learning_user ON learning_interactions(user_id)",
            "CREATE INDEX IF NOT EXISTS idx_learning_category ON learning_interactions(category)",
            "CREATE INDEX IF NOT EXISTS idx_learning_timestamp ON learning_interactions(timestamp)",
            "CREATE INDEX IF NOT EXISTS idx_unified_created ON unified_knowledge(created_at)",
            "CREATE INDEX IF NOT EXISTS idx_unified_updated ON unified_knowledge(updated_at)"
        ]
        
        for index_sql in indexes:
            unified_cursor.execute(index_sql)
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å")
        
        unified_db.commit()
        unified_db.close()
        
        print("‚úÖ –í—Å–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")

def verify_migration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ú–ò–ì–†–ê–¶–ò–ò")
    print("=" * 50)
    
    try:
        unified_db = sqlite3.connect('rubin_unified_knowledge.db')
        unified_cursor = unified_db.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ unified_knowledge
        unified_cursor.execute("SELECT COUNT(*) FROM unified_knowledge")
        knowledge_count = unified_cursor.fetchone()[0]
        print(f"üìö –ó–∞–ø–∏—Å–µ–π –∑–Ω–∞–Ω–∏–π: {knowledge_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ learning_interactions
        unified_cursor.execute("SELECT COUNT(*) FROM learning_interactions")
        learning_count = unified_cursor.fetchone()[0]
        print(f"üß† –ó–∞–ø–∏—Å–µ–π –æ–±—É—á–µ–Ω–∏—è: {learning_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        unified_cursor.execute("SELECT DISTINCT category FROM unified_knowledge")
        categories = unified_cursor.fetchall()
        print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π –∑–Ω–∞–Ω–∏–π: {len(categories)}")
        for category in categories[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"  - {category[0]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        unified_cursor.execute("SELECT DISTINCT source_file FROM unified_knowledge")
        sources = unified_cursor.fetchall()
        print(f"üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {len(sources)}")
        for source in sources:
            print(f"  - {source[0]}")
        
        unified_db.close()
        
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –ú–ò–ì–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• RUBIN AI v2")
    print("=" * 60)
    
    # 1. –ú–∏–≥—Ä–∏—Ä—É–µ–º –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    migrate_knowledge_bases()
    
    # 2. –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è
    migrate_learning_data()
    
    # 3. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    create_performance_indexes()
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    verify_migration()
    
    print("\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 60)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("  ‚úÖ –í—Å–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã")
    print("  ‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    print("  ‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω—ã")
    print("  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞")
    
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("  1. –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã")
    print("  2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
    print("  3. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Å –Ω–æ–≤–æ–π –±–∞–∑–æ–π")

if __name__ == "__main__":
    main()










