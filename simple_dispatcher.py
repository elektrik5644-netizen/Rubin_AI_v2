#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Smart Dispatcher –¥–ª—è Rubin AI v2
–ë–µ–∑ Ethical Core, —Å –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–∏–∫–æ–π –∏ –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
"""

from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import requests
import logging
import os
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
SERVERS = {
    'electrical': {
        'port': 8087,
        'endpoint': '/api/electrical/status',
        'method': 'GET',
        'keywords': ['–∑–∞–∫–æ–Ω', '–∫–∏—Ä—Ö–≥–æ—Ñ–∞', '—Ä–µ–∑–∏—Å—Ç–æ—Ä', '—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä', '–¥–∏–æ–¥', '–∫–æ–Ω—Ç–∞–∫—Ç–æ—Ä', '—Ä–µ–ª–µ', '–º–æ—â–Ω–æ—Å—Ç—å', '—Ç–æ–∫', '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', '—Å—Ö–µ–º–∞', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ', '—Ü–µ–ø–∏'],
        'description': '–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ –∏ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã'
    },
    'mathematics': {
        'port': 8086,
        'endpoint': '/health',
        'method': 'GET',
        'keywords': ['—É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–∞–ª–≥–µ–±—Ä–∞', '–≥–µ–æ–º–µ—Ç—Ä–∏—è', '–∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞', '+', '-', '*', '/', '=', '–≤—ã—á–∏—Å–ª–∏—Ç—å', '–ø–æ—Å—á–∏—Ç–∞—Ç—å'],
        'description': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è'
    },
    'programming': {
        'port': 8088,
        'endpoint': '/api/programming/explain',
        'method': 'GET',
        'keywords': ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–∞–ª–≥–æ—Ä–∏—Ç–º', 'python', 'java', 'c++', 'javascript', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '—Ñ—É–Ω–∫—Ü–∏—è', '–∫–ª–∞—Å—Å', '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è'],
        'description': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'
    },
    'general': {
        'port': 8085,
        'endpoint': '/api/chat',
        'method': 'POST',
        'keywords': ['–ø—Ä–∏–≤–µ—Ç', '–∫–∞–∫ –¥–µ–ª–∞', '—á—Ç–æ –¥–µ–ª–∞–µ—à—å', '–∫—Ç–æ —Ç—ã', '–ø–æ–º–æ—â—å', '—Å–ø—Ä–∞–≤–∫–∞'],
        'description': '–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ—â—å'
    },
    'neuro': {
        'port': 8090,
        'endpoint': '/api/neuro/chat',
        'method': 'POST',
        'keywords': ['–Ω–µ–π—Ä–æ—Å–µ—Ç—å', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–º–æ–∑–≥', '–æ–±—É—á–µ–Ω–∏–µ', '–∞–Ω–∞–ª–∏–∑', '–Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å'],
        'description': '–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –∏ –ò–ò'
    },
    'plc_analysis': {
        'port': 8099,
        'endpoint': '/api/plc/analyze',
        'method': 'POST',
        'keywords': ['plc', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–∞–Ω–∞–ª–∏–∑', '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º—ã–π –ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä'],
        'description': '–ê–Ω–∞–ª–∏–∑ PLC –ø—Ä–æ–≥—Ä–∞–º–º'
    },
    'advanced_math': {
        'port': 8100,
        'endpoint': '/api/math/advanced',
        'method': 'POST',
        'keywords': ['–∏–Ω—Ç–µ–≥—Ä–∞–ª', '–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è', '–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª', '—Å–∏—Å—Ç–µ–º–∞ —É—Ä–∞–≤–Ω–µ–Ω–∏–π', '—Å–ª–æ–∂–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑'],
        'description': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞'
    },
    'data_processing': {
        'port': 8101,
        'endpoint': '/api/data_processing/health',
        'method': 'GET',
        'keywords': ['–¥–∞–Ω–Ω—ã–µ', '–æ–±—Ä–∞–±–æ—Ç–∫–∞', '–∞–Ω–∞–ª–∏–∑', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è', '–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö'],
        'description': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö'
    },
    'search_engine': {
        'port': 8102,
        'endpoint': '/api/search/hybrid',
        'method': 'POST',
        'keywords': ['–ø–æ–∏—Å–∫', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–Ω–∞–π—Ç–∏', '–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', '–¥–æ–∫—É–º–µ–Ω—Ç', '–ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'],
        'description': '–ü–æ–∏—Å–∫ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
    },
    'system_utils': {
        'port': 8103,
        'endpoint': '/api/system/utils',
        'method': 'POST',
        'keywords': ['—Å–∏—Å—Ç–µ–º–∞', '—Å—Ç–∞—Ç—É—Å', '–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', '—É—Ç–∏–ª–∏—Ç—ã', '—Å–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã', '–ø—Ä–æ–±–ª–µ–º—ã', '–æ—à–∏–±–∫–∏', '–∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã', '–ø—Ä–æ–±–ª–µ–º—ã —Å–∏—Å—Ç–µ–º—ã', '—Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏', '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã'],
        'description': '–°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã'
    },
    'gai': {
        'port': 8104,
        'endpoint': '/api/gai/generate_text',
        'method': 'POST',
        'keywords': ['—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å', '—Å–æ–∑–¥–∞—Ç—å', '–Ω–∞–ø–∏—Å–∞—Ç—å', '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '–≥–µ–Ω–µ—Ä–∞—Ü–∏—è', '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ'],
        'description': '–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ò–ò'
    },
    'controllers': {
        'port': 9000,
        'endpoint': '/api/controllers/topic/general',
        'method': 'GET',
        'keywords': ['pmac', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–¥–≤–∏–∂–µ–Ω–∏–µ', '–æ—Å–∏', '–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è', 'servo', 'step', '–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '—Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥', '—Å–µ—Ä–≤–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å', '–ø—Ä–∏–≤–æ–¥', '–¥–≤–∏–≥–∞—Ç–µ–ª—å'],
        'description': '–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è'
    },
    'unified_manager': {
        'port': 8084,
        'endpoint': '/api/system/status',
        'method': 'GET',
        'keywords': ['—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '—Å–µ—Ä–≤–µ—Ä—ã', '–º–æ–¥—É–ª–∏', '—Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã', '–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã'],
        'description': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π'
    },
    'logic_tasks': {
        'port': 8106,
        'endpoint': '/api/logic/chat',
        'method': 'POST',
        'keywords': ['–ª–æ–≥–∏–∫–∞', '–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞', '–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ', '–ø—Ä–∞–≤–∏–ª–∞', '–∞—Ä–≥—É–º–µ–Ω—Ç', '–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ', '–∑–∞–¥–∞—á–∞', '—Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É'],
        'description': '–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è'
    }
}

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
STATS = {
    'total_requests': 0,
    'successful_requests': 0,
    'failed_requests': 0,
    'server_stats': {},
    'start_time': datetime.now()
}

def categorize_message(message: str) -> str:
    """üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–µ—Å–æ–≤—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏"""
    lower_message = message.lower()
    
    # –í–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
    keyword_weights = {
        # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
        'high_priority': {
            '—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä': 3, '—Ä–µ–∑–∏—Å—Ç–æ—Ä': 3, '–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä': 3, '–¥–∏–æ–¥': 3,
            'pmac': 3, 'plc': 3, '—Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥': 3, '—Å–µ—Ä–≤–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å': 3,
            '–∞–Ω—Ç–µ–Ω–Ω–∞': 3, '–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫': 3, '–ø—Ä–∏–µ–º–Ω–∏–∫': 3,
            'python': 3, 'java': 3, 'c++': 3, 'javascript': 3,
            '–∏–Ω—Ç–µ–≥—Ä–∞–ª': 3, '–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è': 3, '—Å–∏—Å—Ç–µ–º–∞ —É—Ä–∞–≤–Ω–µ–Ω–∏–π': 3
        },
        # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –æ–±—â–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
        'medium_priority': {
            '—Å—Ö–µ–º–∞': 2, '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ': 2, '—Ç–æ–∫': 2, '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ': 2,
            '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä': 2, '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è': 2, '–¥–≤–∏–≥–∞—Ç–µ–ª—å': 2,
            '—Å–∏–≥–Ω–∞–ª': 2, '—Ä–∞–¥–∏–æ': 2, '—á–∞—Å—Ç–æ—Ç–∞': 2,
            '–∫–æ–¥': 2, '–∞–ª–≥–æ—Ä–∏—Ç–º': 2, '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ': 2,
            '—É—Ä–∞–≤–Ω–µ–Ω–∏–µ': 2, '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞': 2, '–≤—ã—á–∏—Å–ª–∏—Ç—å': 2
        }
    }
    
    scores = {name: 0 for name in SERVERS}
    
    # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Å –≤–µ—Å–æ–≤—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
    for server_name, config in SERVERS.items():
        for keyword in config['keywords']:
            if keyword in lower_message:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Å –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                weight = 1  # –ë–∞–∑–æ–≤—ã–π –≤–µ—Å
                for priority_level, keywords in keyword_weights.items():
                    if keyword in keywords:
                        weight = keywords[keyword]
                        break
                
                scores[server_name] += weight
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    if any(word in lower_message for word in ['–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞', '–ª–æ–≥–∏–∫–∞', '–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ', '–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ']):
        logger.info(f"üß† –õ–æ–≥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: '{message[:30]}...' ‚Üí logic_tasks")
        return 'logic_tasks'
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç
    if any(word in lower_message for word in ['–ø—Ä–æ–±–ª–µ–º—ã', '–æ—à–∏–±–∫–∏', '–∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã', '—Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏', '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã']):
        logger.info(f"üõ†Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: '{message[:30]}...' ‚Üí system_utils")
        return 'system_utils'
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
    if any(word in lower_message for word in ['pmac', 'plc', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', '—Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥', '—Å–µ—Ä–≤–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å', '–ø—Ä–∏–≤–æ–¥', '–¥–≤–∏–≥–∞—Ç–µ–ª—å']):
        logger.info(f"üéÆ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω: '{message[:30]}...' ‚Üí controllers")
        return 'controllers'
    
    # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤
    if scores:
        best_server = max(scores, key=scores.get)
        max_score = scores[best_server]
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏
        if max_score > 0:
            confidence = max_score / len(lower_message.split()) if lower_message.split() else 0
            logger.info(f"üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è: '{message[:30]}...' ‚Üí {best_server} (–≤–µ—Å: {max_score}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
            return best_server
    
    # Fallback –Ω–∞ general —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
    logger.info(f"ü§î –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: '{message[:30]}...' ‚Üí general")
    return 'general'

def forward_request(category: str, message: str):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Å–µ—Ä–≤–µ—Ä—É."""
    server_config = SERVERS.get(category)
    if not server_config:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        return {"error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", "category": category}, 400

    port = server_config['port']
    endpoint = server_config['endpoint']
    url = f"http://localhost:{port}{endpoint}"
    
    logger.info(f"üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ {category} –Ω–∞ {url}")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ payload –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–µ—Ä–≤–µ—Ä–∞
    payload = {}
    if category in ['electrical', 'programming', 'general', 'mathematics', 'neuro', 'radiomechanics', 'plc_analysis', 'advanced_math', 'data_processing', 'search_engine', 'system_utils', 'gai', 'logic_tasks']:
        payload = {'message': message}
    elif category == 'controllers':
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if 'pmac' in message.lower():
            payload = {'topic': 'pmac'}
        elif 'plc' in message.lower():
            payload = {'topic': 'plc'}
        elif '—Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥' in message.lower() or 'servo' in message.lower():
            payload = {'topic': '—Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥'}
        elif '—ç–Ω–∫–æ–¥–µ—Ä' in message.lower():
            payload = {'topic': '—ç–Ω–∫–æ–¥–µ—Ä'}
        elif '—á–ø—É' in message.lower():
            payload = {'topic': '—á–ø—É'}
        elif 'pid' in message.lower():
            payload = {'topic': 'pid'}
        else:
            payload = {'topic': 'pmac'}  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é PMAC
    elif category == 'unified_manager':
        payload = {'command': message}

    try:
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        method = server_config.get('method', 'POST')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é POST
        
        if method == 'GET':
            # –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ URL
            if payload:
                params = payload
                response = requests.get(url, params=params, timeout=10)
            else:
                response = requests.get(url, timeout=10)
        else:  # POST requests
            response = requests.post(url, json=payload, timeout=10)
        
        response.raise_for_status()
        logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä {category} –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        STATS['successful_requests'] += 1
        if category not in STATS['server_stats']:
            STATS['server_stats'][category] = {'requests': 0, 'success': 0}
        STATS['server_stats'][category]['requests'] += 1
        STATS['server_stats'][category]['success'] += 1
        
        return response.json(), 200
        
    except requests.exceptions.ConnectionError:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {category}: –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        STATS['failed_requests'] += 1
        return {"error": f"–°–µ—Ä–≤–µ—Ä {category} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "category": category}, 503
        
    except requests.exceptions.Timeout:
        logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å {category}")
        STATS['failed_requests'] += 1
        return {"error": f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å {category}", "category": category}, 504
        
    except requests.exceptions.HTTPError as e:
        logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –æ—Ç {category}: {e.response.status_code} - {e.response.text}")
        STATS['failed_requests'] += 1
        return {"error": f"HTTP –æ—à–∏–±–∫–∞ –æ—Ç {category}: {e.response.status_code}", "details": e.response.text, "category": category}, e.response.status_code
        
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {category}: {e}")
        STATS['failed_requests'] += 1
        return {"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {category}", "details": str(e), "category": category}, 500

@app.route('/api/chat', methods=['POST'])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —á–∞—Ç–∞."""
    data = request.get_json()
    message = data.get('message', '')
    
    if not message:
        return jsonify({"error": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}), 400
    
    STATS['total_requests'] += 1
    logger.info(f"–í—ã: {message[:50]}...")
    
    # 1. –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    category = categorize_message(message)
    logger.info(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è: '{message[:50]}...' ‚Üí {category}")
    
    # 2. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    response_data, status_code = forward_request(category, message)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç
    if isinstance(response_data, dict):
        response_data['category'] = category
        response_data['server_description'] = SERVERS.get(category, {}).get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä')
    
    return jsonify(response_data), status_code

@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞."""
    uptime = datetime.now() - STATS['start_time']
    success_rate = (STATS['successful_requests'] / STATS['total_requests'] * 100) if STATS['total_requests'] > 0 else 0
    
    return jsonify({
        'status': 'healthy',
        'message': 'Simple Dispatcher —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ',
        'uptime': str(uptime),
        'total_requests': STATS['total_requests'],
        'successful_requests': STATS['successful_requests'],
        'failed_requests': STATS['failed_requests'],
        'success_rate': f"{success_rate:.2f}%",
        'servers_count': len(SERVERS)
    }), 200

@app.route('/api/stats', methods=['GET'])
def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã."""
    uptime = datetime.now() - STATS['start_time']
    
    return jsonify({
        'uptime': str(uptime),
        'total_requests': STATS['total_requests'],
        'successful_requests': STATS['successful_requests'],
        'failed_requests': STATS['failed_requests'],
        'server_stats': STATS['server_stats'],
        'servers': {name: config['description'] for name, config in SERVERS.items()}
    }), 200

@app.route('/api/servers', methods=['GET'])
def get_servers():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤."""
    return jsonify({
        'servers': {name: {
            'port': config['port'],
            'endpoint': config['endpoint'],
            'description': config['description'],
            'keywords': config['keywords'][:5]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        } for name, config in SERVERS.items()}
    }), 200

@app.route('/matrix/RubinDeveloper.html', methods=['GET'])
def serve_rubin_developer():
    """–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ RubinDeveloper –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    return send_from_directory('matrix', 'RubinDeveloper.html')

@app.route('/', methods=['GET'])
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ."""
    return jsonify({
        'message': 'Simple Smart Dispatcher –¥–ª—è Rubin AI v2',
        'version': '2.0-simple',
        'status': 'running',
        'endpoints': {
            'POST /api/chat': '–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç',
            'GET /api/health': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è',
            'GET /api/stats': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            'GET /api/servers': '–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤',
            'GET /matrix/RubinDeveloper.html': '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞'
        },
        'servers_count': len(SERVERS)
    }), 200

if __name__ == '__main__':
    print("üöÄ Simple Smart Dispatcher –∑–∞–ø—É—â–µ–Ω")
    print("=" * 50)
    print(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(SERVERS)}")
    print(f"üåê URL: http://localhost:8080")
    print(f"üì± RubinDeveloper: http://localhost:8080/matrix/RubinDeveloper.html")
    print("=" * 50)
    
    # –û—Ç–∫–ª—é—á–∞–µ–º reloader –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    app.run(port=8080, debug=False, use_reloader=False)