#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Интеграция технического словаря в систему Rubin AI
"""

import sqlite3
import json
from datetime import datetime
from typing import Dict, List, Set

class TechnicalVocabularyIntegrator:
    """Класс для интеграции технического словаря"""
    
    def __init__(self, db_path: str = "rubin_ai_v2.db"):
        self.db_path = db_path
        self.connection = None
        self.connect_database()
    
    def connect_database(self):
        """Подключение к базе данных"""
        try:
            self.connection = sqlite3.connect(self.db_path)
            self.connection.execute("PRAGMA foreign_keys = ON")
            print("✅ Подключение к базе данных установлено")
        except Exception as e:
            print(f"❌ Ошибка подключения к БД: {e}")
            raise
    
    def create_vocabulary_tables(self):
        """Создание таблиц для словаря"""
        try:
            cursor = self.connection.cursor()
            
            # Создаем расширенную таблицу синонимов
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS technical_synonyms (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    main_term TEXT NOT NULL,
                    synonym TEXT NOT NULL,
                    category TEXT,
                    subcategory TEXT,
                    language TEXT DEFAULT 'ru',
                    confidence REAL DEFAULT 1.0,
                    usage_count INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(main_term, synonym, category)
                )
            """)
            
            # Создаем таблицу категорий терминов
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS term_categories (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    category_name TEXT UNIQUE NOT NULL,
                    description TEXT,
                    parent_category TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Создаем индексы для быстрого поиска
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_tech_synonyms_main ON technical_synonyms(main_term)")
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_tech_synonyms_synonym ON technical_synonyms(synonym)")
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_tech_synonyms_category ON technical_synonyms(category)")
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_tech_synonyms_language ON technical_synonyms(language)")
            
            self.connection.commit()
            print("✅ Таблицы словаря созданы")
            
        except Exception as e:
            print(f"❌ Ошибка создания таблиц: {e}")
            raise
    
    def load_technical_vocabulary(self) -> Dict[str, List[str]]:
        """Загрузка технического словаря из предоставленных данных"""
        
        # Ваш технический словарь
        vocabulary = {
            # Автоматизация и ПИД
            "ПИД": ["PID", "пид", "pid", "регулятор", "контроллер", "управление"],
            "PID": ["ПИД", "пид", "pid", "регулятор", "контроллер", "управление"],
            "регулятор": ["ПИД", "PID", "пид", "pid", "контроллер", "управление"],
            "контроллер": ["ПИД", "PID", "пид", "pid", "регулятор", "управление"],
            
            # Электротехника
            "электротехника": ["электрика", "электричество", "электрический", "электро"],
            "закон ома": ["ом", "сопротивление", "ток", "напряжение"],
            "мощность": ["ватт", "энергия", "сила тока"],
            "цепь": ["схема", "контур", "соединение"],
            
            # Программирование
            "python": ["питон", "скрипт", "программирование", "код"],
            "алгоритм": ["логика", "последовательность", "решение"],
            "структура данных": ["массив", "список", "словарь", "объект"],
            "ооп": ["объектно-ориентированное программирование", "класс", "объект", "наследование"],
            
            # Радиотехника
            "антенна": ["антенны", "излучатель", "приемник", "передатчик"],
            "радиосвязь": ["радио", "связь", "беспроводной", "частота"],
            "модуляция": ["ам", "чм", "фм", "цифровая модуляция"],
            
            # Автоматизация
            "автоматизация": ["автоматика", "автоматизированный", "система управления"],
            "плк": ["plc", "программируемый логический контроллер", "контроллер"],
            "scada": ["скада", "диспетчерское управление"],
            "датчик": ["сенсор", "измеритель", "детектор"],
            "исполнительное устройство": ["актуатор", "привод", "механизм"],
            
            # Общие термины
            "технический": ["инженерный", "специализированный", "промышленный"],
            "документация": ["руководство", "описание", "инструкция", "спецификация"],
            "пример": ["образец", "кейс", "демонстрация"],
            "расчет": ["вычисление", "формула", "анализ"],
            "диагностика": ["поиск неисправностей", "анализ ошибок", "тестирование"],
            "обслуживание": ["ремонт", "поддержка", "сервис"],
            "оптимизация": ["улучшение", "повышение эффективности", "настройка"],
            "безопасность": ["защита", "надежность", "предотвращение"],
            "связь": ["коммуникация", "передача данных", "сеть"],
            "система": ["комплекс", "установка", "аппарат"],
            "управление": ["контроль", "регулирование", "менеджмент"],
            "мониторинг": ["наблюдение", "отслеживание", "контроль"],
            "анализ": ["исследование", "изучение", "разбор"],
            "проектирование": ["разработка", "дизайн", "конструирование"],
            "архитектура": ["структура", "построение", "организация"],
            "внедрение": ["реализация", "запуск", "инсталляция"],
            "тестирование": ["проверка", "отладка", "испытание"],
            "моделирование": ["симуляция", "имитация", "построение модели"],
            "стандарт": ["норма", "правило", "требование"],
            "протокол": ["правила обмена", "формат данных", "интерфейс"],
            "интерфейс": ["взаимодействие", "связь", "пользовательский интерфейс"],
            "конфигурация": ["настройка", "параметры", "установка"],
            "калибровка": ["настройка", "тарировка", "юстировка"],
            "интеграция": ["объединение", "сопряжение", "взаимодействие"],
            "модернизация": ["обновление", "усовершенствование", "реконструкция"],
            "разработка": ["создание", "проектирование", "конструирование"],
            "ввод в эксплуатацию": ["запуск", "пуск", "старт"],
            "решение": ["ответ", "способ", "метод"],
            "проблема": ["задача", "вопрос", "трудность"],
            "ошибка": ["сбой", "неисправность", "дефект"],
            "восстановление": ["реставрация", "регенерация", "ремонт"],
            "резервирование": ["дублирование", "копирование", "страхование"],
            "оптоволокно": ["оптика", "волоконно-оптический", "световод"],
            "беспроводной": ["радио", "wi-fi", "bluetooth"],
            "облачные технологии": ["облако", "cloud", "удаленный"],
            "искусственный интеллект": ["ии", "ai", "машинное обучение"],
            "большие данные": ["big data", "аналитика данных", "хранилище данных"],
            "кибербезопасность": ["информационная безопасность", "защита данных", "хакерство"],
            "виртуализация": ["виртуальная машина", "контейнеризация", "облачные вычисления"],
            "блокчейн": ["распределенный реестр", "криптовалюта", "децентрализация"],
            "интернет вещей": ["iot", "умный дом", "подключенные устройства"],
            "робототехника": ["роботы", "автоматизированные системы", "манипуляторы"],
            "нанотехнологии": ["наноматериалы", "нанороботы", "микротехнологии"],
            "биотехнологии": ["генная инженерия", "биоинформатика", "медицинские технологии"],
            "зеленые технологии": ["экология", "возобновляемая энергия", "устойчивое развитие"],
            "квантовые вычисления": ["квантовый компьютер", "квантовая физика", "квантовая механика"],
            "дополненная реальность": ["ar", "виртуальная реальность", "смешанная реальность"],
            "3d печать": ["аддитивное производство", "прототипирование", "быстрое производство"],
            "машинное зрение": ["компьютерное зрение", "распознавание образов", "обработка изображений"],
            "голосовые технологии": ["распознавание речи", "синтез речи", "голосовой помощник"],
            "нейронные сети": ["глубокое обучение", "искусственные нейронные сети", "машинное обучение"],
            "обработка естественного языка": ["nlp", "лингвистика", "анализ текста"],
            "рекомендательные системы": ["персонализация", "фильтрация контента", "предсказание"],
            "компьютерная графика": ["визуализация", "рендеринг", "анимация"],
            "геймификация": ["игровые элементы", "мотивация", "вовлечение"],
            "цифровая трансформация": ["диджитализация", "инновации", "автоматизация процессов"],
            "электронная коммерция": ["онлайн-торговля", "интернет-магазин", "цифровой маркетинг"],
            "финтех": ["финансовые технологии", "онлайн-банкинг", "криптовалюты"],
            "агротехнологии": ["умное сельское хозяйство", "дроны", "автоматизация ферм"],
            "умный город": ["городская инфраструктура", "сенсоры", "управление трафиком"],
            "умный дом": ["домашняя автоматизация", "интернет вещей", "безопасность"],
            "телемедицина": ["удаленная медицина", "онлайн-консультации", "цифровое здравоохранение"],
            "образовательные технологии": ["edtech", "онлайн-обучение", "виртуальные классы"],
            "логистика": ["управление цепями поставок", "складская автоматизация", "транспорт"],
            "производство": ["индустрия 4.0", "умное производство", "автоматизация"],
            "энергетика": ["энергоэффективность", "возобновляемые источники", "энергоменеджмент"],
            "строительство": ["bim", "цифровое строительство", "автоматизация"],
            "геоинформационные системы": ["гис", "картография", "пространственный анализ"],
            "метеорология": ["прогноз погоды", "климатические модели", "датчики"],
            "астрономия": ["космос", "телескопы", "планеты"],
            "геология": ["земля", "полезные ископаемые", "сейсмология"],
            "биология": ["жизнь", "эволюция", "генетика"],
            "химия": ["вещества", "реакции", "материалы"],
            "физика": ["законы природы", "энергия", "материя"],
            "математика": ["числа", "формулы", "логика"],
            "статистика": ["анализ данных", "вероятность", "моделирование"],
            "экономика": ["рынок", "финансы", "производство"],
            "право": ["законы", "юриспруденция", "регулирование"],
            "история": ["прошлое", "события", "культура"],
            "философия": ["мышление", "бытие", "познание"],
            "психология": ["поведение", "сознание", "эмоции"],
            "социология": ["общество", "культура", "взаимодействие"],
            "политология": ["политика", "государство", "власть"],
            "искусство": ["творчество", "эстетика", "культура"],
            "литература": ["книги", "тексты", "поэзия"],
            "музыка": ["звук", "ритм", "гармония"],
            "кино": ["фильмы", "режиссура", "актерское мастерство"],
            "театр": ["сцена", "драма", "представление"],
            "архитектура": ["здания", "проектирование", "стиль"],
            "дизайн": ["графика", "интерфейс", "продукт"],
            "мода": ["стиль", "одежда", "тенденции"],
            "кулинария": ["еда", "рецепты", "гастрономия"],
            "спорт": ["физическая активность", "соревнования", "здоровье"],
            "путешествия": ["туризм", "отдых", "приключения"],
            "языки": ["лингвистика", "перевод", "общение"],
            "культура": ["традиции", "обычаи", "искусство"],
            "религия": ["вера", "духовность", "обряды"],
            "этика": ["мораль", "ценности", "поведение"],
            "экология": ["окружающая среда", "природа", "загрязнение"],
            "здоровье": ["медицина", "благополучие", "фитнес"],
            "питание": ["диета", "продукты", "здоровый образ жизни"],
            "финансы": ["инвестиции", "бюджет", "сбережения"],
            "маркетинг": ["продвижение", "продажи", "реклама"],
            "менеджмент": ["управление", "организация", "лидерство"],
            "предпринимательство": ["бизнес", "стартап", "инновации"],
            "инновации": ["новые технологии", "разработки", "изобретения"],
            "исследования": ["наука", "эксперименты", "открытия"],
            "развитие": ["прогресс", "рост", "улучшение"],
            "обучение": ["образование", "знания", "навыки"],
            "карьера": ["работа", "профессия", "развитие"],
            "личность": ["саморазвитие", "психология", "характер"],
            "общение": ["коммуникация", "диалог", "взаимодействие"],
            "отношения": ["семья", "дружба", "любовь"],
            "счастье": ["благополучие", "радость", "удовлетворение"],
            "стресс": ["напряжение", "тревога", "усталость"],
            "медитация": ["релаксация", "осознанность", "спокойствие"],
            "йога": ["физические упражнения", "духовные практики", "гибкость"],
            "фитнес": ["тренировки", "здоровье", "сила"],
            "путешествие": ["приключения", "отдых", "исследование"],
            "хобби": ["увлечения", "интересы", "досуг"],
            "творчество": ["искусство", "вдохновение", "самовыражение"],
            "волонтерство": ["помощь", "благотворительность", "социальная ответственность"],
            "экологическая ответственность": ["устойчивость", "переработка", "сохранение природы"],
            "гражданская активность": ["общественное участие", "политика", "права"],
            "глобализация": ["мировая экономика", "культурный обмен", "интеграция"],
            "демократия": ["свобода", "равенство", "права человека"],
            "авторитаризм": ["диктатура", "контроль", "подавление"],
            "капитализм": ["рыночная экономика", "частная собственность", "конкуренция"],
            "социализм": ["общественная собственность", "равенство", "коллективизм"],
            "коммунизм": ["бесклассовое общество", "отсутствие государства", "общая собственность"],
            "анархизм": ["безвластие", "свобода", "самоуправление"],
            "феминизм": ["равенство полов", "права женщин", "гендер"],
            "расизм": ["дискриминация", "предубеждение", "стереотипы"],
            "ксенофобия": ["нетерпимость", "страх", "ненависть"],
            "гомофобия": ["нетерпимость", "страх", "предубеждение"],
            "трансфобия": ["нетерпимость", "страх", "предубеждение"],
            "исламофобия": ["нетерпимость", "страх", "предубеждение"],
            "антисемитизм": ["нетерпимость", "страх", "предубеждение"],
            "эйджизм": ["дискриминация по возрасту", "стереотипы", "предубеждение"]
        }
        
        return vocabulary
    
    def categorize_terms(self, term: str, synonyms: List[str]) -> str:
        """Определение категории термина"""
        categories = {
            "автоматизация": ["ПИД", "PID", "регулятор", "контроллер", "плк", "scada", "датчик", "автоматизация"],
            "электротехника": ["электротехника", "закон ома", "мощность", "цепь", "электрика", "электричество"],
            "программирование": ["python", "алгоритм", "структура данных", "ооп", "код", "программирование"],
            "радиотехника": ["антенна", "радиосвязь", "модуляция", "радио", "частота"],
            "общие_термины": ["технический", "документация", "пример", "расчет", "диагностика", "обслуживание"],
            "информационные_технологии": ["искусственный интеллект", "большие данные", "кибербезопасность", "виртуализация", "блокчейн"],
            "науки": ["физика", "химия", "математика", "биология", "геология", "астрономия"],
            "социальные_науки": ["психология", "социология", "политология", "экономика", "право"],
            "искусство_культура": ["искусство", "литература", "музыка", "кино", "театр", "архитектура"],
            "образование_развитие": ["обучение", "образование", "карьера", "развитие", "навыки"],
            "здоровье_спорт": ["здоровье", "спорт", "фитнес", "питание", "медицина"],
            "общество_политика": ["демократия", "капитализм", "социализм", "глобализация", "права человека"]
        }
        
        for category, keywords in categories.items():
            if any(keyword.lower() in term.lower() for keyword in keywords):
                return category
            if any(keyword.lower() in synonym.lower() for keyword in keywords for synonym in synonyms):
                return category
        
        return "общие_термины"
    
    def integrate_vocabulary(self):
        """Интеграция словаря в базу данных"""
        try:
            vocabulary = self.load_technical_vocabulary()
            cursor = self.connection.cursor()
            
            # Очищаем существующие данные
            cursor.execute("DELETE FROM technical_synonyms")
            cursor.execute("DELETE FROM term_categories")
            
            # Добавляем категории
            categories = set()
            for term, synonyms in vocabulary.items():
                category = self.categorize_terms(term, synonyms)
                categories.add(category)
            
            for category in categories:
                cursor.execute("""
                    INSERT OR IGNORE INTO term_categories (category_name, description)
                    VALUES (?, ?)
                """, (category, f"Категория терминов: {category}"))
            
            # Добавляем синонимы
            total_terms = 0
            total_synonyms = 0
            
            for main_term, synonyms in vocabulary.items():
                category = self.categorize_terms(main_term, synonyms)
                
                for synonym in synonyms:
                    try:
                        cursor.execute("""
                            INSERT OR REPLACE INTO technical_synonyms 
                            (main_term, synonym, category, language, confidence)
                            VALUES (?, ?, ?, ?, ?)
                        """, (main_term, synonym, category, 'ru', 1.0))
                        total_synonyms += 1
                    except Exception as e:
                        print(f"⚠️ Ошибка добавления синонима {main_term} -> {synonym}: {e}")
                
                total_terms += 1
                
                if total_terms % 50 == 0:
                    print(f"📝 Обработано терминов: {total_terms}")
            
            # Обновляем существующую таблицу synonyms
            cursor.execute("DELETE FROM synonyms")
            cursor.execute("""
                INSERT INTO synonyms (term, synonym, category, created_at)
                SELECT main_term, synonym, category, created_at 
                FROM technical_synonyms
            """)
            
            self.connection.commit()
            
            print(f"✅ Интеграция завершена:")
            print(f"  - Обработано терминов: {total_terms}")
            print(f"  - Добавлено синонимов: {total_synonyms}")
            print(f"  - Категорий: {len(categories)}")
            
        except Exception as e:
            print(f"❌ Ошибка интеграции: {e}")
            self.connection.rollback()
            raise
    
    def generate_statistics(self):
        """Генерация статистики по словарю"""
        try:
            cursor = self.connection.cursor()
            
            print("\n📊 СТАТИСТИКА ТЕХНИЧЕСКОГО СЛОВАРЯ:")
            print("=" * 50)
            
            # Общая статистика
            cursor.execute("SELECT COUNT(*) FROM technical_synonyms")
            total_synonyms = cursor.fetchone()[0]
            print(f"Всего синонимов: {total_synonyms}")
            
            cursor.execute("SELECT COUNT(DISTINCT main_term) FROM technical_synonyms")
            unique_terms = cursor.fetchone()[0]
            print(f"Уникальных терминов: {unique_terms}")
            
            # Статистика по категориям
            cursor.execute("""
                SELECT category, COUNT(*) as count
                FROM technical_synonyms
                GROUP BY category
                ORDER BY count DESC
            """)
            categories = cursor.fetchall()
            
            print("\n📋 По категориям:")
            for category, count in categories:
                print(f"  • {category}: {count} синонимов")
            
            # Топ терминов с наибольшим количеством синонимов
            cursor.execute("""
                SELECT main_term, COUNT(*) as synonym_count
                FROM technical_synonyms
                GROUP BY main_term
                ORDER BY synonym_count DESC
                LIMIT 10
            """)
            top_terms = cursor.fetchall()
            
            print("\n🏆 Топ терминов по количеству синонимов:")
            for term, count in top_terms:
                print(f"  • {term}: {count} синонимов")
            
        except Exception as e:
            print(f"❌ Ошибка генерации статистики: {e}")
    
    def close_connection(self):
        """Закрытие соединения с базой данных"""
        if self.connection:
            self.connection.close()
            print("✅ Соединение с БД закрыто")

def main():
    """Основная функция"""
    print("🚀 ИНТЕГРАЦИЯ ТЕХНИЧЕСКОГО СЛОВАРЯ В RUBIN AI")
    print("=" * 60)
    
    integrator = TechnicalVocabularyIntegrator()
    
    try:
        # Создаем таблицы
        integrator.create_vocabulary_tables()
        
        # Интегрируем словарь
        integrator.integrate_vocabulary()
        
        # Генерируем статистику
        integrator.generate_statistics()
        
        print("\n🎉 ИНТЕГРАЦИЯ ЗАВЕРШЕНА УСПЕШНО!")
        print(f"📅 Время: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
    except Exception as e:
        print(f"❌ Критическая ошибка: {e}")
    finally:
        integrator.close_connection()

if __name__ == "__main__":
    main()

















