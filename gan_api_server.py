#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
API —Å–µ—Ä–≤–µ—Ä –¥–ª—è GAN (Generative Adversarial Networks) Rubin AI
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç endpoints –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–æ—Å—Ç—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import time
import logging
from datetime import datetime
import numpy as np

from rubin_gan import RubinGANManager, RubinGAN

logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GAN Manager
gan_manager = RubinGANManager()

@app.route('/api/gan/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è GAN —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "status": "Rubin AI GAN Server ONLINE",
        "timestamp": datetime.now().isoformat(),
        "device": str(gan_manager.device),
        "models_count": len(gan_manager.models),
        "available_architectures": ["standard", "deep", "lightweight"],
        "available_tasks": ["generation", "training", "evaluation"]
    }), 200

@app.route('/api/gan/create', methods=['POST'])
def create_gan():
    """–°–æ–∑–¥–∞–Ω–∏–µ GAN –º–æ–¥–µ–ª–∏"""
    try:
        data = request.get_json() or {}
        noise_dim = data.get('noise_dim', 100)
        output_channels = data.get('output_channels', 3)
        output_size = data.get('output_size', 64)
        generator_arch = data.get('generator_arch', 'standard')
        discriminator_arch = data.get('discriminator_arch', 'standard')
        model_name = data.get('model_name', f'gan_{len(gan_manager.models)}')
        
        logger.info(f"üéØ –°–æ–∑–¥–∞–Ω–∏–µ GAN: {model_name}")
        
        model = gan_manager.create_gan(
            noise_dim=noise_dim,
            output_channels=output_channels,
            output_size=output_size,
            generator_arch=generator_arch,
            discriminator_arch=discriminator_arch,
            model_name=model_name
        )
        
        if model:
            model_info = gan_manager.get_model_info(model_name)
            response_data = {
                "success": True,
                "model_name": model_name,
                "model_info": model_info,
                "message": f"GAN '{model_name}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                "timestamp": datetime.now().isoformat()
            }
            return jsonify(response_data), 201
        else:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å GAN"
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è GAN: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è GAN: {str(e)}"
        }), 500

@app.route('/api/gan/train', methods=['POST'])
def train_gan():
    """–û–±—É—á–µ–Ω–∏–µ GAN"""
    try:
        data = request.get_json() or {}
        model_name = data.get('model_name')
        epochs = data.get('epochs', 100)
        batch_size = data.get('batch_size', 32)
        learning_rate_g = data.get('learning_rate_g', 0.0002)
        learning_rate_d = data.get('learning_rate_d', 0.0002)
        beta1 = data.get('beta1', 0.5)
        beta2 = data.get('beta2', 0.999)
        
        if not model_name:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –º–æ–¥–µ–ª–∏"
            }), 400
        
        logger.info(f"üöÄ –û–±—É—á–µ–Ω–∏–µ GAN: {model_name}")
        
        start_time = time.time()
        success = gan_manager.train_gan(
            model_name, None, epochs, batch_size, 
            learning_rate_g, learning_rate_d, beta1, beta2
        )
        end_time = time.time()
        
        training_time = end_time - start_time
        
        if success:
            model_info = gan_manager.get_model_info(model_name)
            response_data = {
                "success": True,
                "model_name": model_name,
                "epochs": epochs,
                "batch_size": batch_size,
                "learning_rate_g": learning_rate_g,
                "learning_rate_d": learning_rate_d,
                "training_time_seconds": f"{training_time:.2f}",
                "training_history": model_info.get("training_history", {}),
                "message": f"GAN '{model_name}' –æ–±—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                "timestamp": datetime.now().isoformat()
            }
            return jsonify(response_data), 200
        else:
            return jsonify({
                "success": False,
                "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å GAN '{model_name}'"
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è GAN: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è GAN: {str(e)}"
        }), 500

@app.route('/api/gan/generate', methods=['POST'])
def generate_samples():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤"""
    try:
        data = request.get_json() or {}
        model_name = data.get('model_name')
        num_samples = data.get('num_samples', 1)
        noise = data.get('noise')
        
        if not model_name:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –º–æ–¥–µ–ª–∏"
            }), 400
        
        logger.info(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤: {model_name}")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —à—É–º –≤ tensor –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        noise_tensor = None
        if noise is not None:
            import torch
            if isinstance(noise, list):
                noise_array = np.array(noise)
            else:
                noise_array = noise
            
            # –î–æ–±–∞–≤–ª—è–µ–º batch dimension –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if noise_array.ndim == 1:
                noise_array = noise_array.reshape(1, -1, 1, 1)
            elif noise_array.ndim == 2:
                noise_array = noise_array.reshape(noise_array.shape[0], noise_array.shape[1], 1, 1)
            
            noise_tensor = torch.FloatTensor(noise_array)
        
        start_time = time.time()
        samples = gan_manager.generate_samples(model_name, num_samples, noise_tensor)
        end_time = time.time()
        
        generation_time = end_time - start_time
        
        if samples is not None:
            response_data = {
                "success": True,
                "model_name": model_name,
                "num_samples": len(samples),
                "sample_shape": list(samples.shape),
                "samples": samples.tolist(),
                "generation_time_seconds": f"{generation_time:.4f}",
                "timestamp": datetime.now().isoformat()
            }
            return jsonify(response_data), 200
        else:
            return jsonify({
                "success": False,
                "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–∑—Ü—ã —Å –ø–æ–º–æ—â—å—é GAN '{model_name}'"
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–∑—Ü–æ–≤: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–∑—Ü–æ–≤: {str(e)}"
        }), 500

@app.route('/api/gan/models', methods=['GET'])
def get_models():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
    try:
        logger.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π")
        
        all_models_info = gan_manager.get_all_models_info()
        
        response_data = {
            "success": True,
            "models": all_models_info,
            "total_models": len(all_models_info),
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {str(e)}"
        }), 500

@app.route('/api/gan/model/<model_name>', methods=['GET'])
def get_model_info(model_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    try:
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {model_name}")
        
        model_info = gan_manager.get_model_info(model_name)
        
        if model_info:
            response_data = {
                "success": True,
                "model_info": model_info,
                "timestamp": datetime.now().isoformat()
            }
            return jsonify(response_data), 200
        else:
            return jsonify({
                "success": False,
                "error": f"–ú–æ–¥–µ–ª—å '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }), 404
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {str(e)}"
        }), 500

@app.route('/api/gan/save/<model_name>', methods=['POST'])
def save_model(model_name):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    try:
        data = request.get_json() or {}
        filepath = data.get('filepath', f'models/{model_name}.pth')
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}")
        
        success = gan_manager.save_model(model_name, filepath)
        
        if success:
            response_data = {
                "success": True,
                "model_name": model_name,
                "filepath": filepath,
                "message": f"–ú–æ–¥–µ–ª—å '{model_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {filepath}",
                "timestamp": datetime.now().isoformat()
            }
            return jsonify(response_data), 200
        else:
            return jsonify({
                "success": False,
                "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª—å '{model_name}'"
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {str(e)}"
        }), 500

@app.route('/api/gan/load', methods=['POST'])
def load_model():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"""
    try:
        data = request.get_json() or {}
        model_name = data.get('model_name')
        filepath = data.get('filepath')
        noise_dim = data.get('noise_dim', 100)
        output_channels = data.get('output_channels', 3)
        output_size = data.get('output_size', 64)
        generator_arch = data.get('generator_arch', 'standard')
        discriminator_arch = data.get('discriminator_arch', 'standard')
        
        if not model_name or not filepath:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–∫–∞–∑–∞–Ω—ã –∏–º—è –º–æ–¥–µ–ª–∏ –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"
            }), 400
        
        logger.info(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏: {model_name}")
        
        success = gan_manager.load_model(
            model_name, filepath, noise_dim, output_channels, 
            output_size, generator_arch, discriminator_arch
        )
        
        if success:
            model_info = gan_manager.get_model_info(model_name)
            response_data = {
                "success": True,
                "model_name": model_name,
                "filepath": filepath,
                "model_info": model_info,
                "message": f"–ú–æ–¥–µ–ª—å '{model_name}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {filepath}",
                "timestamp": datetime.now().isoformat()
            }
            return jsonify(response_data), 200
        else:
            return jsonify({
                "success": False,
                "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å '{model_name}'"
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}"
        }), 500

@app.route('/api/gan/delete/<model_name>', methods=['DELETE'])
def delete_model(model_name):
    """–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    try:
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}")
        
        if model_name in gan_manager.models:
            del gan_manager.models[model_name]
            if model_name in gan_manager.training_history:
                del gan_manager.training_history[model_name]
            
            response_data = {
                "success": True,
                "model_name": model_name,
                "message": f"–ú–æ–¥–µ–ª—å '{model_name}' —É–¥–∞–ª–µ–Ω–∞",
                "timestamp": datetime.now().isoformat()
            }
            return jsonify(response_data), 200
        else:
            return jsonify({
                "success": False,
                "error": f"–ú–æ–¥–µ–ª—å '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }), 404
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {str(e)}"
        }), 500

@app.route('/api/gan/architectures', methods=['GET'])
def get_architectures():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞—Ö"""
    try:
        architectures = {
            "generator": {
                "standard": {
                    "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞",
                    "layers": ["ConvTranspose2d(100‚Üí512)", "ConvTranspose2d(512‚Üí256)", "ConvTranspose2d(256‚Üí128)", "ConvTranspose2d(128‚Üí64)", "ConvTranspose2d(64‚Üí3)"],
                    "parameters": "~3.5M",
                    "use_cases": ["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"]
                },
                "deep": {
                    "description": "–ì–ª—É–±–æ–∫–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞",
                    "layers": ["ConvTranspose2d(100‚Üí1024)", "ConvTranspose2d(1024‚Üí512)", "ConvTranspose2d(512‚Üí256)", "ConvTranspose2d(256‚Üí128)", "ConvTranspose2d(128‚Üí64)", "ConvTranspose2d(64‚Üí3)"],
                    "parameters": "~7M",
                    "use_cases": ["–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "–°–ª–æ–∂–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"]
                },
                "lightweight": {
                    "description": "–õ–µ–≥–∫–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞",
                    "layers": ["ConvTranspose2d(100‚Üí256)", "ConvTranspose2d(256‚Üí128)", "ConvTranspose2d(128‚Üí64)", "ConvTranspose2d(64‚Üí3)"],
                    "parameters": "~1.5M",
                    "use_cases": ["–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "–ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"]
                }
            },
            "discriminator": {
                "standard": {
                    "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä–∞",
                    "layers": ["Conv2d(3‚Üí64)", "Conv2d(64‚Üí128)", "Conv2d(128‚Üí256)", "Conv2d(256‚Üí512)", "Conv2d(512‚Üí1)"],
                    "parameters": "~2.7M",
                    "use_cases": ["–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"]
                },
                "deep": {
                    "description": "–ì–ª—É–±–æ–∫–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä–∞",
                    "layers": ["Conv2d(3‚Üí64)", "Conv2d(64‚Üí128)", "Conv2d(128‚Üí256)", "Conv2d(256‚Üí512)", "Conv2d(512‚Üí1024)", "Conv2d(1024‚Üí1)"],
                    "parameters": "~5.5M",
                    "use_cases": ["–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏", "–°–ª–æ–∂–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"]
                },
                "lightweight": {
                    "description": "–õ–µ–≥–∫–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä–∞",
                    "layers": ["Conv2d(3‚Üí64)", "Conv2d(64‚Üí128)", "Conv2d(128‚Üí256)", "Conv2d(256‚Üí1)"],
                    "parameters": "~1.2M",
                    "use_cases": ["–ë—ã—Å—Ç—Ä–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", "–ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"]
                }
            }
        }
        
        response_data = {
            "success": True,
            "architectures": architectures,
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä: {str(e)}"
        }), 500

@app.route('/api/gan/applications', methods=['GET'])
def get_applications():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö GAN"""
    try:
        applications = {
            "image_generation": {
                "name": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                "description": "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —à—É–º–∞",
                "use_cases": ["–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö", "–ê—Ä—Ç-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "–ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"],
                "examples": ["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏—Ü", "–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ–π–∑–∞–∂–µ–π", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å—Ö–µ–º"]
            },
            "data_augmentation": {
                "name": "–ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
                "description": "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–±—É—á–∞—é—â–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö",
                "use_cases": ["–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –¥–∞–Ω–Ω—ã—Ö", "–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—É—á–µ–Ω–∏—è", "–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–æ–≤"],
                "examples": ["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö", "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞"]
            },
            "style_transfer": {
                "name": "–ü–µ—Ä–µ–Ω–æ—Å —Å—Ç–∏–ª—è",
                "description": "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è",
                "use_cases": ["–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", "–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"],
                "examples": ["–ü–µ—Ä–µ–Ω–æ—Å —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è", "–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", "–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ç-—Ä–∞–±–æ—Ç"]
            },
            "super_resolution": {
                "name": "–°—É–ø–µ—Ä-—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ",
                "description": "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞",
                "use_cases": ["–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π", "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"],
                "examples": ["–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ñ–æ—Ç–æ", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ"]
            },
            "anomaly_detection": {
                "name": "–î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π",
                "description": "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ–æ–±—ã—á–Ω—ã—Ö –∏–ª–∏ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö",
                "use_cases": ["–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞", "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤", "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"],
                "examples": ["–î–µ—Ç–µ–∫—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ –≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏", "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –≤ —Å–∏—Å—Ç–µ–º–∞—Ö", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"]
            }
        }
        
        response_data = {
            "success": True,
            "applications": applications,
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π: {str(e)}"
        }), 500

if __name__ == '__main__':
    port = 8098  # –ù–æ–≤—ã–π –ø–æ—Ä—Ç –¥–ª—è GAN —Å–µ—Ä–≤–µ—Ä–∞
    logger.info(f"üß† –ó–∞–ø—É—Å–∫ Rubin AI GAN —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    app.run(port=port, debug=True, use_reloader=False)





