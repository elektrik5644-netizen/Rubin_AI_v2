#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ API Test Suite –¥–ª—è Rubin AI v2
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö API —Å–µ—Ä–≤–µ—Ä–æ–≤
"""

import requests
import json
import time
import logging
from datetime import datetime
from typing import Dict, List, Tuple, Optional
import os
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('api_test_results.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class APITestSuite:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö API —Å–µ—Ä–≤–µ—Ä–æ–≤ Rubin AI v2"""
    
    def __init__(self):
        self.test_results = {}
        self.start_time = datetime.now()
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        self.servers = {
            'smart_dispatcher': {
                'port': 8080,
                'endpoints': {
                    'health': '/api/health',
                    'chat': '/api/chat',
                    'ethical_status': '/api/ethical/status'
                },
                'test_messages': [
                    '–ü—Ä–∏–≤–µ—Ç',
                    '–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–∏–æ–¥?',
                    '–ö–∞–∫ —Ä–µ—à–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x^2 + 5x + 6 = 0?',
                    '–°—Ä–∞–≤–Ω–∏ Python –∏ C++'
                ]
            },
            'general_api': {
                'port': 8085,
                'endpoints': {
                    'health': '/api/health',
                    'chat': '/api/chat'
                },
                'test_messages': [
                    '–ü—Ä–∏–≤–µ—Ç',
                    '–ö–∞–∫ –¥–µ–ª–∞?',
                    '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ'
                ]
            },
            'mathematics_api': {
                'port': 8086,
                'endpoints': {
                    'health': '/health',
                    'chat': '/api/chat'
                },
                'test_messages': [
                    '–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ 2x + 3 = 7',
                    '–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª?',
                    '–ö–∞–∫ –Ω–∞–π—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é –æ—Ç x^2?'
                ]
            },
            'electrical_api': {
                'port': 8087,
                'endpoints': {
                    'health': '/api/electrical/status',
                    'chat': '/api/chat'
                },
                'test_messages': [
                    '–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–∏–æ–¥?',
                    '–û–±—ä—è—Å–Ω–∏ –∑–∞–∫–æ–Ω –û–º–∞',
                    '–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–æ—â–Ω–æ—Å—Ç—å –≤ —Ç—Ä–µ—Ö—Ñ–∞–∑–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?'
                ]
            },
            'programming_api': {
                'port': 8088,
                'endpoints': {
                    'health': '/health',
                    'explain': '/api/programming/explain'
                },
                'test_messages': [
                    '–û–±—ä—è—Å–Ω–∏ —á—Ç–æ —Ç–∞–∫–æ–µ Python',
                    '–ß—Ç–æ —Ç–∞–∫–æ–µ –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ?',
                    '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ–∫—É—Ä—Å–∏—è?'
                ]
            },
            'radiomechanics_api': {
                'port': 8089,
                'endpoints': {
                    'health': '/api/radiomechanics/status',
                    'chat': '/api/chat'
                },
                'test_messages': [
                    '–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω—Ç–µ–Ω–Ω–∞?',
                    '–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —Ä–∞–¥–∏–æ–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞',
                    '–ß—Ç–æ —Ç–∞–∫–æ–µ –º–æ–¥—É–ª—è—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞?'
                ]
            },
            'neuro_api': {
                'port': 8090,
                'endpoints': {
                    'health': '/health',
                    'status': '/api/neuro/status'
                },
                'test_messages': [
                    '–°—Ç–∞—Ç—É—Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏',
                    '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö',
                    '–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ'
                ]
            },
            'controllers_api': {
                'port': 9000,
                'endpoints': {
                    'health': '/api/controllers/topic/general',
                    'status': '/api/controllers/topic/general'
                },
                'test_messages': [
                    '–ß—Ç–æ —Ç–∞–∫–æ–µ –ü–õ–ö?',
                    '–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞',
                    '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–õ–ö'
                ]
            },
            'plc_analysis_api': {
                'port': 8099,
                'endpoints': {
                    'health': '/api/plc/health',
                    'analyze': '/api/plc/analyze'
                },
                'test_messages': [
                    '–ê–Ω–∞–ª–∏–∑ –ü–õ–ö –ø—Ä–æ–≥—Ä–∞–º–º—ã',
                    '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞',
                    '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –ü–õ–ö'
                ]
            },
            'advanced_math_api': {
                'port': 8100,
                'endpoints': {
                    'health': '/api/math/health',
                    'calculate': '/api/math/advanced'
                },
                'test_messages': [
                    '–†–µ—à–∏ —Å–∏—Å—Ç–µ–º—É —É—Ä–∞–≤–Ω–µ–Ω–∏–π',
                    '–í—ã—á–∏—Å–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞–ª',
                    '–ù–∞–π–¥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é'
                ]
            },
            'data_processing_api': {
                'port': 8101,
                'endpoints': {
                    'health': '/api/data/health',
                    'process': '/api/data/process'
                },
                'test_messages': [
                    '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö',
                    '–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤',
                    '–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö'
                ]
            },
            'search_engine_api': {
                'port': 8102,
                'endpoints': {
                    'health': '/api/search/health',
                    'search': '/api/search/hybrid'
                },
                'test_messages': [
                    '–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
                    '–ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫',
                    '–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'
                ]
            },
            'system_utils_api': {
                'port': 8103,
                'endpoints': {
                    'health': '/api/system/health',
                    'utils': '/api/system/utils'
                },
                'test_messages': [
                    '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã',
                    '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
                    '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'
                ]
            },
            'gai_api': {
                'port': 8104,
                'endpoints': {
                    'health': '/api/gai/health',
                    'generate_text': '/api/gai/generate_text'
                },
                'test_messages': [
                    '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç',
                    '–°–æ–∑–¥–∞–π –∫–æ–¥',
                    '–û–ø–∏—à–∏ –¥–∏–∞–≥—Ä–∞–º–º—É'
                ]
            },
            'unified_manager': {
                'port': 8084,
                'endpoints': {
                    'health': '/api/system/health',
                    'status': '/api/system/status'
                },
                'test_messages': [
                    '–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã',
                    '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏',
                    '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'
                ]
            },
            'ethical_core_api': {
                'port': 8105,
                'endpoints': {
                    'health': '/api/ethical/health',
                    'assess': '/api/ethical/assess'
                },
                'test_messages': [
                    '–û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
                    '–≠—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑',
                    '–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–µ–π—Å—Ç–≤–∏–π'
                ]
            }
        }
    
    def test_server_health(self, server_name: str, config: Dict) -> Tuple[bool, str]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            port = config['port']
            health_endpoint = config['endpoints'].get('health', '/health')
            url = f"http://localhost:{port}{health_endpoint}"
            
            logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É—é –∑–¥–æ—Ä–æ–≤—å–µ {server_name} –Ω–∞ {url}")
            response = requests.get(url, timeout=5)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ {server_name} - –∑–¥–æ—Ä–æ–≤—å–µ –û–ö")
                return True, f"–°–µ—Ä–≤–µ—Ä {server_name} —Ä–∞–±–æ—Ç–∞–µ—Ç (HTTP {response.status_code})"
            else:
                logger.warning(f"‚ö†Ô∏è {server_name} - –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å {response.status_code}")
                return False, f"–°–µ—Ä–≤–µ—Ä {server_name} –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å {response.status_code}"
                
        except requests.exceptions.ConnectionError:
            logger.error(f"‚ùå {server_name} - —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False, f"–°–µ—Ä–≤–µ—Ä {server_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (ConnectionError)"
        except requests.exceptions.Timeout:
            logger.error(f"‚è∞ {server_name} - —Ç–∞–π–º–∞—É—Ç")
            return False, f"–°–µ—Ä–≤–µ—Ä {server_name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (Timeout)"
        except Exception as e:
            logger.error(f"‚ùå {server_name} - –æ—à–∏–±–∫–∞: {e}")
            return False, f"–°–µ—Ä–≤–µ—Ä {server_name} - –æ—à–∏–±–∫–∞: {str(e)}"
    
    def test_server_functionality(self, server_name: str, config: Dict) -> Tuple[bool, str]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            port = config['port']
            test_messages = config.get('test_messages', ['–¢–µ—Å—Ç'])
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            endpoints_to_test = []
            for endpoint_name, endpoint_path in config['endpoints'].items():
                if endpoint_name != 'health':
                    endpoints_to_test.append((endpoint_name, endpoint_path))
            
            if not endpoints_to_test:
                return True, f"–°–µ—Ä–≤–µ—Ä {server_name} - –Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            
            success_count = 0
            total_tests = 0
            
            for endpoint_name, endpoint_path in endpoints_to_test:
                url = f"http://localhost:{port}{endpoint_path}"
                
                for message in test_messages[:2]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
                    total_tests += 1
                    try:
                        if endpoint_name in ['chat', 'assess', 'generate_text']:
                            # POST –∑–∞–ø—Ä–æ—Å—ã
                            payload = {'message': message}
                            response = requests.post(url, json=payload, timeout=10)
                        else:
                            # GET –∑–∞–ø—Ä–æ—Å—ã
                            response = requests.get(url, timeout=10)
                        
                        if response.status_code in [200, 201]:
                            success_count += 1
                            logger.info(f"‚úÖ {server_name}/{endpoint_name} - —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª")
                        else:
                            logger.warning(f"‚ö†Ô∏è {server_name}/{endpoint_name} - —Å—Ç–∞—Ç—É—Å {response.status_code}")
                    
                    except Exception as e:
                        logger.error(f"‚ùå {server_name}/{endpoint_name} - –æ—à–∏–±–∫–∞: {e}")
            
            success_rate = (success_count / total_tests) * 100 if total_tests > 0 else 0
            
            if success_rate >= 70:
                return True, f"–°–µ—Ä–≤–µ—Ä {server_name} - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –û–ö ({success_rate:.1f}% —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏)"
            else:
                return False, f"–°–µ—Ä–≤–µ—Ä {server_name} - –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é ({success_rate:.1f}% —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏)"
                
        except Exception as e:
            logger.error(f"‚ùå {server_name} - –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return False, f"–°–µ—Ä–≤–µ—Ä {server_name} - –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"
    
    def test_smart_dispatcher_routing(self) -> Tuple[bool, str]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é Smart Dispatcher"""
        try:
            url = "http://localhost:8080/api/chat"
            test_cases = [
                ("–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–∏–æ–¥?", "electrical"),
                ("–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x^2 = 4", "mathematics"),
                ("–û–±—ä—è—Å–Ω–∏ Python", "programming"),
                ("–ü—Ä–∏–≤–µ—Ç", "general")
            ]
            
            success_count = 0
            for message, expected_category in test_cases:
                try:
                    payload = {'message': message}
                    response = requests.post(url, json=payload, timeout=10)
                    
                    if response.status_code == 200:
                        data = response.json()
                        if data.get('success') and 'category' in data:
                            success_count += 1
                            logger.info(f"‚úÖ Smart Dispatcher –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä–æ–≤–∞–ª '{message}' -> {data['category']}")
                        else:
                            logger.warning(f"‚ö†Ô∏è Smart Dispatcher –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è '{message}'")
                    else:
                        logger.warning(f"‚ö†Ô∏è Smart Dispatcher —Å—Ç–∞—Ç—É—Å {response.status_code} –¥–ª—è '{message}'")
                
                except Exception as e:
                    logger.error(f"‚ùå Smart Dispatcher –æ—à–∏–±–∫–∞ –¥–ª—è '{message}': {e}")
            
            success_rate = (success_count / len(test_cases)) * 100
            
            if success_rate >= 75:
                return True, f"Smart Dispatcher –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –û–ö ({success_rate:.1f}% —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏)"
            else:
                return False, f"Smart Dispatcher –ø—Ä–æ–±–ª–µ–º—ã —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π ({success_rate:.1f}% —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏)"
                
        except Exception as e:
            logger.error(f"‚ùå Smart Dispatcher - –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {e}")
            return False, f"Smart Dispatcher - –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"
    
    def run_all_tests(self) -> Dict:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        logger.info("üß™ –ù–∞—á–∏–Ω–∞—é –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö API —Å–µ—Ä–≤–µ—Ä–æ–≤ Rubin AI v2")
        logger.info("=" * 80)
        
        results = {
            'start_time': self.start_time.isoformat(),
            'servers': {},
            'summary': {
                'total_servers': len(self.servers),
                'healthy_servers': 0,
                'functional_servers': 0,
                'smart_dispatcher_ok': False
            }
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Smart Dispatcher –æ—Ç–¥–µ–ª—å–Ω–æ
        logger.info("üéØ –¢–µ—Å—Ç–∏—Ä—É—é Smart Dispatcher...")
        smart_dp_health, smart_dp_msg = self.test_server_health('smart_dispatcher', self.servers['smart_dispatcher'])
        smart_dp_routing, routing_msg = self.test_smart_dispatcher_routing()
        
        results['servers']['smart_dispatcher'] = {
            'health': {'status': smart_dp_health, 'message': smart_dp_msg},
            'routing': {'status': smart_dp_routing, 'message': routing_msg},
            'overall': smart_dp_health and smart_dp_routing
        }
        
        if smart_dp_health and smart_dp_routing:
            results['summary']['smart_dispatcher_ok'] = True
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        for server_name, config in self.servers.items():
            if server_name == 'smart_dispatcher':
                continue
                
            logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É—é {server_name}...")
            
            # –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è
            health_ok, health_msg = self.test_server_health(server_name, config)
            
            # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            func_ok, func_msg = self.test_server_functionality(server_name, config)
            
            # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            overall_ok = health_ok and func_ok
            
            results['servers'][server_name] = {
                'health': {'status': health_ok, 'message': health_msg},
                'functionality': {'status': func_ok, 'message': func_msg},
                'overall': overall_ok
            }
            
            if health_ok:
                results['summary']['healthy_servers'] += 1
            if overall_ok:
                results['summary']['functional_servers'] += 1
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        end_time = datetime.now()
        duration = (end_time - self.start_time).total_seconds()
        
        results['end_time'] = end_time.isoformat()
        results['duration_seconds'] = duration
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.save_results(results)
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        self.print_summary(results)
        
        return results
    
    def save_results(self, results: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"api_test_results_{timestamp}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def print_summary(self, results: Dict):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
        logger.info("=" * 80)
        logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("=" * 80)
        
        summary = results['summary']
        
        logger.info(f"üïê –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {results['duration_seconds']:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üìä –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {summary['total_servers']}")
        logger.info(f"‚úÖ –ó–¥–æ—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: {summary['healthy_servers']}")
        logger.info(f"üîß –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: {summary['functional_servers']}")
        logger.info(f"üéØ Smart Dispatcher: {'‚úÖ –û–ö' if summary['smart_dispatcher_ok'] else '‚ùå –ü–†–û–ë–õ–ï–ú–´'}")
        
        logger.info("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        logger.info("-" * 80)
        
        for server_name, server_results in results['servers'].items():
            status_icon = "‚úÖ" if server_results['overall'] else "‚ùå"
            logger.info(f"{status_icon} {server_name.upper()}")
            
            health_status = "‚úÖ" if server_results['health']['status'] else "‚ùå"
            func_status = "‚úÖ" if server_results['functionality']['status'] else "‚ùå"
            
            logger.info(f"   –ó–¥–æ—Ä–æ–≤—å–µ: {health_status} {server_results['health']['message']}")
            logger.info(f"   –§—É–Ω–∫—Ü–∏–∏:  {func_status} {server_results['functionality']['message']}")
            
            if 'routing' in server_results:
                routing_status = "‚úÖ" if server_results['routing']['status'] else "‚ùå"
                logger.info(f"   –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è: {routing_status} {server_results['routing']['message']}")
            
            logger.info("")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        success_rate = (summary['functional_servers'] / summary['total_servers']) * 100
        
        if success_rate >= 90:
            logger.info("üéâ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!")
        elif success_rate >= 75:
            logger.info("üëç –•–û–†–û–®–û! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏.")
        elif success_rate >= 50:
            logger.info("‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è.")
        else:
            logger.info("üö® –ö–†–ò–¢–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞.")
        
        logger.info("=" * 80)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ Rubin AI v2 - API Test Suite")
    print("=" * 50)
    print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö API —Å–µ—Ä–≤–µ—Ä–æ–≤")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_suite = APITestSuite()
    results = test_suite.run_all_tests()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    success_rate = (results['summary']['functional_servers'] / results['summary']['total_servers']) * 100
    
    if success_rate >= 75:
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ!")
        sys.exit(1)

if __name__ == "__main__":
    main()



