#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä MCSetup
–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ MCSetup –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏
"""

import os
import time
import json
import requests
import logging
from datetime import datetime
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import xml.etree.ElementTree as ET

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MCSETUP_PATH = r"C:\Users\elekt\OneDrive\Desktop\MCSetup_V1_9_0\MCSetup_V1_9_0"
MCSETUP_BRIDGE_URL = "http://localhost:8096"
RUBIN_SMART_DISPATCHER_URL = "http://localhost:8080"
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '')

class MCSetupFileHandler(FileSystemEventHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤ MCSetup"""
    
    def __init__(self):
        self.last_analysis_time = {}
        self.analysis_cooldown = 5  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞–º–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        
    def on_modified(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        if event.is_directory:
            return
            
        file_path = Path(event.src_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ XML —Ñ–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞
        if file_path.suffix.lower() == '.xml' and 'plot' in file_path.name.lower():
            self.handle_plot_file_change(file_path)
    
    def handle_plot_file_change(self, file_path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≥—Ä–∞—Ñ–∏–∫–∞"""
        try:
            current_time = time.time()
            file_key = str(file_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
            if file_key in self.last_analysis_time:
                if current_time - self.last_analysis_time[file_key] < self.analysis_cooldown:
                    return
            
            self.last_analysis_time[file_key] = current_time
            
            logger.info(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞: {file_path.name}")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
            time.sleep(2)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.analyze_plot_changes(file_path)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
    
    def analyze_plot_changes(self, file_path):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ –≥—Ä–∞—Ñ–∏–∫–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º XML —Ñ–∞–π–ª
            tree = ET.parse(file_path)
            root = tree.getroot()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä–∞—Ñ–∏–∫–µ
            plot_info = self.extract_plot_info(root, file_path.name)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ MCSetup Bridge
            analysis_result = self.send_for_analysis(plot_info)
            
            if analysis_result:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ Telegram
                self.send_recommendations_to_telegram(plot_info, analysis_result)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞ {file_path}: {e}")
    
    def extract_plot_info(self, root, filename):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä–∞—Ñ–∏–∫–µ –∏–∑ XML"""
        plot_info = {
            'filename': filename,
            'timestamp': datetime.now().isoformat(),
            'gather_period': '10',
            'sources': [],
            'changes_detected': True
        }
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            gather_period = root.find('.//param[@name="gatherPeriod"]')
            if gather_period is not None:
                plot_info['gather_period'] = gather_period.get('value', '10')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            for item in root.findall('.//group[@name="itemToGather"]'):
                source = {
                    'address': item.find('param[@name="address"]').get('value', '') if item.find('param[@name="address"]') is not None else '',
                    'name': item.find('param[@name="name"]').get('value', '') if item.find('param[@name="name"]') is not None else '',
                    'enabled': item.find('param[@name="enable"]').get('value', 'false') == 'true' if item.find('param[@name="enable"]') is not None else False
                }
                plot_info['sources'].append(source)
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ {filename}: {e}")
        
        return plot_info
    
    def send_for_analysis(self, plot_info):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ MCSetup Bridge"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ MCSetup Bridge –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            response = requests.post(
                f"{MCSETUP_BRIDGE_URL}/api/mcsetup/analyze/graphs",
                json={
                    'graph_name': plot_info['filename'],
                    'plot_info': plot_info,
                    'auto_analysis': True
                },
                timeout=10
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ MCSetup Bridge: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –∞–Ω–∞–ª–∏–∑: {e}")
            return None
    
    def send_recommendations_to_telegram(self, plot_info, analysis_result):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ Telegram"""
        try:
            if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
                logger.warning("‚ö†Ô∏è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üìä **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ MCSetup**\n\n"
            message += f"**–ì—Ä–∞—Ñ–∏–∫:** {plot_info['filename']}\n"
            message += f"**–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∞–ª–∏–∑–µ
            if 'analysis' in analysis_result:
                analysis = analysis_result['analysis']
                
                if 'insights' in analysis:
                    message += "**–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:**\n"
                    for insight in analysis['insights'][:3]:  # –ü–µ—Ä–≤—ã–µ 3 –∏–Ω—Å–∞–π—Ç–∞
                        message += f"‚Ä¢ {insight}\n"
                    message += "\n"
                
                if 'graph_analysis' in analysis:
                    graph_analysis = analysis['graph_analysis']
                    if plot_info['filename'] in graph_analysis:
                        motor_data = graph_analysis[plot_info['filename']]
                        message += f"**–ê–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:** {motor_data.get('active_sources', 0)}\n"
                        message += f"**–ü–µ—Ä–∏–æ–¥ —Å–±–æ—Ä–∞:** {motor_data.get('gather_period', 'N/A')}–º—Å\n\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Rubin AI –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            rubin_recommendations = self.get_rubin_recommendations(plot_info)
            if rubin_recommendations:
                message += f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ Rubin AI:**\n{rubin_recommendations}\n\n"
            
            message += "ü§ñ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω*"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
            payload = {
                'chat_id': TELEGRAM_CHAT_ID,
                'text': message,
                'parse_mode': 'Markdown'
            }
            
            response = requests.post(url, json=payload, timeout=10)
            if response.status_code == 200:
                logger.info(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –¥–ª—è {plot_info['filename']}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
    
    def get_rubin_recommendations(self, plot_info):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç Rubin AI"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è Rubin AI
            query = f"–ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞ {plot_info['filename']} —Å –ø–µ—Ä–∏–æ–¥–æ–º —Å–±–æ—Ä–∞ {plot_info['gather_period']}–º—Å. "
            query += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len([s for s in plot_info['sources'] if s['enabled']])}. "
            query += "–î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Smart Dispatcher
            response = requests.post(
                f"{RUBIN_SMART_DISPATCHER_URL}/api/chat",
                json={
                    'message': query,
                    'context': {
                        'source': 'mcsetup_auto_analyzer',
                        'plot_info': plot_info
                    }
                },
                timeout=15
            )
            
            if response.status_code == 200:
                result = response.json()
                if 'response' in result:
                    if isinstance(result['response'], dict):
                        return result['response'].get('explanation', str(result['response']))
                    else:
                        return str(result['response'])
                return str(result)
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç Rubin AI: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return None

class MCSetupAutoAnalyzer:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä MCSetup"""
    
    def __init__(self):
        self.observer = Observer()
        self.event_handler = MCSetupFileHandler()
        self.mcsetup_path = Path(MCSETUP_PATH)
        
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ MCSetup"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ MCSetup
            if not self.mcsetup_path.exists():
                logger.error(f"‚ùå –ü—É—Ç—å MCSetup –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.mcsetup_path}")
                return False
            
            # –ù–∞—Ö–æ–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
            plot_dir = self.mcsetup_path / "Plot, Watch windows" / "Plot"
            if not plot_dir.exists():
                logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {plot_dir}")
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.observer.schedule(self.event_handler, str(plot_dir), recursive=False)
            self.observer.start()
            
            logger.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ MCSetup –∑–∞–ø—É—â–µ–Ω: {plot_dir}")
            logger.info("üìä –û–∂–∏–¥–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –≥—Ä–∞—Ñ–∏–∫–∞—Ö...")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return False
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        try:
            if self.observer.is_alive():
                self.observer.stop()
                self.observer.join()
            logger.info("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ MCSetup –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"""
        try:
            if not self.start_monitoring():
                return
            
            logger.info("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä MCSetup –∑–∞–ø—É—â–µ–Ω")
            logger.info("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            while True:
                time.sleep(1)
                
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.stop_monitoring()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä MCSetup")
    print("=" * 50)
    
    analyzer = MCSetupAutoAnalyzer()
    analyzer.run()

if __name__ == '__main__':
    main()
