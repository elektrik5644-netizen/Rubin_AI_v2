#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Dynamic Response System - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤
"""

import json
import logging
import random
import re
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple, Union
from dataclasses import dataclass, field
from collections import defaultdict, deque
from enum import Enum
import hashlib

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ResponseType(Enum):
    """–¢–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤"""
    GREETING = "greeting"
    TECHNICAL_EXPLANATION = "technical_explanation"
    PROBLEM_SOLVING = "problem_solving"
    META_QUESTION = "meta_question"
    THANKS = "thanks"
    COMPLAINT = "complaint"
    GENERAL_QUESTION = "general_question"
    ERROR_HANDLING = "error_handling"

class AdaptationLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏"""
    BASIC = "basic"
    INTERMEDIATE = "intermediate"
    ADVANCED = "advanced"
    EXPERT = "expert"

@dataclass
class DynamicContext:
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    user_id: str
    session_id: str
    message: str
    message_history: List[Dict[str, Any]] = field(default_factory=list)
    user_profile: Dict[str, Any] = field(default_factory=dict)
    technical_level: str = "intermediate"
    communication_style: str = "professional"
    conversation_mood: str = "neutral"
    current_topic: str = "general"
    keywords: List[str] = field(default_factory=list)
    user_intent: str = "unknown"
    response_preferences: Dict[str, Any] = field(default_factory=dict)
    context_metadata: Dict[str, Any] = field(default_factory=dict)

@dataclass
class ResponseTemplate:
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞"""
    template_id: str
    base_structure: str
    variables: List[str]
    adaptation_rules: Dict[str, Any]
    quality_metrics: Dict[str, float]
    usage_count: int = 0
    success_rate: float = 0.0
    last_used: Optional[datetime] = None

@dataclass
class GeneratedResponse:
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"""
    content: str
    response_type: ResponseType
    adaptation_level: AdaptationLevel
    quality_score: float
    personalization_score: float
    context_relevance: float
    generation_time: float
    metadata: Dict[str, Any] = field(default_factory=dict)

class DynamicResponseSystem:
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
    
    def __init__(self):
        self.response_templates = {}
        self.adaptation_rules = {}
        self.personalization_engine = {}
        self.context_analyzer = {}
        self.quality_assessor = {}
        self.learning_system = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏
        self.usage_stats = defaultdict(int)
        self.quality_stats = defaultdict(list)
        self.adaptation_stats = defaultdict(list)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._initialize_templates()
        self._initialize_adaptation_rules()
        self._initialize_personalization()
        self._initialize_context_analyzer()
        self._initialize_quality_assessor()
        self._initialize_learning_system()
        
        logger.info("üîÑ Dynamic Response System –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _initialize_templates(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        self.response_templates = {
            ResponseType.GREETING: {
                'basic': ResponseTemplate(
                    template_id="greeting_basic",
                    base_structure="{greeting} {context_reference} {offer_help}",
                    variables=['greeting', 'context_reference', 'offer_help'],
                    adaptation_rules={
                        'time_based': True,
                        'mood_based': True,
                        'history_based': True
                    },
                    quality_metrics={'relevance': 0.8, 'personalization': 0.7, 'clarity': 0.9}
                ),
                'advanced': ResponseTemplate(
                    template_id="greeting_advanced",
                    base_structure="{greeting} {personal_reference} {context_analysis} {offer_help} {next_steps}",
                    variables=['greeting', 'personal_reference', 'context_analysis', 'offer_help', 'next_steps'],
                    adaptation_rules={
                        'time_based': True,
                        'mood_based': True,
                        'history_based': True,
                        'profile_based': True,
                        'topic_based': True
                    },
                    quality_metrics={'relevance': 0.9, 'personalization': 0.9, 'clarity': 0.8}
                )
            },
            
            ResponseType.TECHNICAL_EXPLANATION: {
                'basic': ResponseTemplate(
                    template_id="tech_explanation_basic",
                    base_structure="{introduction} {main_explanation} {example} {conclusion}",
                    variables=['introduction', 'main_explanation', 'example', 'conclusion'],
                    adaptation_rules={
                        'level_based': True,
                        'topic_based': True,
                        'complexity_based': True
                    },
                    quality_metrics={'accuracy': 0.9, 'clarity': 0.8, 'completeness': 0.7}
                ),
                'advanced': ResponseTemplate(
                    template_id="tech_explanation_advanced",
                    base_structure="{introduction} {concept_overview} {detailed_explanation} {practical_examples} {best_practices} {troubleshooting} {conclusion}",
                    variables=['introduction', 'concept_overview', 'detailed_explanation', 'practical_examples', 'best_practices', 'troubleshooting', 'conclusion'],
                    adaptation_rules={
                        'level_based': True,
                        'topic_based': True,
                        'complexity_based': True,
                        'experience_based': True,
                        'context_based': True
                    },
                    quality_metrics={'accuracy': 0.95, 'clarity': 0.9, 'completeness': 0.9}
                )
            },
            
            ResponseType.PROBLEM_SOLVING: {
                'basic': ResponseTemplate(
                    template_id="problem_solving_basic",
                    base_structure="{problem_acknowledgment} {analysis} {solution} {verification}",
                    variables=['problem_acknowledgment', 'analysis', 'solution', 'verification'],
                    adaptation_rules={
                        'urgency_based': True,
                        'complexity_based': True,
                        'domain_based': True
                    },
                    quality_metrics={'helpfulness': 0.8, 'accuracy': 0.8, 'completeness': 0.7}
                ),
                'advanced': ResponseTemplate(
                    template_id="problem_solving_advanced",
                    base_structure="{problem_acknowledgment} {root_cause_analysis} {solution_options} {recommended_solution} {implementation_guide} {prevention_tips} {verification}",
                    variables=['problem_acknowledgment', 'root_cause_analysis', 'solution_options', 'recommended_solution', 'implementation_guide', 'prevention_tips', 'verification'],
                    adaptation_rules={
                        'urgency_based': True,
                        'complexity_based': True,
                        'domain_based': True,
                        'experience_based': True,
                        'context_based': True
                    },
                    quality_metrics={'helpfulness': 0.9, 'accuracy': 0.9, 'completeness': 0.9}
                )
            },
            
            ResponseType.META_QUESTION: {
                'basic': ResponseTemplate(
                    template_id="meta_question_basic",
                    base_structure="{acknowledgment} {simple_explanation} {example} {conclusion}",
                    variables=['acknowledgment', 'simple_explanation', 'example', 'conclusion'],
                    adaptation_rules={
                        'question_type_based': True,
                        'level_based': True
                    },
                    quality_metrics={'transparency': 0.8, 'clarity': 0.8, 'helpfulness': 0.7}
                ),
                'advanced': ResponseTemplate(
                    template_id="meta_question_advanced",
                    base_structure="{acknowledgment} {detailed_explanation} {technical_details} {examples} {limitations} {conclusion}",
                    variables=['acknowledgment', 'detailed_explanation', 'technical_details', 'examples', 'limitations', 'conclusion'],
                    adaptation_rules={
                        'question_type_based': True,
                        'level_based': True,
                        'context_based': True,
                        'depth_based': True
                    },
                    quality_metrics={'transparency': 0.9, 'clarity': 0.9, 'helpfulness': 0.9}
                )
            }
        }
        
        logger.info(f"üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.response_templates)} —Ç–∏–ø–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤")

    def _initialize_adaptation_rules(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª –∞–¥–∞–ø—Ç–∞—Ü–∏–∏"""
        self.adaptation_rules = {
            'time_based': {
                'morning': ['–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!', '–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!', '–£–¥–∞—á–Ω–æ–≥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è!'],
                'afternoon': ['–î–æ–±—Ä—ã–π –¥–µ–Ω—å!', '–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!', '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!'],
                'evening': ['–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!', '–•–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞!', '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤–µ—á–µ—Ä–∞!'],
                'night': ['–î–æ–±—Ä–æ–π –Ω–æ—á–∏!', '–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏!', '–•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!']
            },
            
            'mood_based': {
                'positive': {
                    'tone': '—ç–Ω—Ç—É–∑–∏–∞–∑–º',
                    'encouragement': '–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º!',
                    'acknowledgment': '–ü–æ–Ω–∏–º–∞—é –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å'
                },
                'negative': {
                    'tone': '–ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                    'encouragement': '–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –≤–º–µ—Å—Ç–µ',
                    'acknowledgment': '–ü–æ–Ω–∏–º–∞—é –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É'
                },
                'neutral': {
                    'tone': '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º',
                    'encouragement': '–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å',
                    'acknowledgment': '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å'
                }
            },
            
            'level_based': {
                'beginner': {
                    'complexity': 'simple',
                    'terminology': 'basic',
                    'examples': 'basic',
                    'explanation_style': 'step_by_step'
                },
                'intermediate': {
                    'complexity': 'moderate',
                    'terminology': 'standard',
                    'examples': 'practical',
                    'explanation_style': 'balanced'
                },
                'advanced': {
                    'complexity': 'complex',
                    'terminology': 'technical',
                    'examples': 'advanced',
                    'explanation_style': 'comprehensive'
                },
                'expert': {
                    'complexity': 'expert',
                    'terminology': 'specialized',
                    'examples': 'cutting_edge',
                    'explanation_style': 'detailed'
                }
            },
            
            'topic_based': {
                'arduino': {
                    'domain_knowledge': '–º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
                    'examples': '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã',
                    'terminology': '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è',
                    'focus': '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ'
                },
                'python': {
                    'domain_knowledge': '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
                    'examples': '–∫–æ–¥ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã',
                    'terminology': '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—Å–∫–∞—è',
                    'focus': '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏'
                },
                'mathematics': {
                    'domain_knowledge': '–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏',
                    'examples': '—Ñ–æ—Ä–º—É–ª—ã –∏ —Ä–∞—Å—á–µ—Ç—ã',
                    'terminology': '–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è',
                    'focus': '—Ç–æ—á–Ω–æ—Å—Ç—å –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤'
                },
                'electronics': {
                    'domain_knowledge': '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ –∏ —Å—Ö–µ–º–æ—Ç–µ—Ö–Ω–∏–∫–∞',
                    'examples': '—Å—Ö–µ–º—ã –∏ —Ä–∞—Å—á–µ—Ç—ã',
                    'terminology': '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è',
                    'focus': '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'
                }
            },
            
            'urgency_based': {
                'low': {
                    'response_style': 'detailed',
                    'time_allocation': 'comprehensive',
                    'priority': 'quality'
                },
                'medium': {
                    'response_style': 'balanced',
                    'time_allocation': 'moderate',
                    'priority': 'efficiency'
                },
                'high': {
                    'response_style': 'concise',
                    'time_allocation': 'quick',
                    'priority': 'speed'
                },
                'critical': {
                    'response_style': 'immediate',
                    'time_allocation': 'minimal',
                    'priority': 'urgency'
                }
            }
        }
        
        logger.info(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.adaptation_rules)} –ø—Ä–∞–≤–∏–ª –∞–¥–∞–ø—Ç–∞—Ü–∏–∏")

    def _initialize_personalization(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
        self.personalization_engine = {
            'communication_styles': {
                'formal': {
                    'greeting': '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ',
                    'transition': '–ü–µ—Ä–µ–π–¥–µ–º –∫',
                    'conclusion': '–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç',
                    'tone': '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π',
                    'formality': '–≤—ã—Å–æ–∫–∞—è'
                },
                'casual': {
                    'greeting': '–ü—Ä–∏–≤–µ—Ç',
                    'transition': '–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π',
                    'conclusion': '–£–¥–∞—á–∏!',
                    'tone': '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π',
                    'formality': '–Ω–∏–∑–∫–∞—è'
                },
                'professional': {
                    'greeting': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
                    'transition': '–†–∞—Å—Å–º–æ—Ç—Ä–∏–º',
                    'conclusion': '–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –¥–∞–ª—å—à–µ',
                    'tone': '–¥–µ–ª–æ–≤–æ–π',
                    'formality': '—Å—Ä–µ–¥–Ω—è—è'
                }
            },
            
            'response_preferences': {
                'length': {
                    'concise': '–∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã',
                    'detailed': '–ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è',
                    'comprehensive': '–∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã'
                },
                'style': {
                    'direct': '–ø—Ä—è–º—ã–µ –æ—Ç–≤–µ—Ç—ã',
                    'explanatory': '–æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã',
                    'interactive': '–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã'
                },
                'focus': {
                    'practical': '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã',
                    'theoretical': '—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è',
                    'balanced': '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥'
                }
            },
            
            'learning_patterns': {
                'visual': '—Å—Ö–µ–º—ã –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã',
                'auditory': '–ø–æ—à–∞–≥–æ–≤—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è',
                'kinesthetic': '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã',
                'reading': '–ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã'
            }
        }
        
        logger.info(f"üë§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏")

    def _initialize_context_analyzer(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        self.context_analyzer = {
            'intent_classifiers': {
                'question': ['–∫–∞–∫', '—á—Ç–æ', '–ø–æ—á–µ–º—É', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–∑–∞—á–µ–º', '?'],
                'request': ['–ø–æ–º–æ–≥–∏', '—Å–¥–µ–ª–∞–π', '—Å–æ–∑–¥–∞–π', '–Ω–∞–ø–∏—à–∏', '–ø–æ–∫–∞–∂–∏', '–æ–±—ä—è—Å–Ω–∏'],
                'complaint': ['–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ', '–ø–ª–æ—Ö–æ'],
                'greeting': ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä—ã–π', 'hi', 'hello'],
                'thanks': ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'thanks', 'thank you'],
                'meta': ['–∫–∞–∫ —Ç—ã', '—á—Ç–æ —Ç—ã', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–∫–∞–∫ –¥—É–º–∞–µ—à—å']
            },
            
            'topic_classifiers': {
                'arduino': ['arduino', '–º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', '–ø–∏–Ω', 'pin', 'digitalwrite', 'analogread'],
                'python': ['python', '–ø–∏—Ç–æ–Ω', '–∫–æ–¥', '—Ñ—É–Ω–∫—Ü–∏—è', '–∫–ª–∞—Å—Å', '–º–æ–¥—É–ª—å'],
                'electronics': ['—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞', '—Å—Ö–µ–º–∞', '—Ä–µ–∑–∏—Å—Ç–æ—Ä', '–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä', '—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä'],
                'mathematics': ['–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—Ñ–æ—Ä–º—É–ª–∞', '—Ä–∞—Å—á–µ—Ç', '—É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '—Ñ—É–Ω–∫—Ü–∏—è'],
                'programming': ['–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∞–ª–≥–æ—Ä–∏—Ç–º', '—Å—Ç—Ä—É–∫—Ç—É—Ä–∞', '–¥–∞–Ω–Ω—ã–µ', '–ª–æ–≥–∏–∫–∞']
            },
            
            'complexity_indicators': {
                'beginner': ['–ø—Ä–æ—Å—Ç–æ–π', '–±–∞–∑–æ–≤—ã–π', '–Ω–∞—á–∞–ª—å–Ω—ã–π', '–ª–µ–≥–∫–∏–π', '–æ—Å–Ω–æ–≤—ã'],
                'intermediate': ['—Å—Ä–µ–¥–Ω–∏–π', '—É–º–µ—Ä–µ–Ω–Ω—ã–π', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π', '–æ–±—ã—á–Ω—ã–π'],
                'advanced': ['—Å–ª–æ–∂–Ω—ã–π', '–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', '—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π'],
                'expert': ['—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π', '–≤—ã—Å–æ–∫–∏–π', '—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π']
            },
            
            'urgency_indicators': {
                'low': ['–Ω–µ —Å–ø–µ—à–∞', '–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≤—Ä–µ–º—è', '–Ω–µ —Å—Ä–æ—á–Ω–æ'],
                'medium': ['–Ω—É–∂–Ω–æ', '—Ç—Ä–µ–±—É–µ—Ç—Å—è', '–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ'],
                'high': ['—Å—Ä–æ—á–Ω–æ', '–±—ã—Å—Ç—Ä–æ', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ', '–∫—Ä–∏—Ç–∏—á–Ω–æ'],
                'critical': ['–∞–≤–∞—Ä–∏—è', '–∫—Ä–∏—Ç–∏—á–Ω–æ', '—Å–µ–π—á–∞—Å', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ']
            }
        }
        
        logger.info(f"üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")

    def _initialize_quality_assessor(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ü–µ–Ω—â–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
        self.quality_assessor = {
            'relevance_metrics': {
                'keyword_match': 0.3,
                'topic_alignment': 0.2,
                'intent_satisfaction': 0.2,
                'context_consistency': 0.2,
                'user_satisfaction': 0.1
            },
            
            'clarity_metrics': {
                'readability': 0.3,
                'structure': 0.2,
                'terminology': 0.2,
                'examples': 0.2,
                'conclusion': 0.1
            },
            
            'completeness_metrics': {
                'coverage': 0.4,
                'depth': 0.3,
                'examples': 0.2,
                'references': 0.1
            },
            
            'personalization_metrics': {
                'style_match': 0.3,
                'level_adaptation': 0.3,
                'preference_alignment': 0.2,
                'context_awareness': 0.2
            }
        }
        
        logger.info(f"üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –æ—Ü–µ–Ω—â–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞")

    def _initialize_learning_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è"""
        self.learning_system = {
            'feedback_mechanisms': {
                'implicit': ['response_time', 'follow_up_questions', 'conversation_continuation'],
                'explicit': ['user_ratings', 'corrections', 'preferences']
            },
            
            'adaptation_strategies': {
                'template_optimization': '—É–ª—É—á—à–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤',
                'rule_refinement': '—É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª',
                'personalization_enhancement': '—É–ª—É—á—à–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏',
                'context_understanding': '—É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞'
            },
            
            'learning_algorithms': {
                'reinforcement_learning': '–æ–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º',
                'supervised_learning': '–æ–±—É—á–µ–Ω–∏–µ —Å —É—á–∏—Ç–µ–ª–µ–º',
                'unsupervised_learning': '–æ–±—É—á–µ–Ω–∏–µ –±–µ–∑ —É—á–∏—Ç–µ–ª—è',
                'transfer_learning': '—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ'
            }
        }
        
        logger.info(f"üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è")

    def generate_dynamic_response(self, context: DynamicContext) -> GeneratedResponse:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        start_time = datetime.now()
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            analyzed_context = self._analyze_context(context)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
            response_type = self._determine_response_type(analyzed_context)
            
            # –í—ã–±–∏—Ä–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
            adaptation_level = self._determine_adaptation_level(analyzed_context)
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
            template = self._get_template(response_type, adaptation_level)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            variables = self._generate_variables(template, analyzed_context)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω
            base_response = self._apply_template(template, variables)
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            adapted_response = self._adapt_response(base_response, analyzed_context)
            
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            personalized_response = self._personalize_response(adapted_response, analyzed_context)
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            quality_score = self._assess_quality(personalized_response, analyzed_context)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            generation_time = (datetime.now() - start_time).total_seconds()
            
            response = GeneratedResponse(
                content=personalized_response,
                response_type=response_type,
                adaptation_level=adaptation_level,
                quality_score=quality_score,
                personalization_score=self._calculate_personalization_score(personalized_response, analyzed_context),
                context_relevance=self._calculate_context_relevance(personalized_response, analyzed_context),
                generation_time=generation_time,
                metadata={
                    'template_id': template.template_id,
                    'variables_used': list(variables.keys()),
                    'adaptations_applied': self._get_applied_adaptations(analyzed_context),
                    'quality_breakdown': self._get_quality_breakdown(personalized_response, analyzed_context)
                }
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_usage_stats(response)
            
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç (–∫–∞—á–µ—Å—Ç–≤–æ: {quality_score:.2f}, –≤—Ä–µ–º—è: {generation_time:.3f}—Å)")
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._generate_fallback_response(context)

    def _analyze_context(self, context: DynamicContext) -> DynamicContext:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        context.user_intent = self._classify_intent(context.message)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—ã
        context.keywords = self._extract_keywords(context.message)
        context.current_topic = self._classify_topic(context.keywords)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        context.technical_level = self._assess_complexity(context.message, context.keywords)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–æ—á–Ω–æ—Å—Ç—å
        context.context_metadata['urgency'] = self._assess_urgency(context.message)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        context.conversation_mood = self._assess_mood(context.message, context.message_history)
        
        return context

    def _classify_intent(self, message: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""
        message_lower = message.lower()
        
        for intent, keywords in self.context_analyzer['intent_classifiers'].items():
            if any(keyword in message_lower for keyword in keywords):
                return intent
        
        return 'unknown'

    def _extract_keywords(self, message: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        keywords = []
        message_lower = message.lower()
        
        for topic, topic_keywords in self.context_analyzer['topic_classifiers'].items():
            for keyword in topic_keywords:
                if keyword in message_lower:
                    keywords.append(topic)
                    break
        
        return list(set(keywords))

    def _classify_topic(self, keywords: List[str]) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–º—ã"""
        if not keywords:
            return 'general'
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Ç–µ–º—É
        return keywords[0]

    def _assess_complexity(self, message: str, keywords: List[str]) -> str:
        """–û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        message_lower = message.lower()
        
        for level, indicators in self.context_analyzer['complexity_indicators'].items():
            if any(indicator in message_lower for indicator in indicators):
                return level
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if any(keyword in ['arduino', 'python', 'electronics'] for keyword in keywords):
            return 'intermediate'
        
        return 'beginner'

    def _assess_urgency(self, message: str) -> str:
        """–û—Ü–µ–Ω–∫–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
        message_lower = message.lower()
        
        for urgency, indicators in self.context_analyzer['urgency_indicators'].items():
            if any(indicator in message_lower for indicator in indicators):
                return urgency
        
        return 'medium'

    def _assess_mood(self, message: str, history: List[Dict[str, Any]]) -> str:
        """–û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        message_lower = message.lower()
        
        # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        positive_words = ['—Å–ø–∞—Å–∏–±–æ', '–æ—Ç–ª–∏—á–Ω–æ', '—Ö–æ—Ä–æ—à–æ', '–ø–æ–Ω—è—Ç–Ω–æ', '–ø–æ–º–æ–≥–ª–æ', '–∫–ª–∞—Å—Å–Ω–æ']
        if any(word in message_lower for word in positive_words):
            return 'positive'
        
        # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        negative_words = ['–ø–ª–æ—Ö–æ', '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ', '–æ—à–∏–±–∫–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–Ω–µ –ø–æ–Ω—è–ª', '–ø—Ä–æ–±–ª–µ–º–∞']
        if any(word in message_lower for word in negative_words):
            return 'negative'
        
        return 'neutral'

    def _determine_response_type(self, context: DynamicContext) -> ResponseType:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞"""
        if context.user_intent == 'greeting':
            return ResponseType.GREETING
        elif context.user_intent == 'thanks':
            return ResponseType.THANKS
        elif context.user_intent == 'complaint':
            return ResponseType.COMPLAINT
        elif context.user_intent == 'meta':
            return ResponseType.META_QUESTION
        elif context.user_intent == 'question' and context.keywords:
            return ResponseType.TECHNICAL_EXPLANATION
        elif context.user_intent == 'request':
            return ResponseType.PROBLEM_SOLVING
        else:
            return ResponseType.GENERAL_QUESTION

    def _determine_adaptation_level(self, context: DynamicContext) -> AdaptationLevel:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏"""
        if context.technical_level == 'expert':
            return AdaptationLevel.EXPERT
        elif context.technical_level == 'advanced':
            return AdaptationLevel.ADVANCED
        elif context.technical_level == 'intermediate':
            return AdaptationLevel.INTERMEDIATE
        else:
            return AdaptationLevel.BASIC

    def _get_template(self, response_type: ResponseType, adaptation_level: AdaptationLevel) -> ResponseTemplate:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
        level_key = adaptation_level.value
        
        if response_type in self.response_templates and level_key in self.response_templates[response_type]:
            return self.response_templates[response_type][level_key]
        
        # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É —É—Ä–æ–≤–Ω—é
        if 'basic' in self.response_templates[response_type]:
            return self.response_templates[response_type]['basic']
        
        # Fallback –∫ –æ–±—â–µ–º—É —à–∞–±–ª–æ–Ω—É
        return self.response_templates[ResponseType.GENERAL_QUESTION]['basic']

    def _generate_variables(self, template: ResponseTemplate, context: DynamicContext) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–∞"""
        variables = {}
        
        for variable in template.variables:
            if variable == 'greeting':
                variables[variable] = self._generate_greeting(context)
            elif variable == 'context_reference':
                variables[variable] = self._generate_context_reference(context)
            elif variable == 'offer_help':
                variables[variable] = self._generate_offer_help(context)
            elif variable == 'introduction':
                variables[variable] = self._generate_introduction(context)
            elif variable == 'main_explanation':
                variables[variable] = self._generate_main_explanation(context)
            elif variable == 'example':
                variables[variable] = self._generate_example(context)
            elif variable == 'conclusion':
                variables[variable] = self._generate_conclusion(context)
            else:
                variables[variable] = self._generate_generic_variable(variable, context)
        
        return variables

    def _generate_greeting(self, context: DynamicContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        style = context.communication_style
        time_of_day = self._get_time_of_day()
        
        if style == 'formal':
            greetings = ['–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é']
        elif style == 'casual':
            greetings = ['–ü—Ä–∏–≤–µ—Ç', '–•–∞–π', '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫']
        else:
            greetings = ['–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', '–†–∞–¥ –ø–æ–º–æ—á—å', '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ']
        
        return random.choice(greetings)

    def _get_time_of_day(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è"""
        hour = datetime.now().hour
        if 5 <= hour < 12:
            return 'morning'
        elif 12 <= hour < 17:
            return 'afternoon'
        elif 17 <= hour < 22:
            return 'evening'
        else:
            return 'night'

    def _generate_context_reference(self, context: DynamicContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        if len(context.message_history) == 0:
            return "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        elif context.keywords:
            topic = context.keywords[0]
            return f"–ü—Ä–æ–¥–æ–ª–∂–∏–º —Ä–∞–±–æ—Ç—É —Å {topic}."
        else:
            return "–ü—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à –¥–∏–∞–ª–æ–≥."

    def _generate_offer_help(self, context: DynamicContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏"""
        if context.keywords:
            return "–ö–∞–∫–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å—Ç–æ–∏—Ç?"
        elif context.user_intent == 'question':
            return "–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç."
        else:
            return "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"

    def _generate_introduction(self, context: DynamicContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–∏—è"""
        level = context.technical_level
        
        if level == 'beginner':
            return "–ù–∞—á–Ω–µ–º —Å –æ—Å–Ω–æ–≤:"
        elif level == 'advanced':
            return "–ü–µ—Ä–µ–π–¥–µ–º –∫ —Å–ª–æ–∂–Ω—ã–º –∞—Å–ø–µ–∫—Ç–∞–º:"
        else:
            return "–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ:"

    def _generate_main_explanation(self, context: DynamicContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è"""
        if context.current_topic == 'arduino':
            return "Arduino - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏."
        elif context.current_topic == 'python':
            return "Python - –º–æ—â–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á."
        elif context.current_topic == 'electronics':
            return "–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ –∏–∑—É—á–∞–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ø–µ–π –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤."
        else:
            return "–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:"

    def _generate_example(self, context: DynamicContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞"""
        if context.current_topic == 'arduino':
            return "–ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º: digitalWrite(LED_PIN, HIGH);"
        elif context.current_topic == 'python':
            return "–ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞: my_list = [1, 2, 3, 4, 5]"
        elif context.current_topic == 'electronics':
            return "–ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–∫–æ–Ω –û–º–∞: U = I √ó R"
        else:
            return "–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä:"

    def _generate_conclusion(self, context: DynamicContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è"""
        conclusions = [
            "–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤ —Ä–µ—à–µ–Ω–∏–∏ –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏.",
            "–ï—Å–ª–∏ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è, —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ.",
            "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.",
            "–£–¥–∞—á–∏ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏!"
        ]
        return random.choice(conclusions)

    def _generate_generic_variable(self, variable: str, context: DynamicContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π"""
        return f"[{variable}]"

    def _apply_template(self, template: ResponseTemplate, variables: Dict[str, str]) -> str:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
        response = template.base_structure
        
        for variable, value in variables.items():
            placeholder = f"{{{variable}}}"
            response = response.replace(placeholder, value)
        
        return response

    def _adapt_response(self, response: str, context: DynamicContext) -> str:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        if context.conversation_mood == 'positive':
            response = f"üòä {response}"
        elif context.conversation_mood == 'negative':
            response = f"ü§ù {response}"
        
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Å—Ä–æ—á–Ω–æ—Å—Ç—å
        urgency = context.context_metadata.get('urgency', 'medium')
        if urgency == 'high':
            response = f"‚ö° {response}"
        elif urgency == 'critical':
            response = f"üö® {response}"
        
        return response

    def _personalize_response(self, response: str, context: DynamicContext) -> str:
        """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""
        style = context.communication_style
        
        if style == 'formal':
            response = response.replace('–ü—Ä–∏–≤–µ—Ç', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ')
            response = response.replace('–¥–∞–≤–∞–π', '–¥–∞–≤–∞–π—Ç–µ')
        elif style == 'casual':
            response = response.replace('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–ü—Ä–∏–≤–µ—Ç')
            response = response.replace('–¥–∞–≤–∞–π—Ç–µ', '–¥–∞–≤–∞–π')
        
        return response

    def _assess_quality(self, response: str, context: DynamicContext) -> float:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞"""
        quality_score = 0.0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        if any(keyword in response.lower() for keyword in context.keywords):
            quality_score += 0.3
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if 50 <= len(response) <= 500:
            quality_score += 0.2
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if any(marker in response for marker in ['**', '1.', '2.', '3.']):
            quality_score += 0.2
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        if context.communication_style in response:
            quality_score += 0.2
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        if context.conversation_mood in response or context.technical_level in response:
            quality_score += 0.1
        
        return min(quality_score, 1.0)

    def _calculate_personalization_score(self, response: str, context: DynamicContext) -> float:
        """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
        score = 0.0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è
        if context.communication_style in response:
            score += 0.4
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if context.technical_level in response:
            score += 0.3
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        if context.current_topic in response:
            score += 0.3
        
        return min(score, 1.0)

    def _calculate_context_relevance(self, response: str, context: DynamicContext) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
        score = 0.0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if any(keyword in response.lower() for keyword in context.keywords):
            score += 0.4
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        if context.user_intent in response.lower():
            score += 0.3
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º—ã
        if context.current_topic in response.lower():
            score += 0.3
        
        return min(score, 1.0)

    def _get_applied_adaptations(self, context: DynamicContext) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –∞–¥–∞–ø—Ç–∞—Ü–∏–π"""
        adaptations = []
        
        if context.conversation_mood != 'neutral':
            adaptations.append('mood_adaptation')
        
        if context.technical_level != 'intermediate':
            adaptations.append('level_adaptation')
        
        if context.communication_style != 'professional':
            adaptations.append('style_adaptation')
        
        return adaptations

    def _get_quality_breakdown(self, response: str, context: DynamicContext) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–±–∏–≤–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
        return {
            'relevance': self._calculate_context_relevance(response, context),
            'personalization': self._calculate_personalization_score(response, context),
            'clarity': 0.8,  # –ó–∞–≥–ª—É—à–∫–∞
            'completeness': 0.7,  # –ó–∞–≥–ª—É—à–∫–∞
            'helpfulness': 0.8  # –ó–∞–≥–ª—É—à–∫–∞
        }

    def _update_usage_stats(self, response: GeneratedResponse):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        self.usage_stats[response.response_type.value] += 1
        self.quality_stats[response.response_type.value].append(response.quality_score)
        self.adaptation_stats[response.adaptation_level.value].append(response.quality_score)

    def _generate_fallback_response(self, context: DynamicContext) -> GeneratedResponse:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        fallback_content = f"""–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: "{context.message}".

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã."""
        
        return GeneratedResponse(
            content=fallback_content,
            response_type=ResponseType.ERROR_HANDLING,
            adaptation_level=AdaptationLevel.BASIC,
            quality_score=0.5,
            personalization_score=0.0,
            context_relevance=0.3,
            generation_time=0.001,
            metadata={'error': True, 'fallback': True}
        )

    def get_system_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        return {
            'templates_count': sum(len(templates) for templates in self.response_templates.values()),
            'adaptation_rules_count': len(self.adaptation_rules),
            'usage_stats': dict(self.usage_stats),
            'average_quality_by_type': {
                response_type: sum(scores) / len(scores) if scores else 0.0
                for response_type, scores in self.quality_stats.items()
            },
            'average_quality_by_level': {
                level: sum(scores) / len(scores) if scores else 0.0
                for level, scores in self.adaptation_stats.items()
            }
        }

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Dynamic Response System
dynamic_response_system = DynamicResponseSystem()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ç–≤–µ—Ç–æ–≤
    print("üîÑ Dynamic Response System - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
    test_contexts = [
        DynamicContext(
            user_id="test_user",
            session_id="test_session",
            message="–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            user_profile={'communication_style': 'casual'},
            technical_level='beginner'
        ),
        DynamicContext(
            user_id="test_user",
            session_id="test_session",
            message="–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Arduino?",
            user_profile={'communication_style': 'professional'},
            technical_level='intermediate',
            keywords=['arduino']
        ),
        DynamicContext(
            user_id="test_user",
            session_id="test_session",
            message="–ö–∞–∫ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è?",
            user_profile={'communication_style': 'formal'},
            technical_level='advanced'
        )
    ]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    for i, context in enumerate(test_contexts, 1):
        print(f"\n--- –¢–µ—Å—Ç {i} ---")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {context.message}")
        
        response = dynamic_response_system.generate_dynamic_response(context)
        
        print(f"–¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {response.response_type.value}")
        print(f"–£—Ä–æ–≤–µ–Ω—å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏: {response.adaptation_level.value}")
        print(f"–ö–∞—á–µ—Å—Ç–≤–æ: {response.quality_score:.2f}")
        print(f"–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: {response.personalization_score:.2f}")
        print(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {response.context_relevance:.2f}")
        print(f"–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.generation_time:.3f}—Å")
        print(f"–û—Ç–≤–µ—Ç: {response.content[:200]}...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = dynamic_response_system.get_system_stats()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {json.dumps(stats, indent=2, ensure_ascii=False)}")





