#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from flask import Flask, request, jsonify
from flask_cors import CORS
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

def handle_arduino_nano_query_simple(query):
    """–ü—Ä–æ—Å—Ç–∞—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ Arduino Nano"""
    query_lower = query.lower()
    
    if 'pin' in query_lower or '–ø–∏–Ω' in query_lower:
        return "**–ü–∏–Ω—ã Arduino Nano:**\n- –¶–∏—Ñ—Ä–æ–≤—ã–µ: D2-D13\n- –ê–Ω–∞–ª–æ–≥–æ–≤—ã–µ: A0-A7\n- PWM: D3, D5, D6, D9, D10, D11"
    
    if 'function' in query_lower or '—Ñ—É–Ω–∫—Ü' in query_lower:
        return "**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n- digitalWrite(pin, value)\n- digitalRead(pin)\n- analogRead(pin)\n- analogWrite(pin, value)"
    
    return "**Arduino Nano** - –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä ATmega328P —Å 14 —Ü–∏—Ñ—Ä–æ–≤—ã–º–∏ –∏ 8 –∞–Ω–∞–ª–æ–≥–æ–≤—ã–º–∏ –ø–∏–Ω–∞–º–∏."

@app.route('/api/chat', methods=['POST'])
def simple_chat():
    """–ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Arduino Nano"""
    try:
        data = request.get_json()
        message = data.get('message', '').strip()
        
        if not message:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –∫ Arduino Nano
        if any(word in message.lower() for word in ['arduino', '–∞—Ä–¥—É–∏–Ω–æ', 'nano', '–Ω–∞–Ω–æ', 'pin', '–ø–∏–Ω']):
            result = handle_arduino_nano_query_simple(message)
            return jsonify({
                'success': True,
                'response': result,
                'category': 'arduino_nano',
                'server': 'localhost:8080 (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å)',
                'message': message
            })
        else:
            return jsonify({
                'success': True,
                'response': '–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä. –î–ª—è Arduino Nano –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: arduino, nano, pin, –ø–∏–Ω',
                'category': 'general',
                'server': 'localhost:8080 (—Ç–µ—Å—Ç–æ–≤—ã–π)',
                'message': message
            })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/health', methods=['GET'])
def health():
    return jsonify({'status': 'healthy', 'service': 'Simple Arduino Test'})

@app.route('/')
def index():
    return "Simple Arduino Nano Test Server"

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ Arduino Nano...")
    logger.info("üì° –ü–æ—Ä—Ç: 8081")
    logger.info("üîó URL: http://localhost:8081")
    app.run(host='0.0.0.0', port=8081, debug=False)





