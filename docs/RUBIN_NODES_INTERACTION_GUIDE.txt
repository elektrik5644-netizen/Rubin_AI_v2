ПОДРОБНОЕ ОПИСАНИЕ УЗЛОВ RUBIN IDE
===================================

СИСТЕМА УЗЛОВ И ИХ ВЗАИМОДЕЙСТВИЕ
==================================

┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                    УЗЕЛ 1: ВЕБ-ИНТЕРФЕЙС                                      │
├─────────────────────────────────────────────────────────────────────────────────────────────────┤
│  📍 МЕСТОПОЛОЖЕНИЕ: RubinIDE.html, RubinDeveloper.html, test_chat.html                        │
│                                                                                               │
│  🔧 ФУНКЦИИ:                                                                                  │
│  • Редактор кода с подсветкой синтаксиса                                                     │
│  • Интегрированный чат-бот                                                                   │
│  • Панель диагностики PMAC                                                                   │
│  • Графики и визуализация данных                                                             │
│  • Управление проектами                                                                      │
│                                                                                               │
│  🔄 ВЗАИМОДЕЙСТВИЕ С ДРУГИМИ УЗЛАМИ:                                                         │
│  • → API слой: отправка AJAX запросов на порты 8083-8096                                    │
│  • ← API слой: получение JSON ответов с данными и статусами                                  │
│  • → База знаний: поиск информации через API                                                │
│  • ← База знаний: получение релевантных документов                                           │
│                                                                                               │
│  👤 УПРАВЛЕНИЕ ПОЛЬЗОВАТЕЛЕМ:                                                                │
│  • Открытие файла: File → Open → выбор файла                                                │
│  • Отправка сообщения в чат: ввод текста → Enter                                            │
│  • Запуск диагностики: кнопка "Diagnostics" → выбор контроллера                             │
│  • Просмотр графиков: вкладка "Monitoring" → выбор параметра                                │
│                                                                                               │
│  🧪 ТЕСТИРОВАНИЕ:                                                                            │
│  • Открыть test_chat.html в браузере                                                        │
│  • Отправить тестовое сообщение                                                              │
│  • Проверить получение ответа                                                               │
│  • Проверить отображение в интерфейсе                                                       │
└─────────────────────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                    УЗЕЛ 2: API СЛОЙ                                          │
├─────────────────────────────────────────────────────────────────────────────────────────────────┤
│  📍 МЕСТОПОЛОЖЕНИЕ: Python файлы (rubin_*.py) на портах 8083-8096                           │
│                                                                                               │
│  🔧 ФУНКЦИИ:                                                                                  │
│  • Обработка HTTP запросов                                                                    │
│  • Маршрутизация к специализированным сервисам                                               │
│  • Валидация входных данных                                                                   │
│  • Форматирование ответов                                                                     │
│  • Кэширование результатов                                                                    │
│                                                                                               │
│  🔄 ВЗАИМОДЕЙСТВИЕ С ДРУГИМИ УЗЛАМИ:                                                         │
│  • ← Веб-интерфейс: получение AJAX запросов                                                  │
│  • → C++ ядро: вызов системных функций через API                                             │
│  • ← C++ ядро: получение результатов обработки                                               │
│  • → База знаний: запросы на поиск и добавление данных                                       │
│  • ← База знаний: получение найденной информации                                             │
│  • → AI провайдеры: отправка запросов на генерацию ответов                                   │
│  • ← AI провайдеры: получение сгенерированных ответов                                        │
│                                                                                               │
│  👤 УПРАВЛЕНИЕ ПОЛЬЗОВАТЕЛЕМ:                                                                │
│  • Запуск серверов: python start_rubin_servers.py                                           │
│  • Проверка статуса: GET http://localhost:8083/api/health                                   │
│  • Остановка серверов: Ctrl+C в терминале                                                   │
│  • Просмотр логов: tail -f rubin_api.log                                                    │
│                                                                                               │
│  🧪 ТЕСТИРОВАНИЕ:                                                                            │
│  • curl -X GET http://localhost:8083/api/health                                             │
│  • curl -X POST http://localhost:8086/api/chat -d '{"message":"test"}'                     │
│  • Проверка ответов в браузере через Developer Tools                                         │
└─────────────────────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                    УЗЕЛ 3: C++ ЯДРО                                          │
├─────────────────────────────────────────────────────────────────────────────────────────────────┤
│  📍 МЕСТОПОЛОЖЕНИЕ: RubinEngine_Simple.exe, *.cpp файлы                                     │
│                                                                                               │
│  🔧 ФУНКЦИИ:                                                                                  │
│  • Управление системным жизненным циклом                                                     │
│  • Обработка PMAC команд                                                                     │
│  • Мониторинг состояния системы                                                              │
│  • Управление базой знаний                                                                   │
│  • Интеграция с AI провайдерами                                                              │
│                                                                                               │
│  🔄 ВЗАИМОДЕЙСТВИЕ С ДРУГИМИ УЗЛАМИ:                                                         │
│  • ← API слой: получение запросов через API                                                  │
│  • → API слой: отправка результатов обработки                                                │
│  • → PMAC контроллеры: отправка команд через COM интерфейс                                   │
│  • ← PMAC контроллеры: получение данных с датчиков                                           │
│  • → База знаний: управление SQLite и Qdrant                                                 │
│  • ← База знаний: получение данных для обработки                                             │
│  • → AI провайдеры: отправка запросов через OpenRouterClient                                 │
│  • ← AI провайдеры: получение сгенерированных ответов                                        │
│                                                                                               │
│  👤 УПРАВЛЕНИЕ ПОЛЬЗОВАТЕЛЕМ:                                                                │
│  • Запуск: RubinEngine_Simple.exe                                                            │
│  • Остановка: Ctrl+C или graceful shutdown                                                  │
│  • Конфигурация: редактирование master_dev_config.json                                       │
│  • Мониторинг: просмотр логов в реальном времени                                             │
│                                                                                               │
│  🧪 ТЕСТИРОВАНИЕ:                                                                            │
│  • Проверка запуска: ps aux | grep RubinEngine                                              │
│  • Тест PMAC: отправка тестовой команды через API                                           │
│  • Проверка логов: tail -f rubin_engine.log                                                 │
└─────────────────────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                    УЗЕЛ 4: PMAC КОНТРОЛЛЕРЫ                                  │
├─────────────────────────────────────────────────────────────────────────────────────────────────┤
│  📍 МЕСТОПОЛОЖЕНИЕ: Физические устройства, подключенные через COM/Ethernet                    │
│                                                                                               │
│  🔧 ФУНКЦИИ:                                                                                  │
│  • Управление осями движения                                                                 │
│  • Сбор данных с датчиков                                                                     │
│  • Выполнение программ                                                                        │
│  • Контроль безопасности                                                                      │
│                                                                                               │
│  🔄 ВЗАИМОДЕЙСТВИЕ С ДРУГИМИ УЗЛАМИ:                                                         │
│  • ← C++ ядро: получение команд через PMACComInterface                                       │
│  • → C++ ядро: отправка данных с датчиков                                                    │
│  • ← Веб-интерфейс: получение команд через API                                               │
│  • → Веб-интерфейс: отправка статуса и данных                                                │
│                                                                                               │
│  👤 УПРАВЛЕНИЕ ПОЛЬЗОВАТЕЛЕМ:                                                                │
│  • Подключение: физическое подключение через COM/Ethernet                                    │
│  • Конфигурация: настройка параметров в веб-интерфейсе                                       │
│  • Калибровка: запуск процедуры калибровки                                                   │
│  • Мониторинг: просмотр данных в реальном времени                                            │
│                                                                                               │
│  🧪 ТЕСТИРОВАНИЕ:                                                                            │
│  • Проверка подключения: ping контроллера                                                    │
│  • Тест команд: отправка простой команды (например, "?" для статуса)                        │
│  • Проверка данных: мониторинг значений датчиков                                            │
└─────────────────────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                    УЗЕЛ 5: БАЗА ЗНАНИЙ                                       │
├─────────────────────────────────────────────────────────────────────────────────────────────────┤
│  📍 МЕСТОПОЛОЖЕНИЕ: SQLite файлы, Qdrant сервер                                             │
│                                                                                               │
│  🔧 ФУНКЦИИ:                                                                                  │
│  • Хранение структурированных данных                                                          │
│  • Векторный поиск по документам                                                              │
│  • Индексация и категоризация                                                                 │
│  • Кэширование результатов поиска                                                             │
│                                                                                               │
│  🔄 ВЗАИМОДЕЙСТВИЕ С ДРУГИМИ УЗЛАМИ:                                                         │
│  • ← C++ ядро: получение запросов на поиск и добавление данных                               │
│  • → C++ ядро: отправка найденной информации                                                 │
│  • ← API слой: получение запросов через API                                                  │
│  • → API слой: отправка результатов поиска                                                   │
│  • ← YandexDisk: получение новых документов для индексации                                   │
│  • → YandexDisk: отправка статуса обработки                                                  │
│                                                                                               │
│  👤 УПРАВЛЕНИЕ ПОЛЬЗОВАТЕЛЕМ:                                                                │
│  • Поиск: ввод запроса в поисковую строку                                                    │
│  • Добавление: загрузка файлов через веб-интерфейс                                           │
│  • Управление: просмотр и редактирование через админ-панель                                  │
│  • Резервное копирование: автоматическое или ручное                                          │
│                                                                                               │
│  🧪 ТЕСТИРОВАНИЕ:                                                                            │
│  • Поиск: ввод тестового запроса                                                             │
│  • Добавление: загрузка тестового документа                                                  │
│  • Проверка индексации: поиск по добавленному документу                                      │
└─────────────────────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                    УЗЕЛ 6: YANDEX DISK                                       │
├─────────────────────────────────────────────────────────────────────────────────────────────────┤
│  📍 МЕСТОПОЛОЖЕНИЕ: C:\Users\elekt\YandexDisk, yandex_disk_*.py                             │
│                                                                                               │
│  🔧 ФУНКЦИИ:                                                                                  │
│  • Сканирование папки на изменения                                                           │
│  • Извлечение текста из документов                                                           │
│  • Категоризация по содержимому                                                              │
│  • Автоматическая синхронизация с базой знаний                                               │
│                                                                                               │
│  🔄 ВЗАИМОДЕЙСТВИЕ С ДРУГИМИ УЗЛАМИ:                                                         │
│  • → База знаний: отправка обработанных документов                                           │
│  • ← База знаний: получение статуса обработки                                                │
│  • → API слой: отправка уведомлений о новых файлах                                           │
│  • ← API слой: получение команд на синхронизацию                                             │
│  • → Веб-интерфейс: отправка статистики обработки                                           │
│  • ← Веб-интерфейс: получение команд управления                                              │
│                                                                                               │
│  👤 УПРАВЛЕНИЕ ПОЛЬЗОВАТЕЛЕМ:                                                                │
│  • Настройка: указание пути к папке YandexDisk                                               │
│  • Запуск синхронизации: кнопка "Sync" в веб-интерфейсе                                      │
│  • Мониторинг: просмотр статистики обработки                                                 │
│  • Управление: включение/выключение автосинхронизации                                        │
│                                                                                               │
│  🧪 ТЕСТИРОВАНИЕ:                                                                            │
│  • Добавление тестового файла в папку YandexDisk                                            │
│  • Запуск ручной синхронизации                                                               │
│  │ Проверка обработки файла в базе знаний                                                    │
└─────────────────────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                    УЗЕЛ 7: AI ПРОВАЙДЕРЫ                                     │
├─────────────────────────────────────────────────────────────────────────────────────────────────┤
│  📍 МЕСТОПОЛОЖЕНИЕ: Внешние сервисы (OpenRouter, Ollama)                                    │
│                                                                                               │
│  🔧 ФУНКЦИИ:                                                                                  │
│  • Генерация ответов на запросы                                                              │
│  • Анализ контекста                                                                           │
│  • Обработка естественного языка                                                              │
│  • Fallback на альтернативные провайдеры                                                     │
│                                                                                               │
│  🔄 ВЗАИМОДЕЙСТВИЕ С ДРУГИМИ УЗЛАМИ:                                                         │
│  • ← C++ ядро: получение запросов через OpenRouterClient                                     │
│  • → C++ ядро: отправка сгенерированных ответов                                              │
│  • ← API слой: получение запросов через API                                                  │
│  • → API слой: отправка результатов обработки                                                │
│                                                                                               │
│  👤 УПРАВЛЕНИЕ ПОЛЬЗОВАТЕЛЕМ:                                                                │
│  • Настройка: указание API ключей в конфигурации                                             │
│  • Выбор провайдера: настройка приоритетов в веб-интерфейсе                                  │
│  • Мониторинг: просмотр статистики использования                                             │
│  • Тестирование: отправка тестовых запросов                                                  │
│                                                                                               │
│  🧪 ТЕСТИРОВАНИЕ:                                                                            │
│  • Отправка тестового сообщения в чат                                                        │
│  • Проверка получения ответа                                                                 │
│  • Тестирование fallback при недоступности основного провайдера                              │
└─────────────────────────────────────────────────────────────────────────────────────────────────┘

ПОТОКИ ДАННЫХ МЕЖДУ УЗЛАМИ
===========================

┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                    ОСНОВНОЙ ПОТОК ДАННЫХ                                     │
├─────────────────────────────────────────────────────────────────────────────────────────────────┤
│  1. ПОЛЬЗОВАТЕЛЬ → ВЕБ-ИНТЕРФЕЙС                                                              │
│     • Ввод текста в чат                                                                        │
│     • Выбор параметров                                                                         │
│     • Отправка команды                                                                         │
│                                                                                               │
│  2. ВЕБ-ИНТЕРФЕЙС → API СЛОЙ                                                                  │
│     • AJAX запрос с данными                                                                    │
│     • Валидация на клиенте                                                                     │
│     • Отправка на соответствующий порт                                                        │
│                                                                                               │
│  3. API СЛОЙ → C++ ЯДРО                                                                       │
│     • Обработка HTTP запроса                                                                   │
│     • Валидация данных                                                                         │
│     • Вызов системных функций                                                                  │
│                                                                                               │
│  4. C++ ЯДРО → PMAC КОНТРОЛЛЕРЫ                                                               │
│     • Формирование PMAC команды                                                                │
│     • Отправка через COM интерфейс                                                             │
│     • Ожидание ответа                                                                          │
│                                                                                               │
│  5. PMAC КОНТРОЛЛЕРЫ → C++ ЯДРО                                                               │
│     • Отправка данных с датчиков                                                               │
│     • Статус выполнения команды                                                                │
│     • Ошибки и предупреждения                                                                  │
│                                                                                               │
│  6. C++ ЯДРО → API СЛОЙ                                                                       │
│     • Обработка полученных данных                                                              │
│     • Формирование ответа                                                                      │
│     • Добавление метаданных                                                                    │
│                                                                                               │
│  7. API СЛОЙ → ВЕБ-ИНТЕРФЕЙС                                                                  │
│     • JSON ответ с данными                                                                     │
│     • Статус выполнения                                                                        │
│     • Ошибки (если есть)                                                                       │
│                                                                                               │
│  8. ВЕБ-ИНТЕРФЕЙС → ПОЛЬЗОВАТЕЛЬ                                                              │
│     • Отображение результата                                                                   │
│     • Обновление интерфейса                                                                    │
│     • Уведомления о статусе                                                                    │
└─────────────────────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                    ПОТОК AI ОБРАБОТКИ                                        │
├─────────────────────────────────────────────────────────────────────────────────────────────────┤
│  1. ПОЛЬЗОВАТЕЛЬ → ВЕБ-ИНТЕРФЕЙС                                                              │
│     • Ввод сообщения в чат                                                                     │
│     • Выбор контекста                                                                          │
│                                                                                               │
│  2. ВЕБ-ИНТЕРФЕЙС → API СЛОЙ (8086)                                                           │
│     • POST запрос с сообщением                                                                 │
│     • Метаданные контекста                                                                     │
│                                                                                               │
│  3. API СЛОЙ → C++ ЯДРО                                                                       │
│     • Вызов ChatManager                                                                        │
│     • Построение контекста                                                                     │
│                                                                                               │
│  4. C++ ЯДРО → AI ПРОВАЙДЕРЫ                                                                  │
│     • Отправка запроса через OpenRouterClient                                                 │
│     • Ожидание ответа                                                                          │
│                                                                                               │
│  5. AI ПРОВАЙДЕРЫ → C++ ЯДРО                                                                  │
│     • Сгенерированный ответ                                                                    │
│     • Метаданные ответа                                                                        │
│                                                                                               │
│  6. C++ ЯДРО → API СЛОЙ                                                                       │
│     • Обработанный ответ                                                                       │
│     • Обновленный контекст                                                                     │
│                                                                                               │
│  7. API СЛОЙ → ВЕБ-ИНТЕРФЕЙС                                                                  │
│     • JSON ответ с текстом                                                                     │
│     • Статус обработки                                                                         │
│                                                                                               │
│  8. ВЕБ-ИНТЕРФЕЙС → ПОЛЬЗОВАТЕЛЬ                                                              │
│     • Отображение ответа в чате                                                                │
│     • Обновление истории                                                                       │
└─────────────────────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                    ПОТОК СИНХРОНИЗАЦИИ YANDEX DISK                           │
├─────────────────────────────────────────────────────────────────────────────────────────────────┤
│  1. YANDEX DISK → YANDEX DISK CONNECTOR                                                       │
│     • Сканирование папки на изменения                                                         │
│     • Обнаружение новых файлов                                                                │
│                                                                                               │
│  2. YANDEX DISK CONNECTOR → ОБРАБОТКА ДОКУМЕНТОВ                                             │
│     • Извлечение текста из PDF, DOCX, TXT                                                    │
│     • Категоризация по содержимому                                                            │
│                                                                                               │
│  3. ОБРАБОТКА → БАЗА ЗНАНИЙ                                                                  │
│     • Добавление в SQLite                                                                     │
│     • Создание векторных представлений                                                        │
│     • Индексация в Qdrant                                                                     │
│                                                                                               │
│  4. БАЗА ЗНАНИЙ → API СЛОЙ                                                                   │
│     • Уведомление о новых документах                                                          │
│     • Статус обработки                                                                        │
│                                                                                               │
│  5. API СЛОЙ → ВЕБ-ИНТЕРФЕЙС                                                                 │
│     • Обновление статистики                                                                   │
│     • Уведомления о новых файлах                                                              │
│                                                                                               │
│  6. ВЕБ-ИНТЕРФЕЙС → ПОЛЬЗОВАТЕЛЬ                                                             │
│     • Отображение обновленной статистики                                                      │
│     • Уведомления о новых документах                                                          │
└─────────────────────────────────────────────────────────────────────────────────────────────────┘

УПРАВЛЕНИЕ И ТЕСТИРОВАНИЕ СИСТЕМЫ
==================================

┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                    УПРАВЛЕНИЕ СИСТЕМОЙ                                       │
├─────────────────────────────────────────────────────────────────────────────────────────────────┤
│  🚀 ЗАПУСК СИСТЕМЫ:                                                                           │
│  1. Запуск C++ ядра:                                                                          │
│     • Двойной клик на RubinEngine_Simple.exe                                                  │
│     • Или через командную строку: RubinEngine_Simple.exe                                     │
│     • Проверка запуска: появление окна консоли                                               │
│                                                                                               │
│  2. Запуск Python API серверов:                                                               │
│     • python start_rubin_servers.py                                                           │
│     • Или автоматически через start_rubin_complete_system.bat                                │
│     • Проверка: появление сообщений о запуске серверов                                       │
│                                                                                               │
│  3. Открытие веб-интерфейса:                                                                  │
│     • Открыть RubinIDE.html в браузере                                                       │
│     • Проверка подключения: появление интерфейса                                             │
│                                                                                               │
│  🔧 КОНФИГУРАЦИЯ:                                                                             │
│  1. Основные настройки:                                                                       │
│     • Редактирование master_dev_config.json                                                  │
│     • Настройка портов API серверов                                                           │
│     • Конфигурация PMAC контроллеров                                                          │
│                                                                                               │
│  2. AI провайдеры:                                                                            │
│     • Добавление API ключей в конфигурацию                                                    │
│     • Настройка приоритетов провайдеров                                                       │
│     • Конфигурация fallback                                                                   │
│                                                                                               │
│  3. База знаний:                                                                              │
│     • Настройка путей к базам данных                                                          │
│     • Конфигурация Qdrant сервера                                                             │
│     • Настройка индексации                                                                    │
│                                                                                               │
│  📊 МОНИТОРИНГ:                                                                               │
│  1. Системные метрики:                                                                        │
│     • CPU, RAM, диск, сеть                                                                    │
│     • Время отклика API                                                                       │
│     • Количество активных соединений                                                          │
│                                                                                               │
│  2. PMAC контроллеры:                                                                         │
│     • Состояние подключения                                                                    │
│     • Данные с датчиков                                                                       │
│     • Ошибки и предупреждения                                                                 │
│                                                                                               │
│  3. AI провайдеры:                                                                            │
│     • Статистика использования                                                                │
│     • Время ответа                                                                            │
│     • Количество ошибок                                                                       │
└─────────────────────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                    ТЕСТИРОВАНИЕ СИСТЕМЫ                                      │
├─────────────────────────────────────────────────────────────────────────────────────────────────┤
│  🧪 БАЗОВОЕ ТЕСТИРОВАНИЕ:                                                                     │
│  1. Тест запуска системы:                                                                     │
│     • Запуск всех компонентов                                                                 │
│     • Проверка доступности API                                                                │
│     • Тест веб-интерфейса                                                                     │
│                                                                                               │
│  2. Тест API серверов:                                                                        │
│     • curl -X GET http://localhost:8083/api/health                                           │
│     • curl -X GET http://localhost:8086/api/chat/status                                      │
│     • curl -X GET http://localhost:8087/api/electrical/status                                │
│                                                                                               │
│  3. Тест веб-интерфейса:                                                                      │
│     • Открытие RubinIDE.html                                                                  │
│     • Проверка загрузки интерфейса                                                            │
│     • Тест отправки сообщения в чат                                                           │
│                                                                                               │
│  🔍 ФУНКЦИОНАЛЬНОЕ ТЕСТИРОВАНИЕ:                                                              │
│  1. Тест чат-бота:                                                                            │
│     • Отправка сообщения: "Привет, как дела?"                                                │
│     • Проверка получения ответа                                                               │
│     • Тест различных доменов (программирование, электротехника)                              │
│                                                                                               │
│  2. Тест PMAC контроллеров:                                                                   │
│     • Отправка команды статуса: "?"                                                           │
│     • Проверка получения ответа                                                               │
│     • Тест отправки простой команды                                                           │
│                                                                                               │
│  3. Тест базы знаний:                                                                         │
│     • Поиск по ключевому слову                                                                │
│     • Проверка возврата релевантных результатов                                               │
│     • Тест добавления нового документа                                                        │
│                                                                                               │
│  🚨 ТЕСТИРОВАНИЕ ОШИБОК:                                                                      │
│  1. Тест недоступности API:                                                                   │
│     • Остановка одного из API серверов                                                        │
│     • Проверка fallback механизма                                                             │
│     • Тест восстановления после перезапуска                                                  │
│                                                                                               │
│  2. Тест недоступности AI провайдера:                                                         │
│     • Отключение интернета                                                                    │
│     • Проверка fallback на локальный Ollama                                                   │
│     • Тест восстановления соединения                                                          │
│                                                                                               │
│  3. Тест недоступности PMAC контроллера:                                                      │
│     • Отключение контроллера                                                                  │
│     • Проверка обработки ошибки                                                               │
│     • Тест переподключения                                                                    │
└─────────────────────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                    ОТЛАДКА И УСТРАНЕНИЕ НЕПОЛАДОК                             │
├─────────────────────────────────────────────────────────────────────────────────────────────────┤
│  🔧 ОТЛАДКА C++ ЯДРА:                                                                         │
│  1. Просмотр логов:                                                                           │
│     • tail -f rubin_engine.log                                                                │
│     • Поиск ошибок: grep "ERROR" rubin_engine.log                                            │
│     • Анализ производительности: grep "PERF" rubin_engine.log                                │
│                                                                                               │
│  2. Отладка PMAC подключения:                                                                 │
│     • Проверка COM портов: device manager                                                     │
│     • Тест соединения: отправка команды "?"                                                  │
│     • Проверка таймаутов в логах                                                              │
│                                                                                               │
│  3. Отладка базы знаний:                                                                      │
│     • Проверка SQLite: sqlite3 rubin_knowledge_base.db                                       │
│     • Проверка Qdrant: curl http://localhost:6333/collections                                │
│     • Тест поиска: отправка тестового запроса                                                │
│                                                                                               │
│  🐍 ОТЛАДКА PYTHON API:                                                                       │
│  1. Просмотр логов:                                                                           │
│     • tail -f rubin_api.log                                                                   │
│     • Поиск ошибок: grep "ERROR" rubin_api.log                                               │
│     • Анализ производительности: grep "PERF" rubin_api.log                                   │
│                                                                                               │
│  2. Отладка HTTP запросов:                                                                    │
│     • Использование Postman для тестирования API                                             │
│     • Проверка заголовков и тела запроса                                                     │
│     • Анализ ответов сервера                                                                  │
│                                                                                               │
│  3. Отладка AI интеграции:                                                                    │
│     • Проверка API ключей                                                                     │
│     • Тест подключения к провайдерам                                                          │
│     • Анализ времени ответа                                                                   │
│                                                                                               │
│  🌐 ОТЛАДКА ВЕБ-ИНТЕРФЕЙСА:                                                                   │
│  1. Использование Developer Tools:                                                            │
│     • F12 для открытия инструментов                                                           │
│     • Вкладка Console для просмотра ошибок JavaScript                                        │
│     • Вкладка Network для анализа HTTP запросов                                              │
│                                                                                               │
│  2. Отладка AJAX запросов:                                                                    │
│     • Проверка URL и параметров запроса                                                       │
│     • Анализ ответов сервера                                                                  │
│     • Проверка обработки ошибок                                                               │
│                                                                                               │
│  3. Отладка отображения:                                                                      │
│     • Проверка CSS стилей                                                                     │
│     • Анализ DOM структуры                                                                    │
│     • Тест на разных браузерах                                                                │
└─────────────────────────────────────────────────────────────────────────────────────────────────┘

Дата создания: 10.09.2025
Версия: Rubin IDE v1 "Ломовая лошадка"
Тип: Руководство по взаимодействию узлов
