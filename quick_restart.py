#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ Rubin AI v2 —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
"""

import subprocess
import time
import requests
import logging
import os
import signal
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class QuickRestart:
    def __init__(self):
        self.modules = {
            'smart_dispatcher': {'port': 8080, 'script': 'smart_dispatcher.py'},
            'electrical': {'port': 8087, 'script': 'api/electrical_api.py'},
            'radiomechanics': {'port': 8089, 'script': 'api/radiomechanics_api.py'},
            'controllers': {'port': 9000, 'script': 'api/controllers_api.py'},
            'mathematics': {'port': 8086, 'script': 'api/mathematics_api.py'},
            'programming': {'port': 8088, 'script': 'api/programming_api.py'},
            'general': {'port': 8085, 'script': 'api/general_api.py'},
            'localai': {'port': 11434, 'script': 'simple_localai_server.py'}
        }
        
        self.processes = {}
        self.running = True

    def start_module(self, name):
        """–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è"""
        module = self.modules[name]
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é {name} (–ø–æ—Ä—Ç {module['port']})...")
            
            process = subprocess.Popen(
                ['python', module['script']],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                creationflags=subprocess.CREATE_NEW_PROCESS_GROUP if os.name == 'nt' else 0
            )
            
            self.processes[name] = process
            logger.info(f"‚úÖ {name} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {str(e)}")
            return False

    def stop_module(self, name):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è"""
        if name in self.processes:
            process = self.processes[name]
            try:
                logger.info(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {name}...")
                
                if os.name == 'nt':
                    subprocess.run(['taskkill', '/F', '/PID', str(process.pid)], 
                                 capture_output=True)
                else:
                    os.kill(process.pid, signal.SIGTERM)
                
                del self.processes[name]
                logger.info(f"‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}: {str(e)}")

    def check_health(self, name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–¥—É–ª—è"""
        module = self.modules[name]
        try:
            response = requests.get(f"http://localhost:{module['port']}{module['health_endpoint']}", timeout=5)
            return response.status_code == 200
        except Exception as e:
            logger.debug(f"Health check failed for {name}: {e}")
            return False

    def is_running(self, name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–æ–¥—É–ª—å"""
        if name not in self.processes:
            return False
        
        process = self.processes[name]
        return process.poll() is None

    def restart_module(self, name):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è"""
        logger.warning(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é {name}...")
        self.stop_module(name)
        time.sleep(3)
        self.start_module(name)

    def start_all(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –≤—Å–µ –º–æ–¥—É–ª–∏ Rubin AI v2...")
        
        for name in self.modules.keys():
            self.start_module(name)
            time.sleep(2)
        
        logger.info("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã")

    def monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"""
        logger.info("üîç –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
        
        # –°—á–µ—Ç—á–∏–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        failure_count = {name: 0 for name in self.modules.keys()}
        max_failures = 3  # –ú–∞–∫—Å–∏–º—É–º 3 –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥—Ä—è–¥
        
        while self.running:
            try:
                for name in self.modules.keys():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–æ–¥—É–ª—å
                    if not self.is_running(name):
                        logger.warning(f"‚ö†Ô∏è {name} –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é...")
                        self.restart_module(name)
                        failure_count[name] += 1
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
                    if not self.check_health(name):
                        failure_count[name] += 1
                        if failure_count[name] >= max_failures:
                            logger.warning(f"‚ö†Ô∏è {name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç {failure_count[name]} —Ä–∞–∑ –ø–æ–¥—Ä—è–¥, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é...")
                            self.restart_module(name)
                            failure_count[name] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                        else:
                            logger.debug(f"‚ö†Ô∏è {name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç ({failure_count[name]}/{max_failures})")
                        continue
                    else:
                        # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –∑–¥–æ—Ä–æ–≤, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                        failure_count[name] = 0
                
                # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ (—É–≤–µ–ª–∏—á–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª)
                time.sleep(60)
                
            except KeyboardInterrupt:
                logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
                self.running = False
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}")
                time.sleep(10)

    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—Å–µ –º–æ–¥—É–ª–∏...")
        
        for name in self.processes.keys():
            self.stop_module(name)
        
        logger.info("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    restart = QuickRestart()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
        restart.start_all()
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        time.sleep(10)
        
        # –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        restart.monitor()
        
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    finally:
        restart.stop_all()
        logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    main()
