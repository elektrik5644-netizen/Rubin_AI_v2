#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è Rubin AI v2.0
–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ LocalAI –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import time
import random
import threading
import requests
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from collections import defaultdict, deque

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –î–û–ë–ê–í–õ–ï–ù –ò–ú–ü–û–†–¢ –ù–ï–ô–†–û–°–ï–¢–ò ---
try:
    from neural_rubin import get_neural_rubin
    NEURAL_NETWORK_AVAILABLE = True
    logging.info("üß† Neural Rubin AI (–Ω–µ–π—Ä–æ—Å–µ—Ç—å) —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.")
except ImportError as e:
    NEURAL_NETWORK_AVAILABLE = False
    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å: {e}. –î–∏—Å–ø–µ—Ç—á–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.")


@dataclass
class ModuleMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è"""
    module_name: str
    port: int
    request_count: int = 0
    avg_response_time: float = 0.0
    error_count: int = 0
    last_health_check: Optional[datetime] = None
    status: str = "unknown"  # online, offline, degraded
    cpu_usage: float = 0.0
    memory_usage: float = 0.0

@dataclass
class RequestMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
    timestamp: datetime
    module: str
    response_time: float
    success: bool
    category: str

class IntelligentDispatcher:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        self.modules = {
            'controllers': {'port': 9000, 'name': '–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã'},
            'electrical': {'port': 8087, 'name': '–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞'},
            'mathematics': {'port': 8086, 'name': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'},
            'programming': {'port': 8088, 'name': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'},
            'neuro': {'port': 8090, 'name': '–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å'},
            'advanced_math': {'port': 8100, 'name': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞'},
            'data_processing': {'port': 8101, 'name': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö'},
            'search_engine': {'port': 8102, 'name': '–ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞'},
            'system_utils': {'port': 8103, 'name': '–°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã'},
            'gai_server': {'port': 8104, 'name': 'GAI —Å–µ—Ä–≤–µ—Ä'},
            'ethical_core': {'port': 8105, 'name': '–≠—Ç–∏—á–µ—Å–∫–æ–µ —è–¥—Ä–æ'},
            'general': {'port': 8085, 'name': '–û–±—â–∏–µ –æ—Ç–≤–µ—Ç—ã'}
        }
        
        self._initialize_handlers()
        
        self.module_metrics: Dict[str, ModuleMetrics] = {}
        self.request_history: deque = deque(maxlen=1000)
        self.request_table: Dict[str, int] = defaultdict(int)
        
        self.load_balanced = True
        self.health_check_interval = 5
        self.performance_window = 300
        
        self.lock = threading.Lock()
        
        self._initialize_metrics()
        self._start_monitoring()
    
    def _initialize_handlers(self):
        self.math_handler = None
        self.programming_handler = None
        self.electrical_handler = None
        self.enhanced_categorizer = None
        self.logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã (–ø—É—Å—Ç–æ).")

    def _initialize_metrics(self):
        for module_id, config in self.modules.items():
            self.module_metrics[module_id] = ModuleMetrics(
                module_name=config['name'],
                port=config['port']
            )
    
    def _start_monitoring(self):
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        self.logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–æ–¥—É–ª–µ–π –≤ –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω.")

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –õ–û–ì–ò–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–ò –ó–ê–ú–ï–ù–ï–ù–ê –ù–ê –ù–ï–ô–†–û–°–ï–¢–ï–í–£–Æ ---
    def analyze_request_category(self, message: str) -> str:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ —Å fallback."""
        if not NEURAL_NETWORK_AVAILABLE:
            self.logger.warning("‚ö†Ô∏è –ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.")
            return self._fallback_keyword_categorization(message)

        try:
            neural_ai = get_neural_rubin()
            category, confidence = neural_ai.classify_question(message)
            self.logger.info(f"üß† –ù–µ–π—Ä–æ—Å–µ—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª–∞: '{message[:30]}...' ‚Üí {category} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
            
            if confidence < 0.5: # –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                self.logger.warning(f"‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ ({confidence:.2f}), –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback.")
                return self._fallback_keyword_categorization(message)
            
            # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å –º–æ–¥—É–ª—è–º–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
            neural_to_dispatcher_map = {
                '—Ñ–∏–∑–∏–∫–∞': 'general', # –ú–æ–¥—É–ª—è —Ñ–∏–∑–∏–∫–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π
                '–Ω–∞—É–∫–∞': 'general',
                '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞': 'mathematics',
                '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞': 'electrical',
                '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ': 'programming',
                '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã': 'controllers',
                '–æ–±—â–∏–µ_–≤–æ–ø—Ä–æ—Å—ã': 'general'
            }
            
            return neural_to_dispatcher_map.get(category, 'general')

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback.")
            return self._fallback_keyword_categorization(message)

    def _fallback_keyword_categorization(self, message: str) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º."""
        message_lower = message.lower()
        categories = {
            'programming': ['c++', 'python', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∞–ª–≥–æ—Ä–∏—Ç–º', '—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞'],
            'electrical': ['–∑–∞—â–∏—Ç–∞', '—Ç–æ–∫', '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', '—Ä–µ–∑–∏—Å—Ç–æ—Ä', '—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä', '–¥–∏–æ–¥'],
            'controllers': ['–ø–∏–¥', '—Ä–µ–≥—É–ª—è—Ç–æ—Ä', 'plc', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è'],
        }
        for category, keywords in categories.items():
            if any(keyword in message_lower for keyword in keywords):
                self.logger.info(f"üìä Fallback –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è: '{message[:30]}...' ‚Üí {category}")
                return category
        
        self.logger.info(f"‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (Fallback): '{message[:30]}...' ‚Üí general")
        return 'general'

    def route_request(self, message: str, request_data: Dict) -> Tuple[Optional[str], str]:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞"""
        start_time = time.time()
        
        category = self.analyze_request_category(message)
        self.logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–∞: {category}")
        
        selected_module = category # –í —ç—Ç–æ–π —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è = –º–æ–¥—É–ª—å
        
        if not selected_module or selected_module not in self.modules:
            self.logger.warning(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
            return None, "no_available_modules"
        
        try:
            response = self._forward_request(selected_module, request_data)
            response_time = time.time() - start_time
            self.logger.info(f"–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–¥—É–ª–µ–º {selected_module} –∑–∞ {response_time:.3f}—Å")
            return response, selected_module
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–¥—É–ª–µ–º {selected_module}: {e}")
            return None, "error"
    
    def _forward_request(self, module: str, request_data: Dict) -> Dict:
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–æ–¥—É–ª—é"""
        metrics = self.modules[module]
        endpoint = '/api/chat' # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤—Å–µ—Ö —Ü–µ–ª–µ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –µ—Å—Ç—å —ç—Ç–æ—Ç endpoint
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º host.docker.internal –¥–ª—è —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
        url = f"http://host.docker.internal:{metrics['port']}{endpoint}"
        
        payload = {'message': request_data.get('message', '')}
        
        self.logger.info(f"üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥—É–ª—é {module} –Ω–∞ {url}")
        
        response = requests.post(url, json=payload, timeout=10)
        
        if response.status_code == 200:
            self.logger.info(f"‚úÖ –ú–æ–¥—É–ª—å {module} –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ")
            return response.json()
        else:
            raise Exception(f"HTTP {response.status_code}: {response.text}")

# –ö–æ–¥ –Ω–∏–∂–µ (Flask app) –æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
# –û–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å IntelligentDispatcher

from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)
dispatcher = IntelligentDispatcher()

@app.route('/api/chat', methods=['POST'])
def chat():
    try:
        data = request.get_json()
        message = data.get('message', '').strip()
        if not message:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        response, module = dispatcher.route_request(message, data)
        
        if response:
            return jsonify({
                'success': True,
                'routed_to': module,
                'response': response,
                'neural_analysis': NEURAL_NETWORK_AVAILABLE
            })
        else:
            return jsonify({'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å'}), 500
            
    except Exception as e:
        dispatcher.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /api/chat: {e}")
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500

@app.route('/api/health')
def health():
    return jsonify({'status': 'healthy', 'neural_network': NEURAL_NETWORK_AVAILABLE})

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger()
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –Ω–µ–π—Ä–æ–Ω–Ω–æ–≥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞...")
    app.run(host='0.0.0.0', port=8081, debug=False) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 8081, –∫–∞–∫ –≤ –æ—Ç—á–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è