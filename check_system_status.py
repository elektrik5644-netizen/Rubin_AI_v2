#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã Rubin AI
"""

import sys
import os
sys.path.append('.')

def check_system_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –°–ò–°–¢–ï–ú–´ RUBIN AI")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Intelligent Dispatcher
    try:
        from intelligent_dispatcher import get_intelligent_dispatcher
        dispatcher = get_intelligent_dispatcher()
        print("‚úÖ Intelligent Dispatcher: OK")
    except Exception as e:
        print(f"‚ùå Intelligent Dispatcher: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Neural Network
    try:
        from neural_rubin import get_neural_rubin
        neural = get_neural_rubin()
        stats = neural.get_neural_stats()
        print(f"‚úÖ Neural Network: {stats['neural_network_active']}")
        print(f"   - Device: {stats['device']}")
        print(f"   - Parameters: {stats['model_parameters']:,}")
    except Exception as e:
        print(f"‚ùå Neural Network: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Provider Selector
    try:
        from providers.smart_provider_selector import SmartProviderSelector
        selector = SmartProviderSelector()
        print("‚úÖ Provider Selector: OK")
    except Exception as e:
        print(f"‚ùå Provider Selector: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Hugging Face Provider
    try:
        from providers.huggingface_provider import HuggingFaceProvider
        hf = HuggingFaceProvider()
        print(f"‚úÖ Hugging Face Provider: {hf.is_available}")
    except Exception as e:
        print(f"‚ùå Hugging Face Provider: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Cloud Provider
    try:
        from providers.google_cloud_provider import GoogleCloudProvider
        gc = GoogleCloudProvider()
        print(f"‚úÖ Google Cloud Provider: {gc.is_available}")
    except Exception as e:
        print(f"‚ùå Google Cloud Provider: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        import sqlite3
        if os.path.exists('rubin_ai_v2.db'):
            conn = sqlite3.connect('rubin_ai_v2.db')
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = cursor.fetchall()
            print(f"‚úÖ Database: {len(tables)} tables")
            conn.close()
        else:
            print("‚ùå Database: Not found")
    except Exception as e:
        print(f"‚ùå Database: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    try:
        import pickle
        if os.path.exists('documents_storage_v2.pkl'):
            with open('documents_storage_v2.pkl', 'rb') as f:
                docs = pickle.load(f)
            print(f"‚úÖ Documents: {len(docs)} documents")
        else:
            print("‚ùå Documents: Not found")
    except Exception as e:
        print(f"‚ùå Documents: {e}")
    
    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π –≤ .env —Ñ–∞–π–ª–µ")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ: python start_rubin_stable_v2.py")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f rubin_ai_v2.log")

if __name__ == "__main__":
    check_system_status()