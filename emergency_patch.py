#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–≠–ö–°–¢–†–ï–ù–ù–´–ô –ü–ê–¢–ß - –ü—Ä—è–º–∞—è –∑–∞–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–∞–±–æ—Ç–∞—é—â–µ–º —Å–µ—Ä–≤–µ—Ä–µ
"""

import requests
import time
import subprocess
import sys
import os

def emergency_server_replacement():
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –ü–ê–¢–ß RUBIN AI")
    print("=" * 40)
    
    # –£–±–∏–≤–∞–µ–º –≤—Å–µ Python –ø—Ä–æ—Ü–µ—Å—Å—ã
    print("1. üî™ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—Å–µ Python –ø—Ä–æ—Ü–µ—Å—Å—ã...")
    try:
        if os.name == 'nt':  # Windows
            subprocess.run(["taskkill", "/f", "/im", "python.exe"], capture_output=True)
            subprocess.run(["taskkill", "/f", "/im", "pythonw.exe"], capture_output=True)
        time.sleep(3)
        print("   ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    print("2. üîç –ü—Ä–æ–≤–µ—Ä—è—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...")
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å
        from neural_rubin import get_neural_rubin
        neural_ai = get_neural_rubin()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        test_response = neural_ai.generate_response("—á—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä?")
        
        if "Electrical Knowledge Handler" in test_response.get('provider', ''):
            print("   ‚úÖ –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å + —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            print("   ‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
        prog_response = neural_ai.generate_response("–°—Ä–∞–≤–Ω–∏ C++ –∏ Python")
        if "Programming Knowledge Handler" in prog_response.get('provider', ''):
            print("   ‚úÖ –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å + –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            print("   ‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    print("3. üöÄ –ó–∞–ø—É—Å–∫–∞—é –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8084...")
    print("   üìç http://localhost:8084")
    print("   üåê RubinDeveloper –≥–æ—Ç–æ–≤!")
    print("\nüß™ –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ:")
    print("   ‚Ä¢ —á—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä? ‚Üí –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞—Ö")
    print("   ‚Ä¢ –°—Ä–∞–≤–Ω–∏ C++ –∏ Python ‚Üí –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤")
    print("   ‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä? ‚Üí –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–ò–î")
    print("\n" + "=" * 40)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        from rubin_server import app
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç
        print("üåê –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –°–ï–†–í–ï–† –ó–ê–ü–£–©–ï–ù!")
        print("üîÑ –û–ë–ù–û–í–ò–¢–ï RUBINDEVELOPER (F5)!")
        
        app.run(host='0.0.0.0', port=8084, debug=False, threaded=True)
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    try:
        emergency_server_replacement()
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"\nüí• –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()