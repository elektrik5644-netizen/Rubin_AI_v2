#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Rubin AI v2.0 - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π API —Å–µ—Ä–≤–µ—Ä
–° –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è
"""

import os
import sys
import json
import logging
from datetime import datetime
from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import sqlite3
import pickle

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'providers'))

# –ò–º–ø–æ—Ä—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from config import Config
except ImportError:
    # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ config.py –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    class Config:
        ALLOWED_ORIGINS = ["*"]
        LOG_LEVEL = "INFO"
        LOG_FILE = "rubin_ai.log"
        DOCUMENTS_STORAGE = "documents.pkl"

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
provider_selector = None
documents_storage = []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
CORS(app, 
     origins=Config.ALLOWED_ORIGINS,
     allow_headers=['Content-Type', 'Authorization'],
     methods=['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
     supports_credentials=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, Config.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(Config.LOG_FILE),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger("rubin_ai_v2")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è
mathematical_solver = None

def initialize_mathematical_solver():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è"""
    global mathematical_solver
    
    try:
        from mathematical_solver.integrated_solver import IntegratedMathematicalSolver, MathIntegrationConfig
        
        config = MathIntegrationConfig(
            enabled=True,
            confidence_threshold=0.7,
            fallback_to_general=False,
            log_requests=True,
            response_format="structured"
        )
        
        mathematical_solver = IntegratedMathematicalSolver(config)
        logger.info("‚úÖ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
        
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å: {e}")
        try:
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ä–µ—à–∞—Ç–µ–ª—é
            from mathematical_problem_solver import MathematicalProblemSolver
            mathematical_solver = MathematicalProblemSolver()
            logger.info("‚úÖ –ü—Ä–æ—Å—Ç–æ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except ImportError as e2:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å: {e2}")
            mathematical_solver = None
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è: {e}")
        mathematical_solver = None
        return False

def is_mathematical_request(message: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º"""
    if not message or not isinstance(message, str):
        return False
    
    message_lower = message.lower().strip()
    
    # –ü—Ä–æ—Å—Ç—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    import re
    math_patterns = [
        r'^\d+\s*[+\-*/]\s*\d+.*[=?]?$',  # 2+4, 3-1, 5*2, 8/2
        r'^\d+\s*[+\-*/]\s*\d+$',          # 2+4, 3-1 (–±–µ–∑ –∑–Ω–∞–∫–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞)
        r'\d+\s*[+\-*/]\s*\d+',            # –≤ —Ç–µ–∫—Å—Ç–µ
        r'—Å–∫–æ–ª—å–∫–æ.*\d+',                    # —Å–∫–æ–ª—å–∫–æ —è–±–ª–æ–∫, —Å–∫–æ–ª—å–∫–æ –¥–µ—Ä–µ–≤—å–µ–≤
        r'–≤—ã—á–∏—Å–ª–∏\s+\d+',                   # –≤—ã—á–∏—Å–ª–∏ 2+3
        r'—Ä–µ—à–∏\s+\d+',                      # —Ä–µ—à–∏ 5-2
        r'–Ω–∞–π–¥–∏\s+\d+',                     # –Ω–∞–π–¥–∏ 3*4
    ]
    
    for pattern in math_patterns:
        if re.search(pattern, message_lower):
            return True
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    math_keywords = [
        '—Å–∫–æ–ª—å–∫–æ', '–≤—ã—á–∏—Å–ª–∏', '–Ω–∞–π–¥–∏', '—Ä–µ—à–∏', '–∑–∞–¥–∞—á–∞',
        '—Å–∫–æ—Ä–æ—Å—Ç—å', '–≤—Ä–µ–º—è', '—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ', '–ø—É—Ç—å',
        '—É–≥–æ–ª', '–≥—Ä–∞–¥—É—Å', '—Å–º–µ–∂–Ω—ã–µ', '—Å—É–º–º–∞',
        '–¥–µ—Ä–µ–≤—å–µ–≤', '—è–±–ª–æ–Ω', '–≥—Ä—É—à', '—Å–ª–∏–≤',
        '–º/—Å', '–∫–º/—á', '¬∞', '+', '-', '*', '/', '='
    ]
    
    for keyword in math_keywords:
        if keyword in message_lower:
            return True
    
    return False

def solve_mathematical_problem(message: str) -> dict:
    """–†–µ—à–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏"""
    global mathematical_solver
    
    if not mathematical_solver:
        return {
            "success": False,
            "error": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            "answer": None
        }
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—à–∞—Ç–µ–ª—å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if hasattr(mathematical_solver, 'process_request'):
            result = mathematical_solver.process_request(message)
            
            if result.get("success"):
                solution_data = result.get("solution_data", {})
                return {
                    "success": True,
                    "answer": solution_data.get("final_answer", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"),
                    "confidence": solution_data.get("confidence", 0.0),
                    "problem_type": solution_data.get("problem_type", "unknown"),
                    "explanation": solution_data.get("explanation", ""),
                    "provider": "Mathematical Solver (Integrated)"
                }
            else:
                return {
                    "success": False,
                    "error": result.get("error_message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"),
                    "answer": None
                }
        
        # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ä–µ—à–∞—Ç–µ–ª—é
        elif hasattr(mathematical_solver, 'solve_problem'):
            solution = mathematical_solver.solve_problem(message)
            
            if solution:
                return {
                    "success": True,
                    "answer": solution.final_answer,
                    "confidence": solution.confidence,
                    "problem_type": solution.problem_type.value if hasattr(solution.problem_type, 'value') else str(solution.problem_type),
                    "explanation": solution.explanation,
                    "provider": "Mathematical Solver (Simple)"
                }
            else:
                return {
                    "success": False,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É",
                    "answer": None
                }
        
        else:
            return {
                "success": False,
                "error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è",
                "answer": None
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏: {e}")
        return {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}",
            "answer": None
        }

def initialize_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã Rubin AI v2.0"""
    global provider_selector, documents_storage
    
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Rubin AI v2.0 (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å –ø–µ—Ä–≤—ã–º
    math_success = initialize_mathematical_solver()
    if math_success:
        logger.info("‚úÖ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        logger.warning("‚ö†Ô∏è –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (–±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫)
    try:
        from providers.smart_provider_selector import SmartProviderSelector
        provider_selector = SmartProviderSelector()
        logger.info("‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        provider_selector = None
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    if provider_selector:
        try:
            from providers.huggingface_provider import HuggingFaceProvider
            hf_provider = HuggingFaceProvider()
            if hf_provider.initialize():
                provider_selector.register_provider(hf_provider)
                logger.info("‚úÖ Hugging Face –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.warning("‚ö†Ô∏è Hugging Face –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Hugging Face: {e}")
        
        try:
            from providers.google_cloud_provider import GoogleCloudProvider
            gc_provider = GoogleCloudProvider()
            if gc_provider.initialize():
                provider_selector.register_provider(gc_provider)
                logger.info("‚úÖ Google Cloud –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.warning("‚ö†Ô∏è Google Cloud –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Cloud: {e}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    load_documents()
    
    logger.info("üéâ Rubin AI v2.0 —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")

def load_documents():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    global documents_storage
    
    try:
        if os.path.exists(Config.DOCUMENTS_STORAGE):
            with open(Config.DOCUMENTS_STORAGE, 'rb') as f:
                documents_storage = pickle.load(f)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(documents_storage)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        else:
            documents_storage = []
            logger.info("–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        documents_storage = []

# API Endpoints

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "2.0-fixed",
        "mathematical_solver": mathematical_solver is not None,
        "provider_selector": provider_selector is not None,
        "documents_count": len(documents_storage)
    })

@app.route('/api/status', methods=['GET'])
def system_status():
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    return jsonify({
        "system": "Rubin AI v2.0 (Fixed)",
        "status": "operational",
        "timestamp": datetime.now().isoformat(),
        "modules": {
            "mathematical_solver": "operational" if mathematical_solver else "offline",
            "provider_selector": "operational" if provider_selector else "offline",
            "documents": "operational" if documents_storage else "empty"
        }
    })

@app.route('/api/ai/chat', methods=['POST'])
def ai_chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è AI —á–∞—Ç–∞ —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    try:
        data = request.get_json()
        if not data or 'message' not in data:
            return jsonify({
                "success": False,
                "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'message'"
            }), 400
        
        message = data['message'].strip()
        if not message:
            return jsonify({
                "success": False,
                "error": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            }), 400
        
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å: \"{message}\"")
        
        # –ü–†–û–í–ï–†–Ø–ï–ú –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–†–û–°
        if is_mathematical_request(message):
            logger.info("üßÆ –û–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å")
            
            # –†–µ—à–∞–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É
            math_result = solve_mathematical_problem(message)
            
            if math_result["success"]:
                logger.info(f"‚úÖ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞: {math_result['answer']}")
                
                return jsonify({
                    "success": True,
                    "response": math_result["answer"],
                    "provider": math_result["provider"],
                    "category": "mathematics",
                    "confidence": math_result["confidence"],
                    "explanation": math_result.get("explanation", ""),
                    "timestamp": datetime.now().isoformat()
                })
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É: {math_result['error']}")
                
                return jsonify({
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏: {math_result['error']}",
                    "category": "mathematics",
                    "timestamp": datetime.now().isoformat()
                })
        
        # –ù–ï –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–†–û–° - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
        logger.info("üì° –ù–∞–ø—Ä–∞–≤–ª—è—é –∫ –º–æ–¥—É–ª—é: AI –ß–∞—Ç (–æ–±—â–∏–π)")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        return jsonify({
            "success": True,
            "response": f"–Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å: \"{message}\"\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –º–Ω–µ –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.\n\n**–ß—Ç–æ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:**\n‚Ä¢ –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π Rubin AI\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n‚Ä¢ –ü–æ–º–æ—â—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –æ–±–ª–∞—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.",
            "provider": "Rubin AI Chat (General)",
            "category": "general",
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return jsonify({
            "success": False,
            "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        }), 500

@app.route('/api/mathematics/solve', methods=['POST'])
def mathematics_solve():
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    try:
        data = request.get_json()
        if not data or 'problem' not in data:
            return jsonify({
                "success": False,
                "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'problem'"
            }), 400
        
        problem = data['problem'].strip()
        if not problem:
            return jsonify({
                "success": False,
                "error": "–ü—É—Å—Ç–∞—è –∑–∞–¥–∞—á–∞"
            }), 400
        
        logger.info(f"üßÆ –†–µ—à–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏: \"{problem}\"")
        
        result = solve_mathematical_problem(problem)
        
        if result["success"]:
            return jsonify({
                "success": True,
                "data": {
                    "answer": result["answer"],
                    "confidence": result["confidence"],
                    "problem_type": result.get("problem_type", "unknown"),
                    "explanation": result.get("explanation", ""),
                    "provider": result["provider"]
                },
                "timestamp": datetime.now().isoformat()
            })
        else:
            return jsonify({
                "success": False,
                "error": result["error"],
                "timestamp": datetime.now().isoformat()
            }), 400
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}"
        }), 500

@app.route('/api/mathematics/status', methods=['GET'])
def mathematics_status():
    """–°—Ç–∞—Ç—É—Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è"""
    if mathematical_solver:
        try:
            if hasattr(mathematical_solver, 'get_solver_status'):
                status = mathematical_solver.get_solver_status()
                return jsonify(status)
            else:
                return jsonify({
                    "status": "operational",
                    "solver_type": "Mathematical Solver",
                    "timestamp": datetime.now().isoformat()
                })
        except Exception as e:
            return jsonify({
                "status": "error",
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            })
    else:
        return jsonify({
            "status": "offline",
            "error": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
            "timestamp": datetime.now().isoformat()
        })

@app.route('/api/stats', methods=['GET'])
def system_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    return jsonify({
        "system": "Rubin AI v2.0 (Fixed)",
        "timestamp": datetime.now().isoformat(),
        "modules": {
            "mathematical_solver": "operational" if mathematical_solver else "offline",
            "provider_selector": "operational" if provider_selector else "offline",
            "documents": len(documents_storage)
        },
        "endpoints": [
            "GET /health",
            "GET /api/status", 
            "POST /api/ai/chat",
            "POST /api/mathematics/solve",
            "GET /api/mathematics/status",
            "GET /api/stats"
        ]
    })

@app.route('/api/documents/stats', methods=['GET'])
def documents_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    return jsonify({
        "total_documents": len(documents_storage),
        "storage_file": Config.DOCUMENTS_STORAGE,
        "timestamp": datetime.now().isoformat()
    })

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Rubin AI v2.0 (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
    logger.info("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
    logger.info("   GET  /health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    logger.info("   GET  /api/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    logger.info("   POST /api/ai/chat - AI —á–∞—Ç —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
    logger.info("   POST /api/mathematics/solve - –†–µ—à–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á")
    logger.info("   GET  /api/mathematics/status - –°—Ç–∞—Ç—É—Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è")
    logger.info("   GET  /api/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    initialize_system()
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.run(host='0.0.0.0', port=8083, debug=True)













