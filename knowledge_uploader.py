#!/usr/bin/env python3
"""
Система загрузки знаний в базу данных Rubin AI
"""

import sqlite3
import os
import json
from datetime import datetime

class KnowledgeUploader:
    """Класс для загрузки знаний в базу данных"""
    
    def __init__(self, db_path='rubin_knowledge_base.db'):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """Инициализация базы данных"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Проверяем существующую структуру
        cursor.execute('PRAGMA table_info(knowledge_entries)')
        columns = [col[1] for col in cursor.fetchall()]
        
        if 'subject' not in columns:
            # Добавляем недостающие колонки
            cursor.execute('ALTER TABLE knowledge_entries ADD COLUMN subject TEXT')
            cursor.execute('ALTER TABLE knowledge_entries ADD COLUMN difficulty_level TEXT')
            print("✅ Добавлены недостающие колонки")
        
        # Создаем индекс для поиска
        try:
            cursor.execute('''
                CREATE INDEX IF NOT EXISTS idx_category_subject 
                ON knowledge_entries(category, subject)
            ''')
        except sqlite3.OperationalError:
            # Если индекс не может быть создан, создаем простой
            cursor.execute('''
                CREATE INDEX IF NOT EXISTS idx_category 
                ON knowledge_entries(category)
            ''')
        
        conn.commit()
        conn.close()
        print("✅ База данных инициализирована")
    
    def upload_knowledge(self, title, content, category, subject, difficulty_level="beginner", tags=None):
        """Загрузка знаний в базу данных"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        tags_json = json.dumps(tags) if tags else None
        
        # Используем существующую структуру таблицы
        cursor.execute('''
            INSERT INTO knowledge_entries 
            (id, source, title, content, category, tags, confidence, usage_count, created_at, subject, difficulty_level)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (None, 'knowledge_uploader', title, content, category, tags_json, 1.0, 0, datetime.now().isoformat(), subject, difficulty_level))
        
        conn.commit()
        conn.close()
        print(f"✅ Загружено: {title} ({category}/{subject})")
    
    def get_knowledge_count(self):
        """Получить количество записей в базе"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM knowledge_entries')
        count = cursor.fetchone()[0]
        conn.close()
        return count

def create_chemistry_materials():
    """Создание материалов по химии"""
    materials = [
        {
            "title": "Основы химии - Атомы и молекулы",
            "content": """# Основы химии - Атомы и молекулы

## Атом
Атом - это наименьшая частица химического элемента, сохраняющая его химические свойства.

### Структура атома:
- **Ядро**: содержит протоны (положительный заряд) и нейтроны (без заряда)
- **Электронная оболочка**: содержит электроны (отрицательный заряд)

### Основные характеристики:
- **Атомный номер (Z)**: количество протонов в ядре
- **Массовое число (A)**: сумма протонов и нейтронов
- **Изотопы**: атомы одного элемента с разным количеством нейтронов

## Молекула
Молекула - это наименьшая частица вещества, состоящая из двух или более атомов, связанных химическими связями.

### Типы химических связей:
1. **Ковалентная связь**: общая пара электронов
2. **Ионная связь**: электростатическое притяжение между ионами
3. **Металлическая связь**: общие электроны в металлах

## Периодическая система элементов
Периодический закон Д.И. Менделеева: свойства элементов находятся в периодической зависимости от их атомного номера.

### Группы и периоды:
- **Группы**: вертикальные столбцы (1-18)
- **Периоды**: горизонтальные строки (1-7)
- **Металлы**: левая часть таблицы
- **Неметаллы**: правая часть таблицы
- **Полуметаллы**: диагональная линия между металлами и неметаллами""",
            "category": "chemistry",
            "subject": "basics",
            "difficulty_level": "beginner",
            "tags": ["атом", "молекула", "периодическая система", "химические связи"]
        },
        {
            "title": "Химические реакции и уравнения",
            "content": """# Химические реакции и уравнения

## Химическая реакция
Химическая реакция - это процесс превращения одних веществ в другие, при котором происходит изменение состава и строения молекул.

### Признаки химических реакций:
1. Изменение цвета
2. Выделение газа
3. Образование осадка
4. Выделение или поглощение тепла
5. Изменение запаха

## Типы химических реакций

### По изменению степени окисления:
- **Окислительно-восстановительные**: изменяется степень окисления
- **Не окислительно-восстановительные**: степень окисления не изменяется

### По числу и составу реагентов:
1. **Реакции соединения**: A + B → AB
2. **Реакции разложения**: AB → A + B
3. **Реакции замещения**: A + BC → AC + B
4. **Реакции обмена**: AB + CD → AD + CB

## Химические уравнения
Химическое уравнение - это условная запись химической реакции с помощью химических формул и коэффициентов.

### Правила составления уравнений:
1. Записать формулы реагентов и продуктов
2. Расставить коэффициенты для соблюдения закона сохранения массы
3. Указать условия реакции (температура, катализатор)
4. Указать агрегатное состояние веществ

### Примеры уравнений:
```
2H₂ + O₂ → 2H₂O (горение водорода)
CaCO₃ → CaO + CO₂ (разложение карбоната кальция)
Zn + 2HCl → ZnCl₂ + H₂ (взаимодействие цинка с соляной кислотой)
```

## Закон сохранения массы
Масса веществ, вступивших в реакцию, равна массе веществ, образовавшихся в результате реакции.""",
            "category": "chemistry",
            "subject": "reactions",
            "difficulty_level": "intermediate",
            "tags": ["химические реакции", "уравнения", "типы реакций", "закон сохранения массы"]
        }
    ]
    return materials

def create_physics_materials():
    """Создание материалов по физике"""
    materials = [
        {
            "title": "Механика - Основы движения",
            "content": """# Механика - Основы движения

## Кинематика
Кинематика - раздел механики, изучающий движение тел без учета причин, вызывающих это движение.

### Основные понятия:
- **Материальная точка**: тело, размерами которого можно пренебречь
- **Система отсчета**: тело отсчета, система координат и часы
- **Траектория**: линия, по которой движется тело
- **Путь**: длина траектории
- **Перемещение**: вектор, соединяющий начальную и конечную точки

### Виды движения:
1. **Равномерное прямолинейное**: v = const, a = 0
2. **Равноускоренное**: a = const
3. **Криволинейное**: траектория - кривая линия

## Динамика
Динамика - раздел механики, изучающий причины движения тел.

### Законы Ньютона:

#### Первый закон (закон инерции):
Тело сохраняет состояние покоя или равномерного прямолинейного движения, если на него не действуют другие тела.

#### Второй закон:
F = ma, где F - сила, m - масса, a - ускорение

#### Третий закон:
Силы взаимодействия двух тел равны по модулю и противоположны по направлению.

### Силы в природе:
1. **Сила тяжести**: F = mg
2. **Сила упругости**: F = -kx (закон Гука)
3. **Сила трения**: F = μN
4. **Сила Архимеда**: F = ρgV

## Законы сохранения

### Закон сохранения импульса:
В замкнутой системе сумма импульсов всех тел остается постоянной.

### Закон сохранения энергии:
В замкнутой системе полная механическая энергия остается постоянной.

### Виды энергии:
- **Кинетическая**: Eₖ = mv²/2
- **Потенциальная**: Eₚ = mgh (гравитационная)
- **Потенциальная упругости**: Eₚ = kx²/2""",
            "category": "physics",
            "subject": "mechanics",
            "difficulty_level": "beginner",
            "tags": ["механика", "кинематика", "динамика", "законы Ньютона", "энергия"]
        },
        {
            "title": "Электричество и магнетизм",
            "content": """# Электричество и магнетизм

## Электростатика
Электростатика - раздел физики, изучающий взаимодействие неподвижных электрических зарядов.

### Основные понятия:
- **Электрический заряд**: физическая величина, характеризующая способность тел к электромагнитному взаимодействию
- **Элементарный заряд**: e = 1.6 × 10⁻¹⁹ Кл
- **Закон сохранения заряда**: в замкнутой системе алгебраическая сумма зарядов постоянна

### Закон Кулона:
F = k(q₁q₂)/r², где k = 9 × 10⁹ Н·м²/Кл²

### Электрическое поле:
- **Напряженность**: E = F/q
- **Потенциал**: φ = W/q
- **Напряжение**: U = φ₁ - φ₂

## Постоянный ток
Постоянный ток - упорядоченное движение заряженных частиц в одном направлении.

### Закон Ома:
- **Для участка цепи**: I = U/R
- **Для полной цепи**: I = ε/(R + r)

### Мощность тока:
P = UI = I²R = U²/R

### Работа тока:
A = UIt = I²Rt = U²t/R

## Магнетизм
Магнетизм - раздел физики, изучающий магнитные поля и их взаимодействие с движущимися зарядами.

### Магнитное поле:
- **Индукция**: B = F/(Il sin α)
- **Сила Ампера**: F = BIl sin α
- **Сила Лоренца**: F = qvB sin α

### Электромагнитная индукция:
- **Закон Фарадея**: ε = -dΦ/dt
- **Правило Ленца**: индукционный ток направлен так, чтобы противодействовать причине, его вызвавшей""",
            "category": "physics",
            "subject": "electromagnetism",
            "difficulty_level": "intermediate",
            "tags": ["электричество", "магнетизм", "закон Ома", "электромагнитная индукция"]
        }
    ]
    return materials

def create_algebra_materials():
    """Создание материалов по алгебре"""
    materials = [
        {
            "title": "Основы алгебры - Выражения и уравнения",
            "content": """# Основы алгебры - Выражения и уравнения

## Алгебраические выражения
Алгебраическое выражение - это запись, составленная из чисел, переменных и знаков арифметических действий.

### Типы выражений:
- **Многочлен**: сумма одночленов
- **Одночлен**: произведение чисел и переменных
- **Дробное выражение**: отношение двух многочленов

### Степень одночлена:
Степень одночлена - сумма показателей степеней всех переменных.

### Степень многочлена:
Степень многочлена - наибольшая из степеней входящих в него одночленов.

## Линейные уравнения
Линейное уравнение - уравнение вида ax + b = 0, где a ≠ 0.

### Решение линейных уравнений:
1. Перенести слагаемые с переменной в одну часть
2. Слагаемые без переменной - в другую часть
3. Привести подобные слагаемые
4. Разделить на коэффициент при переменной

### Пример:
2x + 5 = 13
2x = 13 - 5
2x = 8
x = 4

## Квадратные уравнения
Квадратное уравнение - уравнение вида ax² + bx + c = 0, где a ≠ 0.

### Формула корней:
x = (-b ± √(b² - 4ac)) / 2a

### Дискриминант:
D = b² - 4ac
- D > 0: два различных корня
- D = 0: один корень
- D < 0: корней нет

### Теорема Виета:
Для уравнения x² + px + q = 0:
- x₁ + x₂ = -p
- x₁ · x₂ = q

## Системы уравнений
Система уравнений - несколько уравнений с несколькими переменными.

### Методы решения:
1. **Метод подстановки**
2. **Метод сложения**
3. **Графический метод**

### Пример системы:
```
x + y = 5
2x - y = 1
```

Решение методом сложения:
```
x + y = 5
2x - y = 1
---------
3x = 6
x = 2
y = 3
```""",
            "category": "mathematics",
            "subject": "algebra",
            "difficulty_level": "beginner",
            "tags": ["алгебра", "уравнения", "многочлены", "квадратные уравнения", "системы"]
        }
    ]
    return materials

def create_geometry_materials():
    """Создание материалов по геометрии"""
    materials = [
        {
            "title": "Планиметрия - Основные фигуры",
            "content": """# Планиметрия - Основные фигуры

## Треугольник
Треугольник - геометрическая фигура, состоящая из трех точек, не лежащих на одной прямой, и трех отрезков, соединяющих эти точки.

### Виды треугольников:
- **По сторонам**: равносторонний, равнобедренный, разносторонний
- **По углам**: остроугольный, прямоугольный, тупоугольный

### Свойства треугольников:
- Сумма углов треугольника равна 180°
- В треугольнике против большей стороны лежит больший угол
- В треугольнике против большего угла лежит большая сторона

### Площадь треугольника:
- S = (1/2)ah (через основание и высоту)
- S = (1/2)ab sin C (через две стороны и угол)
- S = √(p(p-a)(p-b)(p-c)) (формула Герона)

## Четырехугольники

### Параллелограмм:
- Противоположные стороны параллельны и равны
- Противоположные углы равны
- Диагонали точкой пересечения делятся пополам
- S = ah

### Прямоугольник:
- Все углы прямые
- Противоположные стороны равны
- Диагонали равны
- S = ab

### Ромб:
- Все стороны равны
- Противоположные стороны параллельны
- Диагонали перпендикулярны
- S = (1/2)d₁d₂

### Квадрат:
- Все стороны равны
- Все углы прямые
- Диагонали равны и перпендикулярны
- S = a²

## Окружность и круг
Окружность - множество всех точек плоскости, равноудаленных от данной точки.

### Основные элементы:
- **Центр**: точка, равноудаленная от всех точек окружности
- **Радиус**: расстояние от центра до любой точки окружности
- **Диаметр**: хорда, проходящая через центр
- **Хорда**: отрезок, соединяющий две точки окружности

### Формулы:
- Длина окружности: C = 2πr
- Площадь круга: S = πr²
- Длина дуги: l = (α/360°) · 2πr
- Площадь сектора: S = (α/360°) · πr²

## Подобие фигур
Две фигуры подобны, если их соответствующие углы равны, а соответствующие стороны пропорциональны.

### Коэффициент подобия:
k = a₁/a₂ = b₁/b₂ = c₁/c₂

### Отношение площадей:
S₁/S₂ = k²

### Отношение периметров:
P₁/P₂ = k""",
            "category": "mathematics",
            "subject": "geometry",
            "difficulty_level": "beginner",
            "tags": ["геометрия", "треугольник", "четырехугольник", "окружность", "подобие"]
        }
    ]
    return materials

def create_advanced_math_materials():
    """Создание материалов по высшей математике"""
    materials = [
        {
            "title": "Математический анализ - Пределы и производные",
            "content": """# Математический анализ - Пределы и производные

## Предел функции
Предел функции f(x) при x → a - это число L, к которому стремится f(x), когда x стремится к a.

### Обозначение:
lim(x→a) f(x) = L

### Основные свойства пределов:
1. lim(x→a) [f(x) + g(x)] = lim(x→a) f(x) + lim(x→a) g(x)
2. lim(x→a) [f(x) · g(x)] = lim(x→a) f(x) · lim(x→a) g(x)
3. lim(x→a) [f(x)/g(x)] = lim(x→a) f(x) / lim(x→a) g(x) (если lim(x→a) g(x) ≠ 0)

### Замечательные пределы:
- lim(x→0) (sin x)/x = 1
- lim(x→∞) (1 + 1/x)^x = e

## Производная функции
Производная функции f(x) в точке x - это предел отношения приращения функции к приращению аргумента.

### Определение:
f'(x) = lim(Δx→0) [f(x + Δx) - f(x)]/Δx

### Основные правила дифференцирования:
1. (c)' = 0 (константа)
2. (x^n)' = nx^(n-1) (степенная функция)
3. (e^x)' = e^x (экспонента)
4. (ln x)' = 1/x (натуральный логарифм)
5. (sin x)' = cos x (синус)
6. (cos x)' = -sin x (косинус)

### Правила дифференцирования:
- (f + g)' = f' + g' (сумма)
- (f · g)' = f'g + fg' (произведение)
- (f/g)' = (f'g - fg')/g² (частное)
- (f(g(x)))' = f'(g(x)) · g'(x) (цепное правило)

## Интеграл
Интеграл - это операция, обратная дифференцированию.

### Неопределенный интеграл:
∫f(x)dx = F(x) + C, где F'(x) = f(x)

### Основные интегралы:
- ∫x^n dx = x^(n+1)/(n+1) + C (n ≠ -1)
- ∫1/x dx = ln|x| + C
- ∫e^x dx = e^x + C
- ∫sin x dx = -cos x + C
- ∫cos x dx = sin x + C

### Определенный интеграл:
∫[a to b] f(x)dx = F(b) - F(a)

### Свойства определенного интеграла:
1. ∫[a to a] f(x)dx = 0
2. ∫[a to b] f(x)dx = -∫[b to a] f(x)dx
3. ∫[a to b] [f(x) + g(x)]dx = ∫[a to b] f(x)dx + ∫[a to b] g(x)dx

## Приложения производной
- **Монотонность**: f'(x) > 0 → функция возрастает
- **Экстремумы**: f'(x) = 0 → возможен экстремум
- **Выпуклость**: f''(x) > 0 → функция выпукла вниз

## Приложения интеграла
- **Площадь**: S = ∫[a to b] f(x)dx
- **Объем**: V = π∫[a to b] f²(x)dx (тело вращения)
- **Длина дуги**: L = ∫[a to b] √(1 + (f'(x))²)dx""",
            "category": "mathematics",
            "subject": "calculus",
            "difficulty_level": "advanced",
            "tags": ["математический анализ", "пределы", "производные", "интегралы", "дифференцирование"]
        }
    ]
    return materials

def main():
    """Основная функция загрузки материалов"""
    print("🚀 ЗАГРУЗКА МАТЕРИАЛОВ В БАЗУ ЗНАНИЙ RUBIN AI")
    print("=" * 60)
    
    uploader = KnowledgeUploader()
    
    # Загружаем материалы по химии
    print("\n🧪 Загрузка материалов по химии...")
    chemistry_materials = create_chemistry_materials()
    for material in chemistry_materials:
        uploader.upload_knowledge(**material)
    
    # Загружаем материалы по физике
    print("\n⚡ Загрузка материалов по физике...")
    physics_materials = create_physics_materials()
    for material in physics_materials:
        uploader.upload_knowledge(**material)
    
    # Загружаем материалы по алгебре
    print("\n📐 Загрузка материалов по алгебре...")
    algebra_materials = create_algebra_materials()
    for material in algebra_materials:
        uploader.upload_knowledge(**material)
    
    # Загружаем материалы по геометрии
    print("\n📏 Загрузка материалов по геометрии...")
    geometry_materials = create_geometry_materials()
    for material in geometry_materials:
        uploader.upload_knowledge(**material)
    
    # Загружаем материалы по высшей математике
    print("\n🧮 Загрузка материалов по высшей математике...")
    advanced_math_materials = create_advanced_math_materials()
    for material in advanced_math_materials:
        uploader.upload_knowledge(**material)
    
    # Показываем статистику
    total_count = uploader.get_knowledge_count()
    print(f"\n✅ ЗАГРУЗКА ЗАВЕРШЕНА!")
    print(f"📊 Всего записей в базе знаний: {total_count}")
    
    print("\n🎯 Загруженные предметы:")
    print("  • Химия: основы, реакции")
    print("  • Физика: механика, электричество")
    print("  • Алгебра: уравнения, системы")
    print("  • Геометрия: планиметрия, фигуры")
    print("  • Высшая математика: анализ, пределы")

if __name__ == "__main__":
    main()
