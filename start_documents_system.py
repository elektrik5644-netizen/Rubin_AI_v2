#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ Rubin AI v2.0
"""

import os
import sys
import subprocess
import time
import threading
from pathlib import Path

def create_sample_documents():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    docs_dir = Path("sample_documents")
    docs_dir.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    documents = {
        "–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞_–ó–∞–∫–æ–Ω_–û–º–∞.txt": """
# –ó–∞–∫–æ–Ω –û–º–∞ –≤ –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ

## –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
U = I √ó R

–≥–¥–µ:
- U - –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–í–æ–ª—å—Ç)
- I - —Ç–æ–∫ (–ê–º–ø–µ—Ä)
- R - —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ (–û–º)

## –ü—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—á–µ—Ç–∞

### –ü—Ä–∏–º–µ—Ä 1: –†–∞—Å—á–µ—Ç —Ç–æ–∫–∞
–î–∞–Ω–æ: U = 220–í, R = 10–û–º
–ù–∞–π—Ç–∏: I = ?

–†–µ—à–µ–Ω–∏–µ: I = U/R = 220/10 = 22–ê

### –ü—Ä–∏–º–µ—Ä 2: –†–∞—Å—á–µ—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
–î–∞–Ω–æ: I = 5–ê, R = 44–û–º
–ù–∞–π—Ç–∏: U = ?

–†–µ—à–µ–Ω–∏–µ: U = I√óR = 5√ó44 = 220–í

### –ü—Ä–∏–º–µ—Ä 3: –†–∞—Å—á–µ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
–î–∞–Ω–æ: U = 12–í, I = 0.5–ê
–ù–∞–π—Ç–∏: R = ?

–†–µ—à–µ–Ω–∏–µ: R = U/I = 12/0.5 = 24–û–º

## –ú–æ—â–Ω–æ—Å—Ç—å –≤ —Ü–µ–ø–∏
P = U √ó I = I¬≤ √ó R = U¬≤ / R

## –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
–ó–∞–∫–æ–Ω –û–º–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è:
- –†–∞—Å—á–µ—Ç–æ–≤ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ø–µ–π
- –í—ã–±–æ—Ä–∞ –Ω–æ–º–∏–Ω–∞–ª–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- –ê–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç—ã —Å—Ö–µ–º
""",
        
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ_–ê–ª–≥–æ—Ä–∏—Ç–º—ã.txt": """
# –ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –°—Ç—Ä—É–∫—Ç—É—Ä—ã –î–∞–Ω–Ω—ã—Ö

## –ß—Ç–æ —Ç–∞–∫–æ–µ –∞–ª–≥–æ—Ä–∏—Ç–º
–ê–ª–≥–æ—Ä–∏—Ç–º - —ç—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–∞–≥–æ–≤ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.

## –°–ª–æ–∂–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
- O(1) - –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–∞—è
- O(log n) - –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è
- O(n) - –ª–∏–Ω–µ–π–Ω–∞—è
- O(n¬≤) - –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è

## –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—É–∑—ã—Ä—å–∫–æ–º
```python
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr
```

## –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫
```python
def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return -1
```

## –°–≤—è–∑–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
```python
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None
    
    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node
```
""",
        
        "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è_PID_–†–µ–≥—É–ª—è—Ç–æ—Ä.txt": """
# PID –†–µ–≥—É–ª—è—Ç–æ—Ä –≤ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏

## –ß—Ç–æ —Ç–∞–∫–æ–µ PID —Ä–µ–≥—É–ª—è—Ç–æ—Ä
PID (Proportional-Integral-Derivative) - —ç—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é.

## –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã PID

### –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è (P)
u(t) = Kp √ó e(t)

–≥–¥–µ:
- Kp - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- e(t) - –æ—à–∏–±–∫–∞ (—Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –∑–∞–¥–∞–Ω–Ω—ã–º –∏ —Ç–µ–∫—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º)

### –ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è (I)
u(t) = Ki √ó ‚à´e(t)dt

–≥–¥–µ:
- Ki - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
- ‚à´e(t)dt - –∏–Ω—Ç–µ–≥—Ä–∞–ª –æ—à–∏–±–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏

### –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è (D)
u(t) = Kd √ó de(t)/dt

–≥–¥–µ:
- Kd - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è
- de(t)/dt - –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –æ—à–∏–±–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏

## –ü–æ–ª–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ PID
u(t) = Kp√óe(t) + Ki√ó‚à´e(t)dt + Kd√óde(t)/dt

## –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PID —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞

### –ú–µ—Ç–æ–¥ –ó–∏–≥–ª–µ—Ä–∞-–ù–∏–∫–æ–ª—Å–∞
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Ki = 0, Kd = 0
2. –£–≤–µ–ª–∏—á–∏–≤–∞—Ç—å Kp –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–ª–µ–±–∞–Ω–∏–π
3. –ó–∞–ø–∏—Å–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç Kc –∏ –ø–µ—Ä–∏–æ–¥ Tc
4. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
   - Kp = 0.6 √ó Kc
   - Ki = 2 √ó Kp / Tc
   - Kd = Kp √ó Tc / 8

## –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π
- –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π
- –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
- –†–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è
""",
        
        "–†–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞_–ú–æ–¥—É–ª—è—Ü–∏—è.txt": """
# –ú–æ–¥—É–ª—è—Ü–∏—è –≤ –†–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–µ

## –ß—Ç–æ —Ç–∞–∫–æ–µ –º–æ–¥—É–ª—è—Ü–∏—è
–ú–æ–¥—É–ª—è—Ü–∏—è - —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ—Å—É—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º —Å–∏–≥–Ω–∞–ª–æ–º.

## –¢–∏–ø—ã –º–æ–¥—É–ª—è—Ü–∏–∏

### –ê–º–ø–ª–∏—Ç—É–¥–Ω–∞—è –º–æ–¥—É–ª—è—Ü–∏—è (AM)
s(t) = [A + m(t)] √ó cos(2œÄfct)

–≥–¥–µ:
- A - –∞–º–ø–ª–∏—Ç—É–¥–∞ –Ω–µ—Å—É—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
- m(t) - –º–æ–¥—É–ª–∏—Ä—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª
- fc - —á–∞—Å—Ç–æ—Ç–∞ –Ω–µ—Å—É—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞

### –ß–∞—Å—Ç–æ—Ç–Ω–∞—è –º–æ–¥—É–ª—è—Ü–∏—è (FM)
s(t) = A √ó cos[2œÄfct + 2œÄkf‚à´m(œÑ)dœÑ]

–≥–¥–µ:
- kf - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á–∞—Å—Ç–æ—Ç–Ω–æ–π –º–æ–¥—É–ª—è—Ü–∏–∏
- ‚à´m(œÑ)dœÑ - –∏–Ω—Ç–µ–≥—Ä–∞–ª –º–æ–¥—É–ª–∏—Ä—É—é—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞

### –§–∞–∑–æ–≤–∞—è –º–æ–¥—É–ª—è—Ü–∏—è (PM)
s(t) = A √ó cos[2œÄfct + kp√óm(t)]

–≥–¥–µ:
- kp - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ñ–∞–∑–æ–≤–æ–π –º–æ–¥—É–ª—è—Ü–∏–∏

## –¶–∏—Ñ—Ä–æ–≤–∞—è –º–æ–¥—É–ª—è—Ü–∏—è

### ASK (Amplitude Shift Keying)
- –î–≤–æ–∏—á–Ω–∞—è –∞–º–ø–ª–∏—Ç—É–¥–Ω–∞—è –º–æ–¥—É–ª—è—Ü–∏—è
- –õ–æ–≥–∏—á–µ—Å–∫–∏–π 0: A = 0
- –õ–æ–≥–∏—á–µ—Å–∫–∏–π 1: A = A0

### FSK (Frequency Shift Keying)
- –î–≤–æ–∏—á–Ω–∞—è —á–∞—Å—Ç–æ—Ç–Ω–∞—è –º–æ–¥—É–ª—è—Ü–∏—è
- –õ–æ–≥–∏—á–µ—Å–∫–∏–π 0: f = f0
- –õ–æ–≥–∏—á–µ—Å–∫–∏–π 1: f = f1

### PSK (Phase Shift Keying)
- –î–≤–æ–∏—á–Ω–∞—è —Ñ–∞–∑–æ–≤–∞—è –º–æ–¥—É–ª—è—Ü–∏—è
- –õ–æ–≥–∏—á–µ—Å–∫–∏–π 0: œÜ = 0¬∞
- –õ–æ–≥–∏—á–µ—Å–∫–∏–π 1: œÜ = 180¬∞

## –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
- –†–∞–¥–∏–æ–≤–µ—â–∞–Ω–∏–µ (AM, FM)
- –¶–∏—Ñ—Ä–æ–≤–∞—è —Å–≤—è–∑—å (PSK, QAM)
- –°–ø—É—Ç–Ω–∏–∫–æ–≤–∞—è —Å–≤—è–∑—å
- –ú–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å
"""
    }
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    for filename, content in documents.items():
        file_path = docs_dir / filename
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {filename}")
    
    return docs_dir

def start_documents_api():
    """–ó–∞–ø—É—Å–∫ API –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ API –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        process = subprocess.Popen([
            sys.executable, 'api/documents_api.py'
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print("‚úÖ API –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω (–ø–æ—Ä—Ç 8088)")
        return process
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API: {e}")
        return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìö –°–ò–°–¢–ï–ú–ê –î–û–ö–£–ú–ï–ù–¢–û–í RUBIN AI v2.0")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    print("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    docs_dir = create_sample_documents()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑—É
    print("\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    try:
        from document_loader import DocumentLoader
        loader = DocumentLoader()
        success = loader.load_directory(docs_dir)
        
        if success:
            print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = loader.get_document_stats()
            if stats:
                print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                print(f"   –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {stats['total_documents']}")
                print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(stats['categories'])}")
                
                print(f"\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:")
                for category, count in stats['categories']:
                    print(f"   {category}: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            return
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º API
    print("\nüåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    api_process = start_documents_api()
    
    if api_process:
        print("\n" + "=" * 50)
        print("üéâ –°–ò–°–¢–ï–ú–ê –î–û–ö–£–ú–ï–ù–¢–û–í –ó–ê–ü–£–©–ï–ù–ê!")
        print("=" * 50)
        print("üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:")
        print("   - API –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: http://localhost:8088")
        print("   - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8088/DocumentsManager.html")
        print("   - –°—Ç–∞—Ç—É—Å API: http://localhost:8088/health")
        print("\nüìö –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
        print("   - –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞: –ó–∞–∫–æ–Ω –û–º–∞")
        print("   - –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: –ê–ª–≥–æ—Ä–∏—Ç–º—ã")
        print("   - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è: PID —Ä–µ–≥—É–ª—è—Ç–æ—Ä")
        print("   - –†–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞: –ú–æ–¥—É–ª—è—Ü–∏—è")
        print("\n‚è≥ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            api_process.wait()
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
            api_process.terminate()
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

if __name__ == "__main__":
    main()


















