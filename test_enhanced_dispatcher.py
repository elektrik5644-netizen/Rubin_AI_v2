#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç—ã –¥–ª—è Enhanced Smart Dispatcher
"""

import unittest
import json
import requests
import time
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TestEnhancedDispatcher(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è Enhanced Smart Dispatcher"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.base_url = "http://localhost:8080"
        self.test_messages = [
            "–ø—Ä–∏–≤–µ—Ç",
            "2+2",
            "—á—Ç–æ —Ç–∞–∫–æ–µ —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä",
            "–∑–∞–∫–æ–Ω –∫–∏—Ä—Ö–≥–æ—Ñ–∞",
            "–Ω–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ python",
            "–ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ —Ä–∞–¥–∏—É—Å–æ–º 5",
            "sin(30)",
            "—á—Ç–æ —Ç–∞–∫–æ–µ pmac",
            "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
            "–Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å"
        ]
    
    def test_health_check(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...")
        response = requests.get(f"{self.base_url}/api/health")
        self.assertEqual(response.status_code, 200)
        
        data = response.json()
        self.assertEqual(data["status"], "healthy")
        self.assertIn("neural_router", data)
        logger.info("‚úÖ Health check –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
    
    def test_neural_analysis(self):
        """–¢–µ—Å—Ç –Ω–µ–π—Ä–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        
        test_message = "—á—Ç–æ —Ç–∞–∫–æ–µ —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä"
        response = requests.post(
            f"{self.base_url}/api/neural/analyze",
            json={"message": test_message}
        )
        
        self.assertEqual(response.status_code, 200)
        data = response.json()
        
        self.assertIn("category", data)
        self.assertIn("confidence", data)
        self.assertIn("suggested_server", data)
        logger.info(f"‚úÖ –ù–µ–π—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –∫–∞—Ç–µ–≥–æ—Ä–∏—è={data['category']}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={data['confidence']:.2f}")
    
    def test_chat_endpoint(self):
        """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç endpoint"""
        logger.info("üí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç endpoint...")
        
        for message in self.test_messages:
            logger.info(f"  –¢–µ—Å—Ç–∏—Ä—É–µ–º: '{message}'")
            
            response = requests.post(
                f"{self.base_url}/api/chat",
                json={"message": message}
            )
            
            self.assertEqual(response.status_code, 200)
            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            self.assertIn("routed_to", data)
            self.assertIn("confidence", data)
            self.assertIn("timestamp", data)
            self.assertIn("neural_analysis", data)
            
            logger.info(f"    ‚úÖ –û—Ç–≤–µ—Ç: —Å–µ—Ä–≤–µ—Ä={data['routed_to']}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={data['confidence']:.2f}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(0.1)
    
    def test_servers_list(self):
        """–¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        logger.info("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        response = requests.get(f"{self.base_url}/api/servers")
        self.assertEqual(response.status_code, 200)
        
        data = response.json()
        self.assertIn("servers", data)
        self.assertIn("total_count", data)
        self.assertGreater(data["total_count"], 0)
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {data['total_count']}")
    
    def test_system_health(self):
        """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")
        
        response = requests.get(f"{self.base_url}/api/system/health")
        self.assertEqual(response.status_code, 200)
        
        data = response.json()
        self.assertIn("total_servers", data)
        self.assertIn("healthy_servers", data)
        self.assertIn("health_percentage", data)
        
        logger.info(f"‚úÖ –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: {data['health_percentage']:.1f}%")
    
    def test_errors_endpoint(self):
        """–¢–µ—Å—Ç endpoint –æ—à–∏–±–æ–∫"""
        logger.info("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint –æ—à–∏–±–æ–∫...")
        
        response = requests.get(f"{self.base_url}/api/errors")
        self.assertEqual(response.status_code, 200)
        
        data = response.json()
        self.assertIn("errors", data)
        self.assertIn("total_count", data)
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {data['total_count']}")
    
    def test_status_endpoint(self):
        """–¢–µ—Å—Ç endpoint —Å—Ç–∞—Ç—É—Å–∞"""
        logger.info("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint —Å—Ç–∞—Ç—É—Å–∞...")
        
        response = requests.get(f"{self.base_url}/api/status")
        self.assertEqual(response.status_code, 200)
        
        data = response.json()
        self.assertEqual(data["status"], "running")
        self.assertEqual(data["neural_router"], "active")
        self.assertEqual(data["error_tracker"], "active")
        
        logger.info("‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: running")
    
    def test_empty_message(self):
        """–¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        
        response = requests.post(
            f"{self.base_url}/api/chat",
            json={"message": ""}
        )
        
        self.assertEqual(response.status_code, 400)
        data = response.json()
        self.assertIn("error", data)
        
        logger.info("‚úÖ –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_special_characters(self):
        """–¢–µ—Å—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        logger.info("üî§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤...")
        
        special_messages = [
            "2+2=4",
            "U=I√óR",
            "sin(œÄ/2)",
            "‚àö16=4",
            "Œ± + Œ≤ = Œ≥"
        ]
        
        for message in special_messages:
            response = requests.post(
                f"{self.base_url}/api/chat",
                json={"message": message}
            )
            
            self.assertEqual(response.status_code, 200)
            logger.info(f"  ‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: '{message}'")
    
    def test_long_message(self):
        """–¢–µ—Å—Ç –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        logger.info("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        
        long_message = "–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ " * 50
        response = requests.post(
            f"{self.base_url}/api/chat",
            json={"message": long_message}
        )
        
        self.assertEqual(response.status_code, 200)
        data = response.json()
        self.assertIn("routed_to", data)
        
        logger.info("‚úÖ –î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    
    def test_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        logger.info("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        start_time = time.time()
        successful_requests = 0
        
        for i in range(10):
            response = requests.post(
                f"{self.base_url}/api/chat",
                json={"message": f"—Ç–µ—Å—Ç {i+1}"}
            )
            
            if response.status_code == 200:
                successful_requests += 1
        
        end_time = time.time()
        total_time = end_time - start_time
        avg_time = total_time / 10
        
        logger.info(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {successful_requests}/10 –∑–∞–ø—Ä–æ—Å–æ–≤, —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.3f}—Å")
        
        self.assertEqual(successful_requests, 10)
        self.assertLess(avg_time, 2.0)  # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 2 —Å–µ–∫—É–Ω–¥

class TestHandlers(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        from handlers.general_handler import get_general_handler
        from handlers.electrical_handler import get_electrical_handler
        from handlers.mathematics_handler import get_mathematics_handler
        
        self.general_handler = get_general_handler()
        self.electrical_handler = get_electrical_handler()
        self.mathematics_handler = get_mathematics_handler()
    
    def test_general_handler(self):
        """–¢–µ—Å—Ç –æ–±—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ General Handler...")
        
        test_cases = [
            "–ø—Ä–∏–≤–µ—Ç",
            "–ø–æ–º–æ—â—å",
            "–∫–∞–∫ –¥–µ–ª–∞",
            "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å"
        ]
        
        for message in test_cases:
            result = self.general_handler.handle_request(message)
            
            self.assertIn("success", result)
            self.assertIn("response", result)
            self.assertIn("category", result)
            self.assertIn("confidence", result)
            
            logger.info(f"  ‚úÖ '{message}' -> {result['category']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f})")
    
    def test_electrical_handler(self):
        """–¢–µ—Å—Ç —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        logger.info("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Electrical Handler...")
        
        test_cases = [
            "—á—Ç–æ —Ç–∞–∫–æ–µ —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä",
            "–∑–∞–∫–æ–Ω –æ–º–∞",
            "–∑–∞–∫–æ–Ω –∫–∏—Ä—Ö–≥–æ—Ñ–∞",
            "—á—Ç–æ —Ç–∞–∫–æ–µ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥"
        ]
        
        for message in test_cases:
            result = self.electrical_handler.handle_request(message)
            
            self.assertIn("success", result)
            self.assertIn("response", result)
            self.assertIn("category", result)
            
            logger.info(f"  ‚úÖ '{message}' -> {result['category']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f})")
    
    def test_mathematics_handler(self):
        """–¢–µ—Å—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        logger.info("üßÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Mathematics Handler...")
        
        test_cases = [
            "2+2",
            "–ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ —Ä–∞–¥–∏—É—Å–æ–º 5",
            "sin(30)",
            "—Ñ–æ—Ä–º—É–ª–∞ –ø–ª–æ—â–∞–¥–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞"
        ]
        
        for message in test_cases:
            result = self.mathematics_handler.handle_request(message)
            
            self.assertIn("success", result)
            self.assertIn("response", result)
            self.assertIn("category", result)
            
            logger.info(f"  ‚úÖ '{message}' -> {result['category']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f})")

def run_integration_tests():
    """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get("http://localhost:8080/api/health", timeout=5)
        if response.status_code != 200:
            logger.error("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    except requests.exceptions.RequestException:
        logger.error("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    loader = unittest.TestLoader()
    test_suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    test_suite.addTest(loader.loadTestsFromTestCase(TestEnhancedDispatcher))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    test_suite.addTest(loader.loadTestsFromTestCase(TestHandlers))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    return result.wasSuccessful()

if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Enhanced Smart Dispatcher")
    print("=" * 50)
    
    success = run_integration_tests()
    
    if success:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    print("=" * 50)