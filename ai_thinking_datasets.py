#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è Rubin AI
–í–∫–ª—é—á–∞–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ, —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, –æ—á–∏—Å—Ç–∫—É –∏ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
"""

import json
import logging
import random
from datetime import datetime
from typing import Dict, List, Any, Tuple
from dataclasses import dataclass
import re

logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)

@dataclass
class KnowledgeItem:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–Ω–∞–Ω–∏–π"""
    id: str
    domain: str
    concept: str
    definition: str
    context: str
    examples: List[str]
    relationships: List[str]
    complexity_level: int  # 1-5
    confidence_score: float  # 0.0-1.0
    metadata: Dict[str, Any]

class AIThinkingDatasets:
    """–°–∏—Å—Ç–µ–º–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ò–ò"""
    
    def __init__(self):
        self.knowledge_base = {}
        self.domain_datasets = {}
        self.relationship_graph = {}
        self.complexity_levels = {
            1: "–±–∞–∑–æ–≤—ã–π",
            2: "–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π", 
            3: "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
            4: "—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π",
            5: "–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π"
        }
        self._initialize_core_datasets()
        logger.info("üß† –°–∏—Å—Ç–µ–º–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _initialize_core_datasets(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        
        # –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ - —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        electrical_data = [
            {
                "concept": "–ó–∞–∫–æ–Ω –û–º–∞",
                "definition": "–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–∫–æ–Ω —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∏, —Å–≤—è–∑—ã–≤–∞—é—â–∏–π –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, —Ç–æ–∫ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ",
                "context": "–ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ø–µ–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ç–æ–∫–∞",
                "examples": [
                    "U = I √ó R - –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞",
                    "–ú–æ—â–Ω–æ—Å—Ç—å P = U √ó I = I¬≤ √ó R",
                    "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–µ–∑–∏—Å—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ø—è—Ö"
                ],
                "relationships": ["–∑–∞–∫–æ–Ω –ö–∏—Ä—Ö–≥–æ—Ñ–∞", "–º–æ—â–Ω–æ—Å—Ç—å", "—ç–Ω–µ—Ä–≥–∏—è"],
                "complexity_level": 2,
                "confidence_score": 0.95
            },
            {
                "concept": "–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä",
                "definition": "–ü–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤—ã–π –ø—Ä–∏–±–æ—Ä –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤",
                "context": "–û—Å–Ω–æ–≤–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ –∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å—Ö–µ–º",
                "examples": [
                    "–ë–∏–ø–æ–ª—è—Ä–Ω—ã–π —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä (BJT)",
                    "–ü–æ–ª–µ–≤–æ–π —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä (FET)",
                    "MOSFET –≤ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å—Ö–µ–º–∞—Ö"
                ],
                "relationships": ["—É—Å–∏–ª–∏—Ç–µ–ª—å", "–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å", "–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã"],
                "complexity_level": 3,
                "confidence_score": 0.90
            },
            {
                "concept": "–®–ò–ú (–®–∏—Ä–æ—Ç–Ω–æ-–∏–º–ø—É–ª—å—Å–Ω–∞—è –º–æ–¥—É–ª—è—Ü–∏—è)",
                "definition": "–ú–µ—Ç–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ—â–Ω–æ—Å—Ç—å—é –ø—É—Ç–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–º–ø—É–ª—å—Å–æ–≤",
                "context": "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∏–Ω–≤–µ—Ä—Ç–æ—Ä–∞—Ö, —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞—Ö —Å–∫–æ—Ä–æ—Å—Ç–∏, —Å–≤–µ—Ç–æ–¥–∏–æ–¥–Ω—ã—Ö –¥—Ä–∞–π–≤–µ—Ä–∞—Ö",
                "examples": [
                    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å—é –¥–≤–∏–≥–∞—Ç–µ–ª—è",
                    "–†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ —è—Ä–∫–æ—Å—Ç–∏ LED",
                    "DC-DC –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª–∏"
                ],
                "relationships": ["—á–∞—Å—Ç–æ—Ç–Ω–∞—è –º–æ–¥—É–ª—è—Ü–∏—è", "—Ü–∏—Ñ—Ä–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "—ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"],
                "complexity_level": 4,
                "confidence_score": 0.85
            }
        ]
        
        # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        math_data = [
            {
                "concept": "–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ",
                "definition": "–ê–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π —Å—Ç–µ–ø–µ–Ω–∏ –≤–∏–¥–∞ ax¬≤ + bx + c = 0",
                "context": "–û—Å–Ω–æ–≤—ã –∞–ª–≥–µ–±—Ä—ã, –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ —Ñ–∏–∑–∏–∫–µ –∏ –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏",
                "examples": [
                    "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç D = b¬≤ - 4ac",
                    "–§–æ—Ä–º—É–ª–∞ –∫–æ—Ä–Ω–µ–π: x = (-b ¬± ‚àöD) / 2a",
                    "–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è - –ø–∞—Ä–∞–±–æ–ª–∞"
                ],
                "relationships": ["–¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç", "–ø–∞—Ä–∞–±–æ–ª–∞", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"],
                "complexity_level": 2,
                "confidence_score": 0.98
            },
            {
                "concept": "–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ",
                "definition": "–£—Ä–∞–≤–Ω–µ–Ω–∏–µ, —Å–≤—è–∑—ã–≤–∞—é—â–µ–µ —Ñ—É–Ω–∫—Ü–∏—é —Å –µ—ë –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–º–∏",
                "context": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º",
                "examples": [
                    "–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è: F = ma = m(d¬≤x/dt¬≤)",
                    "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç: dy/dt = ky",
                    "–ì–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è"
                ],
                "relationships": ["–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è", "–∏–Ω—Ç–µ–≥—Ä–∞–ª", "–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã"],
                "complexity_level": 4,
                "confidence_score": 0.92
            }
        ]
        
        # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        programming_data = [
            {
                "concept": "–ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏",
                "definition": "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é",
                "context": "–û—Å–Ω–æ–≤—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∏–∫–∏, –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                "examples": [
                    "–ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ O(n log n)",
                    "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—É–∑—ã—Ä—å–∫–æ–º O(n¬≤)",
                    "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è"
                ],
                "relationships": ["—Å–ª–æ–∂–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞", "—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"],
                "complexity_level": 3,
                "confidence_score": 0.88
            },
            {
                "concept": "–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "definition": "–ü–∞—Ä–∞–¥–∏–≥–º–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –æ–±—ä–µ–∫—Ç–∞—Ö –∏ –∫–ª–∞—Å—Å–∞—Ö",
                "context": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û, –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è, –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º",
                "examples": [
                    "–ö–ª–∞—Å—Å –∫–∞–∫ —à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤",
                    "–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ - —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
                    "–ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º - –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —Ä–∞–∑–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"
                ],
                "relationships": ["–∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è", "–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º"],
                "complexity_level": 3,
                "confidence_score": 0.90
            }
        ]
        
        # –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        controllers_data = [
            {
                "concept": "–ü–õ–ö (–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º—ã–π –ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä)",
                "definition": "–¶–∏—Ñ—Ä–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
                "context": "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
                "examples": [
                    "Ladder Logic - –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    "SCADA —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
                    "HMI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"
                ],
                "relationships": ["SCADA", "HMI", "–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è —Å–µ—Ç—å"],
                "complexity_level": 3,
                "confidence_score": 0.87
            },
            {
                "concept": "–ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä",
                "definition": "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ-–∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ-–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –∑–∞–∫–æ–Ω–æ–º",
                "context": "–°–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
                "examples": [
                    "–ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è - –±—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–ª–∏–∫",
                    "–ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è - —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏",
                    "–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
                ],
                "relationships": ["–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "—Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"],
                "complexity_level": 4,
                "confidence_score": 0.89
            }
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        self.domain_datasets = {
            "electrical": self._process_domain_data("electrical", electrical_data),
            "math": self._process_domain_data("math", math_data),
            "programming": self._process_domain_data("programming", programming_data),
            "controllers": self._process_domain_data("controllers", controllers_data)
        }
        
        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ —Å–≤—è–∑–µ–π
        self._build_relationship_graph()
        
        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.domain_datasets)} –¥–æ–º–µ–Ω–æ–≤ –∑–Ω–∞–Ω–∏–π")
    
    def _process_domain_data(self, domain: str, raw_data: List[Dict]) -> List[KnowledgeItem]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–∞"""
        processed_data = []
        
        for i, item in enumerate(raw_data):
            # –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            cleaned_item = self._clean_and_normalize_data(item)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            knowledge_item = KnowledgeItem(
                id=f"{domain}_{i+1:03d}",
                domain=domain,
                concept=cleaned_item["concept"],
                definition=cleaned_item["definition"],
                context=cleaned_item["context"],
                examples=cleaned_item["examples"],
                relationships=cleaned_item["relationships"],
                complexity_level=cleaned_item["complexity_level"],
                confidence_score=cleaned_item["confidence_score"],
                metadata={
                    "created_at": datetime.now().isoformat(),
                    "domain": domain,
                    "data_quality": self._assess_data_quality(cleaned_item),
                    "cross_references": []
                }
            )
            
            processed_data.append(knowledge_item)
        
        return processed_data
    
    def _clean_and_normalize_data(self, item: Dict) -> Dict:
        """–û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        cleaned = {}
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
        for key in ["concept", "definition", "context"]:
            if key in item:
                # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤
                cleaned[key] = re.sub(r'\s+', ' ', str(item[key]).strip())
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ –¥–ª—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
                if key == "concept":
                    cleaned[key] = cleaned[key].title()
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤
        for key in ["examples", "relationships"]:
            if key in item:
                cleaned[key] = [
                    re.sub(r'\s+', ' ', str(example).strip())
                    for example in item[key]
                    if str(example).strip()
                ]
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        cleaned["complexity_level"] = max(1, min(5, int(item.get("complexity_level", 3))))
        cleaned["confidence_score"] = max(0.0, min(1.0, float(item.get("confidence_score", 0.8))))
        
        return cleaned
    
    def _assess_data_quality(self, item: Dict) -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
        quality_metrics = {
            "completeness": 0.0,
            "consistency": 0.0,
            "accuracy": 0.0,
            "relevance": 0.0
        }
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã
        required_fields = ["concept", "definition", "context", "examples"]
        completeness = sum(1 for field in required_fields if field in item and item[field]) / len(required_fields)
        quality_metrics["completeness"] = completeness
        
        # –û—Ü–µ–Ω–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        consistency = 1.0 if len(item.get("examples", [])) >= 2 else 0.5
        quality_metrics["consistency"] = consistency
        
        # –û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ confidence_score)
        quality_metrics["accuracy"] = item.get("confidence_score", 0.8)
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        relevance = 1.0 if len(item.get("relationships", [])) >= 2 else 0.7
        quality_metrics["relevance"] = relevance
        
        return quality_metrics
    
    def _build_relationship_graph(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏"""
        self.relationship_graph = {}
        
        for domain, items in self.domain_datasets.items():
            for item in items:
                concept_id = item.id
                self.relationship_graph[concept_id] = {
                    "concept": item.concept,
                    "domain": item.domain,
                    "relationships": [],
                    "cross_domain_links": []
                }
                
                # –ü–æ–∏—Å–∫ —Å–≤—è–∑–µ–π –≤–Ω—É—Ç—Ä–∏ –¥–æ–º–µ–Ω–∞
                for other_item in items:
                    if other_item.id != concept_id:
                        if any(rel in other_item.relationships for rel in item.relationships):
                            self.relationship_graph[concept_id]["relationships"].append(other_item.id)
                
                # –ü–æ–∏—Å–∫ –º–µ–∂–¥–æ–º–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π
                for other_domain, other_items in self.domain_datasets.items():
                    if other_domain != domain:
                        for other_item in other_items:
                            if any(rel in other_item.relationships for rel in item.relationships):
                                self.relationship_graph[concept_id]["cross_domain_links"].append(other_item.id)
        
        logger.info(f"üîó –ü–æ—Å—Ç—Ä–æ–µ–Ω –≥—Ä–∞—Ñ —Å–≤—è–∑–µ–π —Å {len(self.relationship_graph)} —É–∑–ª–∞–º–∏")
    
    def get_diverse_representative_data(self, domain: str, count: int = 5) -> List[KnowledgeItem]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –∏ —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if domain not in self.domain_datasets:
            return []
        
        items = self.domain_datasets[domain]
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è: –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        complexity_groups = {}
        for item in items:
            level = item.complexity_level
            if level not in complexity_groups:
                complexity_groups[level] = []
            complexity_groups[level].append(item)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        selected_items = []
        for level in sorted(complexity_groups.keys()):
            if len(selected_items) < count:
                # –í—ã–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö
                best_item = max(complexity_groups[level], 
                              key=lambda x: x.metadata["data_quality"]["completeness"])
                selected_items.append(best_item)
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        while len(selected_items) < count and len(selected_items) < len(items):
            remaining_items = [item for item in items if item not in selected_items]
            if remaining_items:
                selected_items.append(random.choice(remaining_items))
        
        return selected_items[:count]
    
    def find_cross_domain_connections(self, concept: str) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –º–µ–∂–¥–æ–º–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π –¥–ª—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏"""
        connections = []
        
        for item_id, item_data in self.relationship_graph.items():
            if concept.lower() in item_data["concept"].lower():
                connections.extend([
                    {
                        "source_concept": concept,
                        "target_concept": item_data["concept"],
                        "target_domain": item_data["domain"],
                        "connection_type": "cross_domain",
                        "strength": len(item_data["cross_domain_links"]) / 10.0
                    }
                    for link_id in item_data["cross_domain_links"]
                    if link_id in self.relationship_graph
                ])
        
        return connections
    
    def generate_annotated_training_data(self, domain: str) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        if domain not in self.domain_datasets:
            return []
        
        training_data = []
        
        for item in self.domain_datasets[domain]:
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
            annotations = {
                "basic_qa": {
                    "question": f"–ß—Ç–æ —Ç–∞–∫–æ–µ {item.concept.lower()}?",
                    "answer": item.definition,
                    "context": item.context,
                    "domain": domain,
                    "complexity": item.complexity_level
                },
                "detailed_explanation": {
                    "question": f"–û–±—ä—è—Å–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω–æ {item.concept.lower()}",
                    "answer": f"{item.definition}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: {item.context}\n\n–ü—Ä–∏–º–µ—Ä—ã: {'; '.join(item.examples)}",
                    "examples": item.examples,
                    "relationships": item.relationships,
                    "domain": domain,
                    "complexity": item.complexity_level
                },
                "application_scenario": {
                    "question": f"–ö–∞–∫ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è {item.concept.lower()}?",
                    "answer": f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: {item.context}\n\n–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {'; '.join(item.examples)}",
                    "context": item.context,
                    "examples": item.examples,
                    "domain": domain,
                    "complexity": item.complexity_level
                }
            }
            
            training_data.append({
                "item_id": item.id,
                "concept": item.concept,
                "annotations": annotations,
                "metadata": item.metadata,
                "quality_score": item.confidence_score
            })
        
        return training_data
    
    def get_dataset_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –Ω–∞–±–æ—Ä–∞–º –¥–∞–Ω–Ω—ã—Ö"""
        stats = {
            "total_domains": len(self.domain_datasets),
            "total_concepts": sum(len(items) for items in self.domain_datasets.values()),
            "domain_breakdown": {},
            "complexity_distribution": {i: 0 for i in range(1, 6)},
            "quality_metrics": {
                "average_confidence": 0.0,
                "high_quality_items": 0,
                "cross_domain_connections": 0
            }
        }
        
        total_confidence = 0
        total_items = 0
        
        for domain, items in self.domain_datasets.items():
            stats["domain_breakdown"][domain] = len(items)
            
            for item in items:
                stats["complexity_distribution"][item.complexity_level] += 1
                total_confidence += item.confidence_score
                total_items += 1
                
                if item.confidence_score >= 0.9:
                    stats["quality_metrics"]["high_quality_items"] += 1
        
        if total_items > 0:
            stats["quality_metrics"]["average_confidence"] = total_confidence / total_items
        
        stats["quality_metrics"]["cross_domain_connections"] = sum(
            len(item_data["cross_domain_links"]) 
            for item_data in self.relationship_graph.values()
        )
        
        return stats

if __name__ == "__main__":
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
    
    datasets = AIThinkingDatasets()
    
    # –¢–µ—Å—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –¢–µ—Å—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –¥–∞–Ω–Ω—ã—Ö:")
    for domain in ["electrical", "math", "programming", "controllers"]:
        diverse_data = datasets.get_diverse_representative_data(domain, 3)
        print(f"  {domain}: {len(diverse_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        for item in diverse_data:
            print(f"    ‚Ä¢ {item.concept} (—É—Ä–æ–≤–µ–Ω—å {item.complexity_level})")
    
    # –¢–µ—Å—Ç –º–µ–∂–¥–æ–º–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π
    print("\nüîó –¢–µ—Å—Ç –º–µ–∂–¥–æ–º–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π:")
    connections = datasets.find_cross_domain_connections("—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    print(f"  –ù–∞–π–¥–µ–Ω–æ {len(connections)} —Å–≤—è–∑–µ–π –¥–ª—è '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'")
    
    # –¢–µ—Å—Ç –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\nüìù –¢–µ—Å—Ç –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    training_data = datasets.generate_annotated_training_data("electrical")
    print(f"  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(training_data)} –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö:")
    stats = datasets.get_dataset_statistics()
    print(f"  –í—Å–µ–≥–æ –¥–æ–º–µ–Ω–æ–≤: {stats['total_domains']}")
    print(f"  –í—Å–µ–≥–æ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π: {stats['total_concepts']}")
    print(f"  –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {stats['quality_metrics']['average_confidence']:.2f}")
    print(f"  –ú–µ–∂–¥–æ–º–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π: {stats['quality_metrics']['cross_domain_connections']}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")










