#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Start All Servers Script
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ Rubin AI v2
"""

import subprocess
import time
import threading
import os
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
SERVERS_TO_START = [
    {
        'name': 'Smart Dispatcher',
        'command': 'python smart_dispatcher.py',
        'port': 8080,
        'description': '–ì–ª–∞–≤–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤'
    },
    {
        'name': 'General API',
        'command': 'python api/general_api.py',
        'port': 8085,
        'description': '–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —Å–ø—Ä–∞–≤–∫–∞'
    },
    {
        'name': 'Mathematics Server',
        'command': 'python math_server.py',
        'port': 8086,
        'description': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è'
    },
    {
        'name': 'Electrical API',
        'command': 'python api/electrical_api.py',
        'port': 8087,
        'description': '–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã'
    },
    {
        'name': 'Programming API',
        'command': 'python api/programming_api.py',
        'port': 8088,
        'description': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã'
    },
    {
        'name': 'Radiomechanics API',
        'command': 'python api/radiomechanics_api.py',
        'port': 8089,
        'description': '–†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã'
    },
    {
        'name': 'Neural Network API',
        'command': 'python neuro_server.py',
        'port': 8090,
        'description': '–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ'
    },
    {
        'name': 'Controllers API',
        'command': 'python api/controllers_api.py',
        'port': 9000,
        'description': '–ü–õ–ö, –ß–ü–£, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è'
    },
    {
        'name': 'PLC Analysis API',
        'command': 'python plc_analysis_api_server.py',
        'port': 8099,
        'description': '–ê–Ω–∞–ª–∏–∑ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ PLC –ø—Ä–æ–≥—Ä–∞–º–º'
    },
    {
        'name': 'Advanced Mathematics API',
        'command': 'python advanced_math_api_server.py',
        'port': 8100,
        'description': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è'
    },
    {
        'name': 'Data Processing API',
        'command': 'python data_processing_api_server.py',
        'port': 8101,
        'description': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö'
    },
    {
        'name': 'Search Engine API',
        'command': 'python search_engine_api_server.py',
        'port': 8102,
        'description': '–ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è'
    },
    {
        'name': 'System Utils API',
        'command': 'python system_utils_api_server.py',
        'port': 8103,
        'description': '–°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'
    },
    {
        'name': 'Unified System Manager',
        'command': 'python unified_system_manager.py',
        'port': 8084,
        'description': '–ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
    }
]

def start_server(server_config):
    """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        print(f"üöÄ –ó–∞–ø—É—Å–∫ {server_config['name']}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(server_config['command'].split()[1]):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {server_config['command'].split()[1]}")
            return None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        process = subprocess.Popen(
            server_config['command'],
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        
        # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        time.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        if process.poll() is None:
            print(f"‚úÖ {server_config['name']} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            return process
        else:
            stdout, stderr = process.communicate()
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {server_config['name']}: {stderr.decode()}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {server_config['name']}: {e}")
        return None

def check_port_availability(port):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
    import socket
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex(('localhost', port))
        sock.close()
        return result != 0  # True –µ—Å–ª–∏ –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
    except:
        return False

def wait_for_server(port, timeout=30):
    """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    import socket
    start_time = time.time()
    
    while time.time() - start_time < timeout:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex(('localhost', port))
            sock.close()
            
            if result == 0:
                return True
        except:
            pass
        
        time.sleep(1)
    
    return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéõÔ∏è Rubin AI v2 - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"–í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(SERVERS_TO_START)}")
    print("=" * 50)
    
    running_processes = []
    failed_servers = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for i, server_config in enumerate(SERVERS_TO_START, 1):
        print(f"\n[{i}/{len(SERVERS_TO_START)}] {server_config['name']}")
        print(f"–ü–æ—Ä—Ç: {server_config['port']}")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {server_config['description']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
        if not check_port_availability(server_config['port']):
            print(f"‚ö†Ô∏è –ü–æ—Ä—Ç {server_config['port']} —É–∂–µ –∑–∞–Ω—è—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            continue
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        process = start_server(server_config)
        
        if process:
            running_processes.append({
                'process': process,
                'config': server_config
            })
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
            if wait_for_server(server_config['port'], timeout=10):
                print(f"‚úÖ {server_config['name']} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            else:
                print(f"‚ö†Ô∏è {server_config['name']} –∑–∞–ø—É—â–µ–Ω, –Ω–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É {server_config['port']}")
        else:
            failed_servers.append(server_config['name'])
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
        time.sleep(1)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 50)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ: {len(running_processes)}")
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å: {len(failed_servers)}")
    
    if running_processes:
        print("\nüü¢ –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:")
        for proc_info in running_processes:
            config = proc_info['config']
            print(f"  - {config['name']} (–ø–æ—Ä—Ç {config['port']})")
    
    if failed_servers:
        print("\nüî¥ –ù–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏:")
        for server_name in failed_servers:
            print(f"  - {server_name}")
    
    print("\nüåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:")
    print("  - Smart Dispatcher: http://localhost:8080")
    print("  - Unified System Manager: http://localhost:8084")
    print("  - RubinIDE: http://localhost:8080/RubinIDE.html")
    print("  - RubinDeveloper: http://localhost:8080/matrix/RubinDeveloper.html")
    
    print("\nüì° API Endpoints:")
    for proc_info in running_processes:
        config = proc_info['config']
        if config['port'] == 8080:
            print(f"  - –ì–ª–∞–≤–Ω—ã–π API: http://localhost:{config['port']}/api/chat")
        elif config['port'] == 8084:
            print(f"  - –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: http://localhost:{config['port']}/api/system/status")
        else:
            print(f"  - {config['name']}: http://localhost:{config['port']}")
    
    print("\n" + "=" * 50)
    print("üéâ –ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 50)
    
    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    try:
        while True:
            time.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
            active_processes = []
            for proc_info in running_processes:
                if proc_info['process'].poll() is None:
                    active_processes.append(proc_info)
                else:
                    print(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä {proc_info['config']['name']} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
            
            running_processes = active_processes
            
            if not running_processes:
                print("‚ùå –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å")
                break
                
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        for proc_info in running_processes:
            try:
                proc_info['process'].terminate()
                print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {proc_info['config']['name']}...")
            except:
                pass
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        time.sleep(3)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        for proc_info in running_processes:
            try:
                if proc_info['process'].poll() is None:
                    proc_info['process'].kill()
            except:
                pass
        
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

if __name__ == '__main__':
    main()








