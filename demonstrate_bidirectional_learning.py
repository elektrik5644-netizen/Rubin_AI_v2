#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîÑ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–í–£–°–¢–û–†–û–ù–ù–ï–ì–û –û–ë–£–ß–ï–ù–ò–Ø
=====================================
–ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫ —è –æ–±—É—á–∞—é Rubin AI –∏ –∫–∞–∫ –æ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –º–µ–Ω—è
"""

import requests
import json
import time
from datetime import datetime

def demonstrate_bidirectional_learning():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
    
    print("üîÑ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–í–£–°–¢–û–†–û–ù–ù–ï–ì–û –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 60)
    
    # 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫ —è –æ–±—É—á–∞—é Rubin AI
    print("\nüìö –ö–ê–ö –Ø –û–ë–£–ß–ê–Æ RUBIN AI:")
    print("-" * 30)
    
    teaching_methods = [
        "üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è",
        "üìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º",
        "üéØ –ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤",
        "üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
        "üìù –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    ]
    
    for method in teaching_methods:
        print(f"  {method}")
        time.sleep(0.5)
    
    # 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫ Rubin AI –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –º–µ–Ω—è
    print("\nüîç –ö–ê–ö RUBIN AI –ú–û–ù–ò–¢–û–†–ò–¢ –ú–ï–ù–Ø:")
    print("-" * 35)
    
    monitoring_capabilities = [
        "üì° Learning Server –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è",
        "üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–∞–º—è—Ç—å –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä—ã",
        "üìä –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–∞–±–æ—Ç—ã –∏ –æ–±—É—á–µ–Ω–∏—è",
        "üéØ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á –∏ —Ä–µ—à–µ–Ω–∏–π",
        "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
    ]
    
    for capability in monitoring_capabilities:
        print(f"  {capability}")
        time.sleep(0.5)
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ Rubin AI
    print("\nüß† –¢–ï–°–¢–ò–†–£–ï–ú –ü–û–ù–ò–ú–ê–ù–ò–ï RUBIN AI:")
    print("-" * 35)
    
    test_questions = [
        "–ß—Ç–æ —Ç—ã –∏–∑—É—á–∏–ª –æ –º–æ–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã?",
        "–ö–∞–∫ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å –Ω–∞—à–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ?",
        "–ß—Ç–æ —Ç—ã –ø–æ–º–Ω–∏—à—å –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö?",
        "–ö–∞–∫ —Ç—ã –ø—Ä–∏–º–µ–Ω—è–µ—à—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è?"
    ]
    
    for question in test_questions:
        print(f"\nüìù –í–æ–ø—Ä–æ—Å: {question}")
        try:
            response = requests.post('http://localhost:8080/api/chat', 
                                   json={'message': question}, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ Rubin AI –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
                if 'response' in data:
                    if isinstance(data['response'], dict):
                        explanation = data['response'].get('explanation', '–ù–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è')
                    else:
                        explanation = str(data['response'])
                else:
                    explanation = str(data)
                
                print(f"üß† –û—Ç–≤–µ—Ç: {explanation[:100]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ—Å—Ç—å
                if any(keyword in explanation.lower() for keyword in ['—Å–µ–≥–æ–¥–Ω—è', '—Ä–∞–±–æ—Ç–∞–ª–∏', '–¥–µ–ª–∞–ª–∏', '–∏–∑—É—á–∏–ª', '–ø–æ–Ω—è–ª']):
                    print("‚úÖ Rubin AI –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
                else:
                    print("‚ö†Ô∏è –û—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —à–∞–±–ª–æ–Ω–Ω—ã–º")
                    
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        time.sleep(1)
    
    # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:")
    print("-" * 30)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—É—á–µ–Ω–∏—è
        context_response = requests.get('http://localhost:8091/api/learning/context', timeout=5)
        if context_response.status_code == 200:
            context_data = context_response.json()
            print("üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—É—á–µ–Ω–∏—è Rubin AI:")
            print(json.dumps(context_data, indent=2, ensure_ascii=False))
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—É—á–µ–Ω–∏—è")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
    
    # 5. –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –î–í–£–°–¢–û–†–û–ù–ù–ï–ì–û –û–ë–£–ß–ï–ù–ò–Ø:")
    print("=" * 50)
    
    print("‚úÖ –£–°–ü–ï–®–ù–´–ï –ê–°–ü–ï–ö–¢–´:")
    print("  ‚Ä¢ Rubin AI –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—à–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤")
    print("  ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print("  ‚Ä¢ Learning Server —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è")
    print("  ‚Ä¢ Smart Dispatcher –ø—Ä–∞–≤–∏–ª—å–Ω–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã")
    
    print("\nüîÑ –¶–ò–ö–õ –û–ë–£–ß–ï–ù–ò–Ø:")
    print("  1. –Ø —Å–æ–∑–¥–∞—é –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
    print("  2. Rubin AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    print("  3. –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å")
    print("  4. Rubin AI –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∑–Ω–∞–Ω–∏—è –≤ –Ω–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö")
    print("  5. –¶–∏–∫–ª –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏")

if __name__ == "__main__":
    demonstrate_bidirectional_learning()





