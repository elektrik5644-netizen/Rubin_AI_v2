#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ –∞–±–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –¥–ª—è Rubin AI
–†–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∞–∏–ª—É—á—à–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–∞–±–æ—Ä–∞ —Ñ–∞–∫—Ç–æ–≤
"""

import logging
from typing import Dict, List, Any, Tuple, Optional
from datetime import datetime
from dataclasses import dataclass
import json
import random

logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)

@dataclass
class Evidence:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞"""
    id: str
    description: str
    domain: str
    confidence: float  # 0.0-1.0
    timestamp: str
    source: str

@dataclass
class Hypothesis:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑—ã"""
    id: str
    description: str
    domain: str
    probability: float  # 0.0-1.0
    evidence_support: List[str]  # IDs –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
    alternative_hypotheses: List[str]  # IDs –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –≥–∏–ø–æ—Ç–µ–∑
    complexity_score: float  # –°–ª–æ–∂–Ω–æ—Å—Ç—å –≥–∏–ø–æ—Ç–µ–∑—ã

@dataclass
class AbductiveReasoning:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–±–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è"""
    best_hypothesis: Hypothesis
    alternative_hypotheses: List[Hypothesis]
    reasoning_steps: List[str]
    confidence_score: float
    evidence_used: List[Evidence]
    reasoning_type: str

class AbductiveReasoningEngine:
    """–î–≤–∏–∂–æ–∫ –∞–±–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è"""
    
    def __init__(self):
        self.evidence_base = {}
        self.hypothesis_base = {}
        self.reasoning_patterns = {}
        self.domain_knowledge = {}
        self._initialize_reasoning_patterns()
        self._initialize_domain_knowledge()
        logger.info("üß† –î–≤–∏–∂–æ–∫ –∞–±–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _initialize_reasoning_patterns(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è"""
        
        self.reasoning_patterns = {
            "electrical_troubleshooting": {
                "pattern": "–ï—Å–ª–∏ {symptom} –∏ {condition}, —Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ {cause}",
                "examples": [
                    "–ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞ –∏ —á–∞—Å—Ç–æ—Ç–∞ –∫–æ–ª–µ–±–∞–Ω–∏–π 50 –ì—Ü, —Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–∏—Ç–∞–Ω–∏–µ–º",
                    "–ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä –Ω–∞–≥—Ä–µ–≤–∞–µ—Ç—Å—è –∏ —Ç–æ–∫ —Ä–∞—Å—Ç–µ—Ç, —Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ",
                    "–ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –∏—Å–∫–∞–∂–µ–Ω –∏ —á–∞—Å—Ç–æ—Ç–∞ –≤—ã—Å–æ–∫–∞—è, —Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"
                ],
                "confidence_modifiers": {
                    "multiple_symptoms": 1.2,
                    "domain_expertise": 1.1,
                    "historical_data": 1.15
                }
            },
            "algorithm_analysis": {
                "pattern": "–ï—Å–ª–∏ {behavior} –∏ {conditions}, —Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º –≤–µ—Ä–æ—è—Ç–Ω–æ {characteristic}",
                "examples": [
                    "–ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Ç–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ –∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã, —Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º –≤–µ—Ä–æ—è—Ç–Ω–æ O(n¬≤)",
                    "–ï—Å–ª–∏ –ø–∞–º—è—Ç—å —Ä–∞—Å—Ç–µ—Ç –ª–∏–Ω–µ–π–Ω–æ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∫—É—Ä—Å–∏—è, —Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º –≤–µ—Ä–æ—è—Ç–Ω–æ –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –≥–ª—É–±–∏–Ω–æ–π",
                    "–ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ—Ç–æ—á–Ω—ã–π –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è float, —Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –≤—ã—á–∏—Å–ª–µ–Ω–∏–π"
                ],
                "confidence_modifiers": {
                    "performance_metrics": 1.3,
                    "code_analysis": 1.2,
                    "test_results": 1.25
                }
            },
            "system_behavior": {
                "pattern": "–ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ {behavior} –ø—Ä–∏ {conditions}, —Ç–æ –ø—Ä–∏—á–∏–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ {cause}",
                "examples": [
                    "–ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –∫–æ–ª–µ–±–ª–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏, —Ç–æ –ø—Ä–∏—á–∏–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ü–ò–î",
                    "–ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –º–µ–¥–ª–µ–Ω–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã, —Ç–æ –ø—Ä–∏—á–∏–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ—Ç–∏",
                    "–ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ, —Ç–æ –ø—Ä–∏—á–∏–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ —Ç–µ–ø–ª–æ–≤–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"
                ],
                "confidence_modifiers": {
                    "environmental_factors": 1.2,
                    "system_metrics": 1.3,
                    "user_reports": 1.1
                }
            }
        }
    
    def _initialize_domain_knowledge(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞–Ω–∏–π –ø–æ –¥–æ–º–µ–Ω–∞–º"""
        
        self.domain_knowledge = {
            "electrical": {
                "common_causes": {
                    "–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å": ["–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", "–ø–æ–º–µ—Ö–∏", "–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ", "—Ç–µ–ø–ª–æ–≤–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"],
                    "–ø–µ—Ä–µ–≥—Ä–µ–≤": ["–ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞", "–∫–æ—Ä–æ—Ç–∫–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ", "–ø–ª–æ—Ö–æ–π —Ç–µ–ø–ª–æ–æ—Ç–≤–æ–¥", "–≤—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞"],
                    "–∏—Å–∫–∞–∂–µ–Ω–∏–µ_—Å–∏–≥–Ω–∞–ª–∞": ["–ø–æ–º–µ—Ö–∏", "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è", "–Ω–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å", "–∑–∞–¥–µ—Ä–∂–∫–∞"]
                },
                "symptom_patterns": {
                    "—á–∞—Å—Ç–æ—Ç–Ω—ã–µ_–∫–æ–ª–µ–±–∞–Ω–∏—è": ["–ø–∏—Ç–∞–Ω–∏–µ", "–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "—Ä–µ–∑–æ–Ω–∞–Ω—Å"],
                    "—Ç–µ–ø–ª–æ–≤—ã–µ_—ç—Ñ—Ñ–µ–∫—Ç—ã": ["–ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞", "–Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è"],
                    "–≤—Ä–µ–º–µ–Ω–Ω—ã–µ_–∑–∞–¥–µ—Ä–∂–∫–∏": ["–∏–Ω–µ—Ä—Ü–∏—è", "—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è", "–æ–±—Ä–∞–±–æ—Ç–∫–∞"]
                }
            },
            "programming": {
                "common_causes": {
                    "–º–µ–¥–ª–µ–Ω–Ω–∞—è_—Ä–∞–±–æ—Ç–∞": ["–Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º", "–±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ", "–±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", "–Ω–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"],
                    "–≤—ã—Å–æ–∫–æ–µ_–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ_–ø–∞–º—è—Ç–∏": ["—É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏", "–±–æ–ª—å—à–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", "—Ä–µ–∫—É—Ä—Å–∏—è", "–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ"],
                    "–Ω–µ—Ç–æ—á–Ω—ã–µ_—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã": ["–æ—à–∏–±–∫–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è", "–ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ", "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è", "–∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏"]
                },
                "symptom_patterns": {
                    "–≤—Ä–µ–º–µ–Ω–Ω–∞—è_—Å–ª–æ–∂–Ω–æ—Å—Ç—å": ["–∞–ª–≥–æ—Ä–∏—Ç–º", "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"],
                    "–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è_—Å–ª–æ–∂–Ω–æ—Å—Ç—å": ["–ø–∞–º—è—Ç—å", "—Ä–µ–∫—É—Ä—Å–∏—è", "–∫—ç—à"],
                    "—Ç–æ—á–Ω–æ—Å—Ç—å_–≤—ã—á–∏—Å–ª–µ–Ω–∏–π": ["—Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö", "–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ", "–ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ"]
                }
            },
            "controllers": {
                "common_causes": {
                    "–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å_—Å–∏—Å—Ç–µ–º—ã": ["–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ü–ò–î", "–∑–∞–¥–µ—Ä–∂–∫–∏", "–Ω–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å", "–ø–æ–º–µ—Ö–∏"],
                    "–º–µ–¥–ª–µ–Ω–Ω—ã–π_–æ—Ç–∫–ª–∏–∫": ["–Ω–∏–∑–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã", "–∏–Ω–µ—Ä—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", "—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è"],
                    "–ø–µ—Ä–µ—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ": ["–≤—ã—Å–æ–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã", "–±—ã—Å—Ç—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –¥–µ–º–ø—Ñ–∏—Ä–æ–≤–∞–Ω–∏–µ"]
                },
                "symptom_patterns": {
                    "–∫–æ–ª–µ–±–∞–Ω–∏—è": ["–ü–ò–î –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", "–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "—Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω–µ—Ä—Ü–∏—è"],
                    "–∑–∞–¥–µ—Ä–∂–∫–∏": ["–≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞", "—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è", "–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"],
                    "–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å": ["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "–ø–æ–º–µ—Ö–∏", "–Ω–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"]
                }
            }
        }
    
    def add_evidence(self, evidence: Evidence) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ –±–∞–∑—É"""
        self.evidence_base[evidence.id] = evidence
        logger.info(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ: {evidence.description}")
        return evidence.id
    
    def generate_hypotheses(self, evidence_ids: List[str], domain: str) -> List[Hypothesis]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–∏–ø–æ—Ç–µ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤"""
        hypotheses = []
        
        if domain not in self.domain_knowledge:
            return hypotheses
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
        evidence_list = [self.evidence_base[eid] for eid in evidence_ids if eid in self.evidence_base]
        
        if not evidence_list:
            return hypotheses
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º–ø—Ç–æ–º—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–∏–ø–æ—Ç–µ–∑—ã
        domain_knowledge = self.domain_knowledge[domain]
        
        for evidence in evidence_list:
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
            description_lower = evidence.description.lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–ø—Ç–æ–º—ã
            for symptom_category, causes in domain_knowledge["common_causes"].items():
                if any(keyword in description_lower for keyword in symptom_category.split("_")):
                    for cause in causes:
                        hypothesis = Hypothesis(
                            id=f"hyp_{len(self.hypothesis_base) + len(hypotheses) + 1:03d}",
                            description=f"–ü—Ä–∏—á–∏–Ω–∞: {cause}",
                            domain=domain,
                            probability=self._calculate_hypothesis_probability(evidence, cause, domain),
                            evidence_support=[evidence.id],
                            alternative_hypotheses=[],
                            complexity_score=self._calculate_complexity_score(cause, domain)
                        )
                        hypotheses.append(hypothesis)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–∏–º–ø—Ç–æ–º–æ–≤
            for pattern_category, related_causes in domain_knowledge["symptom_patterns"].items():
                if any(keyword in description_lower for keyword in pattern_category.split("_")):
                    for cause in related_causes:
                        hypothesis = Hypothesis(
                            id=f"hyp_{len(self.hypothesis_base) + len(hypotheses) + 1:03d}",
                            description=f"–ü–∞—Ç—Ç–µ—Ä–Ω: {cause}",
                            domain=domain,
                            probability=self._calculate_hypothesis_probability(evidence, cause, domain),
                            evidence_support=[evidence.id],
                            alternative_hypotheses=[],
                            complexity_score=self._calculate_complexity_score(cause, domain)
                        )
                        hypotheses.append(hypothesis)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        unique_hypotheses = {}
        for hyp in hypotheses:
            if hyp.description not in unique_hypotheses:
                unique_hypotheses[hyp.description] = hyp
            else:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
                existing_hyp = unique_hypotheses[hyp.description]
                existing_hyp.evidence_support.extend(hyp.evidence_support)
                existing_hyp.probability = max(existing_hyp.probability, hyp.probability)
        
        sorted_hypotheses = sorted(unique_hypotheses.values(), 
                                 key=lambda x: x.probability, reverse=True)
        
        return sorted_hypotheses[:5]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-5 –≥–∏–ø–æ—Ç–µ–∑
    
    def _calculate_hypothesis_probability(self, evidence: Evidence, cause: str, domain: str) -> float:
        """–†–∞—Å—á–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≥–∏–ø–æ—Ç–µ–∑—ã"""
        base_probability = 0.5
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–º–µ–Ω–∞
        domain_modifiers = {
            "electrical": 0.8,
            "programming": 0.7,
            "controllers": 0.75
        }
        
        base_probability *= domain_modifiers.get(domain, 0.6)
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–µ
        base_probability *= evidence.confidence
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏—á–∏–Ω—ã
        complexity_modifiers = {
            "–ø—Ä–æ—Å—Ç–æ–π": 1.2,
            "—Å–ª–æ–∂–Ω—ã–π": 0.8,
            "—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π": 0.6
        }
        
        for complexity, modifier in complexity_modifiers.items():
            if complexity in cause.lower():
                base_probability *= modifier
                break
        
        return min(1.0, base_probability)
    
    def _calculate_complexity_score(self, cause: str, domain: str) -> float:
        """–†–∞—Å—á–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≥–∏–ø–æ—Ç–µ–∑—ã"""
        complexity_keywords = {
            "–ø—Ä–æ—Å—Ç–æ–π": 0.2,
            "–±–∞–∑–æ–≤—ã–π": 0.3,
            "—Å—Ä–µ–¥–Ω–∏–π": 0.5,
            "—Å–ª–æ–∂–Ω—ã–π": 0.7,
            "—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π": 0.9,
            "–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π": 1.0
        }
        
        cause_lower = cause.lower()
        for keyword, score in complexity_keywords.items():
            if keyword in cause_lower:
                return score
        
        return 0.5  # –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def perform_abductive_reasoning(self, evidence_ids: List[str], domain: str) -> AbductiveReasoning:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–±–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–∏–ø–æ—Ç–µ–∑—ã
        hypotheses = self.generate_hypotheses(evidence_ids, domain)
        
        if not hypotheses:
            return AbductiveReasoning(
                best_hypothesis=Hypothesis("none", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö", domain, 0.0, [], [], 0.0),
                alternative_hypotheses=[],
                reasoning_steps=["–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–∏–ø–æ—Ç–µ–∑"],
                confidence_score=0.0,
                evidence_used=[],
                reasoning_type="insufficient_data"
            )
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –≥–∏–ø–æ—Ç–µ–∑—É
        best_hypothesis = hypotheses[0]
        alternative_hypotheses = hypotheses[1:]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à–∞–≥–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è
        reasoning_steps = self._generate_reasoning_steps(best_hypothesis, evidence_ids, domain)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence_score = self._calculate_overall_confidence(best_hypothesis, evidence_ids)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
        evidence_used = [self.evidence_base[eid] for eid in evidence_ids if eid in self.evidence_base]
        
        return AbductiveReasoning(
            best_hypothesis=best_hypothesis,
            alternative_hypotheses=alternative_hypotheses,
            reasoning_steps=reasoning_steps,
            confidence_score=confidence_score,
            evidence_used=evidence_used,
            reasoning_type="abductive_inference"
        )
    
    def _generate_reasoning_steps(self, hypothesis: Hypothesis, evidence_ids: List[str], domain: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–≥–æ–≤ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è"""
        steps = []
        
        steps.append(f"1. –ê–Ω–∞–ª–∏–∑ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –≤ –¥–æ–º–µ–Ω–µ {domain}")
        
        evidence_list = [self.evidence_base[eid] for eid in evidence_ids if eid in self.evidence_base]
        steps.append(f"2. –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(evidence_list)} –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤")
        
        steps.append(f"3. –í—ã—è–≤–ª–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω: {hypothesis.description}")
        
        steps.append(f"4. –†–∞—Å—á–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: {hypothesis.probability:.2f}")
        
        steps.append(f"5. –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {hypothesis.complexity_score:.2f}")
        
        steps.append(f"6. –í—ã–≤–æ–¥: {hypothesis.description} - –Ω–∞–∏–ª—É—á—à–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ")
        
        return steps
    
    def _calculate_overall_confidence(self, hypothesis: Hypothesis, evidence_ids: List[str]) -> float:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"""
        if not evidence_ids:
            return 0.0
        
        evidence_list = [self.evidence_base[eid] for eid in evidence_ids if eid in self.evidence_base]
        
        if not evidence_list:
            return 0.0
        
        # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞—Ö
        avg_evidence_confidence = sum(e.confidence for e in evidence_list) / len(evidence_list)
        
        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –≥–∏–ø–æ—Ç–µ–∑–µ
        hypothesis_confidence = hypothesis.probability
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
        support_factor = min(1.0, len(hypothesis.evidence_support) / 3.0)
        
        # –û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        overall_confidence = (avg_evidence_confidence * 0.4 + 
                            hypothesis_confidence * 0.4 + 
                            support_factor * 0.2)
        
        return min(1.0, overall_confidence)
    
    def explain_reasoning(self, reasoning_result: AbductiveReasoning) -> str:
        """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è"""
        explanation = f"""
**üß† –ê–ë–î–£–ö–¢–ò–í–ù–û–ï –†–ê–°–°–£–ñ–î–ï–ù–ò–ï**

**üìä –ê–Ω–∞–ª–∏–∑ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤:**
"""
        
        for evidence in reasoning_result.evidence_used:
            explanation += f"‚Ä¢ {evidence.description} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {evidence.confidence:.2f})\n"
        
        explanation += f"""
**üéØ –õ—É—á—à–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞:**
{reasoning_result.best_hypothesis.description}
- –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {reasoning_result.best_hypothesis.probability:.2f}
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: {reasoning_result.best_hypothesis.complexity_score:.2f}
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤: {len(reasoning_result.best_hypothesis.evidence_support)}

**üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã:**
"""
        
        for alt_hyp in reasoning_result.alternative_hypotheses[:3]:
            explanation += f"‚Ä¢ {alt_hyp.description} (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {alt_hyp.probability:.2f})\n"
        
        explanation += f"""
**üìã –®–∞–≥–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è:**
"""
        
        for step in reasoning_result.reasoning_steps:
            explanation += f"{step}\n"
        
        explanation += f"""
**‚úÖ –û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {reasoning_result.confidence_score:.2f}**

**üí° –í—ã–≤–æ–¥:** {reasoning_result.best_hypothesis.description} —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–ª—É—á—à–∏–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ—é—â–∏—Ö—Å—è –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤.
"""
        
        return explanation
    
    def get_reasoning_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π"""
        stats = {
            "total_evidence": len(self.evidence_base),
            "total_hypotheses": len(self.hypothesis_base),
            "reasoning_patterns": len(self.reasoning_patterns),
            "domain_coverage": len(self.domain_knowledge),
            "evidence_by_domain": {},
            "hypothesis_complexity_distribution": {i: 0 for i in range(1, 6)}
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º
        for evidence in self.evidence_base.values():
            domain = evidence.domain
            if domain not in stats["evidence_by_domain"]:
                stats["evidence_by_domain"][domain] = 0
            stats["evidence_by_domain"][domain] += 1
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≥–∏–ø–æ—Ç–µ–∑
        for hypothesis in self.hypothesis_base.values():
            complexity_level = int(hypothesis.complexity_score * 5) + 1
            complexity_level = min(5, complexity_level)
            stats["hypothesis_complexity_distribution"][complexity_level] += 1
        
        return stats

if __name__ == "__main__":
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–±–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è")
    
    engine = AbductiveReasoningEngine()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    evidence1 = Evidence(
        id="ev_001",
        description="–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–µ–±–ª–µ—Ç—Å—è —Å —á–∞—Å—Ç–æ—Ç–æ–π 50 –ì—Ü",
        domain="electrical",
        confidence=0.9,
        timestamp=datetime.now().isoformat(),
        source="–¥–∞—Ç—á–∏–∫ —á–∞—Å—Ç–æ—Ç—ã"
    )
    
    evidence2 = Evidence(
        id="ev_002", 
        description="–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ç–æ–∫–∞ —Ä–∞—Å—Ç–µ—Ç –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏",
        domain="electrical",
        confidence=0.8,
        timestamp=datetime.now().isoformat(),
        source="–∞–º–ø–µ—Ä–º–µ—Ç—Ä"
    )
    
    evidence3 = Evidence(
        id="ev_003",
        description="–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä –Ω–∞–≥—Ä–µ–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç–∞—Ö",
        domain="electrical", 
        confidence=0.85,
        timestamp=datetime.now().isoformat(),
        source="—Ç–µ—Ä–º–æ–¥–∞—Ç—á–∏–∫"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    engine.add_evidence(evidence1)
    engine.add_evidence(evidence2)
    engine.add_evidence(evidence3)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–±–¥—É–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ
    print("\nüîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–±–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è:")
    reasoning_result = engine.perform_abductive_reasoning(
        ["ev_001", "ev_002", "ev_003"], 
        "electrical"
    )
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    explanation = engine.explain_reasoning(reasoning_result)
    print(explanation)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
    stats = engine.get_reasoning_statistics()
    print(f"  –í—Å–µ–≥–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤: {stats['total_evidence']}")
    print(f"  –í—Å–µ–≥–æ –≥–∏–ø–æ—Ç–µ–∑: {stats['total_hypotheses']}")
    print(f"  –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è: {stats['reasoning_patterns']}")
    print(f"  –ü–æ–∫—Ä—ã—Ç–∏–µ –¥–æ–º–µ–Ω–æ–≤: {stats['domain_coverage']}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")










