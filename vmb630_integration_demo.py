#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ConfigurationManager –∏ EventSystem —Å VMB630
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import time
import threading
from typing import Dict, List, Any
from vmb630_configuration_manager import ConfigurationManager, EventSystem, MotorStatusObserver, ErrorObserver, PositionObserver

class VMB630Controller:
    """
    –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä VMB630 —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π ConfigurationManager –∏ EventSystem
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    """
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.config_manager = ConfigurationManager()
        self.event_system = EventSystem()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.motors = {}
        self.axes = {}
        self.spindles = {}
        self.system_state = "INITIALIZING"
        
        # –ù–∞–±–ª—é–¥–∞—Ç–µ–ª–∏
        self.observers = {}
        
        self._initialize_system()
    
    def _initialize_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã VMB630"""
        self.logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VMB630 —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π...")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        self.logger.info("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...")
        success = self.config_manager.load_all_configurations()
        
        if not success:
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        self._setup_observers()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._initialize_motors()
        self._initialize_axes()
        self._initialize_spindles()
        
        self.system_state = "READY"
        self.event_system.notify("system_status", "READY", "VMB630Controller")
        
        self.logger.info("‚úÖ VMB630 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π!")
    
    def _setup_observers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π"""
        self.logger.info("üëÅÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Å–∏
        axes = ['X', 'Y1', 'Y2', 'Z', 'B', 'C']
        for axis in axes:
            motor_observer = MotorStatusObserver(f"Motor_{axis}")
            position_observer = PositionObserver(f"Axis_{axis}")
            
            self.observers[f"motor_{axis}"] = motor_observer
            self.observers[f"position_{axis}"] = position_observer
            
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
            self.event_system.subscribe("motor_status", motor_observer.update, f"Motor{axis}Observer")
            self.event_system.subscribe("position_update", position_observer.update, f"Position{axis}Observer")
        
        # –û–±—â–∏–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –æ—à–∏–±–æ–∫
        error_observer = ErrorObserver()
        self.observers["error"] = error_observer
        self.event_system.subscribe("error", error_observer.update, "ErrorObserver")
        
        self.logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {len(self.observers)} –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π")
    
    def _initialize_motors(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ—Ç–æ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ—Ç–æ—Ä–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ VMB630
        vmb_info = self.config_manager.get_vmb630_info()
        
        # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ—Ç–æ—Ä–∞—Ö –∏–∑ VMB630_info.txt
        if vmb_info:
            lines = vmb_info.split('\n')
            current_axis = None
            
            for line in lines:
                line = line.strip()
                if line.startswith('Axis '):
                    current_axis = line.split(':')[0].replace('Axis ', '')
                    self.motors[current_axis] = {
                        'type': 'Linear' if current_axis in ['X', 'Y1', 'Y2', 'Z'] else 'Rotary',
                        'pwm_channel': self._extract_pwm_channel(current_axis),
                        'status': 'STOPPED',
                        'position': 0.0,
                        'encoder': 'BISS'
                    }
                elif line.startswith('Spindle '):
                    spindle_name = line.split(':')[0].replace('Spindle ', '')
                    self.motors[spindle_name] = {
                        'type': 'Spindle',
                        'pwm_channel': self._extract_pwm_channel(spindle_name),
                        'status': 'STOPPED',
                        'speed': 0,
                        'encoder': 'BISS'
                    }
        
        self.logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.motors)} –º–æ—Ç–æ—Ä–æ–≤")
    
    def _extract_pwm_channel(self, component_name: str) -> int:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ PWM –∫–∞–Ω–∞–ª–∞ –∏–∑ –∏–º–µ–Ω–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ VMB630_info.txt
        channel_map = {
            'X': 1, 'Y1': 2, 'Y2': 7, 'Z': 3,
            'B': 5, 'C': 6, 'S': 4, 'S1': 8
        }
        return channel_map.get(component_name, 0)
    
    def _initialize_axes(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–µ–π"""
        self.logger.info("üìç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–µ–π...")
        
        axes_info = {
            'X': {'type': 'Linear', 'resolution': 0.001, 'max_speed': 50},
            'Y1': {'type': 'Linear', 'resolution': 0.001, 'max_speed': 50},
            'Y2': {'type': 'Linear', 'resolution': 0.001, 'max_speed': 50},
            'Z': {'type': 'Linear', 'resolution': 0.001, 'max_speed': 30},
            'B': {'type': 'Rotary', 'resolution': 0.001, 'max_speed': 1000},
            'C': {'type': 'Rotary', 'resolution': 0.001, 'max_speed': 1000}
        }
        
        for axis_name, info in axes_info.items():
            self.axes[axis_name] = {
                'name': axis_name,
                'type': info['type'],
                'resolution': info['resolution'],
                'max_speed': info['max_speed'],
                'position': 0.0,
                'status': 'IDLE'
            }
        
        self.logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.axes)} –æ—Å–µ–π")
    
    def _initialize_spindles(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–ø–∏–Ω–¥–µ–ª–µ–π"""
        self.logger.info("‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–ø–∏–Ω–¥–µ–ª–µ–π...")
        
        spindles_info = {
            'S': {'max_speed': 8000, 'power': 15},
            'S1': {'max_speed': 6000, 'power': 10}
        }
        
        for spindle_name, info in spindles_info.items():
            self.spindles[spindle_name] = {
                'name': spindle_name,
                'max_speed': info['max_speed'],
                'power': info['power'],
                'current_speed': 0,
                'status': 'STOPPED'
            }
        
        self.logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.spindles)} —à–ø–∏–Ω–¥–µ–ª–µ–π")
    
    def start_motor(self, motor_name: str) -> bool:
        """–ó–∞–ø—É—Å–∫ –º–æ—Ç–æ—Ä–∞"""
        try:
            if motor_name in self.motors:
                self.motors[motor_name]['status'] = 'RUNNING'
                self.event_system.notify("motor_status", "STARTED", f"Motor_{motor_name}")
                self.logger.info(f"üîß –ú–æ—Ç–æ—Ä {motor_name} –∑–∞–ø—É—â–µ–Ω")
                return True
            else:
                self.event_system.notify("error", f"Motor {motor_name} not found", "VMB630Controller")
                return False
        except Exception as e:
            self.event_system.notify("error", f"Failed to start motor {motor_name}: {e}", "VMB630Controller")
            return False
    
    def stop_motor(self, motor_name: str) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—Ç–æ—Ä–∞"""
        try:
            if motor_name in self.motors:
                self.motors[motor_name]['status'] = 'STOPPED'
                self.event_system.notify("motor_status", "STOPPED", f"Motor_{motor_name}")
                self.logger.info(f"üîß –ú–æ—Ç–æ—Ä {motor_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
            else:
                self.event_system.notify("error", f"Motor {motor_name} not found", "VMB630Controller")
                return False
        except Exception as e:
            self.event_system.notify("error", f"Failed to stop motor {motor_name}: {e}", "VMB630Controller")
            return False
    
    def move_axis(self, axis_name: str, target_position: float) -> bool:
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ—Å–∏"""
        try:
            if axis_name in self.axes:
                current_pos = self.axes[axis_name]['position']
                self.axes[axis_name]['position'] = target_position
                self.axes[axis_name]['status'] = 'MOVING'
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –º–æ—Ç–æ—Ä–∞
                if axis_name in self.motors:
                    self.motors[axis_name]['position'] = target_position
                
                self.event_system.notify("position_update", target_position, f"Axis_{axis_name}")
                self.logger.info(f"üìç –û—Å—å {axis_name}: {current_pos} ‚Üí {target_position}")
                
                # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
                threading.Timer(0.1, lambda: self._finish_movement(axis_name)).start()
                return True
            else:
                self.event_system.notify("error", f"Axis {axis_name} not found", "VMB630Controller")
                return False
        except Exception as e:
            self.event_system.notify("error", f"Failed to move axis {axis_name}: {e}", "VMB630Controller")
            return False
    
    def _finish_movement(self, axis_name: str):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –æ—Å–∏"""
        self.axes[axis_name]['status'] = 'IDLE'
        self.event_system.notify("movement_complete", axis_name, f"Axis_{axis_name}")
    
    def set_spindle_speed(self, spindle_name: str, speed: int) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —à–ø–∏–Ω–¥–µ–ª—è"""
        try:
            if spindle_name in self.spindles:
                max_speed = self.spindles[spindle_name]['max_speed']
                if speed <= max_speed:
                    self.spindles[spindle_name]['current_speed'] = speed
                    self.spindles[spindle_name]['status'] = 'RUNNING' if speed > 0 else 'STOPPED'
                    
                    self.event_system.notify("spindle_speed", speed, f"Spindle_{spindle_name}")
                    self.logger.info(f"‚ö° –®–ø–∏–Ω–¥–µ–ª—å {spindle_name}: {speed} –æ–±/–º–∏–Ω")
                    return True
                else:
                    self.event_system.notify("error", f"Speed {speed} exceeds max speed {max_speed} for spindle {spindle_name}", "VMB630Controller")
                    return False
            else:
                self.event_system.notify("error", f"Spindle {spindle_name} not found", "VMB630Controller")
                return False
        except Exception as e:
            self.event_system.notify("error", f"Failed to set spindle speed {spindle_name}: {e}", "VMB630Controller")
            return False
    
    def get_system_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        return {
            'system_state': self.system_state,
            'motors': {name: motor['status'] for name, motor in self.motors.items()},
            'axes': {name: {'position': axis['position'], 'status': axis['status']} for name, axis in self.axes.items()},
            'spindles': {name: {'speed': spindle['current_speed'], 'status': spindle['status']} for name, spindle in self.spindles.items()},
            'config_status': self.config_manager.get_config_status(),
            'event_status': self.event_system.get_observers_status()
        }
    
    def get_event_history(self, event_type: str = None, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π"""
        return self.event_system.get_event_history(event_type, limit)
    
    def reload_configuration(self, config_name: str) -> bool:
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        success = self.config_manager.reload_config(config_name)
        if success:
            self.event_system.notify("config_reloaded", config_name, "VMB630Controller")
        return success


def demonstrate_vmb630_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ VMB630 —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò VMB630 –° –ü–ê–¢–¢–ï–†–ù–ê–ú–ò –ü–†–û–ï–ö–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 80)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
    print("\nüîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø VMB630 –ö–û–ù–¢–†–û–õ–õ–ï–†–ê:")
    controller = VMB630Controller()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
    print("\nüìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:")
    status = controller.get_system_status()
    print(f"  –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: {status['system_state']}")
    print(f"  –ú–æ—Ç–æ—Ä—ã: {len(status['motors'])}")
    print(f"  –û—Å–∏: {len(status['axes'])}")
    print(f"  –®–ø–∏–Ω–¥–µ–ª–∏: {len(status['spindles'])}")
    print(f"  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {status['config_status']['total_configs']}")
    print(f"  –ù–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π: {status['event_status']['total_observers']}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ—Ç–æ—Ä–∞–º–∏
    print("\nüîß –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–û–¢–û–†–ê–ú–ò:")
    controller.start_motor("X")
    controller.start_motor("Y1")
    controller.start_motor("Z")
    
    time.sleep(0.5)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ—Å–µ–π
    print("\nüìç –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –û–°–ï–ô:")
    controller.move_axis("X", 100.0)
    controller.move_axis("Y1", 50.0)
    controller.move_axis("Z", 25.0)
    
    time.sleep(0.5)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–ø–∏–Ω–¥–µ–ª—è–º–∏
    print("\n‚ö° –£–ü–†–ê–í–õ–ï–ù–ò–ï –®–ü–ò–ù–î–ï–õ–Ø–ú–ò:")
    controller.set_spindle_speed("S", 5000)
    controller.set_spindle_speed("S1", 3000)
    
    time.sleep(0.5)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–æ–∫
    print("\n‚ùå –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö:")
    controller.move_axis("INVALID_AXIS", 100.0)  # –û—à–∏–±–∫–∞
    controller.set_spindle_speed("S", 10000)  # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
    
    time.sleep(0.5)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π
    print("\nüìú –ò–°–¢–û–†–ò–Ø –°–û–ë–´–¢–ò–ô:")
    history = controller.get_event_history(limit=10)
    for event in history:
        print(f"  {event['timestamp'].strftime('%H:%M:%S.%f')[:-3]} - {event['type']}: {event['data']} (–æ—Ç {event['source']})")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    print("\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:")
    final_status = controller.get_system_status()
    
    print("  üîß –ú–æ—Ç–æ—Ä—ã:")
    for name, motor_status in final_status['motors'].items():
        print(f"    {name}: {motor_status}")
    
    print("  üìç –û—Å–∏:")
    for name, axis_info in final_status['axes'].items():
        print(f"    {name}: –ø–æ–∑–∏—Ü–∏—è {axis_info['position']}, —Å—Ç–∞—Ç—É—Å {axis_info['status']}")
    
    print("  ‚ö° –®–ø–∏–Ω–¥–µ–ª–∏:")
    for name, spindle_info in final_status['spindles'].items():
        print(f"    {name}: —Å–∫–æ—Ä–æ—Å—Ç—å {spindle_info['speed']} –æ–±/–º–∏–Ω, —Å—Ç–∞—Ç—É—Å {spindle_info['status']}")
    
    print("\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("VMB630 —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
    print("\n‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:")
    print("  - –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º (Singleton)")
    print("  - –°–ª–∞–±–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å–æ–±—ã—Ç–∏–π (Observer)")
    print("  - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    print("  - –õ–µ–≥–∫–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("  - –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å")


if __name__ == "__main__":
    import logging
    logging.basicConfig(level=logging.INFO)
    demonstrate_vmb630_integration()





