#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π –¥–ª—è Rubin AI
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –≤ —á–∞—Ç–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
"""

import logging
import re
from typing import Dict, List, Optional, Any
from central_knowledge_base import get_knowledge_base, get_suggestion_engine

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class IntelligentKnowledgeManager:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–Ω–∞–Ω–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏"""
    
    def __init__(self):
        self.kb = get_knowledge_base()
        self.engine = get_suggestion_engine()
        self.active_suggestions = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
        self.user_preferences = {
            'auto_suggest': True,
            'suggestion_threshold': 0.6,
            'max_suggestions_per_session': 3
        }
    
    def process_question(self, question: str, user_id: str = "default") -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è"""
        try:
            logger.info(f"üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞: {question[:50]}...")
            
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö
            existing_knowledge = self.kb.search_knowledge(question)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π
            suggestion_data = self.engine.analyze_question(question)
            
            response = {
                'question': question,
                'existing_knowledge': existing_knowledge,
                'suggestion': None,
                'suggestion_message': None,
                'needs_user_input': False
            }
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–µ—à–∏–ª –∞–≤—Ç–æ-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            if suggestion_data and self.user_preferences['auto_suggest']:
                suggestion_id = suggestion_data['suggestion_id']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏
                if len(self.active_suggestions) < self.user_preferences['max_suggestions_per_session']:
                    self.active_suggestions[suggestion_id] = {
                        'user_id': user_id,
                        'question': question,
                        'suggestion': suggestion_data['suggestion'],
                        'timestamp': suggestion_data.get('timestamp')
                    }
                    
                    response['suggestion'] = suggestion_data
                    response['suggestion_message'] = self.engine.generate_suggestion_message(suggestion_data)
                    response['needs_user_input'] = True
                    
                    logger.info(f"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞–Ω–∏–µ: {suggestion_data['suggestion']['title']}")
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            return {
                'question': question,
                'existing_knowledge': [],
                'suggestion': None,
                'suggestion_message': None,
                'needs_user_input': False,
                'error': str(e)
            }
    
    def handle_user_feedback(self, feedback: str, user_id: str = "default") -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            feedback_lower = feedback.lower().strip()
            
            # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—ã
            if feedback_lower.startswith('approve'):
                suggestion_id = self._extract_id(feedback_lower)
                return self._approve_suggestion(suggestion_id, user_id)
            
            elif feedback_lower.startswith('reject'):
                suggestion_id = self._extract_id(feedback_lower)
                return self._reject_suggestion(suggestion_id, user_id)
            
            elif feedback_lower.startswith('edit'):
                suggestion_id = self._extract_id(feedback_lower)
                return self._edit_suggestion(suggestion_id, user_id, feedback)
            
            elif feedback_lower in ['–¥–∞', 'yes', '–¥–∞, –¥–æ–±–∞–≤–∏—Ç—å', '–¥–æ–±–∞–≤–∏—Ç—å']:
                return self._approve_latest_suggestion(user_id)
            
            elif feedback_lower in ['–Ω–µ—Ç', 'no', '–Ω–µ –Ω—É–∂–Ω–æ', '–æ—Ç–∫–ª–æ–Ω–∏—Ç—å']:
                return self._reject_latest_suggestion(user_id)
            
            else:
                return {
                    'status': 'unknown_command',
                    'message': '–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: approve, reject, edit –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "–¥–∞"/"–Ω–µ—Ç"'
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            }
    
    def _extract_id(self, feedback: str) -> Optional[int]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –∏–∑ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ
            numbers = re.findall(r'\d+', feedback)
            if numbers:
                return int(numbers[0])
            return None
        except:
            return None
    
    def _approve_suggestion(self, suggestion_id: int, user_id: str) -> Dict[str, Any]:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"""
        try:
            if suggestion_id not in self.active_suggestions:
                return {
                    'status': 'error',
                    'message': f'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {suggestion_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö'
                }
            
            success = self.kb.approve_suggestion(suggestion_id, f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            
            if success:
                suggestion_info = self.active_suggestions.pop(suggestion_id, {})
                return {
                    'status': 'approved',
                    'message': f'‚úÖ –ó–Ω–∞–Ω–∏–µ "{suggestion_info.get("suggestion", {}).get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}" –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É!',
                    'suggestion_id': suggestion_id
                }
            else:
                return {
                    'status': 'error',
                    'message': f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {suggestion_id}'
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            }
    
    def _reject_suggestion(self, suggestion_id: int, user_id: str) -> Dict[str, Any]:
        """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"""
        try:
            success = self.kb.reject_suggestion(suggestion_id, f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            
            if success:
                suggestion_info = self.active_suggestions.pop(suggestion_id, {})
                return {
                    'status': 'rejected',
                    'message': f'‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ "{suggestion_info.get("suggestion", {}).get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}" –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ',
                    'suggestion_id': suggestion_id
                }
            else:
                return {
                    'status': 'error',
                    'message': f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {suggestion_id}'
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            }
    
    def _edit_suggestion(self, suggestion_id: int, user_id: str, feedback: str) -> Dict[str, Any]:
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"""
        try:
            if suggestion_id not in self.active_suggestions:
                return {
                    'status': 'error',
                    'message': f'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {suggestion_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö'
                }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            suggestion_info = self.active_suggestions[suggestion_id]
            
            return {
                'status': 'edit_requested',
                'message': f'‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {suggestion_id}. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é.',
                'current_suggestion': suggestion_info['suggestion'],
                'suggestion_id': suggestion_id
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            }
    
    def _approve_latest_suggestion(self, user_id: str) -> Dict[str, Any]:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"""
        if not self.active_suggestions:
            return {
                'status': 'no_suggestions',
                'message': '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
            }
        
        latest_id = max(self.active_suggestions.keys())
        return self._approve_suggestion(latest_id, user_id)
    
    def _reject_latest_suggestion(self, user_id: str) -> Dict[str, Any]:
        """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"""
        if not self.active_suggestions:
            return {
                'status': 'no_suggestions',
                'message': '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è'
            }
        
        latest_id = max(self.active_suggestions.keys())
        return self._reject_suggestion(latest_id, user_id)
    
    def get_active_suggestions(self, user_id: str = "default") -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_suggestions = []
        for suggestion_id, suggestion_data in self.active_suggestions.items():
            if suggestion_data['user_id'] == user_id:
                user_suggestions.append({
                    'id': suggestion_id,
                    'question': suggestion_data['question'],
                    'suggestion': suggestion_data['suggestion']
                })
        
        return user_suggestions
    
    def get_knowledge_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–Ω–∞–Ω–∏–π"""
        return self.kb.get_knowledge_stats()
    
    def configure_preferences(self, preferences: Dict[str, Any]):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_preferences.update(preferences)
        logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {preferences}")

class RubinChatWithKnowledge:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ç Rubin AI —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∑–Ω–∞–Ω–∏–π"""
    
    def __init__(self):
        self.knowledge_manager = IntelligentKnowledgeManager()
        self.chat_history = []
    
    def process_message(self, message: str, user_id: str = "default") -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
            if self._is_feedback_message(message):
                feedback_result = self.knowledge_manager.handle_user_feedback(message, user_id)
                return self._format_feedback_response(feedback_result)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            result = self.knowledge_manager.process_question(message, user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_parts = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è
            if result['existing_knowledge']:
                response_parts.append("üìö **–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è:**")
                for knowledge in result['existing_knowledge'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    response_parts.append(f"‚Ä¢ **{knowledge['title']}**: {knowledge['content']}")
                    if knowledge['formulas']:
                        response_parts.append(f"  *–§–æ—Ä–º—É–ª—ã: {knowledge['formulas']}*")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞–Ω–∏—è
            if result['suggestion_message']:
                response_parts.append("\n" + result['suggestion_message'])
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∑–Ω–∞–Ω–∏–π –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            if not result['existing_knowledge'] and not result['suggestion']:
                response_parts.append("ü§î –ù–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–Ω–∞–Ω–∏–π –≤ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.chat_history.append({
                'user_id': user_id,
                'message': message,
                'response': '\n'.join(response_parts),
                'timestamp': result.get('timestamp')
            })
            
            return '\n'.join(response_parts)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
    
    def _is_feedback_message(self, message: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é"""
        feedback_keywords = [
            'approve', 'reject', 'edit', '–¥–∞', '–Ω–µ—Ç', 'yes', 'no',
            '–¥–æ–±–∞–≤–∏—Ç—å', '–æ—Ç–∫–ª–æ–Ω–∏—Ç—å', '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'
        ]
        
        message_lower = message.lower().strip()
        return any(keyword in message_lower for keyword in feedback_keywords)
    
    def _format_feedback_response(self, feedback_result: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"""
        status = feedback_result.get('status', 'unknown')
        message = feedback_result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        
        if status == 'approved':
            return f"‚úÖ {message}\n\n–¢–µ–ø–µ—Ä—å —ç—Ç–æ –∑–Ω–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞!"
        elif status == 'rejected':
            return f"‚ùå {message}"
        elif status == 'edit_requested':
            return f"‚úèÔ∏è {message}"
        elif status == 'no_suggestions':
            return f"‚ÑπÔ∏è {message}"
        else:
            return f"‚ö†Ô∏è {message}"
    
    def get_chat_history(self, user_id: str = "default") -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return [msg for msg in self.chat_history if msg['user_id'] == user_id]
    
    def get_knowledge_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–Ω–∞–Ω–∏–π"""
        return self.knowledge_manager.get_knowledge_stats()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —á–∞—Ç–∞
rubin_chat = None

def get_rubin_chat():
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —á–∞—Ç–∞"""
    global rubin_chat
    if rubin_chat is None:
        rubin_chat = RubinChatWithKnowledge()
    return rubin_chat

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ Rubin AI —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∑–Ω–∞–Ω–∏–π")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    chat = get_rubin_chat()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_messages = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–∫–æ–Ω –û–º–∞?",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä?",
        "–¥–∞",  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x^2 + 5x + 6 = 0",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –®–ò–ú?",
        "approve 1"  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    ]
    
    for i, message in enumerate(test_messages, 1):
        print(f"\n{'='*60}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {i}: {message}")
        print(f"{'='*60}")
        
        response = chat.process_message(message)
        print(f"–û—Ç–≤–µ—Ç: {response}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = chat.get_knowledge_stats()
    print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"‚Ä¢ –í—Å–µ–≥–æ –∑–Ω–∞–Ω–∏–π: {stats['total_facts']}")
    print(f"‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {stats['pending_suggestions']}")
    print(f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {stats['approved_suggestions']}")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")










