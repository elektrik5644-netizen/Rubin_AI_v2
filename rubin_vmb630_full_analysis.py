#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ VMB630 –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ Rubin AI
"""

import os
from project_folder_reader import ProjectFolderReader
from rubin_project_integration import RubinProjectIntegration

def analyze_vmb630_with_rubin():
    """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ VMB630 —á–µ—Ä–µ–∑ Rubin AI"""
    
    print("üîç RUBIN AI –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ï–ö–¢–ê VMB630")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Rubin AI
    reader = ProjectFolderReader()
    reader.initialize_db()
    integrator = RubinProjectIntegration()
    integrator.initialize_db()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç VMB630
    project_id = reader.get_project_id_by_name("VMB630 Project")
    
    if not project_id:
        print("‚ùå –ü—Ä–æ–µ–∫—Ç VMB630 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç VMB630 (ID: {project_id})")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–∑–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
    overview = integrator.get_project_overview(project_id)
    print(f"\nüìä –û–ë–ó–û–† –ü–†–û–ï–ö–¢–ê:")
    print(f"  üìÅ –ù–∞–∑–≤–∞–Ω–∏–µ: {overview['project_name']}")
    print(f"  üîß –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: {overview['project_type']}")
    print(f"  üìÑ –§–∞–π–ª–æ–≤: {overview['total_files']}")
    print(f"  üíæ –†–∞–∑–º–µ—Ä: {overview['total_size_mb']:.2f} MB")
    print(f"  ‚öôÔ∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å: {overview['avg_complexity']:.0f}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–û–í:")
    all_files = integrator.get_all_files_in_project(project_id)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
    file_types = {}
    for file_info in all_files:
        ext = file_info['file_extension']
        if ext not in file_types:
            file_types[ext] = {'count': 0, 'size': 0}
        file_types[ext]['count'] += 1
        file_types[ext]['size'] += file_info['size_bytes']
    
    print(f"  üìä –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤:")
    for ext, stats in sorted(file_types.items(), key=lambda x: x[1]['count'], reverse=True):
        size_mb = stats['size'] / (1024 * 1024)
        print(f"    - {ext}: {stats['count']} —Ñ–∞–π–ª–æ–≤, {size_mb:.1f} MB")
    
    # –¢–æ–ø —Ñ–∞–π–ª—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É
    print(f"\n  üìà –¢–æ–ø-10 —Ñ–∞–π–ª–æ–≤ –ø–æ —Ä–∞–∑–º–µ—Ä—É:")
    sorted_files = sorted(all_files, key=lambda x: x['size_bytes'], reverse=True)
    for i, file_info in enumerate(sorted_files[:10], 1):
        size_kb = file_info['size_bytes'] / 1024
        print(f"    {i:2d}. {file_info['file_name']} ({file_info['file_extension']}) - {size_kb:.1f} KB")
    
    # –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    print(f"\nüîë –ö–õ–Æ–ß–ï–í–´–ï –§–ê–ô–õ–´:")
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å VMB630
    vmb_files = integrator.search_project(project_id, "VMB630")
    print(f"  üìÑ –§–∞–π–ª—ã —Å VMB630 ({len(vmb_files)}):")
    for file_info in vmb_files:
        print(f"    - {file_info['file_name']} ({file_info['file_type']})")
        if file_info['file_name'] == 'VMB630_info.txt':
            print(f"      –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {file_info['content'][:200]}...")
    
    # –ò—â–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    config_files = [f for f in all_files if f['file_extension'] in ['.cfg', '.xml', '.ini']]
    print(f"\n  ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({len(config_files)}):")
    for file_info in config_files[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        size_kb = file_info['size_bytes'] / 1024
        print(f"    - {file_info['file_name']} ({file_info['file_extension']}) - {size_kb:.1f} KB")
    
    # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    print(f"\nüìã –ê–ù–ê–õ–ò–ó –°–û–î–ï–†–ñ–ò–ú–û–ì–û:")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º VMB630_info.txt
    vmb_info_file = next((f for f in all_files if f['file_name'] == 'VMB630_info.txt'), None)
    if vmb_info_file:
        print(f"  üìÑ VMB630_info.txt:")
        content = vmb_info_file['content']
        lines = content.split('\n')
        for line in lines[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫
            if line.strip():
                print(f"    {line}")
        if len(lines) > 20:
            print(f"    ... –∏ –µ—â–µ {len(lines) - 20} —Å—Ç—Ä–æ–∫")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º define.xml
    define_xml = next((f for f in all_files if f['file_name'] == 'define.xml'), None)
    if define_xml:
        print(f"\n  üìÑ define.xml (975.9 KB):")
        content = define_xml['content']
        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if 'axis' in content.lower():
            print(f"    ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å–µ–π")
        if 'motor' in content.lower():
            print(f"    ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ—Ç–æ—Ä–æ–≤")
        if 'spindle' in content.lower():
            print(f"    ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —à–ø–∏–Ω–¥–µ–ª–µ–π")
        if 'pwm' in content.lower():
            print(f"    ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç PWM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º start.cfg
    start_cfg = next((f for f in all_files if f['file_name'] == 'start.cfg'), None)
    if start_cfg:
        print(f"\n  üìÑ start.cfg (577.9 KB):")
        content = start_cfg['content']
        lines = content.split('\n')
        config_lines = [line for line in lines if line.strip() and not line.startswith(';')]
        print(f"    üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {len(config_lines)}")
        print(f"    üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Å–∞–π—Ç—ã
    print(f"\nüí° –ò–ù–°–ê–ô–¢–´ RUBIN AI:")
    insights = integrator.generate_insights(project_id)
    if insights and insights.get('recommendations'):
        for i, rec in enumerate(insights['recommendations'], 1):
            print(f"  {i}. {rec}")
    else:
        print("  –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
    
    # –ü–æ–∏—Å–∫ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
    print(f"\nüîç –ü–û–ò–°–ö –°–ü–ï–¶–ò–§–ò–ß–ù–´–• –¢–ï–†–ú–ò–ù–û–í:")
    search_terms = ["VMB630", "PLC", "motor", "axis", "spindle", "pwm", "encoder", "biss"]
    for term in search_terms:
        results = integrator.search_project(project_id, term)
        print(f"  '{term}': {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        if results:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            first_result = results[0]
            preview = first_result['content'][:100].replace('\n', ' ')
            print(f"    ‚Üí {first_result['file_name']} ({first_result['file_type']})")
            print(f"    –ü—Ä–µ–≤—å—é: {preview}...")
    
    # –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    print(f"\nüí¨ –û–¢–í–ï–¢–´ –ù–ê –í–û–ü–†–û–°–´:")
    questions = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ VMB630?",
        "–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç?",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—è–º–∏?",
        "–ö–∞–∫–∏–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ PLC –≤ —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ?",
        "–ö–∞–∫–∏–µ –º–æ—Ç–æ—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ?",
        "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —ç–Ω–∫–æ–¥–µ—Ä—ã?"
    ]
    
    for q in questions:
        answer = integrator.answer_question_about_project(project_id, q)
        print(f"‚ùì {q}")
        print(f"üéØ {answer}")
        print()
    
    # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
    print(f"üéâ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("=" * 30)
    print("VMB630 - —ç—Ç–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—Ä–µ–∑–µ—Ä–Ω—ã–º —Å—Ç–∞–Ω–∫–æ–º —Å –ß–ü–£.")
    print("–ü—Ä–æ–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:")
    print("‚úÖ 102 —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º")
    print("‚úÖ 6 –æ—Å–µ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (X, Y1, Y2, Z, B, C)")
    print("‚úÖ 2 —à–ø–∏–Ω–¥–µ–ª—è (S, S1)")
    print("‚úÖ PLC –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ª–æ–≥–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    print("‚úÖ BISS —ç–Ω–∫–æ–¥–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
    print("‚úÖ PWM —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞–º–∏")
    print("\n–≠—Ç–æ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω–æ–≥–æ —Ñ—Ä–µ–∑–µ—Ä–æ–≤–∞–Ω–∏—è.")

if __name__ == "__main__":
    analyze_vmb630_with_rubin()





