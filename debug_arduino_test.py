#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from flask import Flask, request, jsonify
from flask_cors import CORS
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

def handle_arduino_nano_debug(query):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Arduino Nano"""
    logger.info(f"üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ Arduino Nano –∑–∞–ø—Ä–æ—Å–∞: {query}")
    return f"Arduino Nano Debug: {query}"

@app.route('/api/chat', methods=['POST'])
def debug_chat():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —á–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Arduino Nano"""
    try:
        data = request.get_json()
        message = data.get('message', '').strip()
        
        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {message}")
        
        if not message:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Arduino
        if any(word in message.lower() for word in ['arduino', '–∞—Ä–¥—É–∏–Ω–æ', 'nano', '–Ω–∞–Ω–æ']):
            logger.info("üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω Arduino Nano –∑–∞–ø—Ä–æ—Å")
            result = handle_arduino_nano_debug(message)
            logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            return jsonify({
                'success': True,
                'response': result,
                'category': 'arduino_nano',
                'server': 'localhost:8084 (–æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç)'
            })
        else:
            logger.info("üìù –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
            return jsonify({
                'success': True,
                'response': '–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç',
                'category': 'general',
                'server': 'localhost:8084 (–æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç)'
            })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/health', methods=['GET'])
def health():
    return jsonify({'status': 'healthy', 'service': 'Debug Arduino Test'})

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ Arduino Nano...")
    logger.info("üì° –ü–æ—Ä—Ç: 8084")
    logger.info("üîó URL: http://localhost:8084")
    app.run(host='0.0.0.0', port=8084, debug=False)





