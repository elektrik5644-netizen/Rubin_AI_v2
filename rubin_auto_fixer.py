#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú RUBIN AI
=============================================
"""

import subprocess
import time
import requests
import os
import sys
from datetime import datetime

class RubinAutoFixer:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º Rubin AI"""
    
    def __init__(self):
        self.servers_to_fix = {
            'general_api': {
                'port': 8085,
                'script': 'general_server.py',
                'endpoint': '/api/health',
                'fallback': None
            },
            'mathematics': {
                'port': 8086,
                'script': 'math_server.py',
                'endpoint': '/health',  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π endpoint
                'fallback': 'general_api'
            },
            'electrical': {
                'port': 8087,
                'script': 'electrical_server.py',
                'endpoint': '/api/electrical/status',
                'fallback': 'mathematics'
            },
            'programming': {
                'port': 8088,
                'script': 'programming_server.py',
                'endpoint': '/api/programming/explain',
                'fallback': 'general_api'
            },
            'radiomechanics': {
                'port': 8089,
                'script': 'radiomechanics_server.py',
                'endpoint': '/api/radiomechanics/status',
                'fallback': 'general_api'
            }
        }
        
        self.fixed_servers = []
        self.failed_servers = []
    
    def check_server_exists(self, script_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        return os.path.exists(script_name)
    
    def start_server(self, server_name, config):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        script_name = config['script']
        
        if not self.check_server_exists(script_name):
            print(f"‚ùå {server_name}: –°–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        try:
            print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é {server_name} ({script_name})...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            process = subprocess.Popen([
                sys.executable, script_name
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            if self.test_server_health(server_name, config):
                print(f"‚úÖ {server_name}: –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                self.fixed_servers.append(server_name)
                return True
            else:
                print(f"‚ùå {server_name}: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å")
                process.terminate()
                self.failed_servers.append(server_name)
                return False
                
        except Exception as e:
            print(f"‚ùå {server_name}: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ - {e}")
            self.failed_servers.append(server_name)
            return False
    
    def test_server_health(self, server_name, config):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞"""
        port = config['port']
        endpoint = config['endpoint']
        url = f"http://localhost:{port}{endpoint}"
        
        try:
            if server_name == 'programming':
                response = requests.post(url, json={'concept': 'test'}, timeout=5)
            else:
                response = requests.get(url, timeout=5)
            
            return response.status_code == 200
        except:
            return False
    
    def fix_all_servers(self):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã"""
        print("üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú RUBIN AI")
        print("=" * 60)
        
        for server_name, config in self.servers_to_fix.items():
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è—é {server_name}...")
            
            if self.test_server_health(server_name, config):
                print(f"‚úÖ {server_name}: –£–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                self.fixed_servers.append(server_name)
            else:
                print(f"‚ùå {server_name}: –¢—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                self.start_server(server_name, config)
            
            time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
    
    def update_smart_dispatcher(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç Smart Dispatcher –¥–æ v3.0"""
        print(f"\nüîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï SMART DISPATCHER:")
        print("-" * 40)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å–µ–π—á–∞—Å –∑–∞–ø—É—â–µ–Ω
            response = requests.get('http://localhost:8080/api/health', timeout=5)
            if response.status_code == 200:
                data = response.json()
                if 'learning' in str(data):
                    print("‚úÖ Smart Dispatcher v3.0 —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                else:
                    print("‚ö†Ô∏è Smart Dispatcher v2.0 –∑–∞–ø—É—â–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                    print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å v2.0 –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å v3.0")
            else:
                print("‚ùå Smart Dispatcher –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Smart Dispatcher: {e}")
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        print("=" * 40)
        
        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(self.fixed_servers)}")
        for server in self.fixed_servers:
            print(f"  ‚Ä¢ {server}")
        
        if self.failed_servers:
            print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å: {len(self.failed_servers)}")
            for server in self.failed_servers:
                print(f"  ‚Ä¢ {server}")
        
        total_servers = len(self.servers_to_fix) + 4  # +4 —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö
        working_servers = len(self.fixed_servers) + 4
        
        print(f"\nüìà –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {working_servers}/{total_servers} —Å–µ—Ä–≤–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        if working_servers >= total_servers * 0.8:
            print("üéâ –°–∏—Å—Ç–µ–º–∞ Rubin AI —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!")
        elif working_servers >= total_servers * 0.6:
            print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏")
        else:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    fixer = RubinAutoFixer()
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
    fixer.fix_all_servers()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º Smart Dispatcher
    fixer.update_smart_dispatcher()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    fixer.generate_final_report()
    
    print(f"\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("=" * 20)
    print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
    print("2. –û–±–Ω–æ–≤–∏—Ç—å Smart Dispatcher –¥–æ v3.0")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é")
    print("4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")

if __name__ == "__main__":
    main()





