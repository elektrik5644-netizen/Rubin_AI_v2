#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
General API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ Rubin AI v2
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

@app.route('/api/chat', methods=['POST'])
def chat():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    try:
        data = request.get_json()
        message = data.get('message', '').strip()
        
        if not message:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        logger.info(f"üìù –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å: {message}")
        
        # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤
        message_lower = message.lower()
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        if any(word in message_lower for word in ['—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä', '—Ä–µ–∑–∏—Å—Ç–æ—Ä', '–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä', '—Å—Ö–µ–º–∞', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ', '—Ç–æ–∫', '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', '–º–æ—â–Ω–æ—Å—Ç—å', '–¥–∏–æ–¥']):
            response = "üîå –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –º–æ–¥—É–ª—é —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."
        
        elif any(word in message_lower for word in ['–∞–Ω—Ç–µ–Ω–Ω–∞', '—Å–∏–≥–Ω–∞–ª', '—Ä–∞–¥–∏–æ', '–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫', '–ø—Ä–∏–µ–º–Ω–∏–∫', '—á–∞—Å—Ç–æ—Ç–∞', '–≤–æ–ª–Ω–∞']):
            response = "üì° –í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è —Ä–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∏. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –∫ –º–æ–¥—É–ª—é —Ä–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."
        
        elif any(word in message_lower for word in ['–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', 'plc', 'pmac', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '—Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥', '–¥–≤–∏–≥–∞—Ç–µ–ª—å', '–ø—Ä–∏–≤–æ–¥']):
            response = "üéÆ –í–∞—à –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –∫ –º–æ–¥—É–ª—é –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."
        
        elif any(word in message_lower for word in ['—É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '–≤—ã—á–∏—Å–ª–∏—Ç—å', '—Ä–µ—à–∏—Ç—å', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—Ñ–æ—Ä–º—É–ª–∞', '–∏–Ω—Ç–µ–≥—Ä–∞–ª', '–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è', '–∞–ª–≥–µ–±—Ä–∞']):
            response = "üßÆ –í–∞—à –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –∫ –º–æ–¥—É–ª—é –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è."
        
        elif any(word in message_lower for word in ['–∫–æ–¥', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', 'python', 'javascript', 'java', 'c++', '—Ñ—É–Ω–∫—Ü–∏—è', '–∫–ª–∞—Å—Å']):
            response = "üíª –í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –∫ –º–æ–¥—É–ª—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è."
        
        elif any(word in message_lower for word in ['–Ω–µ–π—Ä–æ—Å–µ—Ç—å', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', 'ai', '–∞–ª–≥–æ—Ä–∏—Ç–º –æ–±—É—á–µ–Ω–∏—è', '–º–æ–¥–µ–ª—å']):
            response = "üß† –í–∞—à –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –∫ –º–æ–¥—É–ª—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."
        
        else:
            response = f"""ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å: "{message}"

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å:
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, —Å—Ö–µ–º—ã, —Ä–∞—Å—á–µ—Ç—ã
‚Ä¢ –†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞ - –∞–Ω—Ç–µ–Ω–Ω—ã, —Å–∏–≥–Ω–∞–ª—ã, –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∏  
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã - –ü–õ–ö, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥—ã
‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - —É—Ä–∞–≤–Ω–µ–Ω–∏—è, –≤—ã—á–∏—Å–ª–µ–Ω–∏—è, —Ñ–æ—Ä–º—É–ª—ã
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - –∫–æ–¥, –∞–ª–≥–æ—Ä–∏—Ç–º—ã, —è–∑—ã–∫–∏
‚Ä¢ –ù–µ–π—Ä–æ—Å–µ—Ç–∏ - –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –ò–ò

–ò–ª–∏ –∑–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏."""
        
        return jsonify({
            'success': True,
            'response': response,
            'category': 'general',
            'server': 'localhost:8085'
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ general API: {e}")
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        'server': 'General API',
        'status': 'online',
        'port': 8085,
        'message': 'General API server is running'
    })

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        'name': 'Rubin AI v2 - General API',
        'version': '1.0',
        'status': 'online',
        'endpoints': {
            'chat': '/api/chat',
            'health': '/api/health'
        }
    })

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é General API —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8085...")
    app.run(host='0.0.0.0', port=8085, debug=False)