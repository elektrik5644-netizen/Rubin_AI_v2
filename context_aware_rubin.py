#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Context-Aware Rubin AI - –°–∏—Å—Ç–µ–º–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
"""

import json
import logging
import sqlite3
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass
from collections import deque
import re
import hashlib

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class ConversationContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞"""
    user_id: str
    session_id: str
    message_history: List[Dict[str, Any]]
    current_topic: str
    user_intent: str
    conversation_mood: str
    technical_level: str
    last_interaction: datetime
    context_keywords: List[str]
    user_preferences: Dict[str, Any]

@dataclass
class ResponseGeneration:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""
    base_response: str
    context_adaptations: List[str]
    personalization: str
    technical_depth: str
    mood_adaptation: str
    final_response: str

class ContextAwareRubinAI:
    """Rubin AI —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    
    def __init__(self, db_path: str = "context_aware_rubin.db"):
        self.db_path = db_path
        self.connection = None
        self.conversation_contexts = {}  # –ö—ç—à –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
        self.response_templates = {}  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã
        self.user_profiles = {}  # –ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._initialize_database()
        self._load_response_templates()
        self._load_user_profiles()
        
        logger.info("üß† Context-Aware Rubin AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _initialize_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è"""
        try:
            self.connection = sqlite3.connect(self.db_path)
            self.connection.row_factory = sqlite3.Row
            self._create_context_tables()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            raise

    def _create_context_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è"""
        cursor = self.connection.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS conversation_contexts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT NOT NULL,
                session_id TEXT NOT NULL,
                context_data TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS message_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT NOT NULL,
                session_id TEXT NOT NULL,
                message_type TEXT NOT NULL,
                content TEXT NOT NULL,
                context_keywords TEXT,
                user_intent TEXT,
                response_quality INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS user_profiles (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT UNIQUE NOT NULL,
                technical_level TEXT DEFAULT 'intermediate',
                preferred_topics TEXT,
                communication_style TEXT DEFAULT 'professional',
                response_preferences TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS dynamic_templates (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                template_type TEXT NOT NULL,
                base_template TEXT NOT NULL,
                context_adaptations TEXT,
                usage_count INTEGER DEFAULT 0,
                success_rate REAL DEFAULT 0.0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        self.connection.commit()
        logger.info("üìä –¢–∞–±–ª–∏—Ü—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã")

    def _load_response_templates(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
        try:
            cursor = self.connection.cursor()
            cursor.execute("SELECT * FROM dynamic_templates")
            templates = cursor.fetchall()
            
            for template in templates:
                template_type = template['template_type']
                self.response_templates[template_type] = {
                    'base': template['base_template'],
                    'adaptations': json.loads(template['context_adaptations'] or '[]'),
                    'usage_count': template['usage_count'],
                    'success_rate': template['success_rate']
                }
            
            logger.info(f"üìù –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.response_templates)} –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}")

    def _load_user_profiles(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            cursor = self.connection.cursor()
            cursor.execute("SELECT * FROM user_profiles")
            profiles = cursor.fetchall()
            
            for profile in profiles:
                user_id = profile['user_id']
                self.user_profiles[user_id] = {
                    'technical_level': profile['technical_level'],
                    'preferred_topics': json.loads(profile['preferred_topics'] or '[]'),
                    'communication_style': profile['communication_style'],
                    'response_preferences': json.loads(profile['response_preferences'] or '{}')
                }
            
            logger.info(f"üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.user_profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")

    def get_conversation_context(self, user_id: str, session_id: str) -> ConversationContext:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"{user_id}_{session_id}"
            if cache_key in self.conversation_contexts:
                return self.conversation_contexts[cache_key]
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cursor = self.connection.cursor()
            cursor.execute("""
                SELECT * FROM conversation_contexts 
                WHERE user_id = ? AND session_id = ?
                ORDER BY updated_at DESC LIMIT 1
            """, (user_id, session_id))
            
            context_row = cursor.fetchone()
            if context_row:
                context_data = json.loads(context_row['context_data'])
                context = ConversationContext(**context_data)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context = ConversationContext(
                    user_id=user_id,
                    session_id=session_id,
                    message_history=[],
                    current_topic="general",
                    user_intent="unknown",
                    conversation_mood="neutral",
                    technical_level="intermediate",
                    last_interaction=datetime.now(),
                    context_keywords=[],
                    user_preferences={}
                )
            
            # –ö—ç—à–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.conversation_contexts[cache_key] = context
            return context
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            return ConversationContext(
                user_id=user_id,
                session_id=session_id,
                message_history=[],
                current_topic="general",
                user_intent="unknown",
                conversation_mood="neutral",
                technical_level="intermediate",
                last_interaction=datetime.now(),
                context_keywords=[],
                user_preferences={}
            )

    def analyze_user_intent(self, message: str, context: ConversationContext) -> str:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        message_lower = message.lower()
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        intent_keywords = {
            'question': ['–∫–∞–∫', '—á—Ç–æ', '–ø–æ—á–µ–º—É', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–∑–∞—á–µ–º', '?'],
            'request': ['–ø–æ–º–æ–≥–∏', '—Å–¥–µ–ª–∞–π', '—Å–æ–∑–¥–∞–π', '–Ω–∞–ø–∏—à–∏', '–ø–æ–∫–∞–∂–∏', '–æ–±—ä—è—Å–Ω–∏'],
            'complaint': ['–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ', '–ø–ª–æ—Ö–æ'],
            'greeting': ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä—ã–π', 'hi', 'hello'],
            'thanks': ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'thanks', 'thank you'],
            'meta': ['–∫–∞–∫ —Ç—ã', '—á—Ç–æ —Ç—ã', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–∫–∞–∫ –¥—É–º–∞–µ—à—å', '–∫–∞–∫ –ø–æ–Ω–∏–º–∞–µ—à—å']
        }
        
        for intent, keywords in intent_keywords.items():
            if any(keyword in message_lower for keyword in keywords):
                return intent
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if context.message_history:
            last_message = context.message_history[-1]
            if '?' in last_message.get('content', ''):
                return 'follow_up'
        
        return 'statement'

    def extract_context_keywords(self, message: str, context: ConversationContext) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
        technical_terms = [
            'arduino', 'python', 'javascript', 'html', 'css', 'sql', 'api',
            '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
            'plc', '—Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥', '–¥–∞—Ç—á–∏–∫', '–º–æ—Ç–æ—Ä', '—Å—Ö–µ–º–∞', '–∫–æ–¥'
        ]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
        keywords = []
        message_lower = message.lower()
        
        for term in technical_terms:
            if term in message_lower:
                keywords.append(term)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        keywords.extend(context.context_keywords[-3:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞
        
        return list(set(keywords))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

    def determine_conversation_mood(self, message: str, context: ConversationContext) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""
        message_lower = message.lower()
        
        # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        positive_words = ['—Å–ø–∞—Å–∏–±–æ', '–æ—Ç–ª–∏—á–Ω–æ', '—Ö–æ—Ä–æ—à–æ', '–ø–æ–Ω—è—Ç–Ω–æ', '–ø–æ–º–æ–≥–ª–æ', '–∫–ª–∞—Å—Å–Ω–æ']
        if any(word in message_lower for word in positive_words):
            return 'positive'
        
        # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        negative_words = ['–ø–ª–æ—Ö–æ', '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ', '–æ—à–∏–±–∫–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–Ω–µ –ø–æ–Ω—è–ª', '–ø—Ä–æ–±–ª–µ–º–∞']
        if any(word in message_lower for word in negative_words):
            return 'negative'
        
        # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        neutral_words = ['–∫–∞–∫', '—á—Ç–æ', '–æ–±—ä—è—Å–Ω–∏', '–ø–æ–∫–∞–∂–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏']
        if any(word in message_lower for word in neutral_words):
            return 'neutral'
        
        return context.conversation_mood  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ

    def generate_contextual_response(self, message: str, user_id: str, session_id: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = self.get_conversation_context(user_id, session_id)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_intent = self.analyze_user_intent(message, context)
            context_keywords = self.extract_context_keywords(message, context)
            conversation_mood = self.determine_conversation_mood(message, context)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_intent = user_intent
            context.context_keywords = context_keywords
            context.conversation_mood = conversation_mood
            context.last_interaction = datetime.now()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            context.message_history.append({
                'type': 'user',
                'content': message,
                'timestamp': datetime.now().isoformat(),
                'intent': user_intent,
                'keywords': context_keywords
            })
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = self._generate_adaptive_response(message, context)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            context.message_history.append({
                'type': 'assistant',
                'content': response,
                'timestamp': datetime.now().isoformat(),
                'intent': user_intent,
                'keywords': context_keywords
            })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self._save_conversation_context(context)
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."

    def _generate_adaptive_response(self, message: str, context: ConversationContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–∞-–≤–æ–ø—Ä–æ—Å–æ–≤
        if context.user_intent == 'meta':
            return self._handle_meta_question(message, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
        if context.user_intent == 'greeting':
            return self._handle_greeting(message, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π
        if context.user_intent == 'thanks':
            return self._handle_thanks(message, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–ª–æ–±
        if context.user_intent == 'complaint':
            return self._handle_complaint(message, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        if any(keyword in context.context_keywords for keyword in ['arduino', 'python', '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞']):
            return self._handle_technical_question(message, context)
        
        # –û–±—â–∏–π –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        return self._handle_general_question(message, context)

    def _handle_meta_question(self, message: str, context: ConversationContext) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–∞-–≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º –º—ã—à–ª–µ–Ω–∏–∏"""
        message_lower = message.lower()
        
        if '–∫–∞–∫ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å' in message_lower:
            return f"""üß† **–ö–∞–∫ —è –ø–æ–Ω–∏–º–∞—é –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:**

**–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–Ω–∏–º–∞–Ω–∏—è:**
1. **–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤** - –∏–∑–≤–ª–µ–∫–∞—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
2. **–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π** - –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ (–≤–æ–ø—Ä–æ—Å, –ø—Ä–æ—Å—å–±–∞, –∂–∞–ª–æ–±–∞)
3. **–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑** - —É—á–∏—Ç—ã–≤–∞—é –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ
4. **–ê–¥–∞–ø—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞** - –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—é—Å—å –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è

**–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞:**
- –¢–µ–º–∞: {context.current_topic}
- –í–∞—à–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: {context.user_intent}
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞: {context.conversation_mood}
- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(context.context_keywords[:5])}

**–ö–∞–∫ —è –∞–¥–∞–ø—Ç–∏—Ä—É—é—Å—å:**
- –£—á–∏—Ç—ã–≤–∞—é –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –æ–±—â–µ–Ω–∏–∏
- –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—é—Å—å –ø–æ–¥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
- –ü–æ–º–Ω—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
- –ì–µ–Ω–µ—Ä–∏—Ä—É—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –∞ –Ω–µ —à–∞–±–ª–æ–Ω—ã"""

        elif '–∫–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å' in message_lower:
            return f"""ü§î **–ö–∞–∫ —è —Ä–∞–∑–º—ã—à–ª—è—é:**

**–ü—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è:**
1. **–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏** - –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
2. **–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ** - —Å–≤—è–∑—ã–≤–∞—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –∏ –æ–ø—ã—Ç–æ–º
3. **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π** - —Å–æ–∑–¥–∞—é –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
4. **–í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ** - –≤—ã–±–∏—Ä–∞—é –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç

**–¢–µ–∫—É—â–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è:**
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é: {message[:50]}...
- –°–≤—è–∑—ã–≤–∞—é —Å —Ç–µ–º–æ–π: {context.current_topic}
- –£—á–∏—Ç—ã–≤–∞—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {context.conversation_mood}
- –ê–¥–∞–ø—Ç–∏—Ä—É—é –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å: {context.technical_level}

**–û—Ç–ª–∏—á–∏–µ –æ—Ç —à–∞–±–ª–æ–Ω–æ–≤:**
- –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç —É–Ω–∏–∫–∞–ª–µ–Ω
- –£—á–∏—Ç—ã–≤–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
- –ê–¥–∞–ø—Ç–∏—Ä—É—é—Å—å –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
- –ü–æ–º–Ω—é –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""

        elif '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç' in message_lower:
            return f"""‚öôÔ∏è **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–æ—è —Å–∏—Å—Ç–µ–º–∞:**

**–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:**
1. **–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ** - –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
2. **–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è** - —Å–æ–∑–¥–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
3. **–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π** - –∑–∞–ø–æ–º–∏–Ω–∞—é –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
4. **–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã** - –æ–±–Ω–æ–≤–ª—è—é—Å—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞

**–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è:**
- –°–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ: {len(context.message_history)}
- –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: {datetime.now() - context.last_interaction}
- –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã: {', '.join(context.context_keywords[:3])}

**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:**
- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
- –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""

        else:
            return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –º–æ–µ–º –º—ã—à–ª–µ–Ω–∏–∏! –ú–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"

    def _handle_greeting(self, message: str, context: ConversationContext) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        greetings = [
            f"–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Å–Ω–æ–≤–∞ —Å –≤–∞–º–∏ –ø–æ–æ–±—â–∞—Ç—å—Å—è. {self._get_contextual_greeting(context)}",
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à –¥–∏–∞–ª–æ–≥. {self._get_contextual_greeting(context)}",
            f"–ü—Ä–∏–≤–µ—Ç! –ü–æ–º–Ω—é, –º—ã –æ–±—Å—É–∂–¥–∞–ª–∏ {context.current_topic}. {self._get_contextual_greeting(context)}"
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if context.message_history:
            return greetings[1]  # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        else:
            return greetings[0]  # –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥

    def _get_contextual_greeting(self, context: ConversationContext) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        if context.context_keywords:
            topics = ', '.join(context.context_keywords[:2])
            return f"–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å {topics}."
        else:
            return "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"

    def _handle_thanks(self, message: str, context: ConversationContext) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π"""
        responses = [
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥, —á—Ç–æ —Å–º–æ–≥ –ø–æ–º–æ—á—å.",
            "–ù–µ –∑–∞ —á—Ç–æ! –í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å.",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ —É–ª—É—á—à–∞—Ç—å—Å—è."
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        if context.conversation_mood == 'positive':
            return responses[0]
        else:
            return responses[1]

    def _handle_complaint(self, message: str, context: ConversationContext) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–ª–æ–± –∏ –ø—Ä–æ–±–ª–µ–º"""
        return f"""–ü–æ–Ω–∏–º–∞—é –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –≤–º–µ—Å—Ç–µ.

**–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã:**
- –°–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}...
- –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context.current_topic}
- –ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ–º—ã: {', '.join(context.context_keywords[:3])}

**–ü—Ä–µ–¥–ª–∞–≥–∞—é:**
1. –î–µ—Ç–∞–ª—å–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É
2. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
3. –£—á–µ—Å—Ç—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π: {context.technical_level}

–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∏ —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ."""

    def _handle_technical_question(self, message: str, context: ConversationContext) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –æ–±–ª–∞—Å—Ç—å
        if 'arduino' in context.context_keywords:
            return self._handle_arduino_question(message, context)
        elif 'python' in context.context_keywords:
            return self._handle_python_question(message, context)
        elif '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞' in context.context_keywords:
            return self._handle_electrical_question(message, context)
        else:
            return self._handle_general_technical_question(message, context)

    def _handle_arduino_question(self, message: str, context: ConversationContext) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ Arduino"""
        return f"""üîß **Arduino - –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:**

**–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:**
- –°–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}...
- –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {context.technical_level}
- –ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ–º—ã: {', '.join(context.context_keywords[:3])}

**–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ä–µ—à–µ–Ω–∏–µ:**
1. **–ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏** - –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å –æ—Å–Ω–æ–≤
2. **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã** - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –∫–æ–¥
3. **–û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º** - —Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
4. **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏** - –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

**–£—á–∏—Ç—ã–≤–∞—è –≤–∞—à —É—Ä–æ–≤–µ–Ω—å ({context.technical_level}):**
- –ê–¥–∞–ø—Ç–∏—Ä—É—é –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–æ–¥ –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞
- –û–±—ä—è—Å–Ω—é –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã

–û–ø–∏—à–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É, –∏ —è –¥–∞–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞."""

    def _handle_python_question(self, message: str, context: ConversationContext) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ Python"""
        return f"""üêç **Python - –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:**

**–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:**
- –í–∞—à –≤–æ–ø—Ä–æ—Å: {message[:100]}...
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å: {context.technical_level}
- –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: {context.conversation_mood}

**–ü—Ä–µ–¥–ª–∞–≥–∞—é:**
1. **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π** - —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞
2. **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è** - –≥–æ—Ç–æ–≤—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
3. **–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏** - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é –∫–æ–¥–∞
4. **–û—Ç–ª–∞–¥–∫–∞** - —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∏ –æ—à–∏–±–æ–∫

**–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å:**
- –£—á–∏—Ç—ã–≤–∞—é –≤–∞—à –æ–ø—ã—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
- –ü–æ–¥–±–∏—Ä–∞—é –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã
- –û–±—ä—è—Å–Ω—è—é —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º

–û–ø–∏—à–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç."""

    def _handle_electrical_question(self, message: str, context: ConversationContext) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ"""
        return f"""‚ö° **–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ - –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:**

**–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:**
- –°–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}...
- –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞: {context.current_topic}
- –ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: {', '.join(context.context_keywords[:3])}

**–ü—Ä–µ–¥–ª–∞–≥–∞—é:**
1. **–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã** - –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã
2. **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã** - —Ñ–æ—Ä–º—É–ª—ã –∏ –ø—Ä–∏–º–µ—Ä—ã
3. **–°—Ö–µ–º—ã –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã** - –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
4. **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å** - –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã

**–£—á–∏—Ç—ã–≤–∞—è –≤–∞—à —É—Ä–æ–≤–µ–Ω—å ({context.technical_level}):**
- –ê–¥–∞–ø—Ç–∏—Ä—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
- –û–±—ä—è—Å–Ω—é —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã

–û–ø–∏—à–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É, –∏ —è –¥–∞–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞."""

    def _handle_general_technical_question(self, message: str, context: ConversationContext) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        return f"""üîß **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å - –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:**

**–ê–Ω–∞–ª–∏–∑:**
- –í–∞—à –≤–æ–ø—Ä–æ—Å: {message[:100]}...
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å: {', '.join(context.context_keywords[:3])}
- –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {context.technical_level}

**–ü—Ä–µ–¥–ª–∞–≥–∞—é:**
1. **–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ** - —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
2. **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è** - –≥–æ—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
3. **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã** - –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–∏—è
4. **–°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã** - –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π

**–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è:**
- –£—á–∏—Ç—ã–≤–∞—é –≤–∞—à —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
- –ê–¥–∞–ø—Ç–∏—Ä—É—é –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π
- –ü–æ–º–Ω—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞

–û–ø–∏—à–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç."""

    def _handle_general_question(self, message: str, context: ConversationContext) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        return f"""üí≠ **–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å - –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:**

**–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:**
- –í–∞—à –≤–æ–ø—Ä–æ—Å: {message[:100]}...
- –ù–∞–º–µ—Ä–µ–Ω–∏–µ: {context.user_intent}
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞: {context.conversation_mood}
- –ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ–º—ã: {', '.join(context.context_keywords[:3])}

**–ü—Ä–µ–¥–ª–∞–≥–∞—é:**
1. **–†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç** - —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
2. **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã** - –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
3. **–°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã** - –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
4. **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã** - –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ

**–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è:**
- –£—á–∏—Ç—ã–≤–∞—é –≤–∞—à —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
- –ü–æ–º–Ω—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞
- –ê–¥–∞–ø—Ç–∏—Ä—É—é –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏

–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ —è –¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç."""

    def _save_conversation_context(self, context: ConversationContext):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            cursor = self.connection.cursor()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            context_data = {
                'user_id': context.user_id,
                'session_id': context.session_id,
                'message_history': context.message_history,
                'current_topic': context.current_topic,
                'user_intent': context.user_intent,
                'conversation_mood': context.conversation_mood,
                'technical_level': context.technical_level,
                'last_interaction': context.last_interaction.isoformat(),
                'context_keywords': context.context_keywords,
                'user_preferences': context.user_preferences
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            cursor.execute("""
                SELECT id FROM conversation_contexts 
                WHERE user_id = ? AND session_id = ?
            """, (context.user_id, context.session_id))
            
            existing = cursor.fetchone()
            
            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                cursor.execute("""
                    UPDATE conversation_contexts 
                    SET context_data = ?, updated_at = CURRENT_TIMESTAMP
                    WHERE user_id = ? AND session_id = ?
                """, (json.dumps(context_data), context.user_id, context.session_id))
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                cursor.execute("""
                    INSERT INTO conversation_contexts (user_id, session_id, context_data)
                    VALUES (?, ?, ?)
                """, (context.user_id, context.session_id, json.dumps(context_data)))
            
            self.connection.commit()
            logger.info(f"üíæ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è {context.user_id}_{context.session_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")

    def get_conversation_summary(self, user_id: str, session_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            context = self.get_conversation_context(user_id, session_id)
            
            return {
                'user_id': user_id,
                'session_id': session_id,
                'message_count': len(context.message_history),
                'current_topic': context.current_topic,
                'user_intent': context.user_intent,
                'conversation_mood': context.conversation_mood,
                'technical_level': context.technical_level,
                'context_keywords': context.context_keywords,
                'last_interaction': context.last_interaction.isoformat(),
                'conversation_duration': str(datetime.now() - context.last_interaction)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
            return {}

    def cleanup_old_contexts(self, days: int = 7):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤"""
        try:
            cursor = self.connection.cursor()
            cutoff_date = datetime.now() - timedelta(days=days)
            
            cursor.execute("""
                DELETE FROM conversation_contexts 
                WHERE updated_at < ?
            """, (cutoff_date.isoformat(),))
            
            deleted_count = cursor.rowcount
            self.connection.commit()
            
            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤")
            return deleted_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤: {e}")
            return 0

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Context-Aware Rubin AI
context_aware_rubin = ContextAwareRubinAI()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    print("üß† Context-Aware Rubin AI - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
    test_messages = [
        "–ü—Ä–∏–≤–µ—Ç!",
        "–ö–∞–∫ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è?",
        "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ Arduino",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!"
    ]
    
    user_id = "test_user"
    session_id = "test_session"
    
    for message in test_messages:
        print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}")
        response = context_aware_rubin.generate_contextual_response(message, user_id, session_id)
        print(f"ü§ñ Rubin: {response}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –¥–∏–∞–ª–æ–≥–∞
    summary = context_aware_rubin.get_conversation_summary(user_id, session_id)
    print(f"\nüìä –°–≤–æ–¥–∫–∞ –¥–∏–∞–ª–æ–≥–∞: {json.dumps(summary, indent=2, ensure_ascii=False)}")





