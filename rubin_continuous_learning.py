#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üß† –°–ò–°–¢–ï–ú–ê –ü–û–°–¢–û–Ø–ù–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø RUBIN AI
========================================
–°–∫–∞–Ω–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏ –æ–±—É—á–∞–µ–º Rubin AI –ø—Ä–æ—Ü–µ—Å—Å–∞–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏
"""

import requests
import json
import time
import os
import logging
from datetime import datetime
from typing import Dict, List, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class RubinLearningScanner:
    """–°–∫–∞–Ω–µ—Ä –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è Rubin AI"""
    
    def __init__(self):
        self.learning_log = []
        self.interaction_patterns = {}
        self.error_resolution_patterns = {}
        self.modernization_patterns = {}
        self.smart_dispatcher_url = "http://localhost:8080/api/chat"
        
    def scan_interaction(self, user_message: str, assistant_response: str, context: Dict[str, Any]):
        """–°–∫–∞–Ω–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        interaction = {
            "timestamp": datetime.now().isoformat(),
            "user_message": user_message,
            "assistant_response": assistant_response,
            "context": context,
            "patterns": self._extract_patterns(user_message, assistant_response)
        }
        
        self.learning_log.append(interaction)
        self._analyze_patterns(interaction)
        
        return interaction
    
    def _extract_patterns(self, user_message: str, assistant_response: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        patterns = {
            "error_diagnosis": self._detect_error_diagnosis_pattern(user_message, assistant_response),
            "error_fixing": self._detect_error_fixing_pattern(user_message, assistant_response),
            "modernization": self._detect_modernization_pattern(user_message, assistant_response),
            "learning_process": self._detect_learning_process_pattern(user_message, assistant_response),
            "communication_style": self._detect_communication_style_pattern(user_message, assistant_response)
        }
        
        return patterns
    
    def _detect_error_diagnosis_pattern(self, user_message: str, assistant_response: str) -> Dict[str, Any]:
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"""
        error_keywords = ["–æ—à–∏–±–∫–∞", "error", "–ø—Ä–æ–±–ª–µ–º–∞", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "HTTP 500", "fallback"]
        diagnosis_keywords = ["–∞–Ω–∞–ª–∏–∑", "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–ø—Ä–æ–≤–µ—Ä–∫–∞", "—Å—Ç–∞—Ç—É—Å", "–ª–æ–≥", "–ø—Ä–∏—á–∏–Ω–∞"]
        
        user_lower = user_message.lower()
        response_lower = assistant_response.lower()
        
        has_error = any(keyword in user_lower for keyword in error_keywords)
        has_diagnosis = any(keyword in response_lower for keyword in diagnosis_keywords)
        
        if has_error and has_diagnosis:
            return {
                "detected": True,
                "error_type": self._classify_error_type(user_message),
                "diagnosis_method": self._extract_diagnosis_method(assistant_response),
                "tools_used": self._extract_tools_used(assistant_response)
            }
        
        return {"detected": False}
    
    def _detect_error_fixing_pattern(self, user_message: str, assistant_response: str) -> Dict[str, Any]:
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫"""
        fixing_keywords = ["–∏—Å–ø—Ä–∞–≤–∏—Ç—å", "fix", "—Ä–µ—à–∏—Ç—å", "—É—Å—Ç—Ä–∞–Ω–∏—Ç—å", "–æ–±–Ω–æ–≤–∏—Ç—å", "–º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å"]
        solution_keywords = ["—Ä–µ—à–µ–Ω–∏–µ", "solution", "fallback", "–º–µ—Ö–∞–Ω–∏–∑–º", "–æ–±—Ö–æ–¥"]
        
        user_lower = user_message.lower()
        response_lower = assistant_response.lower()
        
        has_fixing = any(keyword in user_lower for keyword in fixing_keywords)
        has_solution = any(keyword in response_lower for keyword in solution_keywords)
        
        if has_fixing and has_solution:
            return {
                "detected": True,
                "fix_type": self._classify_fix_type(user_message),
                "solution_approach": self._extract_solution_approach(assistant_response),
                "implementation": self._extract_implementation(assistant_response)
            }
        
        return {"detected": False}
    
    def _detect_modernization_pattern(self, user_message: str, assistant_response: str) -> Dict[str, Any]:
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏"""
        modern_keywords = ["–º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å", "—É–ª—É—á—à–∏—Ç—å", "–æ–±–Ω–æ–≤–∏—Ç—å", "—Ä–∞—Å—à–∏—Ä–∏—Ç—å", "–¥–æ–±–∞–≤–∏—Ç—å", "–ø–∞—Ç—Ç–µ—Ä–Ω"]
        architecture_keywords = ["–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "–ø–∞—Ç—Ç–µ—Ä–Ω", "design pattern", "singleton", "observer", "factory"]
        
        user_lower = user_message.lower()
        response_lower = assistant_response.lower()
        
        has_modern = any(keyword in user_lower for keyword in modern_keywords)
        has_architecture = any(keyword in response_lower for keyword in architecture_keywords)
        
        if has_modern and has_architecture:
            return {
                "detected": True,
                "modernization_type": self._classify_modernization_type(user_message),
                "patterns_used": self._extract_patterns_used(assistant_response),
                "improvements": self._extract_improvements(assistant_response)
            }
        
        return {"detected": False}
    
    def _detect_learning_process_pattern(self, user_message: str, assistant_response: str) -> Dict[str, Any]:
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è"""
        learning_keywords = ["–æ–±—É—á–∏—Ç—å", "–Ω–∞—É—á–∏—Ç—å", "–æ–±—É—á–µ–Ω–∏–µ", "–ø–æ–Ω–∏–º–∞–Ω–∏–µ", "–∏–∑—É—á–µ–Ω–∏–µ", "—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"]
        teaching_keywords = ["—É—Ä–æ–∫", "–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è", "–ø—Ä–∏–º–µ—Ä", "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ", "–ø–æ–∫–∞–∑"]
        
        user_lower = user_message.lower()
        response_lower = assistant_response.lower()
        
        has_learning = any(keyword in user_lower for keyword in learning_keywords)
        has_teaching = any(keyword in response_lower for keyword in teaching_keywords)
        
        if has_learning and has_teaching:
            return {
                "detected": True,
                "learning_type": self._classify_learning_type(user_message),
                "teaching_method": self._extract_teaching_method(assistant_response),
                "knowledge_transfer": self._extract_knowledge_transfer(assistant_response)
            }
        
        return {"detected": False}
    
    def _detect_communication_style_pattern(self, user_message: str, assistant_response: str) -> Dict[str, Any]:
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è"""
        return {
            "user_tone": self._analyze_tone(user_message),
            "assistant_tone": self._analyze_tone(assistant_response),
            "formality_level": self._analyze_formality(user_message, assistant_response),
            "technical_depth": self._analyze_technical_depth(user_message, assistant_response)
        }
    
    def _classify_error_type(self, message: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏"""
        if "HTTP 500" in message or "500" in message:
            return "HTTP_500"
        elif "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ" in message.lower() or "connection" in message.lower():
            return "CONNECTION_ERROR"
        elif "plc" in message.lower():
            return "PLC_ERROR"
        elif "—Å–µ—Ä–≤–µ—Ä" in message.lower() or "server" in message.lower():
            return "SERVER_ERROR"
        else:
            return "GENERAL_ERROR"
    
    def _classify_fix_type(self, message: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–∏–ø –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        if "fallback" in message.lower():
            return "FALLBACK_MECHANISM"
        elif "–æ–±–Ω–æ–≤–∏—Ç—å" in message.lower() or "update" in message.lower():
            return "UPDATE"
        elif "–º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å" in message.lower():
            return "MODERNIZATION"
        else:
            return "GENERAL_FIX"
    
    def _classify_modernization_type(self, message: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–∏–ø –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏"""
        if "–ø–∞—Ç—Ç–µ—Ä–Ω" in message.lower() or "pattern" in message.lower():
            return "DESIGN_PATTERNS"
        elif "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞" in message.lower() or "architecture" in message.lower():
            return "ARCHITECTURE"
        elif "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å" in message.lower():
            return "FUNCTIONALITY"
        else:
            return "GENERAL_MODERNIZATION"
    
    def _classify_learning_type(self, message: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è"""
        if "–ø–æ—Å—Ç–æ—è–Ω–Ω–æ" in message.lower() or "—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" in message.lower():
            return "CONTINUOUS_LEARNING"
        elif "–æ—à–∏–±–∫–∏" in message.lower() or "error" in message.lower():
            return "ERROR_HANDLING_LEARNING"
        elif "–º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è" in message.lower():
            return "MODERNIZATION_LEARNING"
        else:
            return "GENERAL_LEARNING"
    
    def _extract_diagnosis_method(self, response: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        methods = []
        if "–∞–Ω–∞–ª–∏–∑" in response.lower():
            methods.append("ANALYSIS")
        if "–ø—Ä–æ–≤–µ—Ä–∫–∞" in response.lower():
            methods.append("CHECKING")
        if "–ª–æ–≥" in response.lower():
            methods.append("LOGGING")
        if "—Å—Ç–∞—Ç—É—Å" in response.lower():
            methods.append("STATUS_CHECK")
        return methods
    
    def _extract_tools_used(self, response: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        tools = []
        if "python" in response.lower():
            tools.append("PYTHON")
        if "requests" in response.lower():
            tools.append("REQUESTS")
        if "curl" in response.lower():
            tools.append("CURL")
        if "smart_dispatcher" in response.lower():
            tools.append("SMART_DISPATCHER")
        return tools
    
    def _extract_solution_approach(self, response: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é"""
        if "fallback" in response.lower():
            return "FALLBACK_APPROACH"
        elif "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ" in response.lower():
            return "UPDATE_APPROACH"
        elif "–º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è" in response.lower():
            return "MODERNIZATION_APPROACH"
        else:
            return "GENERAL_APPROACH"
    
    def _extract_implementation(self, response: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"""
        implementation = []
        if "–∫–æ–¥" in response.lower():
            implementation.append("CODE_IMPLEMENTATION")
        if "—Å–∫—Ä–∏–ø—Ç" in response.lower():
            implementation.append("SCRIPT_CREATION")
        if "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" in response.lower():
            implementation.append("TESTING")
        return implementation
    
    def _extract_patterns_used(self, response: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
        patterns = []
        if "singleton" in response.lower():
            patterns.append("SINGLETON")
        if "observer" in response.lower():
            patterns.append("OBSERVER")
        if "factory" in response.lower():
            patterns.append("FACTORY")
        if "strategy" in response.lower():
            patterns.append("STRATEGY")
        if "command" in response.lower():
            patterns.append("COMMAND")
        return patterns
    
    def _extract_improvements(self, response: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è"""
        improvements = []
        if "—Å–ª–æ–∂–Ω–æ—Å—Ç—å" in response.lower():
            improvements.append("COMPLEXITY_REDUCTION")
        if "—Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å" in response.lower():
            improvements.append("COUPLING_REDUCTION")
        if "—Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å" in response.lower():
            improvements.append("TESTABILITY_INCREASE")
        if "–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å" in response.lower():
            improvements.append("RELIABILITY_INCREASE")
        return improvements
    
    def _extract_teaching_method(self, response: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã –æ–±—É—á–µ–Ω–∏—è"""
        methods = []
        if "–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è" in response.lower():
            methods.append("DEMONSTRATION")
        if "–ø—Ä–∏–º–µ—Ä" in response.lower():
            methods.append("EXAMPLE")
        if "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ" in response.lower():
            methods.append("EXPLANATION")
        if "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" in response.lower():
            methods.append("TESTING")
        return methods
    
    def _extract_knowledge_transfer(self, response: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É –∑–Ω–∞–Ω–∏–π"""
        transfer = []
        if "–ø–æ–Ω–∏–º–∞–Ω–∏–µ" in response.lower():
            transfer.append("UNDERSTANDING")
        if "–∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ" in response.lower():
            transfer.append("MEMORIZATION")
        if "–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ" in response.lower():
            transfer.append("APPLICATION")
        return transfer
    
    def _analyze_tone(self, text: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if "!" in text or "üéâ" in text or "‚úÖ" in text:
            return "POSITIVE"
        elif "‚ùå" in text or "–æ—à–∏–±–∫–∞" in text.lower():
            return "NEGATIVE"
        else:
            return "NEUTRAL"
    
    def _analyze_formality(self, user_msg: str, assistant_msg: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ä–æ–≤–µ–Ω—å —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏"""
        if "—Ç—ã" in user_msg.lower() and "–º—ã" in assistant_msg.lower():
            return "INFORMAL"
        else:
            return "FORMAL"
    
    def _analyze_technical_depth(self, user_msg: str, assistant_msg: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –≥–ª—É–±–∏–Ω—É"""
        technical_terms = ["API", "HTTP", "—Å–µ—Ä–≤–µ—Ä", "–∫–æ–¥", "–∞–ª–≥–æ—Ä–∏—Ç–º", "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"]
        user_tech = sum(1 for term in technical_terms if term.lower() in user_msg.lower())
        assistant_tech = sum(1 for term in technical_terms if term.lower() in assistant_msg.lower())
        
        if user_tech + assistant_tech > 3:
            return "HIGH"
        elif user_tech + assistant_tech > 1:
            return "MEDIUM"
        else:
            return "LOW"
    
    def _analyze_patterns(self, interaction: Dict[str, Any]):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        patterns = interaction["patterns"]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        for pattern_type, pattern_data in patterns.items():
            if pattern_data.get("detected"):
                if pattern_type not in self.interaction_patterns:
                    self.interaction_patterns[pattern_type] = []
                self.interaction_patterns[pattern_type].append(pattern_data)
    
    def teach_rubin_continuous_learning(self):
        """–û–±—É—á–∞–µ–º Rubin AI –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é"""
        print("üß† –û–ë–£–ß–ï–ù–ò–ï RUBIN AI –ü–û–°–¢–û–Ø–ù–ù–û–ú–£ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Æ")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Smart Dispatcher
        try:
            response = requests.get('http://localhost:8080/api/health')
            if response.status_code == 200:
                print("‚úÖ Smart Dispatcher –ø–æ–¥–∫–ª—é—á–µ–Ω")
            else:
                print(f"‚ùå Smart Dispatcher –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
                return
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Smart Dispatcher: {e}")
            return
        
        # –£—Ä–æ–∫–∏ –¥–ª—è Rubin AI –æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏
        lessons = [
            {
                "title": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "message": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: –ü—Ä–∏–≤–µ—Ç Rubin! –ú—ã —Å–æ–∑–¥–∞–ª–∏ —Å–∏—Å—Ç–µ–º—É –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∏–∑—É—á–∞—Ç—å, –∫–∞–∫ –º—ã —Å —Ç–æ–±–æ–π –æ–±—â–∞–µ–º—Å—è, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –∏ –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É. –û–±—ä—è—Å–Ω–∏, –∫–∞–∫ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã.",
                "expected": "Rubin –¥–æ–ª–∂–µ–Ω –ø–æ–Ω—è—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"
            },
            {
                "title": "–ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫",
                "message": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: –ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫. –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–≥–¥–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç HTTP 500 –æ—à–∏–±–∫–∞, –º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤, —Å–æ–∑–¥–∞–µ–º fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã. –ö–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã?",
                "expected": "Rubin –¥–æ–ª–∂–µ–Ω –ø–æ–Ω—è—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
            },
            {
                "title": "–ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫",
                "message": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: –ú—ã —Å–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫. –ö–æ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º—É, –º—ã —Å–æ–∑–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –µ–≥–æ, –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ö–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–º–µ–Ω—è—Ç—å —ç—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫?",
                "expected": "Rubin –¥–æ–ª–∂–µ–Ω –ø–æ–Ω—è—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            },
            {
                "title": "–ü–∞—Ç—Ç–µ—Ä–Ω—ã –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏",
                "message": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: –ú—ã —Å–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã. –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —É–ª—É—á—à–∞–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É, —Ä–∞—Å—à–∏—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å. –ö–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π?",
                "expected": "Rubin –¥–æ–ª–∂–µ–Ω –ø–æ–Ω—è—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏"
            },
            {
                "title": "–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è",
                "message": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: –ú—ã —Å–∫–∞–Ω–∏—Ä—É–µ–º —Å—Ç–∏–ª—å –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è - –∫–∞–∫ –º—ã –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã, –∫–∞–∫ —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å, –∫–∞–∫ –º—ã —Ä–µ—à–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤–º–µ—Å—Ç–µ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. –ö–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?",
                "expected": "Rubin –¥–æ–ª–∂–µ–Ω –ø–æ–Ω—è—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è"
            }
        ]
        
        for i, lesson in enumerate(lessons, 1):
            print(f"\nüìö –£–†–û–ö {i}: {lesson['title']}")
            print("-" * 50)
            print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {lesson['message']}")
            
            try:
                response = requests.post('http://localhost:8080/api/chat', 
                                      json={'message': lesson['message']})
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('success'):
                        explanation = data['response'].get('explanation', data['response'].get('response', '–ù–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è'))
                        print(f"\nü§ñ –û–¢–í–ï–¢ RUBIN AI:")
                        print(f"üìã {explanation[:400]}..." if len(explanation) > 400 else f"üìã {explanation}")
                        
                        # –°–∫–∞–Ω–∏—Ä—É–µ–º —ç—Ç–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
                        self.scan_interaction(lesson['message'], explanation, {
                            "lesson_number": i,
                            "lesson_title": lesson['title'],
                            "expected_outcome": lesson['expected']
                        })
                        
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ Rubin AI")
                else:
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            
            time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —É—Ä–æ–∫–∞–º–∏
    
    def generate_learning_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± –æ–±—É—á–µ–Ω–∏–∏"""
        print("\nüìä –û–¢–ß–ï–¢ –û –ü–û–°–¢–û–Ø–ù–ù–û–ú –û–ë–£–ß–ï–ù–ò–ò:")
        print("=" * 40)
        
        total_interactions = len(self.learning_log)
        print(f"üìà –í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {total_interactions}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for pattern_type, patterns in self.interaction_patterns.items():
            print(f"\nüîç {pattern_type.upper()}:")
            print(f"  üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(patterns)}")
            
            if pattern_type == "error_diagnosis":
                error_types = [p.get("error_type") for p in patterns if p.get("error_type")]
                print(f"  üö® –¢–∏–ø—ã –æ—à–∏–±–æ–∫: {set(error_types)}")
                
            elif pattern_type == "error_fixing":
                fix_types = [p.get("fix_type") for p in patterns if p.get("fix_type")]
                print(f"  üîß –¢–∏–ø—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {set(fix_types)}")
                
            elif pattern_type == "modernization":
                modern_types = [p.get("modernization_type") for p in patterns if p.get("modernization_type")]
                print(f"  üöÄ –¢–∏–ø—ã –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏: {set(modern_types)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report = {
            "timestamp": datetime.now().isoformat(),
            "total_interactions": total_interactions,
            "patterns": self.interaction_patterns,
            "learning_log": self.learning_log
        }
        
        try:
            with open('RUBIN_CONTINUOUS_LEARNING_REPORT.json', 'w', encoding='utf-8') as f:
                json.dump(report, f, ensure_ascii=False, indent=2)
            print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: RUBIN_CONTINUOUS_LEARNING_REPORT.json")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
    print("üß† –°–ò–°–¢–ï–ú–ê –ü–û–°–¢–û–Ø–ù–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø RUBIN AI")
    print("=" * 70)
    print("–¶–µ–ª—å: –ù–∞—É—á–∏—Ç—å Rubin AI –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ –∏–∑—É—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫–∞–Ω–µ—Ä
    scanner = RubinLearningScanner()
    
    # –û–±—É—á–∞–µ–º Rubin AI
    scanner.teach_rubin_continuous_learning()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    scanner.generate_learning_report()
    
    print("\nüéâ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 40)
    print("‚úÖ Rubin AI –æ–±—É—á–µ–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é")
    print("üìä –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
    print("üß† Rubin AI –±—É–¥–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∏–∑—É—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏")

if __name__ == "__main__":
    main()










