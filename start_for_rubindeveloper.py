#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Quick Start All Servers for RubinDeveloper Testing
–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ RubinDeveloper
"""

import subprocess
import time
import os
import sys
from datetime import datetime

def start_server(server_name, command, port):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    try:
        print(f"üöÄ –ó–∞–ø—É—Å–∫ {server_name} –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(command.split()[1]):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {command.split()[1]}")
            return None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        process = subprocess.Popen(
            command,
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        
        # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        time.sleep(1)
        
        print(f"‚úÖ {server_name} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
        return process
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {server_name}: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéõÔ∏è RubinDeveloper - –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è RubinDeveloper
    servers = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        ("Smart Dispatcher", "python smart_dispatcher.py", 8080),
        ("General API", "python api/general_api.py", 8085),
        ("Mathematics Server", "python math_server.py", 8086),
        ("Electrical API", "python api/electrical_api.py", 8087),
        ("Programming API", "python api/programming_api.py", 8088),
        ("Radiomechanics API", "python api/radiomechanics_api.py", 8089),
        ("Neural Network API", "python neuro_server.py", 8090),
        ("Controllers API", "python api/controllers_api.py", 9000),
        
        # –ù–æ–≤—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        ("PLC Analysis API", "python plc_analysis_api_server.py", 8099),
        ("Advanced Math API", "python advanced_math_api_server.py", 8100),
        ("Data Processing API", "python data_processing_api_server.py", 8101),
        ("Search Engine API", "python search_engine_api_server.py", 8102),
        ("System Utils API", "python system_utils_api_server.py", 8103),
        ("GAI Server", "python enhanced_gai_server.py", 8104),
        ("Unified Manager", "python unified_system_manager.py", 8084)
    ]
    
    running_processes = []
    
    print(f"–í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞: {len(servers)}")
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã
    for i, (name, command, port) in enumerate(servers, 1):
        print(f"[{i}/{len(servers)}] {name}")
        process = start_server(name, command, port)
        if process:
            running_processes.append((name, process, port))
        print()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 60)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ: {len(running_processes)}")
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å: {len(servers) - len(running_processes)}")
    
    if running_processes:
        print("\nüü¢ –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:")
        for name, process, port in running_processes:
            print(f"  - {name} (–ø–æ—Ä—Ç {port})")
    
    print("\nüåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:")
    print("  - RubinDeveloper: http://localhost:8080/matrix/RubinDeveloper.html")
    print("  - Unified System Manager: http://localhost:8084")
    print("  - Smart Dispatcher: http://localhost:8080")
    
    print("\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ RubinDeveloper:")
    print("  1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8080/matrix/RubinDeveloper.html")
    print("  2. –ù–∞–∂–º–∏—Ç–µ 'üîå –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ API –º–æ–¥—É–ª–∏'")
    print("  3. –í—Å–µ –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ –û–ù–õ–ê–ô–ù")
    
    print("\n" + "=" * 60)
    print("üéâ –ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ RubinDeveloper!")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 60)
    
    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    try:
        while True:
            time.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
            active_processes = []
            for name, process, port in running_processes:
                if process.poll() is None:
                    active_processes.append((name, process, port))
                else:
                    print(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
            
            running_processes = active_processes
            
            if not running_processes:
                print("‚ùå –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å")
                break
                
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        for name, process, port in running_processes:
            try:
                process.terminate()
                print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
            except:
                pass
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        time.sleep(3)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        for name, process, port in running_processes:
            try:
                if process.poll() is None:
                    process.kill()
            except:
                pass
        
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

if __name__ == '__main__':
    main()



