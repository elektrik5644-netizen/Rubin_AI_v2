"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏ Rubin AI
–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
"""

import os
import json
import shutil
import sqlite3
import logging
import zipfile
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import hashlib

class BackupManager:
    def __init__(self, backup_dir: str = "backups"):
        self.backup_dir = backup_dir
        self.logger = logging.getLogger(__name__)
        self._init_backup_directory()
    
    def _init_backup_directory(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        try:
            os.makedirs(self.backup_dir, exist_ok=True)
            self.logger.info(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {self.backup_dir}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {e}")
    
    def create_backup(self, backup_name: str = None, include_data: bool = True, 
                     include_config: bool = True, include_logs: bool = False) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        if backup_name is None:
            backup_name = f"rubin_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        backup_result = {
            "backup_name": backup_name,
            "timestamp": datetime.now().isoformat(),
            "success": False,
            "files_backed_up": [],
            "size_mb": 0,
            "error": None
        }
        
        try:
            backup_path = os.path.join(self.backup_dir, backup_name)
            os.makedirs(backup_path, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            metadata = {
                "backup_name": backup_name,
                "timestamp": backup_result["timestamp"],
                "rubin_version": "2.0",
                "includes": {
                    "data": include_data,
                    "config": include_config,
                    "logs": include_logs
                }
            }
            
            # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if include_data:
                db_backup = self._backup_database(backup_path)
                if db_backup["success"]:
                    backup_result["files_backed_up"].extend(db_backup["files"])
                else:
                    backup_result["error"] = db_backup["error"]
                    return backup_result
            
            # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if include_config:
                config_backup = self._backup_configuration(backup_path)
                if config_backup["success"]:
                    backup_result["files_backed_up"].extend(config_backup["files"])
                else:
                    backup_result["error"] = config_backup["error"]
                    return backup_result
            
            # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
            if include_logs:
                logs_backup = self._backup_logs(backup_path)
                if logs_backup["success"]:
                    backup_result["files_backed_up"].extend(logs_backup["files"])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata_path = os.path.join(backup_path, "backup_metadata.json")
            with open(metadata_path, 'w', encoding='utf-8') as f:
                json.dump(metadata, f, indent=2, ensure_ascii=False)
            
            # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
            archive_path = f"{backup_path}.zip"
            self._create_archive(backup_path, archive_path)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä
            backup_result["size_mb"] = os.path.getsize(archive_path) / (1024 * 1024)
            backup_result["success"] = True
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            shutil.rmtree(backup_path)
            
            self.logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_name} ({backup_result['size_mb']:.2f} MB)")
            
        except Exception as e:
            backup_result["error"] = str(e)
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        
        return backup_result
    
    def _backup_database(self, backup_path: str) -> Dict:
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        result = {"success": False, "files": [], "error": None}
        
        try:
            db_dir = os.path.join(backup_path, "database")
            os.makedirs(db_dir, exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_files = [
                "rubin_ai.db",
                "rubin_errors.db",
                "documents.db"
            ]
            
            for db_file in db_files:
                if os.path.exists(db_file):
                    backup_file = os.path.join(db_dir, db_file)
                    shutil.copy2(db_file, backup_file)
                    result["files"].append(backup_file)
                    self.logger.info(f"üìä –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_file}")
            
            result["success"] = True
            
        except Exception as e:
            result["error"] = str(e)
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î: {e}")
        
        return result
    
    def _backup_configuration(self, backup_path: str) -> Dict:
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        result = {"success": False, "files": [], "error": None}
        
        try:
            config_dir = os.path.join(backup_path, "config")
            os.makedirs(config_dir, exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            config_files = [
                "config/auto_heal.json",
                "config/modules.json",
                "config/settings.json"
            ]
            
            for config_file in config_files:
                if os.path.exists(config_file):
                    backup_file = os.path.join(config_dir, os.path.basename(config_file))
                    shutil.copy2(config_file, backup_file)
                    result["files"].append(backup_file)
                    self.logger.info(f"‚öôÔ∏è –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ñ–∏–≥: {config_file}")
            
            # –ö–æ–ø–∏—Ä—É–µ–º API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            api_dir = os.path.join(backup_path, "api_config")
            os.makedirs(api_dir, exist_ok=True)
            
            api_files = [
                "api/rubin_ai_v2_simple.py",
                "api/electrical_api.py",
                "api/radiomechanics_api.py",
                "api/controllers_api.py",
                "api/documents_api.py"
            ]
            
            for api_file in api_files:
                if os.path.exists(api_file):
                    backup_file = os.path.join(api_dir, os.path.basename(api_file))
                    shutil.copy2(api_file, backup_file)
                    result["files"].append(backup_file)
            
            result["success"] = True
            
        except Exception as e:
            result["error"] = str(e)
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        return result
    
    def _backup_logs(self, backup_path: str) -> Dict:
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤"""
        result = {"success": False, "files": [], "error": None}
        
        try:
            logs_dir = os.path.join(backup_path, "logs")
            os.makedirs(logs_dir, exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            log_files = []
            for root, dirs, files in os.walk("."):
                for file in files:
                    if file.endswith(('.log', '.txt')) and 'log' in file.lower():
                        file_path = os.path.join(root, file)
                        if os.path.getmtime(file_path) > (datetime.now() - timedelta(days=7)).timestamp():
                            log_files.append(file_path)
            
            for log_file in log_files:
                backup_file = os.path.join(logs_dir, os.path.basename(log_file))
                shutil.copy2(log_file, backup_file)
                result["files"].append(backup_file)
            
            result["success"] = True
            
        except Exception as e:
            result["error"] = str(e)
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        
        return result
    
    def _create_archive(self, source_dir: str, archive_path: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        try:
            with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for root, dirs, files in os.walk(source_dir):
                    for file in files:
                        file_path = os.path.join(root, file)
                        arcname = os.path.relpath(file_path, source_dir)
                        zipf.write(file_path, arcname)
            
            self.logger.info(f"üì¶ –°–æ–∑–¥–∞–Ω –∞—Ä—Ö–∏–≤: {archive_path}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {e}")
            raise
    
    def restore_backup(self, backup_name: str, restore_data: bool = True, 
                      restore_config: bool = True, restore_logs: bool = False) -> Dict:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        restore_result = {
            "backup_name": backup_name,
            "timestamp": datetime.now().isoformat(),
            "success": False,
            "files_restored": [],
            "error": None
        }
        
        try:
            archive_path = os.path.join(self.backup_dir, f"{backup_name}.zip")
            
            if not os.path.exists(archive_path):
                restore_result["error"] = f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {backup_name}"
                return restore_result
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            temp_dir = os.path.join(self.backup_dir, f"temp_{backup_name}")
            os.makedirs(temp_dir, exist_ok=True)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏–≤
            with zipfile.ZipFile(archive_path, 'r') as zipf:
                zipf.extractall(temp_dir)
            
            # –ß–∏—Ç–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata_path = os.path.join(temp_dir, "backup_metadata.json")
            if os.path.exists(metadata_path):
                with open(metadata_path, 'r', encoding='utf-8') as f:
                    metadata = json.load(f)
                    restore_result["backup_info"] = metadata
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if restore_data:
                db_restore = self._restore_database(temp_dir)
                if db_restore["success"]:
                    restore_result["files_restored"].extend(db_restore["files"])
                else:
                    restore_result["error"] = db_restore["error"]
                    return restore_result
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if restore_config:
                config_restore = self._restore_configuration(temp_dir)
                if config_restore["success"]:
                    restore_result["files_restored"].extend(config_restore["files"])
                else:
                    restore_result["error"] = config_restore["error"]
                    return restore_result
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–∏
            if restore_logs:
                logs_restore = self._restore_logs(temp_dir)
                if logs_restore["success"]:
                    restore_result["files_restored"].extend(logs_restore["files"])
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            shutil.rmtree(temp_dir)
            
            restore_result["success"] = True
            self.logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {backup_name}")
            
        except Exception as e:
            restore_result["error"] = str(e)
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        
        return restore_result
    
    def _restore_database(self, temp_dir: str) -> Dict:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        result = {"success": False, "files": [], "error": None}
        
        try:
            db_dir = os.path.join(temp_dir, "database")
            
            if os.path.exists(db_dir):
                for db_file in os.listdir(db_dir):
                    source_file = os.path.join(db_dir, db_file)
                    target_file = db_file
                    
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ë–î
                    if os.path.exists(target_file):
                        backup_name = f"{target_file}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                        shutil.copy2(target_file, backup_name)
                    
                    shutil.copy2(source_file, target_file)
                    result["files"].append(target_file)
                    self.logger.info(f"üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_file}")
            
            result["success"] = True
            
        except Exception as e:
            result["error"] = str(e)
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {e}")
        
        return result
    
    def _restore_configuration(self, temp_dir: str) -> Dict:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        result = {"success": False, "files": [], "error": None}
        
        try:
            config_dir = os.path.join(temp_dir, "config")
            
            if os.path.exists(config_dir):
                os.makedirs("config", exist_ok=True)
                
                for config_file in os.listdir(config_dir):
                    source_file = os.path.join(config_dir, config_file)
                    target_file = os.path.join("config", config_file)
                    
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
                    if os.path.exists(target_file):
                        backup_name = f"{target_file}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                        shutil.copy2(target_file, backup_name)
                    
                    shutil.copy2(source_file, target_file)
                    result["files"].append(target_file)
                    self.logger.info(f"‚öôÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ñ–∏–≥: {config_file}")
            
            result["success"] = True
            
        except Exception as e:
            result["error"] = str(e)
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        return result
    
    def _restore_logs(self, temp_dir: str) -> Dict:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤"""
        result = {"success": False, "files": [], "error": None}
        
        try:
            logs_dir = os.path.join(temp_dir, "logs")
            
            if os.path.exists(logs_dir):
                for log_file in os.listdir(logs_dir):
                    source_file = os.path.join(logs_dir, log_file)
                    target_file = log_file
                    
                    shutil.copy2(source_file, target_file)
                    result["files"].append(target_file)
                    self.logger.info(f"üìù –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–æ–≥: {log_file}")
            
            result["success"] = True
            
        except Exception as e:
            result["error"] = str(e)
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        
        return result
    
    def list_backups(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        backups = []
        
        try:
            for file in os.listdir(self.backup_dir):
                if file.endswith('.zip'):
                    backup_name = file[:-4]  # –£–±–∏—Ä–∞–µ–º .zip
                    file_path = os.path.join(self.backup_dir, file)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                    stat = os.stat(file_path)
                    size_mb = stat.st_size / (1024 * 1024)
                    created_time = datetime.fromtimestamp(stat.st_ctime)
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    metadata = None
                    try:
                        with zipfile.ZipFile(file_path, 'r') as zipf:
                            if 'backup_metadata.json' in zipf.namelist():
                                with zipf.open('backup_metadata.json') as f:
                                    metadata = json.load(f)
                    except Exception:
                        pass
                    
                    backups.append({
                        "name": backup_name,
                        "size_mb": round(size_mb, 2),
                        "created": created_time.isoformat(),
                        "metadata": metadata
                    })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            backups.sort(key=lambda x: x["created"], reverse=True)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {e}")
        
        return backups
    
    def delete_backup(self, backup_name: str) -> Dict:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        result = {
            "backup_name": backup_name,
            "success": False,
            "error": None
        }
        
        try:
            archive_path = os.path.join(self.backup_dir, f"{backup_name}.zip")
            
            if os.path.exists(archive_path):
                os.remove(archive_path)
                result["success"] = True
                self.logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")
            else:
                result["error"] = f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {backup_name}"
                
        except Exception as e:
            result["error"] = str(e)
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        
        return result
    
    def cleanup_old_backups(self, days_to_keep: int = 30) -> Dict:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        result = {
            "deleted_count": 0,
            "deleted_backups": [],
            "success": False,
            "error": None
        }
        
        try:
            cutoff_date = datetime.now() - timedelta(days=days_to_keep)
            
            for file in os.listdir(self.backup_dir):
                if file.endswith('.zip'):
                    file_path = os.path.join(self.backup_dir, file)
                    created_time = datetime.fromtimestamp(os.path.getctime(file_path))
                    
                    if created_time < cutoff_date:
                        backup_name = file[:-4]
                        delete_result = self.delete_backup(backup_name)
                        
                        if delete_result["success"]:
                            result["deleted_count"] += 1
                            result["deleted_backups"].append(backup_name)
            
            result["success"] = True
            self.logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {result['deleted_count']}")
            
        except Exception as e:
            result["error"] = str(e)
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {e}")
        
        return result

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
backup_manager = BackupManager()

















