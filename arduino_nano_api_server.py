#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Arduino Nano API Server –¥–ª—è Rubin AI v2
API —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Arduino Nano
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import logging
import json
from datetime import datetime
from arduino_nano_integration import ArduinoNanoIntegration

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
CORS(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Arduino Nano
arduino_integration = None

def get_arduino_integration():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Arduino Nano"""
    global arduino_integration
    if arduino_integration is None:
        arduino_integration = ArduinoNanoIntegration()
    return arduino_integration

@app.route('/api/arduino/query', methods=['POST'])
def arduino_query():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ Arduino Nano"""
    try:
        data = request.get_json()
        query = data.get('query', '')
        
        if not query:
            return jsonify({'error': '–ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        logger.info(f"üîß Arduino Nano –∑–∞–ø—Ä–æ—Å: {query}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        integration = get_arduino_integration()
        response = integration.get_arduino_response(query)
        
        return jsonify({
            "module": "arduino_nano",
            "query": query,
            "response": response,
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ Arduino Nano: {e}")
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500

@app.route('/api/arduino/functions', methods=['GET'])
def get_functions():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π Arduino"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        integration = get_arduino_integration()
        functions = []
        cursor = integration.arduino_db.connection.cursor()
        cursor.execute("SELECT function_name, description, syntax FROM arduino_functions ORDER BY function_name")
        
        for row in cursor.fetchall():
            functions.append({
                "name": row[0],
                "description": row[1],
                "syntax": row[2]
            })
        
        return jsonify({
            "module": "arduino_nano",
            "functions": functions,
            "count": len(functions)
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500

@app.route('/api/arduino/libraries', methods=['GET'])
def get_libraries():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ Arduino"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        integration = get_arduino_integration()
        libraries = []
        cursor = integration.arduino_db.connection.cursor()
        cursor.execute("SELECT library_name, description, category FROM arduino_libraries ORDER BY library_name")
        
        for row in cursor.fetchall():
            libraries.append({
                "name": row[0],
                "description": row[1],
                "category": row[2]
            })
        
        return jsonify({
            "module": "arduino_nano",
            "libraries": libraries,
            "count": len(libraries)
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫: {e}")
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500

@app.route('/api/arduino/projects', methods=['GET'])
def get_projects():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ Arduino"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        integration = get_arduino_integration()
        projects = []
        cursor = integration.arduino_db.connection.cursor()
        cursor.execute("SELECT project_name, description, difficulty_level, category FROM arduino_projects ORDER BY difficulty_level")
        
        for row in cursor.fetchall():
            projects.append({
                "name": row[0],
                "description": row[1],
                "difficulty": row[2],
                "category": row[3]
            })
        
        return jsonify({
            "module": "arduino_nano",
            "projects": projects,
            "count": len(projects)
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500

@app.route('/api/arduino/pins', methods=['GET'])
def get_pins():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∏–Ω–∞—Ö Arduino Nano"""
    try:
        pin_number = request.args.get('pin', type=int)
        
        if pin_number is not None:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–∏–Ω–µ
            integration = get_arduino_integration()
            pin_info = integration.arduino_db.get_pin_info(pin_number)
            if pin_info:
                return jsonify({
                    "module": "arduino_nano",
                    "pin": dict(pin_info)
                })
            else:
                return jsonify({'error': f'–ü–∏–Ω {pin_number} –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        else:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∏–Ω–æ–≤
            integration = get_arduino_integration()
            pins = []
            cursor = integration.arduino_db.connection.cursor()
            cursor.execute("SELECT pin_number, pin_type, description, special_functions FROM arduino_pins ORDER BY pin_number")
            
            for row in cursor.fetchall():
                pins.append({
                    "number": row[0],
                    "type": row[1],
                    "description": row[2],
                    "special_functions": row[3]
                })
            
            return jsonify({
                "module": "arduino_nano",
                "pins": pins,
                "count": len(pins)
            })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∏–Ω–∞—Ö: {e}")
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500

@app.route('/api/arduino/categories', methods=['GET'])
def get_categories():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π Arduino"""
    try:
        integration = get_arduino_integration()
        categories = integration.arduino_db.get_categories()
        
        return jsonify({
            "module": "arduino_nano",
            "categories": categories,
            "count": len(categories)
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500

@app.route('/api/arduino/troubleshooting', methods=['POST'])
def get_troubleshooting():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º Arduino"""
    try:
        data = request.get_json()
        error_keywords = data.get('error', '')
        
        if not error_keywords:
            return jsonify({'error': '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        integration = get_arduino_integration()
        solutions = integration.arduino_db.get_troubleshooting(error_keywords)
        
        return jsonify({
            "module": "arduino_nano",
            "error": error_keywords,
            "solutions": solutions,
            "count": len(solutions)
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º: {e}")
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500

@app.route('/api/arduino/search', methods=['POST'])
def search_knowledge():
    """–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π Arduino"""
    try:
        data = request.get_json()
        query = data.get('query', '')
        category = data.get('category', None)
        
        if not query:
            return jsonify({'error': '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        integration = get_arduino_integration()
        results = integration.arduino_db.search_knowledge(query, category)
        
        return jsonify({
            "module": "arduino_nano",
            "query": query,
            "category": category,
            "results": results,
            "count": len(results)
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {e}")
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500

@app.route('/api/arduino/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞ Arduino Nano"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        integration = get_arduino_integration()
        cursor = integration.arduino_db.connection.cursor()
        cursor.execute("SELECT COUNT(*) FROM arduino_categories")
        categories_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM arduino_knowledge")
        knowledge_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM arduino_functions")
        functions_count = cursor.fetchone()[0]
        
        return jsonify({
            "module": "arduino_nano",
            "status": "healthy",
            "database": "connected",
            "categories": categories_count,
            "knowledge_items": knowledge_count,
            "functions": functions_count,
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return jsonify({
            "module": "arduino_nano",
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }), 500

@app.route('/api/arduino/status', methods=['GET'])
def get_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥—É–ª—è Arduino Nano"""
    return jsonify({
        "module": "arduino_nano",
        "name": "Arduino Nano Programming Module",
        "version": "1.0.0",
        "description": "–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Arduino Nano - –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ñ—É–Ω–∫—Ü–∏–∏, –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –ø—Ä–æ–µ–∫—Ç—ã",
        "endpoints": [
            "POST /api/arduino/query - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤",
            "GET /api/arduino/functions - –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π",
            "GET /api/arduino/libraries - –°–ø–∏—Å–æ–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫",
            "GET /api/arduino/projects - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤",
            "GET /api/arduino/pins - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏–Ω–∞—Ö",
            "GET /api/arduino/categories - –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
            "POST /api/arduino/troubleshooting - –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º",
            "POST /api/arduino/search - –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π",
            "GET /api/arduino/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è",
            "GET /api/arduino/status - –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è"
        ],
        "features": [
            "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ Arduino Nano",
            "–§—É–Ω–∫—Ü–∏–∏ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏",
            "–ì–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã",
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏–Ω–∞—Ö",
            "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º",
            "–ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"
        ]
    })

if __name__ == '__main__':
    print("üîß Arduino Nano API Server –∑–∞–ø—É—â–µ–Ω")
    print("URL: http://localhost:8110")
    print("Endpoints:")
    print("  - POST /api/arduino/query - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("  - GET /api/arduino/functions - –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π")
    print("  - GET /api/arduino/libraries - –°–ø–∏—Å–æ–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫")
    print("  - GET /api/arduino/projects - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print("  - GET /api/arduino/pins - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏–Ω–∞—Ö")
    print("  - GET /api/arduino/categories - –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    print("  - POST /api/arduino/troubleshooting - –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º")
    print("  - POST /api/arduino/search - –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
    print("  - GET /api/arduino/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    print("  - GET /api/arduino/status - –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è")
    
    app.run(host='0.0.0.0', port=8110, debug=True)
