#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞ —à–∞–±–ª–æ–Ω—ã
"""

import requests
import json
import time

def check_all_servers():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –°–ï–†–í–ï–†–û–í –ù–ê –®–ê–ë–õ–û–ù–´")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    test_questions = [
        "–ø—Ä–∏–≤–µ—Ç",
        "–ø–æ–º–æ—â—å", 
        "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å",
        "python",
        "—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä"
    ]
    
    # –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
    servers = [
        {"name": "General API", "url": "http://localhost:8085/api/chat"},
        {"name": "–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞", "url": "http://localhost:8087/api/electrical/explain"},
        {"name": "–†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞", "url": "http://localhost:8089/api/radiomechanics/explain"},
        {"name": "–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã", "url": "http://localhost:9000/api/controllers/topic/general"},
        {"name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "url": "http://localhost:8086/api/chat"},
        {"name": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "url": "http://localhost:8088/api/programming/explain"},
        {"name": "–ù–µ–π—Ä–æ—Å–µ—Ç—å", "url": "http://localhost:8090/api/neuro/chat"}
    ]
    
    results = {}
    
    for server in servers:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {server['name']}:")
        print("-" * 30)
        
        server_results = []
        
        for question in test_questions:
            try:
                # –†–∞–∑–Ω—ã–µ payload –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
                if "electrical" in server['url']:
                    payload = {"concept": question}
                elif "radiomechanics" in server['url']:
                    payload = {"concept": question}
                elif "controllers" in server['url']:
                    payload = {"data": {"message": question}}
                elif "neuro" in server['url']:
                    payload = {"message": question}
                else:
                    payload = {"message": question}
                
                response = requests.post(
                    server['url'],
                    json=payload,
                    timeout=5
                )
                
                if response.status_code == 200:
                    data = response.json()
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    if 'response' in data:
                        answer = data['response']
                    elif 'message' in data:
                        answer = data['message']
                    elif 'explanation' in data:
                        answer = data['explanation']
                    else:
                        answer = str(data)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
                    template_phrases = [
                        "–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞",
                        "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å",
                        "–ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                        "–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                        "–Ø Rubin AI v2 - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫",
                        "–ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å",
                        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏",
                        "–ú–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"
                    ]
                    
                    has_template = any(phrase in answer for phrase in template_phrases)
                    
                    result = {
                        "question": question,
                        "answer": answer[:100] + "..." if len(answer) > 100 else answer,
                        "has_template": has_template,
                        "status": "‚úÖ OK" if not has_template else "‚ùå –®–ê–ë–õ–û–ù"
                    }
                    
                    server_results.append(result)
                    
                    print(f"‚ùì {question}")
                    print(f"üìù {answer[:80]}{'...' if len(answer) > 80 else ''}")
                    print(f"üîç {'‚ùå –®–ê–ë–õ–û–ù' if has_template else '‚úÖ –ï–°–¢–ï–°–¢–í–ï–ù–ù–û'}")
                    print()
                    
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: {question}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {server['name']}: {e}")
                break
            
            time.sleep(0.3)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        results[server['name']] = server_results
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –í–°–ï–ú –°–ï–†–í–ï–†–ê–ú")
    print("=" * 50)
    
    total_questions = 0
    total_templates = 0
    
    for server_name, server_results in results.items():
        if server_results:
            questions_count = len(server_results)
            template_count = sum(1 for r in server_results if r['has_template'])
            natural_count = questions_count - template_count
            
            total_questions += questions_count
            total_templates += template_count
            
            print(f"\nüîç {server_name}:")
            print(f"   –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_count}")
            print(f"   ‚úÖ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {natural_count}")
            print(f"   ‚ùå –®–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {template_count}")
            print(f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏: {(natural_count/questions_count)*100:.1f}%")
    
    print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}")
    print(f"   ‚úÖ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {total_questions - total_templates}")
    print(f"   ‚ùå –®–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {total_templates}")
    print(f"   üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏: {((total_questions - total_templates)/total_questions)*100:.1f}%")
    
    if total_templates == 0:
        print(f"\nüéâ –í–°–ï –®–ê–ë–õ–û–ù–´ –£–î–ê–õ–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ!")
    else:
        print(f"\n‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å {total_templates} —à–∞–±–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ {total_questions}")

if __name__ == "__main__":
    check_all_servers()










