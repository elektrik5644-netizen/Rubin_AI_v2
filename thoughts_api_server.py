#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
API —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±—â–µ–Ω–∏—è Rubin AI –æ —Å–≤–æ–∏—Ö –º—ã—Å–ª—è—Ö –∏ –∏–¥–µ—è—Ö
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç endpoints –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —á–∞—Ç–æ–º RubinDeveloper
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import time
import logging
from datetime import datetime
import json

from rubin_thoughts_communicator import RubinThoughtsCommunicator

logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—â–µ–Ω–∏—è
thoughts_communicator = RubinThoughtsCommunicator()

@app.route('/api/thoughts/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –º—ã—Å–ª–µ–π"""
    return jsonify({
        "status": "Rubin AI Thoughts Server ONLINE",
        "timestamp": datetime.now().isoformat(),
        "thinking_patterns": len(thoughts_communicator.thinking_patterns),
        "current_thoughts": len(thoughts_communicator.current_thoughts),
        "thoughts_history": len(thoughts_communicator.thoughts_history)
    }), 200

@app.route('/api/thoughts/current', methods=['GET'])
def get_current_thoughts():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –º—ã—Å–ª–µ–π Rubin"""
    try:
        logger.info("üí≠ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –º—ã—Å–ª–µ–π")
        
        thought = thoughts_communicator.share_current_thoughts()
        
        response_data = {
            "success": True,
            "thought": thought,
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –º—ã—Å–ª–µ–π: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –º—ã—Å–ª–µ–π: {str(e)}"
        }), 500

@app.route('/api/thoughts/insights', methods=['GET'])
def get_learning_insights():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è"""
    try:
        logger.info("üìö –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è")
        
        insight = thoughts_communicator.share_learning_insights()
        
        response_data = {
            "success": True,
            "insight": insight,
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤: {str(e)}"
        }), 500

@app.route('/api/thoughts/ideas', methods=['GET'])
def get_creative_ideas():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏–¥–µ–π"""
    try:
        logger.info("üí° –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏–¥–µ–π")
        
        idea = thoughts_communicator.share_creative_ideas()
        
        response_data = {
            "success": True,
            "idea": idea,
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–π: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–π: {str(e)}"
        }), 500

@app.route('/api/thoughts/thinking_process', methods=['POST'])
def get_thinking_process():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º—ã—à–ª–µ–Ω–∏—è –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º"""
    try:
        data = request.get_json() or {}
        question = data.get('question', '')
        
        if not question:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–∫–∞–∑–∞–Ω –≤–æ–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            }), 400
        
        logger.info(f"üß† –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º—ã—à–ª–µ–Ω–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: {question}")
        
        thinking_process = thoughts_communicator.share_thinking_process(question)
        
        response_data = {
            "success": True,
            "question": question,
            "thinking_process": thinking_process,
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º—ã—à–ª–µ–Ω–∏—è: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º—ã—à–ª–µ–Ω–∏—è: {str(e)}"
        }), 500

@app.route('/api/thoughts/abductive_reasoning', methods=['POST'])
def get_abductive_reasoning():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–±–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è"""
    try:
        data = request.get_json() or {}
        evidence = data.get('evidence', [])
        
        if not evidence:
            return jsonify({
                "success": False,
                "error": "–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            }), 400
        
        logger.info(f"üîç –ê–±–¥—É–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ –¥–ª—è –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤: {evidence}")
        
        reasoning = thoughts_communicator.share_abductive_reasoning(evidence)
        
        response_data = {
            "success": True,
            "evidence": evidence,
            "reasoning": reasoning,
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–±–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –∞–±–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è: {str(e)}"
        }), 500

@app.route('/api/thoughts/system_status', methods=['GET'])
def get_system_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –º—ã—à–ª–µ–Ω–∏—è"""
    try:
        logger.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –º—ã—à–ª–µ–Ω–∏—è")
        
        status = thoughts_communicator.share_system_status()
        
        response_data = {
            "success": True,
            "status": status,
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
        }), 500

@app.route('/api/thoughts/history', methods=['GET'])
def get_thoughts_history():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –º—ã—Å–ª–µ–π"""
    try:
        logger.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –º—ã—Å–ª–µ–π")
        
        history = thoughts_communicator.get_thoughts_history()
        
        response_data = {
            "success": True,
            "history": history,
            "total_thoughts": len(history),
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"
        }), 500

@app.route('/api/thoughts/clear_history', methods=['POST'])
def clear_thoughts_history():
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –º—ã—Å–ª–µ–π"""
    try:
        logger.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –º—ã—Å–ª–µ–π")
        
        thoughts_communicator.clear_thoughts_history()
        
        response_data = {
            "success": True,
            "message": "–ò—Å—Ç–æ—Ä–∏—è –º—ã—Å–ª–µ–π –æ—á–∏—â–µ–Ω–∞",
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"
        }), 500

@app.route('/api/thoughts/random', methods=['GET'])
def get_random_thought():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –º—ã—Å–ª–∏ –∏–ª–∏ –∏–¥–µ–∏"""
    try:
        logger.info("üé≤ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –º—ã—Å–ª–∏")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –º—ã—Å–ª–∏
        thought_types = [
            ("current", thoughts_communicator.share_current_thoughts),
            ("insight", thoughts_communicator.share_learning_insights),
            ("idea", thoughts_communicator.share_creative_ideas),
            ("status", thoughts_communicator.share_system_status)
        ]
        
        import random
        thought_type, thought_function = random.choice(thought_types)
        thought_content = thought_function()
        
        response_data = {
            "success": True,
            "thought_type": thought_type,
            "thought_content": thought_content,
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –º—ã—Å–ª–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –º—ã—Å–ª–∏: {str(e)}"
        }), 500

@app.route('/api/thoughts/chat_integration', methods=['POST'])
def chat_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —á–∞—Ç–æ–º RubinDeveloper"""
    try:
        data = request.get_json() or {}
        message = data.get('message', '')
        chat_context = data.get('context', {})
        
        logger.info(f"üí¨ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —á–∞—Ç–æ–º: {message}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
        response_type = _determine_response_type(message, chat_context)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
        if response_type == "thinking_process":
            thought_content = thoughts_communicator.share_thinking_process(message)
        elif response_type == "current_thought":
            thought_content = thoughts_communicator.share_current_thoughts()
        elif response_type == "insight":
            thought_content = thoughts_communicator.share_learning_insights()
        elif response_type == "idea":
            thought_content = thoughts_communicator.share_creative_ideas()
        elif response_type == "status":
            thought_content = thoughts_communicator.share_system_status()
        else:
            thought_content = thoughts_communicator.share_current_thoughts()
        
        response_data = {
            "success": True,
            "message": message,
            "response_type": response_type,
            "thought_content": thought_content,
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —á–∞—Ç–æ–º: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —á–∞—Ç–æ–º: {str(e)}"
        }), 500

def _determine_response_type(message: str, context: Dict[str, Any]) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    
    message_lower = message.lower()
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞
    if any(word in message_lower for word in ["–∫–∞–∫ –¥—É–º–∞–µ—à—å", "—á—Ç–æ –¥—É–º–∞–µ—à—å", "—Ç–≤–æ–∏ –º—ã—Å–ª–∏", "–ø—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è"]):
        return "thinking_process"
    elif any(word in message_lower for word in ["–∏–¥–µ—è", "–∫—Ä–µ–∞—Ç–∏–≤", "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "–Ω–æ–≤–æ–µ"]):
        return "idea"
    elif any(word in message_lower for word in ["—É—á–∏—à—å—Å—è", "–∏–∑—É—á–∞–µ—à—å", "–ø–æ–∑–Ω–∞–µ—à—å", "—Ä–∞–∑–≤–∏–≤–∞–µ—à—å—Å—è"]):
        return "insight"
    elif any(word in message_lower for word in ["—Å—Ç–∞—Ç—É—Å", "—Å–æ—Å—Ç–æ—è–Ω–∏–µ", "—Ä–∞–±–æ—Ç–∞–µ—à—å", "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—à—å"]):
        return "status"
    else:
        return "current_thought"

if __name__ == '__main__':
    port = 8099  # –ù–æ–≤—ã–π –ø–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –º—ã—Å–ª–µ–π
    logger.info(f"üí≠ –ó–∞–ø—É—Å–∫ Rubin AI Thoughts —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    app.run(port=port, debug=True, use_reloader=False)










