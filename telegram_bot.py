#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram –±–æ—Ç –¥–ª—è Rubin AI v2.0
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Enhanced Smart Dispatcher
"""

import os
import logging
import requests
import json
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
DISPATCHER_URL = 'http://rubin-smart-dispatcher:8080'

class RubinTelegramBot:
    def __init__(self):
        self.dispatcher_url = DISPATCHER_URL
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rubin AI v2.0!

–Ø - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –ª–æ–≥–∏–∫–æ–π.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–º–æ—â—å
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/neural - –ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –Ω–∞–π–¥—É –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç!
        """
        await update.message.reply_text(welcome_message)
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ Rubin AI v2.0

üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/neural <—Ç–µ–∫—Å—Ç> - –ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞

üîπ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. 
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç –∑–∞–ø—Ä–æ—Å –∫ –Ω—É–∂–Ω–æ–º—É –º–æ–¥—É–ª—é.

üîπ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ–±–ª–∞—Å—Ç–∏:
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞
‚Ä¢ –†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞  
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –§–∏–∑–∏–∫–∞
‚Ä¢ –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã

–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
"–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ?"
"–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x^2 + 5x + 6 = 0"
"–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"
        """
        await update.message.reply_text(help_text)
        
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            response = requests.get(f"{self.dispatcher_url}/api/health", timeout=5)
            if response.status_code == 200:
                data = response.json()
                status_text = f"""
üü¢ –°–∏—Å—Ç–µ–º–∞ Rubin AI —Ä–∞–±–æ—Ç–∞–µ—Ç

üìä –°—Ç–∞—Ç—É—Å: {data.get('status', 'unknown')}
üß† –ù–µ–π—Ä–æ—Å–µ—Ç—å: {data.get('neural_router', 'unknown')}
üîß –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫: {data.get('error_tracker', 'unknown')}
‚è∞ –í—Ä–µ–º—è: {data.get('timestamp', 'unknown')}
                """
            else:
                status_text = "üî¥ –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        except Exception as e:
            status_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
            
        await update.message.reply_text(status_text)
        
    async def neural_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /neural"""
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /neural <—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞>")
            return
            
        text = ' '.join(context.args)
        try:
            response = requests.post(
                f"{self.dispatcher_url}/api/neural/analyze",
                json={'message': text},
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                analysis_text = f"""
üß† –ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑:

üìù –¢–µ–∫—Å—Ç: {data.get('message', '')}
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', 'unknown')}
üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {data.get('confidence', 0):.2f}
üîÑ –ú–∞—Ä—à—Ä—É—Ç: {data.get('suggested_server', 'unknown')}
üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞: {data.get('route_confidence', 0):.2f}
‚è∞ –í—Ä–µ–º—è: {data.get('timestamp', 'unknown')}
                """
            else:
                analysis_text = "‚ùå –û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        except Exception as e:
            analysis_text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            
        await update.message.reply_text(analysis_text)
        
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_message = update.message.text
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
            response = requests.post(
                f"{self.dispatcher_url}/api/chat",
                json={'message': user_message},
                timeout=15
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                if data.get('error'):
                    reply_text = f"‚ùå {data['error']}\n\n"
                    reply_text += "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                else:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                    server_response = data.get('response', {})
                    if isinstance(server_response, dict):
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º content –∏–∑ response
                        content = server_response.get('content', '')
                        if content:
                            reply_text = f"ü§ñ {content}"
                        else:
                            # Fallback –Ω–∞ explanation –∏–ª–∏ title
                            explanation = server_response.get('explanation', '')
                            title = server_response.get('title', '')
                            if explanation:
                                reply_text = f"ü§ñ {explanation}"
                            elif title:
                                reply_text = f"ü§ñ {title}"
                            else:
                                # –ï—Å–ª–∏ –Ω–µ—Ç content, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
                                reply_text = f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                                if data.get('neural_analysis'):
                                    reply_text += f"üß† –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('routed_to', 'unknown')}\n"
                                reply_text += f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {data.get('confidence', 0):.2f}\n"
                                reply_text += f"‚è∞ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {data.get('timestamp', 'unknown')}"
                    else:
                        # –ï—Å–ª–∏ response –Ω–µ —Å–ª–æ–≤–∞—Ä—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        reply_text = f"ü§ñ {server_response}"
                    
            else:
                reply_text = "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
        except requests.exceptions.Timeout:
            reply_text = "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            reply_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
        await update.message.reply_text(reply_text)
        
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
        
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = RubinTelegramBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("status", bot.status_command))
    application.add_handler(CommandHandler("neural", bot.neural_analysis))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(bot.error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("ü§ñ Telegram –±–æ—Ç Rubin AI –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    main()