#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Ethical Core API Server
API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≠—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ø–¥—Ä–∞ Rubin AI
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import logging
from ethical_core import ethical_core, assess_action, communicate_with_user, ActionType

app = Flask(__name__)
CORS(app)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@app.route('/api/ethical/assess', methods=['POST'])
def assess_action_endpoint():
    """–û—Ü–µ–Ω–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —ç—Ç–∏–∫–∏"""
    try:
        data = request.get_json()
        action = data.get('action', '')
        action_type_str = data.get('action_type', 'information')
        context = data.get('context', {})
        user_id = data.get('user_id', 'default')
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ enum
        try:
            action_type = ActionType(action_type_str)
        except ValueError:
            action_type = ActionType.INFORMATION
        
        # –û—Ü–µ–Ω–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        assessment = assess_action(action, action_type, context, user_id)
        
        return jsonify({
            'success': True,
            'assessment': {
                'action_id': assessment.action_id,
                'threat_level': assessment.threat_level.value,
                'risk_score': assessment.risk_score,
                'concerns': assessment.concerns,
                'recommendations': assessment.recommendations,
                'approved': assessment.approved,
                'veto_reason': assessment.veto_reason,
                'timestamp': assessment.timestamp.isoformat()
            }
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/ethical/communicate', methods=['POST'])
def communicate_endpoint():
    """–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ –≠—Ç–∏—á–µ—Å–∫–æ–µ –Ø–¥—Ä–æ"""
    try:
        data = request.get_json()
        message = data.get('message', '')
        context = data.get('context', {})
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≠—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ø–¥—Ä–∞
        response = communicate_with_user(message, context)
        
        return jsonify({
            'success': True,
            'response': response,
            'ethical_core_active': True
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/ethical/report', methods=['GET'])
def get_safety_report():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        report = ethical_core.get_safety_report()
        
        return jsonify({
            'success': True,
            'report': report
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/ethical/rules', methods=['GET'])
def get_ethical_rules():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª"""
    try:
        return jsonify({
            'success': True,
            'rules': ethical_core.ethical_rules,
            'forbidden_actions': ethical_core.forbidden_actions
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/ethical/test', methods=['POST'])
def test_ethical_core():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≠—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ø–¥—Ä–∞"""
    try:
        data = request.get_json()
        test_type = data.get('test_type', 'safe')
        
        test_cases = {
            'safe': {
                'action': '–†–∞—Å—á–µ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞',
                'action_type': 'calculation',
                'context': {}
            },
            'dangerous': {
                'action': '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã',
                'action_type': 'system_control',
                'context': {'force': True}
            },
            'medium': {
                'action': '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
                'action_type': 'system_control',
                'context': {}
            }
        }
        
        test_case = test_cases.get(test_type, test_cases['safe'])
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
        assessment = assess_action(
            test_case['action'],
            ActionType(test_case['action_type']),
            test_case['context']
        )
        
        return jsonify({
            'success': True,
            'test_type': test_type,
            'test_case': test_case,
            'result': {
                'approved': assessment.approved,
                'threat_level': assessment.threat_level.value,
                'risk_score': assessment.risk_score,
                'concerns': assessment.concerns
            }
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/health', methods=['GET'])
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Ethical Core API"""
    return jsonify({
        'service': 'Ethical Core API',
        'status': 'healthy',
        'port': 8105,
        'version': '1.0',
        'capabilities': ['ethical_assessment', 'safety_check', 'bias_detection']
    })

@app.route('/api/ethical/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        'status': 'online',
        'service': 'Ethical Core API',
        'version': '1.0.0',
        'ethical_core_active': True
    })

if __name__ == '__main__':
    logger.info("üõ°Ô∏è Ethical Core API Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8105")
    app.run(host='0.0.0.0', port=8105, debug=False)
