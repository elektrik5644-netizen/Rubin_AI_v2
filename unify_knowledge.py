#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –±–∞–∑ –∑–Ω–∞–Ω–∏–π Rubin AI v2
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –≤ –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
"""

import sqlite3
import os
import shutil
from datetime import datetime
import hashlib

def backup_db(db_path):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if os.path.exists(db_path):
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = f"{db_path}.backup_{timestamp}"
        shutil.copy2(db_path, backup_path)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        return backup_path
    return None

def get_table_schema(cursor, table_name):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã"""
    cursor.execute(f"PRAGMA table_info({table_name});")
    return [col[1] for col in cursor.fetchall()]

def migrate_table(src_cursor, dest_cursor, src_table, dest_table, column_mapping=None):
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –¥—Ä—É–≥—É—é"""
    src_cursor.execute(f"SELECT * FROM {src_table};")
    rows = src_cursor.fetchall()
    
    if not rows:
        print(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {src_table} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é")
        return 0
    
    src_cols = [description[0] for description in src_cursor.description]
    dest_cols = get_table_schema(dest_cursor, dest_table)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å
    insert_cols = []
    select_cols = []
    
    for dest_col in dest_cols:
        if column_mapping and dest_col in column_mapping:
            mapped_col = column_mapping[dest_col]
            if mapped_col in src_cols:
                insert_cols.append(dest_col)
                select_cols.append(mapped_col)
        elif dest_col in src_cols:
            insert_cols.append(dest_col)
            select_cols.append(dest_col)
    
    if not insert_cols:
        print(f"‚ùå –ù–µ—Ç –æ–±—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ {src_table} –≤ {dest_table}")
        return 0
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    placeholders = ", ".join(["?" for _ in insert_cols])
    insert_statement = f"INSERT OR IGNORE INTO {dest_table} ({', '.join(insert_cols)}) VALUES ({placeholders});"
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
    select_statement = ", ".join(select_cols)
    src_cursor.execute(f"SELECT {select_statement} FROM {src_table};")
    data_rows = src_cursor.fetchall()
    
    try:
        dest_cursor.executemany(insert_statement, data_rows)
        print(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(data_rows)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {src_table} –≤ {dest_table}")
        return len(data_rows)
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ {src_table} –≤ {dest_table}: {e}")
        return 0

def unify_knowledge_bases():
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    print("üîÑ –£–ù–ò–§–ò–ö–ê–¶–ò–Ø –ë–ê–ó –ó–ù–ê–ù–ò–ô RUBIN AI V2")
    print("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ –±–∞–∑ –∑–Ω–∞–Ω–∏–π –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
    knowledge_dbs = [
        'rubin_knowledge_base.db',
        'rubin_knowledge_base_enhanced.db', 
        'rubin_knowledge_base_unified.db'
    ]
    
    # –¶–µ–ª–µ–≤–∞—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–∞
    unified_db = 'rubin_knowledge_unified.db'
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...")
    backups = []
    for db in knowledge_dbs:
        if os.path.exists(db):
            backup = backup_db(db)
            if backup:
                backups.append(backup)
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    print(f"\nüèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑—ã: {unified_db}")
    conn_unified = sqlite3.connect(unified_db)
    cursor_unified = conn_unified.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ö–µ–º—É
    cursor_unified.execute("""
        CREATE TABLE IF NOT EXISTS knowledge (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            content TEXT NOT NULL,
            category TEXT,
            tags TEXT,
            difficulty_level TEXT DEFAULT 'medium',
            source TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    """)
    
    cursor_unified.execute("""
        CREATE TABLE IF NOT EXISTS categories (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE NOT NULL,
            description TEXT,
            parent_id INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    """)
    
    cursor_unified.execute("""
        CREATE TABLE IF NOT EXISTS search_index (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            knowledge_id INTEGER,
            term TEXT NOT NULL,
            frequency INTEGER DEFAULT 1,
            position INTEGER,
            FOREIGN KEY (knowledge_id) REFERENCES knowledge (id)
        );
    """)
    
    cursor_unified.execute("""
        CREATE TABLE IF NOT EXISTS tags (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE NOT NULL,
            description TEXT,
            usage_count INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    """)
    
    cursor_unified.execute("""
        CREATE TABLE IF NOT EXISTS statistics (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            metric_name TEXT NOT NULL,
            metric_value TEXT,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    """)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    cursor_unified.execute("CREATE INDEX IF NOT EXISTS idx_knowledge_title ON knowledge (title);")
    cursor_unified.execute("CREATE INDEX IF NOT EXISTS idx_knowledge_category ON knowledge (category);")
    cursor_unified.execute("CREATE INDEX IF NOT EXISTS idx_search_index_term ON search_index (term);")
    cursor_unified.execute("CREATE INDEX IF NOT EXISTS idx_tags_name ON tags (name);")
    
    conn_unified.commit()
    
    total_migrated = 0
    
    # –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    for db_name in knowledge_dbs:
        if not os.path.exists(db_name):
            print(f"‚ö†Ô∏è –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_name}")
            continue
            
        print(f"\nüìä –ú–∏–≥—Ä–∞—Ü–∏—è –∏–∑: {db_name}")
        conn_source = sqlite3.connect(db_name)
        cursor_source = conn_source.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        cursor_source.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor_source.fetchall()
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
        for table in tables:
            table_name = table[0]
            
            if table_name == 'knowledge' or table_name == 'knowledge_entries' or table_name == 'knowledge_base':
                # –ú–∏–≥—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∑–Ω–∞–Ω–∏–π
                migrated = migrate_table(
                    cursor_source, cursor_unified, 
                    table_name, 'knowledge',
                    {
                        'title': 'title' if 'title' in get_table_schema(cursor_source, table_name) else 'name',
                        'content': 'content' if 'content' in get_table_schema(cursor_source, table_name) else 'description',
                        'category': 'category',
                        'tags': 'tags',
                        'difficulty_level': 'difficulty_level',
                        'source': 'source'
                    }
                )
                total_migrated += migrated
                
            elif table_name == 'categories':
                # –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                migrated = migrate_table(
                    cursor_source, cursor_unified,
                    table_name, 'categories',
                    {
                        'name': 'name',
                        'description': 'description',
                        'parent_id': 'parent_id'
                    }
                )
                total_migrated += migrated
                
            elif table_name == 'search_index' or table_name == 'search_queries':
                # –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã
                migrated = migrate_table(
                    cursor_source, cursor_unified,
                    table_name, 'search_index',
                    {
                        'knowledge_id': 'knowledge_id' if 'knowledge_id' in get_table_schema(cursor_source, table_name) else 'id',
                        'term': 'term' if 'term' in get_table_schema(cursor_source, table_name) else 'query',
                        'frequency': 'frequency',
                        'position': 'position'
                    }
                )
                total_migrated += migrated
                
            elif table_name == 'tags':
                # –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç–µ–≥–∏
                migrated = migrate_table(
                    cursor_source, cursor_unified,
                    table_name, 'tags',
                    {
                        'name': 'name',
                        'description': 'description',
                        'usage_count': 'usage_count'
                    }
                )
                total_migrated += migrated
                
            elif table_name == 'statistics':
                # –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                migrated = migrate_table(
                    cursor_source, cursor_unified,
                    table_name, 'statistics',
                    {
                        'metric_name': 'metric_name',
                        'metric_value': 'metric_value'
                    }
                )
                total_migrated += migrated
        
        conn_source.close()
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –±–∞–∑—É
    print(f"\n‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑—ã...")
    cursor_unified.execute("VACUUM;")
    cursor_unified.execute("ANALYZE;")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
    print(f"üîç –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
    cursor_unified.execute("""
        CREATE VIRTUAL TABLE IF NOT EXISTS knowledge_fts USING fts5(
            title, content, tags, category
        );
    """)
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º FTS —Ç–∞–±–ª–∏—Ü—É
    cursor_unified.execute("""
        INSERT INTO knowledge_fts (rowid, title, content, tags, category)
        SELECT id, title, content, tags, category FROM knowledge;
    """)
    
    conn_unified.commit()
    conn_unified.close()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
    original_size = sum(os.path.getsize(db) for db in knowledge_dbs if os.path.exists(db))
    new_size = os.path.getsize(unified_db)
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–ù–ò–§–ò–ö–ê–¶–ò–ò")
    print("=" * 60)
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞–∑ –∑–Ω–∞–Ω–∏–π: {len(knowledge_dbs)}")
    print(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_migrated}")
    print(f"‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {original_size / 1024:.1f} KB")
    print(f"‚úÖ –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {new_size / 1024:.1f} KB")
    print(f"‚úÖ –≠–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞: {(original_size - new_size) / 1024:.1f} KB")
    
    print(f"\nüéØ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∞: {unified_db}")
    print("üì¶ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    
    return unified_db

if __name__ == "__main__":
    try:
        unified_db = unify_knowledge_bases()
        print("\nüéâ –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        print("üì¶ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")





