#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú RUBIN AI
=============================================
"""

import requests
import json
import time
from datetime import datetime

class RubinProblemDiagnostic:
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º Rubin AI"""
    
    def __init__(self):
        self.servers = {
            'smart_dispatcher': {'port': 8080, 'endpoint': '/api/health', 'status': 'unknown'},
            'general_api': {'port': 8085, 'endpoint': '/api/health', 'status': 'unknown'},
            'mathematics': {'port': 8086, 'endpoint': '/health', 'status': 'unknown'},
            'electrical': {'port': 8087, 'endpoint': '/api/electrical/status', 'status': 'unknown'},
            'programming': {'port': 8088, 'endpoint': '/api/programming/explain', 'status': 'unknown'},
            'radiomechanics': {'port': 8089, 'endpoint': '/api/radiomechanics/status', 'status': 'unknown'},
            'controllers': {'port': 9000, 'endpoint': '/api/health', 'status': 'unknown'},
            'neuro': {'port': 8090, 'endpoint': '/api/health', 'status': 'unknown'},
            'learning': {'port': 8091, 'endpoint': '/api/learning/health', 'status': 'unknown'}
        }
        
        self.problems = []
        self.solutions = []
    
    def diagnose_all_servers(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú RUBIN AI")
        print("=" * 50)
        
        for server_name, config in self.servers.items():
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è—é {server_name}...")
            is_healthy, status, details = self.check_server_health(server_name, config)
            self.servers[server_name]['status'] = 'healthy' if is_healthy else 'unhealthy'
            
            if not is_healthy:
                self.problems.append({
                    'server': server_name,
                    'port': config['port'],
                    'status': status,
                    'details': details
                })
                print(f"‚ùå {server_name}: {status}")
            else:
                print(f"‚úÖ {server_name}: –†–∞–±–æ—Ç–∞–µ—Ç")
    
    def check_server_health(self, server_name, config):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
        port = config['port']
        endpoint = config['endpoint']
        url = f"http://localhost:{port}{endpoint}"
        
        try:
            if server_name == 'programming':
                # –î–ª—è programming —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º POST –∑–∞–ø—Ä–æ—Å
                response = requests.post(url, json={'concept': 'test'}, timeout=5)
            else:
                response = requests.get(url, timeout=5)
            
            if response.status_code == 200:
                return True, "–ó–¥–æ—Ä–æ–≤", response.json() if response.content else {}
            else:
                return False, f"HTTP {response.status_code}", f"Endpoint: {endpoint}"
        except requests.exceptions.ConnectionError:
            return False, "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        except requests.exceptions.Timeout:
            return False, "–¢–∞–π–º–∞—É—Ç", "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞: {str(e)[:30]}", str(e)
    
    def generate_problem_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö"""
        print(f"\nüìã –û–¢–ß–ï–¢ –û –ü–†–û–ë–õ–ï–ú–ê–• RUBIN AI")
        print("=" * 50)
        
        healthy_count = sum(1 for s in self.servers.values() if s['status'] == 'healthy')
        total_count = len(self.servers)
        
        print(f"üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {healthy_count}/{total_count} —Å–µ—Ä–≤–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        if self.problems:
            print(f"\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            for i, problem in enumerate(self.problems, 1):
                print(f"{i}. {problem['server']} (–ø–æ—Ä—Ç {problem['port']}): {problem['status']}")
                print(f"   –î–µ—Ç–∞–ª–∏: {problem['details']}")
        else:
            print("\n‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
    
    def generate_solutions(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º"""
        print(f"\nüîß –†–ï–®–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú:")
        print("=" * 30)
        
        for problem in self.problems:
            server = problem['server']
            port = problem['port']
            
            if server == 'general_api':
                solution = "–ó–∞–ø—É—Å—Ç–∏—Ç—å: python general_server.py"
            elif server == 'electrical':
                solution = "–ó–∞–ø—É—Å—Ç–∏—Ç—å: python electrical_server.py"
            elif server == 'programming':
                solution = "–ó–∞–ø—É—Å—Ç–∏—Ç—å: python programming_server.py"
            elif server == 'radiomechanics':
                solution = "–ó–∞–ø—É—Å—Ç–∏—Ç—å: python radiomechanics_server.py"
            elif server == 'controllers':
                solution = "–ó–∞–ø—É—Å—Ç–∏—Ç—å: python controllers_server.py"
            elif server == 'learning':
                solution = "–ó–∞–ø—É—Å—Ç–∏—Ç—å: python learning_server.py"
            else:
                solution = f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞ {server}"
            
            print(f"üîß {server}: {solution}")
    
    def test_smart_dispatcher_routing(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ Smart Dispatcher"""
        print(f"\nüß† –¢–ï–°–¢ –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–ò SMART DISPATCHER:")
        print("-" * 40)
        
        test_questions = [
            "–ö–∞–∫ –¥–µ–ª–∞?",
            "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x^2 + 5x + 6 = 0",
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–µ–º–æ?"
        ]
        
        for question in test_questions:
            print(f"\nüìù –í–æ–ø—Ä–æ—Å: {question}")
            try:
                response = requests.post('http://localhost:8080/api/chat', 
                                       json={'message': question}, timeout=10)
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω (HTTP {response.status_code})")
                    if 'response' in data:
                        print(f"üìÑ –û—Ç–≤–µ—Ç: {str(data['response'])[:100]}...")
                    else:
                        print(f"üìÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(data.keys())}")
                else:
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    diagnostic = RubinProblemDiagnostic()
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    diagnostic.diagnose_all_servers()
    
    # –û—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
    diagnostic.generate_problem_report()
    
    # –†–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
    diagnostic.generate_solutions()
    
    # –¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    diagnostic.test_smart_dispatcher_routing()
    
    print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 20)
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–µ—Ä–≤–µ—Ä—ã")
    print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ—Ä—Ç–æ–≤")
    print("3. –û–±–Ω–æ–≤–∏—Ç—å Smart Dispatcher –¥–æ v3.0")
    print("4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã")

if __name__ == "__main__":
    main()
