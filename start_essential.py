#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π Rubin AI v2.0
"""

import os
import sys
import subprocess
import time
import signal
import atexit

class RubinStarter:
    def __init__(self):
        self.processes = []
        
    def start_module(self, name, command, port):
        """–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è"""
        try:
            print(f"üöÄ –ó–∞–ø—É—Å–∫ {name} –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
            
            env = os.environ.copy()
            env['PYTHONIOENCODING'] = 'utf-8'
            
            process = subprocess.Popen(
                command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                encoding='utf-8',
                errors='ignore',
                env=env
            )
            
            self.processes.append(process)
            print(f"‚úÖ {name} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {e}")
            return False
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ"""
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π...")
        for process in self.processes:
            try:
                process.terminate()
                process.wait(timeout=5)
            except:
                process.kill()
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def start_all(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        print("üéØ –ó–ê–ü–£–°–ö –û–°–ù–û–í–ù–´–• –ú–û–î–£–õ–ï–ô RUBIN AI v2.0")
        print("=" * 50)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        atexit.register(self.cleanup)
        signal.signal(signal.SIGINT, lambda s, f: self.cleanup())
        signal.signal(signal.SIGTERM, lambda s, f: self.cleanup())
        
        modules = [
            {
                'name': 'AI –ß–∞—Ç (–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä)',
                'command': [sys.executable, 'api/rubin_ai_v2_server.py'],
                'port': 8084
            },
            {
                'name': '–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞',
                'command': [sys.executable, 'api/electrical_api.py'],
                'port': 8087
            },
            {
                'name': '–†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞',
                'command': [sys.executable, 'api/radiomechanics_api.py'],
                'port': 8089
            },
            {
                'name': '–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã',
                'command': [sys.executable, 'api/controllers_api.py'],
                'port': 8090
            }
        ]
        
        success_count = 0
        
        for module in modules:
            if self.start_module(module['name'], module['command'], module['port']):
                success_count += 1
            time.sleep(2)
        
        print("\n" + "=" * 50)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(modules)} –º–æ–¥—É–ª–µ–π –∑–∞–ø—É—â–µ–Ω–æ")
        
        if success_count > 0:
            print("\nüåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:")
            print("  - AI –ß–∞—Ç: http://localhost:8084/RubinIDE.html")
            print("  - Developer: http://localhost:8084/RubinDeveloper.html")
            print("  - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: http://localhost:8084/status_check.html")
            print("  - –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞: http://localhost:8087/api/electrical/status")
            print("  - –†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞: http://localhost:8089/api/radiomechanics/status")
            print("  - –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã: http://localhost:8090/api/controllers/status")
            print("\n‚è≥ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            try:
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                for process in self.processes:
                    process.wait()
            except KeyboardInterrupt:
                pass
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—è")

if __name__ == "__main__":
    starter = RubinStarter()
    starter.start_all()























