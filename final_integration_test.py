#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ LogiEval –≤ Rubin AI v2
"""

import requests
import time

def final_integration_test():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏."""
    print("üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò LOGIEVAL –í RUBIN AI v2")
    print("=" * 60)
    
    # –¢–µ—Å—Ç —á–µ—Ä–µ–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Simple Dispatcher...")
    
    test_cases = [
        "–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞",
        "–∑–∞–¥–∞—á–∞ –Ω–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", 
        "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ª–æ–≥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞",
        "–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞"
    ]
    
    success_count = 0
    
    for i, message in enumerate(test_cases, 1):
        try:
            print(f"\n{i}. –¢–µ—Å—Ç: '{message}'")
            
            response = requests.post(
                "http://localhost:8080/api/chat",
                json={'message': message},
                timeout=15
            )
            
            if response.status_code == 200:
                data = response.json()
                category = data.get('category', 'unknown')
                description = data.get('server_description', 'unknown')
                
                print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
                print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
                
                if category == 'logic_tasks':
                    print("üéØ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –∫ –ª–æ–≥–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞—á–∞–º!")
                    success_count += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã –∑–∞–¥–∞—á—É
                    if 'error' not in data:
                        print("üìÑ –ó–∞–¥–∞—á–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                    else:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {data['error']}")
                else:
                    print(f"‚ö†Ô∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –∫: {category}")
            else:
                print(f"‚ùå HTTP {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    # –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Logic Tasks API
    print("\nüîß –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Logic Tasks API...")
    
    try:
        response = requests.get("http://localhost:8106/api/logic/stats", timeout=5)
        if response.status_code == 200:
            data = response.json()
            stats = data['statistics']
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
            print(f"üìä –í—Å–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤: {len(stats['dataset_stats'])}")
            print(f"üìö –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: {sum(info['count'] for info in stats['dataset_stats'].values())}")
            
            print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á:")
            for name, info in stats['dataset_stats'].items():
                print(f"  üîπ {name}: {info['count']} –∑–∞–¥–∞—á - {info['description']}")
        else:
            print(f"‚ùå HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 60)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {success_count}/{len(test_cases)}")
    
    if success_count >= len(test_cases) * 0.75:  # 75% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        print("üéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
        print("üß† LogiEval –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ Rubin AI v2")
        print("üìö –î–æ—Å—Ç—É–ø–Ω–æ –±–æ–ª–µ–µ 50,000 –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á")
        print("üéØ Simple Dispatcher –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã")
        return True
    elif success_count >= len(test_cases) * 0.5:  # 50% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        print("üëç –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ")
        return True
    else:
        print("‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        return False

if __name__ == '__main__':
    final_integration_test()



