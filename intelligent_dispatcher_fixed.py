#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è Rubin AI v2.0
–° –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import time
import random
import threading
import requests
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from collections import defaultdict, deque

@dataclass
class ModuleMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è"""
    module_name: str
    port: int
    request_count: int = 0
    avg_response_time: float = 0.0
    error_count: int = 0
    last_health_check: Optional[datetime] = None
    status: str = "unknown"  # online, offline, degraded

@dataclass
class RequestMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
    timestamp: datetime
    module: str
    response_time: float
    success: bool
    category: str

class IntelligentDispatcherFixed:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
        self.modules = {
            'mathematics': {'port': None, 'name': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å'},  # –õ–æ–∫–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
            'controllers': {'port': 8090, 'name': '–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã'},
            'electrical': {'port': 8087, 'name': '–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞'},
            'radiomechanics': {'port': 8089, 'name': '–†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞'},
            'documents': {'port': 8088, 'name': '–î–æ–∫—É–º–µ–Ω—Ç—ã'},
            'general': {'port': 8084, 'name': '–û–±—â–∏–µ –æ—Ç–≤–µ—Ç—ã'}
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è
        self.math_handler = None
        self._initialize_math_handler()
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥—É–ª–µ–π
        self.module_metrics: Dict[str, ModuleMetrics] = {}
        self.request_history: deque = deque(maxlen=1000)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.load_balanced = True
        self.health_check_interval = 30  # —Å–µ–∫—É–Ω–¥
        
        # –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        self.lock = threading.Lock()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
        self._initialize_metrics()
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self._start_monitoring()
    
    def _initialize_math_handler(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        try:
            from mathematical_solver.integrated_solver import IntegratedMathematicalSolver, MathIntegrationConfig
            
            config = MathIntegrationConfig(
                enabled=True,
                confidence_threshold=0.7,
                fallback_to_general=False,
                log_requests=True,
                response_format="structured"
            )
            
            self.math_handler = IntegratedMathematicalSolver(config)
            self.logger.info("‚úÖ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except ImportError as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—à–∞—Ç–µ–ª—å: {e}")
            try:
                # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ä–µ—à–∞—Ç–µ–ª—é
                from mathematical_problem_solver import MathematicalProblemSolver
                self.math_handler = MathematicalProblemSolver()
                self.logger.info("‚úÖ –ü—Ä–æ—Å—Ç–æ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except ImportError as e2:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å: {e2}")
                self.math_handler = None
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è: {e}")
            self.math_handler = None
    
    def _initialize_metrics(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        for module_id, config in self.modules.items():
            self.module_metrics[module_id] = ModuleMetrics(
                module_name=config['name'],
                port=config['port']
            )
    
    def _start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        def monitor_loop():
            while True:
                try:
                    self._update_health_status()
                    time.sleep(self.health_check_interval)
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                    time.sleep(5)
        
        monitor_thread = threading.Thread(target=monitor_loop, daemon=True)
        monitor_thread.start()
    
    def _update_health_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–¥—É–ª–µ–π"""
        with self.lock:
            for module_id, config in self.modules.items():
                if config['port'] is None:  # –õ–æ–∫–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞)
                    self.module_metrics[module_id].status = "online"
                    self.module_metrics[module_id].last_health_check = datetime.now()
                    continue
                
                try:
                    response = requests.get(
                        f"http://localhost:{config['port']}/health",
                        timeout=3
                    )
                    if response.status_code == 200:
                        self.module_metrics[module_id].status = "online"
                    else:
                        self.module_metrics[module_id].status = "degraded"
                    self.module_metrics[module_id].last_health_check = datetime.now()
                except Exception:
                    self.module_metrics[module_id].status = "offline"
    
    def is_mathematical_request(self, message: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º"""
        if not message or not isinstance(message, str):
            return False
        
        message_lower = message.lower().strip()
        
        # –ü—Ä–æ—Å—Ç—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        import re
        math_patterns = [
            r'^\d+\s*[+\-*/]\s*\d+.*[=?]?$',  # 2+4, 3-1, 5*2, 8/2
            r'^\d+\s*[+\-*/]\s*\d+$',          # 2+4, 3-1 (–±–µ–∑ –∑–Ω–∞–∫–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞)
            r'\d+\s*[+\-*/]\s*\d+',            # –≤ —Ç–µ–∫—Å—Ç–µ
            r'—Å–∫–æ–ª—å–∫–æ.*\d+',                    # —Å–∫–æ–ª—å–∫–æ —è–±–ª–æ–∫, —Å–∫–æ–ª—å–∫–æ –¥–µ—Ä–µ–≤—å–µ–≤
            r'–≤—ã—á–∏—Å–ª–∏\s+\d+',                   # –≤—ã—á–∏—Å–ª–∏ 2+3
            r'—Ä–µ—à–∏\s+\d+',                      # —Ä–µ—à–∏ 5-2
            r'–Ω–∞–π–¥–∏\s+\d+',                     # –Ω–∞–π–¥–∏ 3*4
            r'—è–±–ª–æ–∫.*—Å—Ç–æ–ª–µ.*–æ—Å—Ç–∞–ª–æ—Å—å',          # –∑–∞–¥–∞—á–∞ –ø—Ä–æ —è–±–ª–æ–∫–∏
            r'–¥–µ—Ä–µ–≤—å–µ–≤.*—è–±–ª–æ–Ω.*–≥—Ä—É—à',           # –∑–∞–¥–∞—á–∞ –ø—Ä–æ –¥–µ—Ä–µ–≤—å—è
            r'—Å–∫–æ—Ä–æ—Å—Ç—å.*–ø—É—Ç—å.*–≤—Ä–µ–º—è',           # —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
            r'—É–≥–æ–ª.*–≥—Ä–∞–¥—É—Å.*—Å–º–µ–∂–Ω',            # –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
        ]
        
        for pattern in math_patterns:
            if re.search(pattern, message_lower):
                return True
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        math_keywords = [
            '—Å–∫–æ–ª—å–∫–æ', '–≤—ã—á–∏—Å–ª–∏', '–Ω–∞–π–¥–∏', '—Ä–µ—à–∏', '–∑–∞–¥–∞—á–∞',
            '—Å–∫–æ—Ä–æ—Å—Ç—å', '–≤—Ä–µ–º—è', '—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ', '–ø—É—Ç—å',
            '—É–≥–æ–ª', '–≥—Ä–∞–¥—É—Å', '—Å–º–µ–∂–Ω—ã–µ', '—Å—É–º–º–∞',
            '–¥–µ—Ä–µ–≤—å–µ–≤', '—è–±–ª–æ–Ω', '–≥—Ä—É—à', '—Å–ª–∏–≤',
            '–º/—Å', '–∫–º/—á', '¬∞', '+', '-', '*', '/', '=',
            '–∞–∫—É–ª–∞', '–ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞–µ—Ç', '–¥–ª–∏–Ω–æ–π'
        ]
        
        for keyword in math_keywords:
            if keyword in message_lower:
                return True
        
        return False
    
    def analyze_request_category(self, message: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏"""
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        if self.is_mathematical_request(message):
            self.logger.info(f"üßÆ –û–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å: {message[:50]}...")
            return "mathematics"
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        message_lower = message.lower()
        
        # –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ PMAC
        controller_keywords = ['pmac', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', '–æ—Å—å', '–¥–≤–∏–∂–µ–Ω–∏–µ', '—Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è']
        if any(keyword in message_lower for keyword in controller_keywords):
            return "controllers"
        
        # –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞
        electrical_keywords = ['–æ–º', '–≤–æ–ª—å—Ç', '–∞–º–ø–µ—Ä', '—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ', '—Ç–æ–∫', '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ']
        if any(keyword in message_lower for keyword in electrical_keywords):
            return "electrical"
        
        # –†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞
        radio_keywords = ['–∞–Ω—Ç–µ–Ω–Ω–∞', '—á–∞—Å—Ç–æ—Ç–∞', '—Ä–∞–¥–∏–æ', '—Å–∏–≥–Ω–∞–ª', '–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫']
        if any(keyword in message_lower for keyword in radio_keywords):
            return "radiomechanics"
        
        # –î–æ–∫—É–º–µ–Ω—Ç—ã
        doc_keywords = ['–¥–æ–∫—É–º–µ–Ω—Ç', '—Ñ–∞–π–ª', '–∑–∞–≥—Ä—É–∑–∏—Ç—å', '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å']
        if any(keyword in message_lower for keyword in doc_keywords):
            return "documents"
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ–±—â–∏–µ –æ—Ç–≤–µ—Ç—ã
        return "general"
    
    def route_request(self, message: str) -> Dict:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏"""
        start_time = time.time()
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–∞
            category = self.analyze_request_category(message)
            self.logger.info(f"üì° –ù–∞–ø—Ä–∞–≤–ª—è—é –∫ –º–æ–¥—É–ª—é: {self.modules[category]['name']}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if category == "mathematics":
                return self._handle_mathematical_request(message, start_time)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            return self._handle_remote_request(message, category, start_time)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {e}")
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {str(e)}",
                "provider": "Intelligent Dispatcher",
                "category": "error",
                "timestamp": datetime.now().isoformat()
            }
    
    def _handle_mathematical_request(self, message: str, start_time: float) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        
        if not self.math_handler:
            return {
                "success": False,
                "error": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                "provider": "Mathematical Solver",
                "category": "mathematics",
                "timestamp": datetime.now().isoformat()
            }
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—à–∞—Ç–µ–ª—å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if hasattr(self.math_handler, 'process_request'):
                result = self.math_handler.process_request(message)
                
                processing_time = (time.time() - start_time) * 1000
                
                if result.get("success"):
                    solution_data = result.get("solution_data", {})
                    return {
                        "success": True,
                        "response": solution_data.get("final_answer", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"),
                        "provider": "Mathematical Solver (Integrated)",
                        "category": "mathematics",
                        "confidence": solution_data.get("confidence", 0.0),
                        "explanation": solution_data.get("explanation", ""),
                        "processing_time_ms": processing_time,
                        "timestamp": datetime.now().isoformat()
                    }
                else:
                    return {
                        "success": False,
                        "error": result.get("error_message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"),
                        "provider": "Mathematical Solver (Integrated)",
                        "category": "mathematics",
                        "processing_time_ms": processing_time,
                        "timestamp": datetime.now().isoformat()
                    }
            
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ä–µ—à–∞—Ç–µ–ª—é
            elif hasattr(self.math_handler, 'solve_problem'):
                solution = self.math_handler.solve_problem(message)
                processing_time = (time.time() - start_time) * 1000
                
                if solution:
                    return {
                        "success": True,
                        "response": solution.final_answer,
                        "provider": "Mathematical Solver (Simple)",
                        "category": "mathematics",
                        "confidence": solution.confidence,
                        "explanation": solution.explanation,
                        "processing_time_ms": processing_time,
                        "timestamp": datetime.now().isoformat()
                    }
                else:
                    return {
                        "success": False,
                        "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É",
                        "provider": "Mathematical Solver (Simple)",
                        "category": "mathematics",
                        "processing_time_ms": processing_time,
                        "timestamp": datetime.now().isoformat()
                    }
            
            else:
                return {
                    "success": False,
                    "error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è",
                    "provider": "Mathematical Solver",
                    "category": "mathematics",
                    "timestamp": datetime.now().isoformat()
                }
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏: {e}")
            processing_time = (time.time() - start_time) * 1000
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}",
                "provider": "Mathematical Solver",
                "category": "mathematics",
                "processing_time_ms": processing_time,
                "timestamp": datetime.now().isoformat()
            }
    
    def _handle_remote_request(self, message: str, category: str, start_time: float) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        
        config = self.modules[category]
        port = config['port']
        
        if port is None:
            return {
                "success": False,
                "error": f"–ú–æ–¥—É–ª—å {config['name']} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                "provider": config['name'],
                "category": category,
                "timestamp": datetime.now().isoformat()
            }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—è
            if self.module_metrics[category].status != "online":
                return {
                    "success": False,
                    "error": f"–ú–æ–¥—É–ª—å {config['name']} (–ø–æ—Ä—Ç {port}) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    "provider": config['name'],
                    "category": category,
                    "timestamp": datetime.now().isoformat()
                }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥—É–ª—é
            response = requests.post(
                f"http://localhost:{port}/api/chat",
                json={"message": message},
                timeout=10
            )
            
            processing_time = (time.time() - start_time) * 1000
            
            if response.status_code == 200:
                data = response.json()
                return {
                    "success": True,
                    "response": data.get("response", "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω"),
                    "provider": config['name'],
                    "category": category,
                    "processing_time_ms": processing_time,
                    "timestamp": datetime.now().isoformat()
                }
            else:
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è {config['name']}: {response.status_code}",
                    "provider": config['name'],
                    "category": category,
                    "processing_time_ms": processing_time,
                    "timestamp": datetime.now().isoformat()
                }
                
        except Exception as e:
            processing_time = (time.time() - start_time) * 1000
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {config['name']}: {str(e)}",
                "provider": config['name'],
                "category": category,
                "processing_time_ms": processing_time,
                "timestamp": datetime.now().isoformat()
            }
    
    def get_system_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        with self.lock:
            status = {
                "timestamp": datetime.now().isoformat(),
                "modules": {},
                "mathematical_solver": self.math_handler is not None
            }
            
            for module_id, metrics in self.module_metrics.items():
                status["modules"][module_id] = {
                    "name": metrics.module_name,
                    "port": metrics.port,
                    "status": metrics.status,
                    "request_count": metrics.request_count,
                    "avg_response_time": metrics.avg_response_time,
                    "error_count": metrics.error_count,
                    "last_health_check": metrics.last_health_check.isoformat() if metrics.last_health_check else None
                }
            
            return status

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dispatcher = IntelligentDispatcherFixed()

def route_request(message: str) -> Dict:
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏"""
    return dispatcher.route_request(message)

def get_system_status() -> Dict:
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    return dispatcher.get_system_status()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    test_messages = [
        "2+4",
        "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 3*5?",
        "2 —è–±–ª–æ–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ –æ–¥–Ω–æ —É–∫–∞—Ç–∏–ª–æ—Å—å, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å",
        "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å PMAC –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä?",
        "–†–∞—Å—á–µ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –ø–æ –∑–∞–∫–æ–Ω—É –û–º–∞"
    ]
    
    for message in test_messages:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {message}")
        result = route_request(message)
        print(f"üì° –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result.get('category', 'unknown')}")
        print(f"‚úÖ –£—Å–ø–µ—Ö: {result.get('success', False)}")
        if result.get('success'):
            print(f"üí¨ –û—Ç–≤–µ—Ç: {result.get('response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")


















