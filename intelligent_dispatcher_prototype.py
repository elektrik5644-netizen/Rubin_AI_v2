#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–æ—Ç–æ—Ç–∏–ø —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
–†–µ–∞–ª–∏–∑—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å –ø–æ–∏—Å–∫–æ–≤–∏–∫–æ–º, –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º –∏ —Å–∏—Å—Ç–µ–º–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
"""

import re
import json
import time
import logging
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
from enum import Enum

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class QueryIntent(Enum):
    """–¢–∏–ø—ã –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    ELECTRICAL_ANALYSIS = "electrical_analysis"
    PROGRAMMING = "programming"
    CONTROLLERS = "controllers"
    RADIOMECHANICS = "radiomechanics"
    SCIENCE = "science"
    GENERAL = "general"

class QualityLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞"""
    EXCELLENT = "excellent"  # >= 0.9
    GOOD = "good"          # >= 0.7
    FAIR = "fair"          # >= 0.5
    POOR = "poor"          # < 0.5

@dataclass
class QueryContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    intent: QueryIntent
    entities: List[str]
    complexity: str
    domain: str
    requires_examples: bool
    requires_code: bool
    original_message: str

@dataclass
class SearchResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞"""
    content: str
    source: str
    quality_score: float
    relevance_score: float
    metadata: Dict[str, Any]

@dataclass
class QualityScore:
    """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞"""
    completeness: float
    accuracy: float
    relevance: float
    clarity: float
    overall_score: float

class QueryAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self):
        self.intent_patterns = {
            QueryIntent.ELECTRICAL_ANALYSIS: [
                r'—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫', r'—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫', r'—Ä–µ–∑–∏—Å—Ç–æ—Ä', r'–¥–∏–æ–¥', r'—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä',
                r'–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä', r'–º–æ–¥–±–∞—Å', r'modbus', r'rtu', r'–ø—Ä–æ—Ç–æ–∫–æ–ª', r'—Å—Ö–µ–º–∞',
                r'—Ü–µ–ø—å', r'–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', r'—Ç–æ–∫', r'–º–æ—â–Ω–æ—Å—Ç—å'
            ],
            QueryIntent.PROGRAMMING: [
                r'–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω', r'–∫–æ–¥', r'–∞–ª–≥–æ—Ä–∏—Ç–º', r'python', r'c\+\+', r'java',
                r'—Ñ—É–Ω–∫—Ü–∏—è', r'–∫–ª–∞—Å—Å', r'–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è', r'—Ü–∏–∫–ª', r'—É—Å–ª–æ–≤–∏–µ'
            ],
            QueryIntent.CONTROLLERS: [
                r'–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', r'plc', r'pmac', r'–ø–∏–¥', r'pid', r'scada', r'–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü',
                r'–¥–∞—Ç—á–∏–∫', r'–ø—Ä–∏–≤–æ–¥', r'—Ä–µ–≥—É–ª—è—Ç–æ—Ä'
            ],
            QueryIntent.RADIOMECHANICS: [
                r'—Ä–∞–¥–∏–æ', r'–∞–Ω—Ç–µ–Ω–Ω', r'–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫', r'–ø—Ä–∏–µ–º–Ω–∏–∫', r'—á–∞—Å—Ç–æ—Ç–∞', r'—Å–∏–≥–Ω–∞–ª',
                r'–º–æ–¥—É–ª—è—Ü', r'–¥–µ–º–æ–¥—É–ª—è—Ü', r'—É—Å–∏–ª–∏—Ç–µ–ª—å'
            ],
            QueryIntent.SCIENCE: [
                r'—Ñ–∏–∑–∏–∫', r'–º–∞—Ç–µ–º–∞—Ç–∏–∫', r'—Ñ–æ—Ä–º—É–ª', r'—Ä–∞—Å—á–µ—Ç', r'—Ç–µ–æ—Ä–µ–º–∞', r'–∑–∞–∫–æ–Ω'
            ]
        }
        
        self.complexity_indicators = {
            'high': [r'–ø–æ–¥—Ä–æ–±–Ω–æ', r'–¥–µ—Ç–∞–ª—å–Ω–æ', r'–ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ', r'–≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã'],
            'medium': [r'–æ–±—ä—è—Å–Ω–∏', r'–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç', r'–ø—Ä–∏–Ω—Ü–∏–ø'],
            'low': [r'—á—Ç–æ —Ç–∞–∫–æ–µ', r'–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', r'–∫—Ä–∞—Ç–∫–æ']
        }
    
    def analyze_query(self, message: str) -> QueryContext:
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        message_lower = message.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        intent = self._detect_intent(message_lower)
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π
        entities = self._extract_entities(message_lower)
        
        # –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        complexity = self._assess_complexity(message_lower)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞
        domain = self._determine_domain(intent)
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        requires_examples = self._requires_examples(message_lower)
        requires_code = self._requires_code(message_lower)
        
        return QueryContext(
            intent=intent,
            entities=entities,
            complexity=complexity,
            domain=domain,
            requires_examples=requires_examples,
            requires_code=requires_code,
            original_message=message
        )
    
    def _detect_intent(self, message: str) -> QueryIntent:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        intent_scores = {}
        
        for intent, patterns in self.intent_patterns.items():
            score = 0
            for pattern in patterns:
                matches = re.findall(pattern, message)
                score += len(matches)
            intent_scores[intent] = score
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Å—á–µ—Ç–æ–º
        best_intent = max(intent_scores.items(), key=lambda x: x[1])
        return best_intent[0] if best_intent[1] > 0 else QueryIntent.GENERAL
    
    def _extract_entities(self, message: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π"""
        entities = []
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
        technical_terms = [
            'modbus', 'rtu', 'tcp', 'rs485', 'rs232', 'plc', 'pmac', 'pid',
            'scada', 'hmi', 'opc', 'ethernet', '–ø—Ä–æ—Ç–æ–∫–æ–ª', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä',
            '–¥–∞—Ç—á–∏–∫', '–ø—Ä–∏–≤–æ–¥', '—Ä–µ–≥—É–ª—è—Ç–æ—Ä', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è'
        ]
        
        for term in technical_terms:
            if term in message:
                entities.append(term)
        
        return entities
    
    def _assess_complexity(self, message: str) -> str:
        """–û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        for level, indicators in self.complexity_indicators.items():
            for indicator in indicators:
                if re.search(indicator, message):
                    return level
        return 'medium'
    
    def _determine_domain(self, intent: QueryIntent) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞"""
        domain_mapping = {
            QueryIntent.ELECTRICAL_ANALYSIS: 'electrical_engineering',
            QueryIntent.PROGRAMMING: 'software_development',
            QueryIntent.CONTROLLERS: 'industrial_automation',
            QueryIntent.RADIOMECHANICS: 'radio_engineering',
            QueryIntent.SCIENCE: 'science_education',
            QueryIntent.GENERAL: 'general_knowledge'
        }
        return domain_mapping.get(intent, 'general_knowledge')
    
    def _requires_examples(self, message: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–æ–≤"""
        example_indicators = [r'–ø—Ä–∏–º–µ—Ä', r'–∫–∞–∫', r'–ø–æ–∫–∞–∂–∏', r'–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü']
        return any(re.search(indicator, message) for indicator in example_indicators)
    
    def _requires_code(self, message: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–æ–¥–∞"""
        code_indicators = [r'–∫–æ–¥', r'–ø—Ä–æ–≥—Ä–∞–º–º', r'—Ñ—É–Ω–∫—Ü–∏—è', r'–∫–ª–∞—Å—Å', r'–∞–ª–≥–æ—Ä–∏—Ç–º']
        return any(re.search(indicator, message) for indicator in code_indicators)

class DatabaseSearchEngine:
    """–ü–æ–∏—Å–∫–æ–≤–∏–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.knowledge_base = {
            'modbus_rtu': {
                'content': """üîå **–ü–û–õ–ù–û–ï –†–£–ö–û–í–û–î–°–¢–í–û –ü–û –ü–†–û–¢–û–ö–û–õ–£ MODBUS RTU**

## üìã **–û–°–ù–û–í–´ MODBUS RTU**

### **1. –ß–¢–û –¢–ê–ö–û–ï MODBUS RTU?**
Modbus RTU (Remote Terminal Unit) - —ç—Ç–æ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª —Å–≤—è–∑–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
‚Ä¢ **–°—Ç–∞–Ω–¥–∞—Ä—Ç:** Modbus over Serial Line (RS-485/RS-232)
‚Ä¢ **–¢–∏–ø:** Master-Slave –ø—Ä–æ—Ç–æ–∫–æ–ª
‚Ä¢ **–°–∫–æ—Ä–æ—Å—Ç—å:** 1200-115200 –±–æ–¥
‚Ä¢ **–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:** –¥–æ 1200 –º–µ—Ç—Ä–æ–≤
‚Ä¢ **–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:** –¥–æ 247 —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–µ—Ç–∏

### **2. –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ü–†–û–¢–û–ö–û–õ–ê**

**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Ç–∏:**
‚Ä¢ **Master (–í–µ–¥—É—â–∏–π)** - –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã
‚Ä¢ **Slave (–í–µ–¥–æ–º—ã–π)** - –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã
‚Ä¢ **–ê–¥—Ä–µ—Å–∞—Ü–∏—è:** 1-247 (0 - broadcast, 248-255 - –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã)

**–§–∏–∑–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å:**
‚Ä¢ **RS-485** - –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞, 2 –ø—Ä–æ–≤–æ–¥–∞
‚Ä¢ **RS-232** - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å–≤—è–∑—å, 3 –ø—Ä–æ–≤–æ–¥–∞
‚Ä¢ **–¢–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä—ã** - 120 –û–º –Ω–∞ –∫–æ–Ω—Ü–∞—Ö –ª–∏–Ω–∏–∏

### **3. –°–¢–†–£–ö–¢–£–†–ê –ö–ê–î–†–ê MODBUS RTU**

**–§–æ—Ä–º–∞—Ç –∫–∞–¥—Ä–∞:**
```
[–ê–¥—Ä–µ—Å] [–§—É–Ω–∫—Ü–∏—è] [–î–∞–Ω–Ω—ã–µ] [CRC]
  1 –±–∞–π—Ç   1 –±–∞–π—Ç   N –±–∞–π—Ç   2 –±–∞–π—Ç–∞
```

**–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–∞–¥—Ä–∞:**
‚Ä¢ **–ê–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞** (1 –±–∞–π—Ç) - 1-247
‚Ä¢ **–ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏** (1 –±–∞–π—Ç) - —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
‚Ä¢ **–î–∞–Ω–Ω—ã–µ** (N –±–∞–π—Ç) - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
‚Ä¢ **CRC** (2 –±–∞–π—Ç–∞) - –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞

### **4. –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò MODBUS**

**–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ **01 (0x01)** - Read Coils - —á—Ç–µ–Ω–∏–µ –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤
‚Ä¢ **02 (0x02)** - Read Discrete Inputs - —á—Ç–µ–Ω–∏–µ –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤
‚Ä¢ **03 (0x03)** - Read Holding Registers - —á—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è
‚Ä¢ **04 (0x04)** - Read Input Registers - —á—Ç–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤

**–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ **05 (0x05)** - Write Single Coil - –∑–∞–ø–∏—Å—å –æ–¥–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
‚Ä¢ **06 (0x06)** - Write Single Register - –∑–∞–ø–∏—Å—å –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
‚Ä¢ **15 (0x0F)** - Write Multiple Coils - –∑–∞–ø–∏—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤—ã—Ö–æ–¥–æ–≤
‚Ä¢ **16 (0x10)** - Write Multiple Registers - –∑–∞–ø–∏—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤

**–ö–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã Modbus RTU –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?** –Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ª—é–±–æ–º—É —Ä–∞–∑–¥–µ–ª—É!""",
                'quality_score': 0.9,
                'relevance_score': 0.95,
                'metadata': {
                    'category': 'electrical_engineering',
                    'subcategory': 'industrial_protocols',
                    'difficulty': 'intermediate',
                    'last_updated': '2025-09-14'
                }
            }
        }
    
    def search(self, query: str, context: QueryContext) -> Optional[SearchResult]:
        """–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        query_lower = query.lower()
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for key, data in self.knowledge_base.items():
            if any(entity in query_lower for entity in context.entities):
                if key in query_lower or any(entity in key for entity in context.entities):
                    return SearchResult(
                        content=data['content'],
                        source='database',
                        quality_score=data['quality_score'],
                        relevance_score=data['relevance_score'],
                        metadata=data['metadata']
                    )
        
        return None

class ResponseAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
    
    def analyze_quality(self, response: str, query: str) -> QualityScore:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞"""
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã
        completeness = self._assess_completeness(response, query)
        
        # –û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
        accuracy = self._assess_accuracy(response)
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        relevance = self._assess_relevance(response, query)
        
        # –û—Ü–µ–Ω–∫–∞ —è—Å–Ω–æ—Å—Ç–∏
        clarity = self._assess_clarity(response)
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        overall_score = (completeness + accuracy + relevance + clarity) / 4
        
        return QualityScore(
            completeness=completeness,
            accuracy=accuracy,
            relevance=relevance,
            clarity=clarity,
            overall_score=overall_score
        )
    
    def _assess_completeness(self, response: str, query: str) -> float:
        """–û—Ü–µ–Ω–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –æ—Ç–≤–µ—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        completeness_indicators = [
            '—á—Ç–æ —Ç–∞–∫–æ–µ', '–æ—Å–Ω–æ–≤—ã', '–ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã', '—Ç–∏–ø—ã', '–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ',
            '–ø—Ä–∏–º–µ—Ä—ã', '—Å—Ö–µ–º—ã', '—Ä–∞—Å—á–µ—Ç—ã', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
        ]
        
        found_indicators = sum(1 for indicator in completeness_indicators 
                             if indicator in response.lower())
        
        return min(found_indicators / len(completeness_indicators), 1.0)
    
    def _assess_accuracy(self, response: str) -> float:
        """–û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        technical_terms = [
            'modbus', 'rtu', 'rs485', 'crc', 'master', 'slave',
            '—Ä–µ–≥–∏—Å—Ç—Ä', '—Ñ—É–Ω–∫—Ü–∏—è', '–∞–¥—Ä–µ—Å', '–ø—Ä–æ—Ç–æ–∫–æ–ª'
        ]
        
        found_terms = sum(1 for term in technical_terms 
                         if term in response.lower())
        
        return min(found_terms / len(technical_terms), 1.0)
    
    def _assess_relevance(self, response: str, query: str) -> float:
        """–û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞"""
        query_entities = query.lower().split()
        response_entities = response.lower().split()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π
        common_entities = set(query_entities) & set(response_entities)
        
        if not query_entities:
            return 0.0
        
        return len(common_entities) / len(query_entities)
    
    def _assess_clarity(self, response: str) -> float:
        """–û—Ü–µ–Ω–∫–∞ —è—Å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        clarity_indicators = [
            '##', '###', '‚Ä¢', '**', '```', '—Ç–∞–±–ª–∏—Ü–∞', '—Å—Ö–µ–º–∞'
        ]
        
        found_indicators = sum(1 for indicator in clarity_indicators 
                             if indicator in response)
        
        return min(found_indicators / len(clarity_indicators), 1.0)

class InternetSearchEngine:
    """–ü–æ–∏—Å–∫–æ–≤–∏–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"""
    
    def search(self, query: str, context: QueryContext) -> SearchResult:
        """–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
        internet_content = f"""
üåê **–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ò–ù–¢–ï–†–ù–ï–¢–ê**

**–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ {query}:**

‚Ä¢ **–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:** Modbus.org
‚Ä¢ **–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã:** IEC 61158, IEC 61784
‚Ä¢ **–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:** –®–∏—Ä–æ–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è–º–∏
‚Ä¢ **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ CRC
‚Ä¢ **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π

**–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏:**
‚Ä¢ Modbus TCP/IP –¥–ª—è Ethernet —Å–µ—Ç–µ–π
‚Ä¢ Modbus RTU over TCP –¥–ª—è –≥–∏–±—Ä–∏–¥–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å IoT –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
‚Ä¢ –û–±–ª–∞—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

**–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä—ã
‚Ä¢ –û–±–µ—Å–ø–µ—á—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–±–µ–ª–µ–π
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–µ—Ç–∏
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤
"""
        
        return SearchResult(
            content=internet_content,
            source='internet',
            quality_score=0.8,
            relevance_score=0.85,
            metadata={
                'search_engine': 'google',
                'timestamp': time.time(),
                'results_count': 1000
            }
        )

class FeedbackSystem:
    """–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    
    def __init__(self):
        self.feedback_history = []
    
    def process_feedback(self, response_id: str, feedback: str, user_rating: Optional[int] = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        feedback_entry = {
            'response_id': response_id,
            'feedback': feedback,
            'rating': user_rating,
            'timestamp': time.time()
        }
        
        self.feedback_history.append(feedback_entry)
        
        # –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        if '–Ω–µ —Ç–æ' in feedback.lower() or '–Ω–µ–≤–µ—Ä–Ω–æ' in feedback.lower():
            logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –Ω–∞ –æ—à–∏–±–∫—É –≤ –æ—Ç–≤–µ—Ç–µ {response_id}")
            return {'action': 'search_alternative', 'reason': 'incorrect_answer'}
        elif '–±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏' in feedback.lower() or '–ø–æ–¥—Ä–æ–±–Ω–µ–µ' in feedback.lower():
            logger.info(f"üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞ {response_id}")
            return {'action': 'search_additional', 'reason': 'needs_more_info'}
        elif user_rating and user_rating >= 4:
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Å–æ–∫–æ –æ—Ü–µ–Ω–∏–ª –æ—Ç–≤–µ—Ç {response_id}")
            return {'action': 'reinforce', 'reason': 'positive_feedback'}
        else:
            logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ {response_id}: {feedback}")
            return {'action': 'analyze', 'reason': 'general_feedback'}

class SmartDispatcher:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä"""
    
    def __init__(self):
        self.query_analyzer = QueryAnalyzer()
        self.db_search_engine = DatabaseSearchEngine()
        self.response_analyzer = ResponseAnalyzer()
        self.internet_search_engine = InternetSearchEngine()
        self.feedback_system = FeedbackSystem()
        self.quality_threshold = 0.8
    
    def process_query(self, message: str) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å: {message[:100]}...")
        
        # –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        context = self.query_analyzer.analyze_query(message)
        logger.info(f"üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context.intent.value}, —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {context.complexity}")
        
        # –≠—Ç–∞–ø 2: –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_result = self.db_search_engine.search(message, context)
        
        if db_result:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∫–∞—á–µ—Å—Ç–≤–æ: {db_result.quality_score}")
            
            # –≠—Ç–∞–ø 3: –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
            quality = self.response_analyzer.analyze_quality(db_result.content, message)
            logger.info(f"üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {quality.overall_score:.2f}")
            
            # –≠—Ç–∞–ø 4: –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è
            if quality.overall_score >= self.quality_threshold:
                logger.info("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏–∑ –ë–î")
                return self._format_response(db_result, quality, context)
            else:
                logger.info("‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ, –∏—â–µ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ")
                internet_result = self.internet_search_engine.search(message, context)
                internet_quality = self.response_analyzer.analyze_quality(internet_result.content, message)
                
                # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç
                if internet_quality.overall_score > quality.overall_score:
                    logger.info("üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–æ—Ç–≤–µ—Ç –ª—É—á—à–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ")
                    return self._format_response(internet_result, internet_quality, context)
                else:
                    logger.info("üíæ –û—Ç–≤–µ—Ç –∏–∑ –ë–î –ª—É—á—à–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ")
                    return self._format_response(db_result, quality, context)
        else:
            logger.info("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∏—â–µ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ")
            internet_result = self.internet_search_engine.search(message, context)
            internet_quality = self.response_analyzer.analyze_quality(internet_result.content, message)
            
            return self._format_response(internet_result, internet_quality, context)
    
    def process_feedback(self, response_id: str, feedback: str, rating: Optional[int] = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        return self.feedback_system.process_feedback(response_id, feedback, rating)
    
    def _format_response(self, result: SearchResult, quality: QualityScore, context: QueryContext) -> Dict[str, Any]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        return {
            'response': result.content,
            'provider': 'Smart Dispatcher',
            'category': context.intent.value,
            'quality_score': quality.overall_score,
            'source': result.source,
            'metadata': {
                'intent': context.intent.value,
                'complexity': context.complexity,
                'domain': context.domain,
                'entities': context.entities,
                'quality_breakdown': {
                    'completeness': quality.completeness,
                    'accuracy': quality.accuracy,
                    'relevance': quality.relevance,
                    'clarity': quality.clarity
                }
            },
            'thinking_process': [
                f"–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: {context.intent.value}",
                f"–ü–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ: {result.source}",
                f"–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {quality.overall_score:.2f}",
                f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"
            ],
            'timestamp': time.time(),
            'success': True
        }

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    dispatcher = SmartDispatcher()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    test_query = "–û–ø–∏—à–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª Modbus RTU"
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞")
    print("=" * 50)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    result = dispatcher.process_query(test_query)
    
    print(f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result['category']}")
    print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ: {result['quality_score']:.2f}")
    print(f"üîç –ò—Å—Ç–æ—á–Ω–∏–∫: {result['source']}")
    print(f"üí≠ –ü—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è: {result['thinking_process']}")
    print("\nüìù –û—Ç–≤–µ—Ç:")
    print(result['response'][:500] + "...")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
    print("=" * 50)
    
    feedback_result = dispatcher.process_feedback("test_123", "–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    print(f"–î–µ–π—Å—Ç–≤–∏–µ: {feedback_result['action']}")
    print(f"–ü—Ä–∏—á–∏–Ω–∞: {feedback_result['reason']}")


















