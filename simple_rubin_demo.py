#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üéØ –ü–†–û–°–¢–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–õ–Ø RUBIN AI: –ü–†–û–ï–ö–¢ VMB630
================================================
"""

import requests
import json

def demo_for_rubin():
    """–ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è Rubin AI"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–õ–Ø RUBIN AI: –ü–†–û–ï–ö–¢ VMB630")
    print("=" * 60)
    
    # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Rubin AI
    messages = [
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: –ü—Ä–∏–≤–µ—Ç Rubin! –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º VMB630 - —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—Ä–µ–∑–µ—Ä–Ω—ã–º —Å—Ç–∞–Ω–∫–æ–º —Å –ß–ü–£. –ü—Ä–æ–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç 102 —Ñ–∞–π–ª–∞, —É–ø—Ä–∞–≤–ª—è–µ—Ç 6 –æ—Å—è–º–∏ –∏ 2 —à–ø–∏–Ω–¥–µ–ª—è–º–∏. –ß—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ?",
        
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: –ú—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: Singleton –¥–ª—è ConfigurationManager, Observer –¥–ª—è EventSystem, Factory –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, Strategy –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, Command –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π. –û–±—ä—è—Å–Ω–∏ –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω.",
        
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: –ù–∞—à–∞ —Ü–µ–ª—å - —É–ª—É—á—à–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É VMB630. –ú—ã —Å–Ω–∏–∑–∏–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞ 60-70%, —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –Ω–∞ 80-90%, –ø–æ–≤—ã—Å–∏–ª–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –Ω–∞ 90%. –ö–∞–∫ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–º–æ–≥–∞—é—Ç –¥–æ—Å—Ç–∏—á—å —ç—Ç–æ–≥–æ?",
        
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: –ü–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω–∫–æ–º VMB630. –ö–∞–∫ –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ?"
    ]
    
    for i, message in enumerate(messages, 1):
        print(f"\n{i}. –û–ë–†–ê–©–ï–ù–ò–ï –ö RUBIN AI:")
        print("-" * 40)
        print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        
        try:
            response = requests.post('http://localhost:8080/api/chat', 
                                  json={'message': message})
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    explanation = data['response'].get('explanation', '–ù–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è')
                    print(f"\nü§ñ –û–¢–í–ï–¢ RUBIN AI:")
                    print(f"üìã {explanation[:300]}..." if len(explanation) > 300 else f"üìã {explanation}")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ Rubin AI")
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        
        print("\n" + "="*60)

def show_our_work():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—à—É —Ä–∞–±–æ—Ç—É"""
    print("\nüèóÔ∏è –ß–¢–û –ú–´ –°–î–ï–õ–ê–õ–ò:")
    print("=" * 40)
    
    work_items = [
        "‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç VMB630 (102 —Ñ–∞–π–ª–∞, 4.43 MB)",
        "‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–ª–∏ 5 –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "‚úÖ –°–æ–∑–¥–∞–ª–∏ 28 —Ñ–∞–π–ª–æ–≤ (15 Python + 13 –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)",
        "‚úÖ –°–Ω–∏–∑–∏–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –Ω–∞ 60-70%",
        "‚úÖ –°–Ω–∏–∑–∏–ª–∏ —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ 80-90%",
        "‚úÖ –ü–æ–≤—ã—Å–∏–ª–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –Ω–∞ 90%",
        "‚úÖ –°–æ–∑–¥–∞–ª–∏ –ø–æ–ª–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏ —Ç–µ—Å—Ç—ã",
        "‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É Rubin AI"
    ]
    
    for item in work_items:
        print(f"  {item}")
    
    print(f"\nüéØ –ì–û–¢–û–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
    components = [
        "vmb630_advanced_architecture.py - –ü–æ–ª–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
        "vmb630_configuration_manager.py - Singleton + Observer",
        "test_vmb630_patterns.py - Unit —Ç–µ—Å—Ç—ã",
        "README_VMB630_–ê–†–•–ò–¢–ï–ö–¢–£–†–ê.md - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç",
        "–î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø_VMB630_–ü–ê–¢–¢–ï–†–ù–´.md - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
        "–§–ò–ù–ê–õ–¨–ù–´–ô_–û–¢–ß–ï–¢_–ü–û–õ–ù–ê–Ø_–†–ï–ê–õ–ò–ó–ê–¶–ò–Ø_–ü–ê–¢–¢–ï–†–ù–û–í.md - –û—Ç—á–µ—Ç"
    ]
    
    for component in components:
        print(f"  üìÅ {component}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –ü–†–û–°–¢–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–õ–Ø RUBIN AI")
    print("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º Rubin AI –Ω–∞—à –ø—Ä–æ–µ–∫—Ç VMB630 —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    try:
        response = requests.get('http://localhost:8080/api/health')
        if response.status_code == 200:
            print("‚úÖ Smart Dispatcher –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            print("‚ùå Smart Dispatcher –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
    except:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Smart Dispatcher")
        return
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è Rubin AI
    demo_for_rubin()
    
    # –ü–æ–∫–∞–∑ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç—ã
    show_our_work()
    
    print("\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("Rubin AI —Ç–µ–ø–µ—Ä—å –∑–Ω–∞–µ—Ç –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ VMB630!")

if __name__ == "__main__":
    main()





