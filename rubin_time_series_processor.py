import numpy as np
import math
import logging
from typing import List, Tuple, Dict, Any, Optional

logger = logging.getLogger(__name__)

class NPriceType:
    PriceHigh = 0
    PriceLow = 1
    PriceClose = 2

class RubinTimeSeriesProcessor:
    """–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ (–º–æ–¥—É–ª—å 'Trade' –∏–∑ NeuroRepository)."""

    def __init__(self, period: int = 1, price_type: int = NPriceType.PriceClose, len_in: int = 0,
                 koef_tg: float = 10000.0, koef_price: float = 1.0, koef_volume: float = 1.0):
        self.period = period
        self.price_type = price_type
        self.len_in = len_in
        self.koef_tg = koef_tg
        self.koef_price = koef_price
        self.koef_volume = koef_volume

        self.data_matrix: Optional[np.ndarray] = None
        self.data_period: Optional[np.ndarray] = None
        self.data_tg: Optional[np.ndarray] = None
        self.examples: List[Dict[str, np.ndarray]] = []

    def set_parameters(self, period: int, price_type: int, len_in: int,
                       koef_tg: float, koef_price: float, koef_volume: float):
        self.period = period
        self.price_type = price_type
        self.len_in = len_in
        self.koef_tg = koef_tg
        self.koef_price = koef_price
        self.koef_volume = koef_volume

    def preprocess_data(self, raw_data: np.ndarray) -> List[Dict[str, np.ndarray]]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤."""
        self.data_matrix = raw_data
        self._calc_period()
        self._calc_tg()
        self._calc_example()
        return self.examples

    def postprocess_output(self, nn_output: np.ndarray) -> float:
        """–ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏."""
        if nn_output.size == 0:
            return 0.0 # –∏–ª–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ nn_output - —ç—Ç–æ –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏–ª–∏ —Å–∫–∞–ª—è—Ä
        value = math.tan(nn_output.flatten()[0]) / (self.koef_tg * self.koef_price)
        return value

    def _calc_period(self):
        """–ê–≥—Ä–µ–≥–∞—Ü–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É."""
        if self.data_matrix is None or self.period <= 0:
            logger.warning("‚ö†Ô∏è –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø–µ—Ä–∏–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –¥–ª—è _calc_period.")
            return

        num_rows, num_cols = self.data_matrix.shape
        new_num_rows = num_rows // self.period

        if new_num_rows == 0: # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—å—à–µ –ø–µ—Ä–∏–æ–¥–∞
            logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É.")
            self.data_period = np.array([])
            return

        self.data_period = np.zeros((new_num_rows, 5), dtype=float) # O, H, L, C, V

        for knd in range(new_num_rows):
            start_row = knd * self.period
            end_row = min((knd + 1) * self.period, num_rows)
            period_data = self.data_matrix[start_row:end_row, :]

            if period_data.size == 0:
                continue

            v_open = period_data[0, 0] # Open
            v_close = period_data[-1, 3] # Close
            v_high = np.max(period_data[:, 1]) # High
            v_low = np.min(period_data[:, 2]) # Low
            v_volume = np.sum(period_data[:, 4]) # Volume

            self.data_period[knd, 0] = v_open
            self.data_period[knd, 1] = v_high
            self.data_period[knd, 2] = v_low
            self.data_period[knd, 3] = v_close
            self.data_period[knd, 4] = v_volume

        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø–µ—Ä–∏–æ–¥—É {self.period}. –ù–æ–≤–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {self.data_period.shape}")

    def _calc_tg(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å atan() –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏."""
        if self.data_period is None or self.data_period.size == 0 or self.data_period.shape[0] < 2:
            logger.warning("‚ö†Ô∏è –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã –¥–ª—è _calc_tg.")
            self.data_tg = np.array([])
            return

        num_rows, num_cols = self.data_period.shape
        self.data_tg = np.zeros((num_rows - 1, num_cols), dtype=float)

        for ind in range(1, num_rows):
            for jnd in range(num_cols):
                d_value = self.data_period[ind, jnd] - self.data_period[ind - 1, jnd]
                if jnd == num_cols - 1: # Volume
                    d_value = self.koef_volume * d_value
                else: # Price
                    d_value = self.koef_tg * self.koef_price * d_value
                
                # –ò–∑–±–µ–≥–∞–µ–º atan() –æ—Ç –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ Inf/NaN
                d_value = np.clip(d_value, -1e10, 1e10) # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ atan
                self.data_tg[ind - 1, jnd] = math.atan(d_value)

        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã —Å atan(). –ù–æ–≤–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {self.data_tg.shape}")

    def _calc_example(self):
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ (–≤—Ö–æ–¥–Ω—ã—Ö –∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤)."""
        self.examples = []
        if self.data_tg is None or self.data_tg.size == 0 or self.len_in <= 0:
            logger.warning("‚ö†Ô∏è –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ len_in –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –¥–ª—è _calc_example.")
            return

        num_rows, num_cols = self.data_tg.shape
        effective_rows = num_rows - self.len_in # +1 –¥–ª—è output, -1 —Ç–∞–∫ –∫–∞–∫ –Ω–∞—á–∏–Ω–∞–µ–º —Å 0

        if effective_rows <= 0:
            logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ —Å —Ç–µ–∫—É—â–∏–º len_in.")
            return

        for ind in range(effective_rows):
            input_vector = []
            for knd in range(self.len_in):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º Open (—Å—Ç–æ–ª–±–µ—Ü 0) –∫–∞–∫ –≤ NTradeTg::calcExample
                input_vector.extend(self.data_tg[ind + knd, 1:num_cols]) 

            output_value = 0.0
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç price_type
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ NTradeTg::calcExample
            if self.price_type == NPriceType.PriceHigh:
                output_value = self.data_tg[ind + self.len_in, 1] # High
            elif self.price_type == NPriceType.PriceLow:
                output_value = self.data_tg[ind + self.len_in, 2] # Low
            elif self.price_type == NPriceType.PriceClose:
                output_value = self.data_tg[ind + self.len_in, 3] # Close
            
            self.examples.append({
                'input': np.array(input_vector, dtype=float),
                'output': np.array([output_value], dtype=float)
            })
        logger.info(f"‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(self.examples)} –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤.")

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.info("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RubinTimeSeriesProcessor")
    
    # –ü—Ä–∏–º–µ—Ä —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (Open, High, Low, Close, Volume)
    # 5 —Å—Ç–æ–ª–±—Ü–æ–≤, –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ NTradeTg
    raw_data = np.array([
        [100, 105, 98, 103, 1000],
        [103, 107, 101, 106, 1200],
        [106, 110, 104, 108, 1100],
        [108, 112, 106, 110, 1300],
        [110, 115, 108, 113, 1500],
        [113, 117, 111, 116, 1400],
        [116, 120, 114, 119, 1600],
        [119, 122, 117, 121, 1700],
        [121, 125, 119, 123, 1800],
        [123, 127, 121, 125, 1900],
    ])
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–µ—Ä–∏–æ–¥–æ–º 2, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ Close, len_in 2
    processor = RubinTimeSeriesProcessor(
        period=2, 
        price_type=NPriceType.PriceClose, 
        len_in=2, 
        koef_tg=10000.0, 
        koef_price=1.0, 
        koef_volume=1.0
    )
    
    processed_examples = processor.preprocess_data(raw_data)
    
    if processed_examples:
        print("\n–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã (–ø–µ—Ä–≤—ã–µ 2):")
        for i, example in enumerate(processed_examples[:2]):
            print(f"  –ü—Ä–∏–º–µ—Ä {i+1}:")
            print(f"    Input: {example['input']}")
            print(f"    Output: {example['output']}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ postprocess_output
        test_nn_output = np.array([math.atan(0.0001 * 10000 * 1)]) # –ü—Ä–∏–º–µ—Ä –≤—ã—Ö–æ–¥–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        postprocessed_val = processor.postprocess_output(test_nn_output)
        print(f"\n–¢–µ—Å—Ç–æ–≤—ã–π postprocess_output –¥–ª—è {test_nn_output}: {postprocessed_val}")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å len_in > num_rows
    logger.info("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º len_in (–±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)")
    processor_invalid = RubinTimeSeriesProcessor(period=1, price_type=NPriceType.PriceClose, len_in=100)
    processed_examples_invalid = processor_invalid.preprocess_data(raw_data)
    assert not processed_examples_invalid, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    logger.info("‚úÖ –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º len_in –ø—Ä–æ–π–¥–µ–Ω.")

    logger.info("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º period –∏ len_in")
    processor_diff = RubinTimeSeriesProcessor(period=3, price_type=NPriceType.PriceHigh, len_in=1)
    processed_examples_diff = processor_diff.preprocess_data(raw_data)
    if processed_examples_diff:
        print("\n–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã (period=3, len_in=1, PriceHigh):")
        for i, example in enumerate(processed_examples_diff[:2]):
            print(f"  –ü—Ä–∏–º–µ—Ä {i+1}:")
            print(f"    Input: {example['input']}")
            print(f"    Output: {example['output']}")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞.")









