#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –≤ Rubin AI v2
"""

import requests
import time
import json

def test_logic_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á."""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á")
    print("=" * 60)
    
    base_url = "http://localhost:8106"
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Logic Tasks API...")
    try:
        response = requests.get(f"{base_url}/api/logic/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {data['status']}")
            print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {data['message']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}")
        return False
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–∞—á–∏
    print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –ª–æ–≥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏...")
    try:
        response = requests.get(f"{base_url}/api/logic/task", timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data['success']:
                print("‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                print(f"üìù –¢–∏–ø: {data['task_type']}")
                print(f"üìÑ –ó–∞–¥–∞—á–∞: {data['task'][:200]}...")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {data['error']}")
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    print("\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞...")
    try:
        response = requests.get(f"{base_url}/api/logic/task?type=–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data['success']:
                print("‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω–∞")
                print(f"üìÑ –ó–∞–¥–∞—á–∞: {data['task'][:200]}...")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {data['error']}")
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 4: –ß–∞—Ç —Å –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏...")
    test_messages = [
        "–¥–∞–π –∑–∞–¥–∞—á—É",
        "–∑–∞–¥–∞—á–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞",
        "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∑–∞–¥–∞—á–∞",
        "–ø–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    ]
    
    for message in test_messages:
        try:
            print(f"\nüìù –¢–µ—Å—Ç: '{message}'")
            response = requests.post(
                f"{base_url}/api/logic/chat",
                json={'message': message},
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if data['success']:
                    print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
                    print(f"üìÑ –û—Ç–≤–µ—Ç: {data['response'][:150]}...")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {data['error']}")
            else:
                print(f"‚ùå HTTP {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        time.sleep(1)
    
    # –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n5Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    try:
        response = requests.get(f"{base_url}/api/logic/stats", timeout=5)
        if response.status_code == 200:
            data = response.json()
            if data['success']:
                stats = data['statistics']
                print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
                print(f"üéØ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {stats['total_attempts']}")
                print(f"‚úÖ –†–µ—à–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {stats['solved_tasks']}")
                print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {stats['failed_tasks']}")
                print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']}")
                
                print("\nüìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á:")
                for name, info in stats['dataset_stats'].items():
                    print(f"  üîπ {name}: {info['count']} –∑–∞–¥–∞—á")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {data['error']}")
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Simple Dispatcher
    print("\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Simple Dispatcher...")
    dispatcher_url = "http://localhost:8080"
    
    try:
        response = requests.post(
            f"{dispatcher_url}/api/chat",
            json={'message': '–¥–∞–π –ª–æ–≥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É'},
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –î–∏—Å–ø–µ—Ç—á–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å")
            print(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', 'unknown')}")
            print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: {data.get('server_description', 'unknown')}")
            
            if 'error' in data:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {data['error']}")
            else:
                print("‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä")
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {e}")
    
    print("\n" + "=" * 60)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("=" * 60)

if __name__ == '__main__':
    test_logic_integration()



