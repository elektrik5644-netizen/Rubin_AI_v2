#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üßπ Memory Cleanup - –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—è–∂–µ–ª—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
"""

import psutil
import os
import gc
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def cleanup_memory():
    """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ Python"""
    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ Python...")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
    collected = gc.collect()
    logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {collected}")
    
    # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –º–æ–¥—É–ª–µ–π
    import sys
    for module_name in list(sys.modules.keys()):
        if module_name.startswith('torch') or module_name.startswith('transformers'):
            del sys.modules[module_name]
    
    logger.info("‚úÖ –û—á–∏—â–µ–Ω –∫—ç—à –º–æ–¥—É–ª–µ–π")

def kill_heavy_processes():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—è–∂–µ–ª—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    logger.info("üõë –ü–æ–∏—Å–∫ —Ç—è–∂–µ–ª—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    
    killed_count = 0
    for proc in psutil.process_iter(['pid', 'name', 'memory_info', 'cmdline']):
        try:
            memory_mb = proc.info['memory_info'].rss // (1024**2)
            cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
            
            # –ò—â–µ–º —Ç—è–∂–µ–ª—ã–µ Python –ø—Ä–æ—Ü–µ—Å—Å—ã
            if (proc.info['name'] and 'python' in proc.info['name'].lower() and 
                memory_mb > 500 and  # –ë–æ–ª—å—à–µ 500MB
                any(keyword in cmdline.lower() for keyword in ['torch', 'transformers', 'localai', 'docker'])):
                
                logger.warning(f"üî™ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—è–∂–µ–ª—ã–π –ø—Ä–æ—Ü–µ—Å—Å: {proc.info['name']} (PID: {proc.info['pid']}, {memory_mb}MB)")
                proc.terminate()
                killed_count += 1
                
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    
    logger.info(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {killed_count}")

def optimize_system():
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("‚öôÔ∏è  –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    temp_dirs = ['/tmp', 'C:\\temp', 'C:\\Windows\\Temp']
    for temp_dir in temp_dirs:
        if os.path.exists(temp_dir):
            try:
                for root, dirs, files in os.walk(temp_dir):
                    for file in files:
                        if file.endswith(('.log', '.tmp', '.cache')):
                            file_path = os.path.join(root, file)
                            try:
                                os.remove(file_path)
                            except:
                                pass
            except:
                pass
    
    logger.info("‚úÖ –û—á–∏—â–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")

def show_memory_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞–º—è—Ç–∏"""
    memory = psutil.virtual_memory()
    
    logger.info("üìä –°—Ç–∞—Ç—É—Å –ø–∞–º—è—Ç–∏:")
    logger.info(f"  üíæ –í—Å–µ–≥–æ: {memory.total // (1024**3):.1f}GB")
    logger.info(f"  üî¥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {memory.used // (1024**3):.1f}GB ({memory.percent:.1f}%)")
    logger.info(f"  üü¢ –î–æ—Å—Ç—É–ø–Ω–æ: {memory.available // (1024**3):.1f}GB")
    
    if memory.percent > 90:
        logger.warning("‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 90%!")
    elif memory.percent > 80:
        logger.warning("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 80%")
    else:
        logger.info("‚úÖ –ü–∞–º—è—Ç—å –≤ –Ω–æ—Ä–º–µ")

def main():
    logger.info("üßπ Memory Cleanup –∑–∞–ø—É—â–µ–Ω")
    logger.info("=" * 40)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    show_memory_status()
    
    # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
    cleanup_memory()
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—è–∂–µ–ª—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    kill_heavy_processes()
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    optimize_system()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    logger.info("\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:")
    show_memory_status()
    
    logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == '__main__':
    main()



