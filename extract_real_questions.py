#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Rubin AI
"""

import sqlite3
import json
from datetime import datetime

def extract_real_questions():
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö Rubin AI"""
    print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Rubin AI")
    print("=" * 60)
    
    all_questions = []
    
    # –°–ø–∏—Å–æ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    databases = [
        'rubin_learning.db',
        'rubin_chatbot_unified.db', 
        'rubin_knowledge_base.db',
        'rubin_api_unified.db',
        'rubin_context.db',
        'rubin_simple_learning.db',
        'rubin_understanding.db'
    ]
    
    for db_name in databases:
        try:
            print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É: {db_name}")
            conn = sqlite3.connect(db_name)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()
            
            for table_name, in tables:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—Ç–æ–ª–±—Ü—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏/—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    cursor.execute(f"PRAGMA table_info({table_name})")
                    columns = cursor.fetchall()
                    column_names = [col[1] for col in columns]
                    
                    # –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã
                    question_columns = []
                    for col in column_names:
                        if any(keyword in col.lower() for keyword in ['message', 'question', 'query', 'text', 'content', 'input']):
                            question_columns.append(col)
                    
                    if question_columns:
                        print(f"  üìã –¢–∞–±–ª–∏—Ü–∞ {table_name}: –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã {question_columns}")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        for col in question_columns:
                            try:
                                cursor.execute(f"SELECT DISTINCT {col} FROM {table_name} WHERE {col} IS NOT NULL AND {col} != '' LIMIT 20")
                                questions = cursor.fetchall()
                                
                                for question, in questions:
                                    if isinstance(question, str) and len(question.strip()) > 10:
                                        all_questions.append({
                                            'question': question.strip(),
                                            'source_db': db_name,
                                            'source_table': table_name,
                                            'source_column': col
                                        })
                            except Exception as e:
                                print(f"    ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ {col}: {e}")
                
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
            
            conn.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {db_name}: {e}")
    
    return all_questions

def analyze_questions(questions):
    """–ê–Ω–∞–ª–∏–∑ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    print("=" * 40)
    
    print(f"üìà –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    sources = {}
    for q in questions:
        source = q['source_db']
        if source not in sources:
            sources[source] = 0
        sources[source] += 1
    
    print(f"\nüìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö:")
    for source, count in sources.items():
        print(f"  ‚Ä¢ {source}: {count} –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω—ã –≤–æ–ø—Ä–æ—Å–æ–≤
    lengths = [len(q['question']) for q in questions]
    if lengths:
        avg_length = sum(lengths) / len(lengths)
        min_length = min(lengths)
        max_length = max(lengths)
        print(f"\nüìè –î–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è: {avg_length:.1f} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {min_length} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {max_length} —Å–∏–º–≤–æ–ª–æ–≤")
    
    return questions

def select_best_questions(questions, count=10):
    """–í—ã–±–æ—Ä –ª—É—á—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"\nüéØ –í—ã–±–æ—Ä {count} –ª—É—á—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    print("=" * 35)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
    filtered_questions = []
    
    for q in questions:
        question = q['question']
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
        if (20 <= len(question) <= 200 and 
            not question.startswith('{') and  # –Ω–µ JSON
            not question.startswith('[') and  # –Ω–µ –º–∞—Å—Å–∏–≤
            not question.isdigit() and        # –Ω–µ —á–∏—Å–ª–æ
            '?' in question or               # —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–ø—Ä–æ—Å
            any(word in question.lower() for word in ['—á—Ç–æ', '–∫–∞–∫', '—Ä–∞—Å—Å–∫–∞–∂–∏', '–æ–±—ä—è—Å–Ω–∏', '–ø–æ–º–æ–≥–∏', '—Å—Ä–∞–≤–Ω–∏'])):  # –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
            
            filtered_questions.append(q)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ –¥–ª–∏–Ω–µ)
    filtered_questions.sort(key=lambda x: abs(len(x['question']) - 80))
    
    # –í—ã–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    selected = []
    seen_questions = set()
    
    for q in filtered_questions:
        question_lower = q['question'].lower()
        if question_lower not in seen_questions:
            selected.append(q)
            seen_questions.add(question_lower)
            if len(selected) >= count:
                break
    
    print(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ {len(selected)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    return selected

def create_questions_file(questions):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
    print(f"\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏")
    print("=" * 45)
    
    try:
        with open('RUBIN_REAL_QUESTIONS.md', 'w', encoding='utf-8') as f:
            f.write("# üéØ –†–µ–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Rubin AI\n\n")
            f.write(f"**–î–∞—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"**–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤:** {len(questions)}\n\n")
            
            f.write("## üìã –°–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n\n")
            
            for i, q in enumerate(questions, 1):
                f.write(f"### {i}. {q['question']}\n")
                f.write(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {q['source_db']} ‚Üí {q['source_table']} ‚Üí {q['source_column']}\n\n")
            
            f.write("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º\n\n")
            sources = {}
            for q in questions:
                source = q['source_db']
                sources[source] = sources.get(source, 0) + 1
            
            for source, count in sources.items():
                f.write(f"- **{source}**: {count} –≤–æ–ø—Ä–æ—Å–æ–≤\n")
            
            f.write(f"\n## üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ\n\n")
            f.write("–≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Rubin AI –∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è:\n")
            f.write("- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã\n")
            f.write("- –ê–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤\n")
            f.write("- –û–±—É—á–µ–Ω–∏—è –∞–≤—Ç–æ-—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞\n")
            f.write("- –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª–µ–π\n")
        
        print("‚úÖ –§–∞–π–ª RUBIN_REAL_QUESTIONS.md —Å–æ–∑–¥–∞–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Rubin AI")
    print("=" * 60)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
    all_questions = extract_real_questions()
    
    if not all_questions:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
    analyze_questions(all_questions)
    
    # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    best_questions = select_best_questions(all_questions, 10)
    
    if not best_questions:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
    create_questions_file(best_questions)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüéâ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
    print(f"üéØ –í—ã–±—Ä–∞–Ω–æ {len(best_questions)} –ª—É—á—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    print(f"üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª RUBIN_REAL_QUESTIONS.md")
    
    print(f"\nüìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:")
    for i, q in enumerate(best_questions, 1):
        print(f"  {i}. {q['question'][:60]}...")

if __name__ == '__main__':
    main()























