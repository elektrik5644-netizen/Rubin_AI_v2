#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Rubin AI
"""

import asyncio
import json
import time
from typing import Dict, List, Any, Optional
from datetime import datetime, timedelta
import sqlite3
import hashlib

class RubinEnhancements:
    """–ö–ª–∞—Å—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Rubin AI"""
    
    def __init__(self):
        self.cache_db = "rubin_cache.db"
        self.user_db = "rubin_users.db"
        self.analytics_db = "rubin_analytics.db"
        self.init_databases()
    
    def init_databases(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        # –ö—ç—à –æ—Ç–≤–µ—Ç–æ–≤
        with sqlite3.connect(self.cache_db) as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS cache (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    query_hash TEXT UNIQUE,
                    response TEXT,
                    timestamp DATETIME,
                    usage_count INTEGER DEFAULT 1
                )
            """)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        with sqlite3.connect(self.user_db) as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username TEXT UNIQUE,
                    preferences TEXT,
                    created_at DATETIME,
                    last_active DATETIME
                )
            """)
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        with sqlite3.connect(self.analytics_db) as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS analytics (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    endpoint TEXT,
                    response_time REAL,
                    success BOOLEAN,
                    user_agent TEXT,
                    timestamp DATETIME
                )
            """)
    
    def cache_response(self, query: str, response: str) -> str:
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        query_hash = hashlib.md5(query.encode()).hexdigest()
        
        with sqlite3.connect(self.cache_db) as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å
            cursor = conn.execute(
                "SELECT usage_count FROM cache WHERE query_hash = ?", 
                (query_hash,)
            )
            result = cursor.fetchone()
            
            if result:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                conn.execute(
                    "UPDATE cache SET usage_count = usage_count + 1 WHERE query_hash = ?",
                    (query_hash,)
                )
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ –∫—ç—à
                conn.execute(
                    "INSERT INTO cache (query_hash, response, timestamp) VALUES (?, ?, ?)",
                    (query_hash, response, datetime.now())
                )
        
        return query_hash
    
    def get_cached_response(self, query: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        query_hash = hashlib.md5(query.encode()).hexdigest()
        
        with sqlite3.connect(self.cache_db) as conn:
            cursor = conn.execute(
                "SELECT response FROM cache WHERE query_hash = ?", 
                (query_hash,)
            )
            result = cursor.fetchone()
            return result[0] if result else None
    
    def log_analytics(self, endpoint: str, response_time: float, success: bool, user_agent: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        with sqlite3.connect(self.analytics_db) as conn:
            conn.execute(
                """INSERT INTO analytics (endpoint, response_time, success, user_agent, timestamp) 
                   VALUES (?, ?, ?, ?, ?)""",
                (endpoint, response_time, success, user_agent, datetime.now())
            )
    
    def get_analytics_summary(self, days: int = 7) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        cutoff_date = datetime.now() - timedelta(days=days)
        
        with sqlite3.connect(self.analytics_db) as conn:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor = conn.execute("""
                SELECT 
                    COUNT(*) as total_requests,
                    AVG(response_time) as avg_response_time,
                    SUM(CASE WHEN success = 1 THEN 1 ELSE 0 END) as successful_requests
                FROM analytics 
                WHERE timestamp >= ?
            """, (cutoff_date,))
            
            stats = cursor.fetchone()
            
            # –¢–æ–ø —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            cursor = conn.execute("""
                SELECT endpoint, COUNT(*) as count
                FROM analytics 
                WHERE timestamp >= ?
                GROUP BY endpoint
                ORDER BY count DESC
                LIMIT 10
            """, (cutoff_date,))
            
            top_endpoints = cursor.fetchall()
            
            return {
                "period_days": days,
                "total_requests": stats[0],
                "average_response_time": round(stats[1], 3) if stats[1] else 0,
                "success_rate": round(stats[2] / stats[0] * 100, 2) if stats[0] > 0 else 0,
                "top_endpoints": [{"endpoint": ep[0], "count": ep[1]} for ep in top_endpoints]
            }
    
    def personalize_response(self, user_id: str, base_response: str, query: str) -> str:
        """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with sqlite3.connect(self.user_db) as conn:
            cursor = conn.execute(
                "SELECT preferences FROM users WHERE username = ?", 
                (user_id,)
            )
            result = cursor.fetchone()
            
            if result:
                preferences = json.loads(result[0])
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
                if preferences.get("language") == "ru":
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä—É—Å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    base_response = f"üá∑üá∫ {base_response}"
                
                if preferences.get("style") == "formal":
                    # –§–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å
                    base_response = base_response.replace("—Ç—ã", "–í—ã")
                
                if preferences.get("detail_level") == "brief":
                    # –ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
                    if len(base_response) > 200:
                        base_response = base_response[:200] + "..."
        
        return base_response
    
    def create_user(self, username: str, preferences: Dict[str, Any]) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.user_db) as conn:
                conn.execute(
                    """INSERT INTO users (username, preferences, created_at, last_active) 
                       VALUES (?, ?, ?, ?)""",
                    (username, json.dumps(preferences), datetime.now(), datetime.now())
                )
            return True
        except sqlite3.IntegrityError:
            return False  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    def update_user_preferences(self, username: str, preferences: Dict[str, Any]) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.user_db) as conn:
                conn.execute(
                    "UPDATE users SET preferences = ?, last_active = ? WHERE username = ?",
                    (json.dumps(preferences), datetime.now(), username)
                )
            return True
        except Exception:
            return False
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞"""
        with sqlite3.connect(self.cache_db) as conn:
            cursor = conn.execute("""
                SELECT 
                    COUNT(*) as total_entries,
                    SUM(usage_count) as total_usage,
                    AVG(usage_count) as avg_usage,
                    MAX(usage_count) as max_usage
                FROM cache
            """)
            
            stats = cursor.fetchone()
            
            # –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            cursor = conn.execute("""
                SELECT response, usage_count
                FROM cache
                ORDER BY usage_count DESC
                LIMIT 5
            """)
            
            popular = cursor.fetchall()
            
            return {
                "total_entries": stats[0],
                "total_usage": stats[1],
                "average_usage": round(stats[2], 2) if stats[2] else 0,
                "max_usage": stats[3],
                "popular_queries": [{"response": p[0][:100] + "...", "usage": p[1]} for p in popular]
            }
    
    def cleanup_old_cache(self, days: int = 30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞"""
        cutoff_date = datetime.now() - timedelta(days=days)
        
        with sqlite3.connect(self.cache_db) as conn:
            cursor = conn.execute(
                "DELETE FROM cache WHERE timestamp < ? AND usage_count < 3",
                (cutoff_date,)
            )
            return cursor.rowcount

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    enhancer = RubinEnhancements()
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    enhancer.create_user("test_user", {
        "language": "ru",
        "style": "informal",
        "detail_level": "detailed"
    })
    
    # –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    query = "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?"
    response = "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ ‚Äî —ç—Ç–æ —Ä–∞–∑–¥–µ–ª –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞..."
    cache_id = enhancer.cache_response(query, response)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    cached = enhancer.get_cached_response(query)
    print(f"–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {cached}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    enhancer.log_analytics("/api/v2/chat", 1.5, True, "Mozilla/5.0")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    analytics = enhancer.get_analytics_summary()
    cache_stats = enhancer.get_cache_stats()
    
    print(f"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞: {analytics}")
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {cache_stats}")











