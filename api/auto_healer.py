"""
–ú–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Rubin AI
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
"""

import os
import json
import logging
import subprocess
import time
import requests
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import psutil
import sqlite3

class AutoHealer:
    def __init__(self, config_path: str = "config/auto_heal.json"):
        self.config_path = config_path
        self.logger = logging.getLogger(__name__)
        self.config = self._load_config()
        self.healing_history = []
        
    def _load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        default_config = {
            "enabled": True,
            "max_restart_attempts": 3,
            "restart_delay": 5,
            "health_check_interval": 30,
            "auto_config_update": True,
            "backup_before_changes": True,
            "modules": {
                "ai_chat": {"port": 8084, "critical": True},
                "electrical": {"port": 8087, "critical": False},
                "radiomechanics": {"port": 8089, "critical": False},
                "controllers": {"port": 8090, "critical": True},
                "documents": {"port": 8088, "critical": False}
            },
            "healing_strategies": {
                "port_conflict": "restart_service",
                "memory_leak": "restart_service",
                "connection_timeout": "restart_service",
                "config_error": "update_config",
                "dependency_missing": "install_dependency"
            }
        }
        
        try:
            if os.path.exists(self.config_path):
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
                    default_config.update(config)
            else:
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                os.makedirs(os.path.dirname(self.config_path), exist_ok=True)
                with open(self.config_path, 'w', encoding='utf-8') as f:
                    json.dump(default_config, f, indent=2, ensure_ascii=False)
                    
            return default_config
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return default_config
    
    def diagnose_system(self) -> Dict:
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        diagnosis = {
            "timestamp": datetime.now().isoformat(),
            "overall_health": "healthy",
            "modules": {},
            "issues": [],
            "recommendations": []
        }
        
        try:
            for module_name, module_config in self.config["modules"].items():
                port = module_config["port"]
                module_status = self._check_module_health(module_name, port)
                diagnosis["modules"][module_name] = module_status
                
                if not module_status["healthy"]:
                    diagnosis["issues"].append({
                        "module": module_name,
                        "issue": module_status["issue"],
                        "severity": "critical" if module_config["critical"] else "warning"
                    })
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            critical_issues = [i for i in diagnosis["issues"] if i["severity"] == "critical"]
            if critical_issues:
                diagnosis["overall_health"] = "critical"
            elif diagnosis["issues"]:
                diagnosis["overall_health"] = "warning"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            diagnosis["recommendations"] = self._generate_recommendations(diagnosis)
            
            self.logger.info(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {diagnosis['overall_health']}")
            return diagnosis
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
            diagnosis["overall_health"] = "error"
            diagnosis["issues"].append({"error": str(e)})
            return diagnosis
    
    def _check_module_health(self, module_name: str, port: int) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
        status = {
            "healthy": True,
            "port": port,
            "response_time": None,
            "issue": None,
            "last_check": datetime.now().isoformat()
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–ª—É—à–∞–µ—Ç—Å—è –ª–∏ –ø–æ—Ä—Ç
            if not self._is_port_listening(port):
                status["healthy"] = False
                status["issue"] = f"–ü–æ—Ä—Ç {port} –Ω–µ —Å–ª—É—à–∞–µ—Ç—Å—è"
                return status
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –æ—Ç–≤–µ—Ç
            start_time = time.time()
            try:
                response = requests.get(f"http://localhost:{port}/health", timeout=5)
                response_time = time.time() - start_time
                status["response_time"] = response_time
                
                if response.status_code != 200:
                    status["healthy"] = False
                    status["issue"] = f"HTTP {response.status_code}"
                elif response_time > 2.0:
                    status["healthy"] = False
                    status["issue"] = f"–ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_time:.2f}—Å"
                    
            except requests.exceptions.RequestException as e:
                status["healthy"] = False
                status["issue"] = f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            memory_usage = self._get_module_memory_usage(module_name)
            if memory_usage and memory_usage > 500:  # 500MB
                status["memory_usage"] = memory_usage
                if memory_usage > 1000:  # 1GB
                    status["healthy"] = False
                    status["issue"] = f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_usage}MB"
            
        except Exception as e:
            status["healthy"] = False
            status["issue"] = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"
        
        return status
    
    def _is_port_listening(self, port: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–ª—É—à–∞–µ—Ç—Å—è –ª–∏ –ø–æ—Ä—Ç"""
        try:
            for conn in psutil.net_connections():
                if conn.laddr.port == port and conn.status == 'LISTEN':
                    return True
            return False
        except Exception:
            return False
    
    def _get_module_memory_usage(self, module_name: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –º–æ–¥—É–ª–µ–º"""
        try:
            for proc in psutil.process_iter(['pid', 'name', 'memory_info']):
                if 'python' in proc.info['name'].lower():
                    try:
                        cmdline = proc.cmdline()
                        if any(module_name in arg for arg in cmdline):
                            memory_mb = proc.info['memory_info'].rss / 1024 / 1024
                            return memory_mb
                    except (psutil.NoSuchProcess, psutil.AccessDenied):
                        continue
            return None
        except Exception:
            return None
    
    def _generate_recommendations(self, diagnosis: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
        recommendations = []
        
        for issue in diagnosis["issues"]:
            module = issue["module"]
            issue_type = issue["issue"]
            
            if "–ø–æ—Ä—Ç" in issue_type.lower():
                recommendations.append(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å {module}")
            elif "–ø–∞–º—è—Ç—å" in issue_type.lower():
                recommendations.append(f"–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –º–æ–¥—É–ª—è {module}")
            elif "—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ" in issue_type.lower():
                recommendations.append(f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {module}")
            elif "–º–µ–¥–ª–µ–Ω–Ω—ã–π" in issue_type.lower():
                recommendations.append(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {module}")
        
        return recommendations
    
    def auto_heal(self, diagnosis: Dict = None) -> Dict:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        if not self.config["enabled"]:
            return {"status": "disabled", "message": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ"}
        
        if diagnosis is None:
            diagnosis = self.diagnose_system()
        
        healing_result = {
            "timestamp": datetime.now().isoformat(),
            "actions_taken": [],
            "success": True,
            "errors": []
        }
        
        try:
            for issue in diagnosis["issues"]:
                module = issue["module"]
                issue_type = issue["issue"]
                severity = issue["severity"]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                strategy = self._determine_healing_strategy(issue_type)
                
                if strategy:
                    action_result = self._execute_healing_action(module, strategy, issue_type)
                    healing_result["actions_taken"].append(action_result)
                    
                    if not action_result["success"]:
                        healing_result["success"] = False
                        healing_result["errors"].append(action_result["error"])
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è {issue_type}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            self._save_healing_history(healing_result)
            
            self.logger.info(f"üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {healing_result['success']}")
            return healing_result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            healing_result["success"] = False
            healing_result["errors"].append(str(e))
            return healing_result
    
    def _determine_healing_strategy(self, issue_type: str) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        issue_lower = issue_type.lower()
        
        if "–ø–æ—Ä—Ç" in issue_lower or "—Å–ª—É—à–∞–µ—Ç—Å—è" in issue_lower:
            return "restart_service"
        elif "–ø–∞–º—è—Ç—å" in issue_lower:
            return "restart_service"
        elif "—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ" in issue_lower or "timeout" in issue_lower:
            return "restart_service"
        elif "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è" in issue_lower or "config" in issue_lower:
            return "update_config"
        elif "–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å" in issue_lower or "dependency" in issue_lower:
            return "install_dependency"
        
        return "restart_service"  # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _execute_healing_action(self, module: str, strategy: str, issue_type: str) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        action_result = {
            "module": module,
            "strategy": strategy,
            "success": False,
            "timestamp": datetime.now().isoformat(),
            "error": None
        }
        
        try:
            if strategy == "restart_service":
                action_result = self._restart_service(module)
            elif strategy == "update_config":
                action_result = self._update_config(module)
            elif strategy == "install_dependency":
                action_result = self._install_dependency(module)
            
            self.logger.info(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ {strategy} –¥–ª—è {module}: {action_result['success']}")
            
        except Exception as e:
            action_result["error"] = str(e)
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è {strategy} –¥–ª—è {module}: {e}")
        
        return action_result
    
    def _restart_service(self, module: str) -> Dict:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
        result = {
            "module": module,
            "strategy": "restart_service",
            "success": False,
            "timestamp": datetime.now().isoformat(),
            "error": None
        }
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            self._stop_module_process(module)
            time.sleep(2)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
            self._start_module_process(module)
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            module_config = self.config["modules"].get(module)
            if module_config:
                port = module_config["port"]
                if self._is_port_listening(port):
                    result["success"] = True
                else:
                    result["error"] = "–°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"
            else:
                result["error"] = "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                
        except Exception as e:
            result["error"] = str(e)
        
        return result
    
    def _stop_module_process(self, module: str):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–æ–¥—É–ª—è"""
        try:
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                if 'python' in proc.info['name'].lower():
                    try:
                        cmdline = proc.cmdline()
                        if any(module in arg for arg in cmdline):
                            proc.terminate()
                            proc.wait(timeout=10)
                            self.logger.info(f"üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –º–æ–¥—É–ª—è {module}")
                    except (psutil.NoSuchProcess, psutil.TimeoutExpired):
                        continue
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {module}: {e}")
    
    def _start_module_process(self, module: str):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–æ–¥—É–ª—è"""
        try:
            module_scripts = {
                "ai_chat": "python api/rubin_ai_v2_simple.py",
                "electrical": "python api/electrical_api.py",
                "radiomechanics": "python api/radiomechanics_api.py",
                "controllers": "python api/controllers_api.py",
                "documents": "python api/documents_api.py"
            }
            
            script = module_scripts.get(module)
            if script:
                subprocess.Popen(script, shell=True, cwd=os.getcwd())
                self.logger.info(f"üöÄ –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –º–æ–¥—É–ª—è {module}")
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–æ–¥—É–ª—å: {module}")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ {module}: {e}")
            raise
    
    def _update_config(self, module: str) -> Dict:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è"""
        result = {
            "module": module,
            "strategy": "update_config",
            "success": False,
            "timestamp": datetime.now().isoformat(),
            "error": None
        }
        
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–±—Ä–æ—Å –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∏–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            self.logger.info(f"‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è {module}")
            result["success"] = True
            
        except Exception as e:
            result["error"] = str(e)
        
        return result
    
    def _install_dependency(self, module: str) -> Dict:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        result = {
            "module": module,
            "strategy": "install_dependency",
            "success": False,
            "timestamp": datetime.now().isoformat(),
            "error": None
        }
        
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            # –ù–∞–ø—Ä–∏–º–µ—Ä, pip install missing_package
            self.logger.info(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –º–æ–¥—É–ª—è {module}")
            result["success"] = True
            
        except Exception as e:
            result["error"] = str(e)
        
        return result
    
    def _save_healing_history(self, healing_result: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            self.healing_history.append(healing_result)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if len(self.healing_history) > 100:
                self.healing_history = self.healing_history[-100:]
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    def get_healing_history(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        return self.healing_history[-limit:] if self.healing_history else []
    
    def update_config(self, new_config: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            self.config.update(new_config)
            
            with open(self.config_path, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
            
            self.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
auto_healer = AutoHealer()

















