#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ä—Ç–æ–≤ Rubin AI
"""

import requests
import socket
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ—Ä—Ç–æ–≤ Rubin AI
PORTS_CONFIG = {
    'Smart Dispatcher': 8080,
    'Unified Manager': 8084,
    'General API': 8085,
    'Mathematics API': 8086,
    'Electrical API': 8087,
    'Programming API': 8088,
    'Neuro Repository': 8090,
    'Vector Search': 8091,
    'PLC Analysis': 8099,
    'Advanced Math': 8100,
    'Data Processing': 8101,
    'Search Engine': 8102,
    'System Utils': 8103,
    'Enhanced GAI': 8104,
    'Ethical Core': 8105,
    'Controllers': 9000,
    'Gemini Bridge': 8082
}

def check_port_open(host, port, timeout=3):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–∫—Ä—ã—Ç –ª–∏ –ø–æ—Ä—Ç"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(timeout)
        result = sock.connect_ex((host, port))
        sock.close()
        return result == 0
    except:
        return False

def check_http_health(port, timeout=5):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç HTTP –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        response = requests.get(f"http://localhost:{port}/api/health", timeout=timeout)
        return response.status_code == 200
    except:
        return False

def check_service_status(name, port):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"""
    port_open = check_port_open('localhost', port)
    
    if not port_open:
        return {
            'name': name,
            'port': port,
            'status': 'OFFLINE',
            'port_open': False,
            'http_health': False,
            'response_time': None
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –∑–¥–æ—Ä–æ–≤—å–µ
    start_time = time.time()
    http_healthy = check_http_health(port)
    response_time = round((time.time() - start_time) * 1000, 2)
    
    return {
        'name': name,
        'port': port,
        'status': 'ONLINE' if http_healthy else 'DEGRADED',
        'port_open': True,
        'http_health': http_healthy,
        'response_time': response_time
    }

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ä—Ç–æ–≤ Rubin AI")
    print("=" * 60)
    print(f"‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    results = []
    online_count = 0
    degraded_count = 0
    offline_count = 0
    
    for name, port in PORTS_CONFIG.items():
        result = check_service_status(name, port)
        results.append(result)
        
        if result['status'] == 'ONLINE':
            online_count += 1
        elif result['status'] == 'DEGRADED':
            degraded_count += 1
        else:
            offline_count += 1
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for result in results:
        status_icon = "‚úÖ" if result['status'] == 'ONLINE' else "‚ö†Ô∏è" if result['status'] == 'DEGRADED' else "‚ùå"
        
        print(f"{status_icon} {result['name']:<20} –ü–æ—Ä—Ç {result['port']:<5} {result['status']:<8}", end="")
        
        if result['port_open']:
            print(f"HTTP: {'OK' if result['http_health'] else 'FAIL'}", end="")
            if result['response_time']:
                print(f" ({result['response_time']}ms)")
            else:
                print()
        else:
            print("–ü–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç")
    
    print()
    print("=" * 60)
    print(f"üìä –°–≤–æ–¥–∫–∞:")
    print(f"   ‚úÖ –û–Ω–ª–∞–π–Ω:     {online_count}")
    print(f"   ‚ö†Ô∏è  –î–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω—ã: {degraded_count}")
    print(f"   ‚ùå –û—Ñ–ª–∞–π–Ω:     {offline_count}")
    print(f"   üìà –í—Å–µ–≥–æ:      {len(PORTS_CONFIG)}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    if offline_count == 0 and degraded_count == 0:
        system_status = "üü¢ –û–¢–õ–ò–ß–ù–û"
    elif offline_count == 0:
        system_status = "üü° –•–û–†–û–®–û"
    elif offline_count < len(PORTS_CONFIG) / 2:
        system_status = "üü† –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
    else:
        system_status = "üî¥ –ö–†–ò–¢–ò–ß–ù–û"
    
    print(f"   üéØ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {system_status}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print()
    print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    if offline_count > 0:
        offline_services = [r['name'] for r in results if r['status'] == 'OFFLINE']
        print(f"   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: {', '.join(offline_services)}")
    
    if degraded_count > 0:
        degraded_services = [r['name'] for r in results if r['status'] == 'DEGRADED']
        print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–∏—Å–æ–≤: {', '.join(degraded_services)}")
    
    if online_count == len(PORTS_CONFIG):
        print("   ‚Ä¢ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ! üéâ")

if __name__ == "__main__":
    main()