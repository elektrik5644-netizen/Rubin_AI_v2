import sqlite3
import os

def check_encoder_documents():
    db_path = "rubin_ai_documents.db"
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    conn = None
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç–Ω–∫–æ–¥–µ—Ä–∞–º–∏
        cursor.execute("""
            SELECT id, file_name, content, category 
            FROM documents 
            WHERE file_name LIKE '%—ç–Ω–∫–æ–¥–µ—Ä%' 
               OR file_name LIKE '%encoder%'
               OR content LIKE '%—ç–Ω–∫–æ–¥–µ—Ä%'
               OR content LIKE '%encoder%'
               OR file_name LIKE '%–º–æ—Ç–æ—Ä%'
               OR file_name LIKE '%motor%'
            LIMIT 5
        """)
        
        documents = cursor.fetchall()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
        
        for doc in documents:
            doc_id, file_name, content, category = doc
            print(f"\nüî∏ –î–æ–∫—É–º–µ–Ω—Ç {doc_id}:")
            print(f"   –§–∞–π–ª: {file_name}")
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            print(f"   –î–ª–∏–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:")
            print(f"   {repr(content[:200])}")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:")
            print(f"   {repr(content[-200:])}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        cursor.execute("SELECT COUNT(*) FROM documents")
        total_count = cursor.fetchone()[0]
        print(f"\nüìä –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {total_count}")
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SQLite: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        if conn:
            conn.close()

if __name__ == "__main__":
    check_encoder_documents()






















