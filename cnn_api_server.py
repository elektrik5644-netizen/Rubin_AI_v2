#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
API —Å–µ—Ä–≤–µ—Ä –¥–ª—è CNN (Convolutional Neural Networks) Rubin AI
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç endpoints –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–≤–µ—Ä—Ç–æ—á–Ω—ã–º–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import time
import logging
from datetime import datetime
import numpy as np

from rubin_cnn import RubinCNNManager, RubinCNN2D, RubinCNN1D

logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CNN Manager
cnn_manager = RubinCNNManager()

@app.route('/api/cnn/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è CNN —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "status": "Rubin AI CNN Server ONLINE",
        "timestamp": datetime.now().isoformat(),
        "device": str(cnn_manager.device),
        "models_count": len(cnn_manager.models),
        "available_architectures": {
            "2d_cnn": ["standard", "deep", "lightweight"],
            "1d_cnn": ["standard", "deep", "temporal"]
        }
    }), 200

@app.route('/api/cnn/create_2d', methods=['POST'])
def create_cnn_2d():
    """–°–æ–∑–¥–∞–Ω–∏–µ 2D CNN"""
    try:
        data = request.get_json() or {}
        input_channels = data.get('input_channels', 3)
        num_classes = data.get('num_classes', 10)
        architecture = data.get('architecture', 'standard')
        model_name = data.get('model_name', f'cnn_2d_{len(cnn_manager.models)}')
        
        logger.info(f"üéØ –°–æ–∑–¥–∞–Ω–∏–µ 2D CNN: {model_name}")
        
        model = cnn_manager.create_cnn_2d(
            input_channels=input_channels,
            num_classes=num_classes,
            architecture=architecture,
            model_name=model_name
        )
        
        if model:
            model_info = cnn_manager.get_model_info(model_name)
            response_data = {
                "success": True,
                "model_name": model_name,
                "model_info": model_info,
                "message": f"2D CNN '{model_name}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                "timestamp": datetime.now().isoformat()
            }
            return jsonify(response_data), 201
        else:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å 2D CNN"
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è 2D CNN: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è 2D CNN: {str(e)}"
        }), 500

@app.route('/api/cnn/create_1d', methods=['POST'])
def create_cnn_1d():
    """–°–æ–∑–¥–∞–Ω–∏–µ 1D CNN"""
    try:
        data = request.get_json() or {}
        input_length = data.get('input_length', 100)
        num_classes = data.get('num_classes', 10)
        architecture = data.get('architecture', 'standard')
        model_name = data.get('model_name', f'cnn_1d_{len(cnn_manager.models)}')
        
        logger.info(f"üéØ –°–æ–∑–¥–∞–Ω–∏–µ 1D CNN: {model_name}")
        
        model = cnn_manager.create_cnn_1d(
            input_length=input_length,
            num_classes=num_classes,
            architecture=architecture,
            model_name=model_name
        )
        
        if model:
            model_info = cnn_manager.get_model_info(model_name)
            response_data = {
                "success": True,
                "model_name": model_name,
                "model_info": model_info,
                "message": f"1D CNN '{model_name}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                "timestamp": datetime.now().isoformat()
            }
            return jsonify(response_data), 201
        else:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å 1D CNN"
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è 1D CNN: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è 1D CNN: {str(e)}"
        }), 500

@app.route('/api/cnn/train', methods=['POST'])
def train_model():
    """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    try:
        data = request.get_json() or {}
        model_name = data.get('model_name')
        epochs = data.get('epochs', 10)
        learning_rate = data.get('learning_rate', 0.001)
        
        if not model_name:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –º–æ–¥–µ–ª–∏"
            }), 400
        
        logger.info(f"üöÄ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}")
        
        start_time = time.time()
        success = cnn_manager.train_model(model_name, None, epochs, learning_rate)
        end_time = time.time()
        
        training_time = end_time - start_time
        
        if success:
            model_info = cnn_manager.get_model_info(model_name)
            response_data = {
                "success": True,
                "model_name": model_name,
                "epochs": epochs,
                "learning_rate": learning_rate,
                "training_time_seconds": f"{training_time:.2f}",
                "training_history": model_info.get("training_history", []),
                "message": f"–ú–æ–¥–µ–ª—å '{model_name}' –æ–±—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                "timestamp": datetime.now().isoformat()
            }
            return jsonify(response_data), 200
        else:
            return jsonify({
                "success": False,
                "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å '{model_name}'"
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {str(e)}"
        }), 500

@app.route('/api/cnn/predict', methods=['POST'])
def predict():
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏"""
    try:
        data = request.get_json() or {}
        model_name = data.get('model_name')
        input_data = data.get('input_data')
        
        if not model_name:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –º–æ–¥–µ–ª–∏"
            }), 400
        
        if not input_data:
            return jsonify({
                "success": False,
                "error": "–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
            }), 400
        
        logger.info(f"üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ numpy array
        import numpy as np
        if isinstance(input_data, list):
            input_array = np.array(input_data)
        else:
            input_array = input_data
        
        # –î–æ–±–∞–≤–ª—è–µ–º batch dimension –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if input_array.ndim == 2:
            input_array = input_array.reshape(1, *input_array.shape)
        elif input_array.ndim == 3:
            input_array = input_array.reshape(1, *input_array.shape)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ tensor
        import torch
        input_tensor = torch.FloatTensor(input_array)
        
        start_time = time.time()
        predictions = cnn_manager.predict(model_name, input_tensor)
        end_time = time.time()
        
        prediction_time = end_time - start_time
        
        if predictions is not None:
            # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞—Å—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
            predicted_class = np.argmax(predictions, axis=1)
            confidence = np.max(predictions, axis=1)
            
            response_data = {
                "success": True,
                "model_name": model_name,
                "predictions": predictions.tolist(),
                "predicted_classes": predicted_class.tolist(),
                "confidence_scores": confidence.tolist(),
                "prediction_time_seconds": f"{prediction_time:.4f}",
                "timestamp": datetime.now().isoformat()
            }
            return jsonify(response_data), 200
        else:
            return jsonify({
                "success": False,
                "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç –º–æ–¥–µ–ª–∏ '{model_name}'"
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}"
        }), 500

@app.route('/api/cnn/models', methods=['GET'])
def get_models():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
    try:
        logger.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π")
        
        all_models_info = cnn_manager.get_all_models_info()
        
        response_data = {
            "success": True,
            "models": all_models_info,
            "total_models": len(all_models_info),
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {str(e)}"
        }), 500

@app.route('/api/cnn/model/<model_name>', methods=['GET'])
def get_model_info(model_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    try:
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {model_name}")
        
        model_info = cnn_manager.get_model_info(model_name)
        
        if model_info:
            response_data = {
                "success": True,
                "model_info": model_info,
                "timestamp": datetime.now().isoformat()
            }
            return jsonify(response_data), 200
        else:
            return jsonify({
                "success": False,
                "error": f"–ú–æ–¥–µ–ª—å '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }), 404
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {str(e)}"
        }), 500

@app.route('/api/cnn/save/<model_name>', methods=['POST'])
def save_model(model_name):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    try:
        data = request.get_json() or {}
        filepath = data.get('filepath', f'models/{model_name}.pth')
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}")
        
        success = cnn_manager.save_model(model_name, filepath)
        
        if success:
            response_data = {
                "success": True,
                "model_name": model_name,
                "filepath": filepath,
                "message": f"–ú–æ–¥–µ–ª—å '{model_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {filepath}",
                "timestamp": datetime.now().isoformat()
            }
            return jsonify(response_data), 200
        else:
            return jsonify({
                "success": False,
                "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª—å '{model_name}'"
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {str(e)}"
        }), 500

@app.route('/api/cnn/load', methods=['POST'])
def load_model():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"""
    try:
        data = request.get_json() or {}
        model_name = data.get('model_name')
        filepath = data.get('filepath')
        input_channels = data.get('input_channels')
        input_length = data.get('input_length')
        num_classes = data.get('num_classes', 10)
        architecture = data.get('architecture', 'standard')
        
        if not model_name or not filepath:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–∫–∞–∑–∞–Ω—ã –∏–º—è –º–æ–¥–µ–ª–∏ –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"
            }), 400
        
        logger.info(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏: {model_name}")
        
        success = cnn_manager.load_model(
            model_name, filepath, input_channels, 
            input_length, num_classes, architecture
        )
        
        if success:
            model_info = cnn_manager.get_model_info(model_name)
            response_data = {
                "success": True,
                "model_name": model_name,
                "filepath": filepath,
                "model_info": model_info,
                "message": f"–ú–æ–¥–µ–ª—å '{model_name}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {filepath}",
                "timestamp": datetime.now().isoformat()
            }
            return jsonify(response_data), 200
        else:
            return jsonify({
                "success": False,
                "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å '{model_name}'"
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}"
        }), 500

@app.route('/api/cnn/delete/<model_name>', methods=['DELETE'])
def delete_model(model_name):
    """–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    try:
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}")
        
        if model_name in cnn_manager.models:
            del cnn_manager.models[model_name]
            if model_name in cnn_manager.training_history:
                del cnn_manager.training_history[model_name]
            
            response_data = {
                "success": True,
                "model_name": model_name,
                "message": f"–ú–æ–¥–µ–ª—å '{model_name}' —É–¥–∞–ª–µ–Ω–∞",
                "timestamp": datetime.now().isoformat()
            }
            return jsonify(response_data), 200
        else:
            return jsonify({
                "success": False,
                "error": f"–ú–æ–¥–µ–ª—å '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }), 404
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {str(e)}"
        }), 500

@app.route('/api/cnn/architectures', methods=['GET'])
def get_architectures():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä"""
    try:
        architectures = {
            "2d_cnn": {
                "standard": {
                    "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                    "layers": ["Conv2d(3‚Üí32)", "Conv2d(32‚Üí64)", "Conv2d(64‚Üí128)"],
                    "parameters": "~100K",
                    "use_cases": ["–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤"]
                },
                "deep": {
                    "description": "–ì–ª—É–±–æ–∫–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á",
                    "layers": ["Conv2d(3‚Üí64)", "Conv2d(64‚Üí128)", "Conv2d(128‚Üí256)", "Conv2d(256‚Üí512)"],
                    "parameters": "~1M",
                    "use_cases": ["–°–ª–æ–∂–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", "–î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤"]
                },
                "lightweight": {
                    "description": "–õ–µ–≥–∫–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
                    "layers": ["Conv2d(3‚Üí16)", "Conv2d(16‚Üí32)", "Conv2d(32‚Üí64)"],
                    "parameters": "~50K",
                    "use_cases": ["–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è"]
                }
            },
            "1d_cnn": {
                "standard": {
                    "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π",
                    "layers": ["Conv1d(1‚Üí32)", "Conv1d(32‚Üí64)", "Conv1d(64‚Üí128)"],
                    "parameters": "~10K",
                    "use_cases": ["–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤", "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"]
                },
                "deep": {
                    "description": "–ì–ª—É–±–æ–∫–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π",
                    "layers": ["Conv1d(1‚Üí64)", "Conv1d(64‚Üí128)", "Conv1d(128‚Üí256)"],
                    "parameters": "~100K",
                    "use_cases": ["–°–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤", "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏"]
                },
                "temporal": {
                    "description": "–í—Ä–µ–º–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤",
                    "layers": ["Conv1d(1‚Üí16)", "Conv1d(16‚Üí32)", "Conv1d(32‚Üí64)"],
                    "parameters": "~5K",
                    "use_cases": ["–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ", "–°–µ–Ω—Å–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"]
                }
            }
        }
        
        response_data = {
            "success": True,
            "architectures": architectures,
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä: {str(e)}"
        }), 500

if __name__ == '__main__':
    port = 8096  # –ù–æ–≤—ã–π –ø–æ—Ä—Ç –¥–ª—è CNN —Å–µ—Ä–≤–µ—Ä–∞
    logger.info(f"üß† –ó–∞–ø—É—Å–∫ Rubin AI CNN —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    app.run(port=port, debug=True, use_reloader=False)










