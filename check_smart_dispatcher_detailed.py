#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ Smart Dispatcher
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã
"""

import requests
import json

def check_smart_dispatcher_responses():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã Smart Dispatcher"""
    
    print("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –û–¢–í–ï–¢–û–í SMART DISPATCHER")
    print("=" * 80)
    
    smart_dispatcher_url = "http://localhost:8080/api/chat"
    
    test_questions = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–∫–æ–Ω –û–º–∞?",
        "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x^2 + 5x + 6 = 0",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä?"
    ]
    
    for i, question in enumerate(test_questions, 1):
        print(f"\n{'='*60}")
        print(f"‚ùì –í–æ–ø—Ä–æ—Å {i}: {question}")
        print(f"{'='*60}")
        
        try:
            response = requests.post(
                smart_dispatcher_url,
                json={"message": question},
                timeout=10
            )
            
            print(f"üìä –°—Ç–∞—Ç—É—Å HTTP: {response.status_code}")
            print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(response.headers)}")
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    print(f"üì¶ –ü–æ–ª–Ω—ã–π JSON –æ—Ç–≤–µ—Ç:")
                    print(json.dumps(data, ensure_ascii=False, indent=2))
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞:")
                    for key, value in data.items():
                        print(f"   ‚Ä¢ {key}: {type(value).__name__} = {str(value)[:100]}...")
                    
                except json.JSONDecodeError as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    print(f"üìù –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {response.text}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

if __name__ == "__main__":
    check_smart_dispatcher_responses()





