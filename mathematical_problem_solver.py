#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üßÆ –ê–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
============================================

–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á:
- –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
- –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–µ—à–µ–Ω–∏—è
- –ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

–ê–≤—Ç–æ—Ä: Rubin AI System
–í–µ—Ä—Å–∏—è: 2.0
"""

import re
import math
import numpy as np
import sympy as sp
from typing import Dict, List, Tuple, Any, Optional, Union
from dataclasses import dataclass
from enum import Enum
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
try:
    from rubin_symbolic_calculator import RubinSymbolicCalculator, SymbolicOperationType
    SYMPY_AVAILABLE = True
except ImportError:
    SYMPY_AVAILABLE = False
    logging.warning("SymPy –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

try:
    from rubin_graph_analyzer import RubinGraphAnalyzer, GraphType
    OCR_CV_AVAILABLE = True
except ImportError:
    OCR_CV_AVAILABLE = False
    logging.warning("OCR/CV –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

try:
    from rubin_data_visualizer import RubinDataVisualizer, VisualizationType
    VISUALIZATION_AVAILABLE = True
except ImportError:
    VISUALIZATION_AVAILABLE = False
    logging.warning("–ú–æ–¥—É–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

class ProblemType(Enum):
    """–¢–∏–ø—ã –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    ARITHMETIC = "–∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞"
    ALGEBRA = "–∞–ª–≥–µ–±—Ä–∞"
    GEOMETRY = "–≥–µ–æ–º–µ—Ç—Ä–∏—è"
    TRIGONOMETRY = "—Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è"
    CALCULUS = "–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π_–∞–Ω–∞–ª–∏–∑"
    STATISTICS = "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    LINEAR_EQUATION = "–ª–∏–Ω–µ–π–Ω–æ–µ_—É—Ä–∞–≤–Ω–µ–Ω–∏–µ"
    QUADRATIC_EQUATION = "–∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ_—É—Ä–∞–≤–Ω–µ–Ω–∏–µ"
    SYSTEM_EQUATIONS = "—Å–∏—Å—Ç–µ–º–∞_—É—Ä–∞–≤–Ω–µ–Ω–∏–π"
    AREA_CALCULATION = "—Ä–∞—Å—á–µ—Ç_–ø–ª–æ—â–∞–¥–∏"
    VOLUME_CALCULATION = "—Ä–∞—Å—á–µ—Ç_–æ–±—ä–µ–º–∞"
    PERCENTAGE = "–ø—Ä–æ—Ü–µ–Ω—Ç—ã"
    RATIO = "–æ—Ç–Ω–æ—à–µ–Ω–∏—è"
    # –ù–æ–≤—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á
    PHYSICS_FORMULAS = "—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ_—Ñ–æ—Ä–º—É–ª—ã"
    CHEMISTRY_CALCULATIONS = "—Ö–∏–º–∏—á–µ—Å–∫–∏–µ_—Ä–∞—Å—á–µ—Ç—ã"
    ENGINEERING_DESIGN = "–∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ_—Ä–∞—Å—á–µ—Ç—ã"
    GRAPH_ANALYSIS = "–∞–Ω–∞–ª–∏–∑_–≥—Ä–∞—Ñ–∏–∫–æ–≤"
    DATA_VISUALIZATION = "–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è_–¥–∞–Ω–Ω—ã—Ö"
    FORMULA_CALCULATION = "—Ä–∞—Å—á–µ—Ç_–ø–æ_—Ñ–æ—Ä–º—É–ª–µ"
    SYMBOLIC_COMPUTATION = "—Å–∏–º–≤–æ–ª—å–Ω—ã–µ_–≤—ã—á–∏—Å–ª–µ–Ω–∏—è"
    EQUATION_SOLVING = "—Ä–µ—à–µ–Ω–∏–µ_—É—Ä–∞–≤–Ω–µ–Ω–∏–π"
    DIFFERENTIATION = "–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ"
    INTEGRATION = "–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"
    MATRIX_OPERATIONS = "–º–∞—Ç—Ä–∏—á–Ω—ã–µ_–æ–ø–µ—Ä–∞—Ü–∏–∏"
    FUNCTION_PLOTTING = "–ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ_–≥—Ä–∞—Ñ–∏–∫–æ–≤"
    UNKNOWN = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

@dataclass
class ProblemSolution:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—à–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏"""
    problem_type: ProblemType
    input_data: Dict[str, Any]
    solution_steps: List[str]
    final_answer: Union[float, str, Dict[str, Any]]
    verification: bool
    confidence: float
    explanation: str

class MathematicalProblemSolver:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—à–∞—Ç–µ–ª—è"""
        self.problem_patterns = self._initialize_patterns()
        self.solution_methods = self._initialize_solution_methods()
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ä–µ—à–∞—Ç–µ–ª–µ–π
        self.physics_solver = PhysicsFormulaSolver()
        self.chemistry_solver = ChemistryFormulaSolver()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        if SYMPY_AVAILABLE:
            self.symbolic_calculator = RubinSymbolicCalculator()
            logger.info("‚úÖ –°–∏–º–≤–æ–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω")
        else:
            self.symbolic_calculator = None
            
        if OCR_CV_AVAILABLE:
            self.graph_analyzer = RubinGraphAnalyzer()
            logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω")
        else:
            self.graph_analyzer = None
            
        if VISUALIZATION_AVAILABLE:
            self.data_visualizer = RubinDataVisualizer()
            logger.info("‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω")
        else:
            self.data_visualizer = None
        
    def _initialize_patterns(self) -> Dict[ProblemType, List[str]]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á"""
        return {
            ProblemType.ARITHMETIC: [
                r'–≤—ã—á–∏—Å–ª–∏|–ø–æ—Å—á–∏—Ç–∞–π|–Ω–∞–π–¥–∏\s+–∑–Ω–∞—á–µ–Ω–∏–µ|—Ä–µ–∑—É–ª—å—Ç–∞—Ç',
                r'[\+\-\*/]\s*\d+|\d+\s*[\+\-\*/]',
                r'^\d+[\+\-\*/]\d+',
                r'—Å–∫–æ–ª—å–∫–æ\s+–æ—Å—Ç–∞–ª–æ—Å—å|—Å–∫–æ–ª—å–∫–æ\s+–æ—Å—Ç–∞–ª–æ—Å—å\s+–Ω–∞|–æ—Å—Ç–∞–ª–æ—Å—å\s+–Ω–∞',
                r'\d+\s+—è–±–ª–æ–∫.*–æ—Å—Ç–∞–ª–æ—Å—å|\d+\s+–¥–µ—Ä–µ–≤—å–µ–≤.*–æ—Å—Ç–∞–ª–æ—Å—å',
                r'—É–∫–∞—Ç–∏–ª–æ—Å—å|—É–ø–∞–ª–æ|—Å—ä–µ–ª|–ø–æ—Ç–µ—Ä—è–ª|–ø–æ—Ç—Ä–∞—Ç–∏–ª',
                r'–±—ã–ª–æ\s+\d+.*—Å—Ç–∞–ª–æ|—Å—Ç–∞–ª–æ\s+\d+.*–±—ã–ª–æ'
            ],
            ProblemType.LINEAR_EQUATION: [
                r'–ª–∏–Ω–µ–π–Ω–æ–µ\s+—É—Ä–∞–≤–Ω–µ–Ω–∏–µ|—Ä–µ—à–∏\s+—É—Ä–∞–≤–Ω–µ–Ω–∏–µ',
                r'[a-zA-Z]\s*[\+\-]\s*\d+\s*=\s*\d+',
                r'[a-zA-Z]\s*=\s*\d+[\+\-]\d+'
            ],
            ProblemType.QUADRATIC_EQUATION: [
                r'–∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ\s+—É—Ä–∞–≤–Ω–µ–Ω–∏–µ',
                r'[a-zA-Z]\^?2\s*[\+\-]',
                r'[a-zA-Z]¬≤\s*[\+\-]',
                r'x[¬≤¬≤^2]\s*[\+\-]\s*\d*x',
                r'x[¬≤¬≤^2]\s*[\+\-]\s*\d*x\s*[\+\-]\s*\d+\s*=\s*\d+'
            ],
            ProblemType.SYSTEM_EQUATIONS: [
                r'—Å–∏—Å—Ç–µ–º–∞\s+—É—Ä–∞–≤–Ω–µ–Ω–∏–π|—Å–∏—Å—Ç–µ–º–∞\s+–ª–∏–Ω–µ–π–Ω—ã—Ö',
                r'–∏\s+–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ|–≤–º–µ—Å—Ç–µ\s+—Å'
            ],
            ProblemType.AREA_CALCULATION: [
                r'–ø–ª–æ—â–∞–¥—å|–Ω–∞–π–¥–∏\s+–ø–ª–æ—â–∞–¥—å|—Ä–∞—Å—Å—á–∏—Ç–∞–π\s+–ø–ª–æ—â–∞–¥—å',
                r'—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫|–∫—Ä—É–≥|–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫|–∫–≤–∞–¥—Ä–∞—Ç'
            ],
            ProblemType.VOLUME_CALCULATION: [
                r'–æ–±—ä–µ–º|–Ω–∞–π–¥–∏\s+–æ–±—ä–µ–º|—Ä–∞—Å—Å—á–∏—Ç–∞–π\s+–æ–±—ä–µ–º',
                r'–∫—É–±|—Ü–∏–ª–∏–Ω–¥—Ä|—à–∞—Ä|–ø–∏—Ä–∞–º–∏–¥–∞'
            ],
            ProblemType.TRIGONOMETRY: [
                r'sin|cos|tan|—Å–∏–Ω—É—Å|–∫–æ—Å–∏–Ω—É—Å|—Ç–∞–Ω–≥–µ–Ω—Å',
                r'—Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è|—É–≥–æ–ª|–≥—Ä–∞–¥—É—Å|—Ä–∞–¥–∏–∞–Ω'
            ],
            ProblemType.CALCULUS: [
                r'–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è|–∏–Ω—Ç–µ–≥—Ä–∞–ª|–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª',
                r'lim|–ø—Ä–µ–¥–µ–ª|–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å'
            ],
            ProblemType.STATISTICS: [
                r'—Å—Ä–µ–¥–Ω–µ–µ|–º–µ–¥–∏–∞–Ω–∞|–º–æ–¥–∞|–¥–∏—Å–ø–µ—Ä—Å–∏—è',
                r'—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å|—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'
            ],
            ProblemType.PERCENTAGE: [
                r'–ø—Ä–æ—Ü–µ–Ω—Ç|%|\d+\s*–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤',
                r'–Ω–∞–π—Ç–∏\s+\d+%\s+–æ—Ç'
            ],
            # –ù–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
            ProblemType.PHYSICS_FORMULAS: [
                r'–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è\s+—ç–Ω–µ—Ä–≥–∏—è|–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è\s+—ç–Ω–µ—Ä–≥–∏—è',
                r'–∑–∞–∫–æ–Ω\s+–æ–º–∞|–º–æ—â–Ω–æ—Å—Ç—å|—Å–∏–ª–∞\s+—Ç—è–∂–µ—Å—Ç–∏',
                r'—É—Å–∫–æ—Ä–µ–Ω–∏–µ|–ø—É—Ç—å|—Å–∫–æ—Ä–æ—Å—Ç—å',
                r'—Ñ–∏–∑–∏–∫–∞|—Ñ–∏–∑–∏—á–µ—Å–∫–∏–π|–º–µ—Ö–∞–Ω–∏–∫–∞',
                r'–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ.*—Ç–æ–∫|—Ç–æ–∫.*–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ',
                r'–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ.*—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ|—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ.*–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ'
            ],
            ProblemType.CHEMISTRY_CALCULATIONS: [
                r'–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è|–º–æ–ª—è—Ä–Ω–∞—è\s+–º–∞—Å—Å–∞',
                r'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\s+–≤–µ—â–µ—Å—Ç–≤–∞|–º–æ–ª—å',
                r'—Ö–∏–º–∏—è|—Ö–∏–º–∏—á–µ—Å–∫–∏–π|—Ä–∞—Å—Ç–≤–æ—Ä'
            ],
            ProblemType.GRAPH_ANALYSIS: [
                r'–≥—Ä–∞—Ñ–∏–∫|–¥–∏–∞–≥—Ä–∞–º–º–∞|–∞–Ω–∞–ª–∏–∑\s+–≥—Ä–∞—Ñ–∏–∫–∞',
                r'–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫–∞|—Ñ–∞–π–ª.*\.(png|jpg|jpeg)'
            ],
            ProblemType.DATA_VISUALIZATION: [
                r'–ø–æ—Å—Ç—Ä–æ–∏—Ç—å|—Å–æ–∑–¥–∞—Ç—å|–Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å',
                r'–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è|–≥—Ä–∞—Ñ–∏–∫.*–¥–∞–Ω–Ω—ã—Ö'
            ],
            ProblemType.FORMULA_CALCULATION: [
                r'—Ñ–æ—Ä–º—É–ª–∞|—Ä–∞—Å—á–µ—Ç\s+–ø–æ\s+—Ñ–æ—Ä–º—É–ª–µ',
                r'–≤—ã—á–∏—Å–ª–∏—Ç—å\s+–ø–æ\s+—Ñ–æ—Ä–º—É–ª–µ'
            ],
            ProblemType.SYMBOLIC_COMPUTATION: [
                r'—Å–∏–º–≤–æ–ª—å–Ω|—Å–∏–º–≤–æ–ª|—É–ø—Ä–æ—Å—Ç–∏—Ç—å\s+–≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
                r'—Ä–∞—Å–∫—Ä—ã—Ç—å\s+—Å–∫–æ–±–∫–∏|—Ä–∞–∑–ª–æ–∂–∏—Ç—å\s+–Ω–∞\s+–º–Ω–æ–∂–∏—Ç–µ–ª–∏'
            ],
            ProblemType.EQUATION_SOLVING: [
                r'—Ä–µ—à–∏—Ç—å\s+—É—Ä–∞–≤–Ω–µ–Ω–∏–µ|–Ω–∞–π—Ç–∏\s+–∫–æ—Ä–Ω–∏',
                r'—É—Ä–∞–≤–Ω–µ–Ω–∏–µ.*—Ä–∞–≤–Ω–æ|—Ä–∞–≤–Ω–æ.*—É—Ä–∞–≤–Ω–µ–Ω–∏–µ',
                r'x\*\*2.*=.*0|x\*\*2.*—Ä–∞–≤–Ω–æ.*0',
                r'–∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ\s+—É—Ä–∞–≤–Ω–µ–Ω–∏–µ'
            ],
            ProblemType.DIFFERENTIATION: [
                r'–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è|–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞—Ç—å|–Ω–∞–π—Ç–∏\s+–ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é',
                r'd/dx|d/dy|d/dz'
            ],
            ProblemType.INTEGRATION: [
                r'–∏–Ω—Ç–µ–≥—Ä–∞–ª|–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å|–Ω–∞–π—Ç–∏\s+–∏–Ω—Ç–µ–≥—Ä–∞–ª',
                r'‚à´|–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ'
            ],
            ProblemType.MATRIX_OPERATIONS: [
                r'–º–∞—Ç—Ä–∏—Ü–∞|–æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å|–æ–±—Ä–∞—Ç–Ω–∞—è\s+–º–∞—Ç—Ä–∏—Ü–∞',
                r'—Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ|—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ\s+–∑–Ω–∞—á–µ–Ω–∏—è'
            ],
            ProblemType.FUNCTION_PLOTTING: [
                r'–ø–æ—Å—Ç—Ä–æ–∏—Ç—å\s+–≥—Ä–∞—Ñ–∏–∫|–Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å\s+—Ñ—É–Ω–∫—Ü–∏—é',
                r'–≥—Ä–∞—Ñ–∏–∫\s+—Ñ—É–Ω–∫—Ü–∏–∏|plot.*function'
            ]
        }
    
    def _initialize_solution_methods(self) -> Dict[ProblemType, callable]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞—á"""
        return {
            ProblemType.ARITHMETIC: self._solve_arithmetic,
            ProblemType.LINEAR_EQUATION: self._solve_linear_equation,
            ProblemType.QUADRATIC_EQUATION: self._solve_quadratic_equation,
            ProblemType.SYSTEM_EQUATIONS: self._solve_system_equations,
            ProblemType.AREA_CALCULATION: self._solve_area_calculation,
            ProblemType.VOLUME_CALCULATION: self._solve_volume_calculation,
            ProblemType.TRIGONOMETRY: self._solve_trigonometry,
            ProblemType.CALCULUS: self._solve_calculus,
            ProblemType.STATISTICS: self._solve_statistics,
            ProblemType.PERCENTAGE: self._solve_percentage,
            # –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã —Ä–µ—à–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã –∏–∑ solution_methods
            # —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –∏–º–µ—é—Ç –¥—Ä—É–≥–æ–π –ø–æ—Ä—è–¥–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        }
    
    def solve_problem(self, problem_text: str, **kwargs) -> ProblemSolution:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏
        
        Args:
            problem_text: –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            ProblemSolution: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—à–µ–Ω–∏—è
        """
        try:
            # 1. –ê–Ω–∞–ª–∏–∑ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
            problem_type = self._identify_problem_type(problem_text)
            logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–∏–ø –∑–∞–¥–∞—á–∏: {problem_type.value}")
            
            # 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–¥–∞—á–∏
            input_data = self._extract_data(problem_text, problem_type)
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {input_data}")
            
            # 3. –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ —Ä–µ—à–µ–Ω–∏—è
            if problem_type in self.solution_methods:
                solution_method = self.solution_methods[problem_type]
                result = solution_method(input_data, problem_text)
            elif problem_type == ProblemType.PHYSICS_FORMULAS:
                result = self._solve_physics_problem(input_data, problem_text)
            elif problem_type == ProblemType.CHEMISTRY_CALCULATIONS:
                result = self._solve_chemistry_problem(problem_text, input_data)
            elif problem_type == ProblemType.GRAPH_ANALYSIS:
                result = self._solve_graph_problem(problem_text, input_data)
            elif problem_type == ProblemType.DATA_VISUALIZATION:
                result = self._solve_visualization_problem(problem_text, input_data)
            elif problem_type == ProblemType.SYMBOLIC_COMPUTATION:
                result = self._solve_symbolic_problem(problem_text, input_data)
            elif problem_type == ProblemType.EQUATION_SOLVING:
                result = self._solve_equation_problem(problem_text, input_data)
            elif problem_type == ProblemType.DIFFERENTIATION:
                result = self._solve_differentiation_problem(problem_text, input_data)
            elif problem_type == ProblemType.INTEGRATION:
                result = self._solve_integration_problem(problem_text, input_data)
            elif problem_type == ProblemType.MATRIX_OPERATIONS:
                result = self._solve_matrix_problem(problem_text, input_data)
            elif problem_type == ProblemType.FUNCTION_PLOTTING:
                result = self._solve_plotting_problem(problem_text, input_data)
            else:
                result = self._solve_generic(problem_text, input_data)
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            verification = self._verify_solution(result, input_data, problem_type)
            
            # 5. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            return ProblemSolution(
                problem_type=problem_type,
                input_data=input_data,
                solution_steps=result.get('steps', []),
                final_answer=result.get('answer'),
                verification=verification,
                confidence=result.get('confidence', 0.8),
                explanation=result.get('explanation', '')
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            return ProblemSolution(
                problem_type=ProblemType.UNKNOWN,
                input_data={},
                solution_steps=[f"–û—à–∏–±–∫–∞: {str(e)}"],
                final_answer="–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è",
                verification=False,
                confidence=0.0,
                explanation=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}"
            )
    
    def _identify_problem_type(self, problem_text: str) -> ProblemType:
        """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏"""
        problem_lower = problem_text.lower()
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π
        if any(re.search(pattern, problem_lower) for pattern in self.problem_patterns[ProblemType.QUADRATIC_EQUATION]):
            return ProblemType.QUADRATIC_EQUATION
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        type_scores = {}
        for problem_type, patterns in self.problem_patterns.items():
            score = 0
            for pattern in patterns:
                matches = len(re.findall(pattern, problem_lower))
                score += matches
            type_scores[problem_type] = score
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        if type_scores:
            best_type = max(type_scores, key=type_scores.get)
            if type_scores[best_type] > 0:
                return best_type
        
        return ProblemType.UNKNOWN
    
    def _extract_data(self, problem_text: str, problem_type: ProblemType) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏"""
        data = {}
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–µ–ª
        numbers = re.findall(r'-?\d+\.?\d*', problem_text)
        if numbers:
            data['numbers'] = [float(n) for n in numbers]
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        variables = re.findall(r'[a-zA-Z]\w*', problem_text)
        if variables:
            data['variables'] = list(set(variables))
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
        if problem_type == ProblemType.AREA_CALCULATION:
            data.update(self._extract_geometry_data(problem_text))
        elif problem_type in [ProblemType.LINEAR_EQUATION, ProblemType.QUADRATIC_EQUATION]:
            data.update(self._extract_equation_data(problem_text))
        elif problem_type == ProblemType.TRIGONOMETRY:
            data.update(self._extract_trigonometry_data(problem_text))
        
        return data
    
    def _extract_geometry_data(self, problem_text: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        data = {}
        
        # –ü–æ–∏—Å–∫ —Ä–∞–∑–º–µ—Ä–æ–≤
        if '—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫' in problem_text.lower():
            if '–æ—Å–Ω–æ–≤–∞–Ω–∏–µ' in problem_text.lower():
                base_match = re.search(r'–æ—Å–Ω–æ–≤–∞–Ω–∏–µ\s*(\d+\.?\d*)', problem_text.lower())
                if base_match:
                    data['base'] = float(base_match.group(1))
            
            if '–≤—ã—Å–æ—Ç–∞' in problem_text.lower():
                height_match = re.search(r'–≤—ã—Å–æ—Ç–∞\s*(\d+\.?\d*)', problem_text.lower())
                if height_match:
                    data['height'] = float(height_match.group(1))
        
        elif '–∫—Ä—É–≥' in problem_text.lower():
            radius_match = re.search(r'—Ä–∞–¥–∏—É—Å\s*(\d+\.?\d*)', problem_text.lower())
            if radius_match:
                data['radius'] = float(radius_match.group(1))
        
        elif '–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫' in problem_text.lower():
            length_match = re.search(r'–¥–ª–∏–Ω–∞\s*(\d+\.?\d*)', problem_text.lower())
            width_match = re.search(r'—à–∏—Ä–∏–Ω–∞\s*(\d+\.?\d*)', problem_text.lower())
            if length_match:
                data['length'] = float(length_match.group(1))
            if width_match:
                data['width'] = float(width_match.group(1))
        
        return data
    
    def _extract_equation_data(self, problem_text: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        data = {}
        
        # –ü–æ–∏—Å–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –≤ —É—Ä–∞–≤–Ω–µ–Ω–∏—è—Ö –≤–∏–¥–∞ ax + b = c
        linear_match = re.search(r'(\d*\.?\d*)\s*[a-zA-Z]\s*([\+\-])\s*(\d+\.?\d*)\s*=\s*(\d+\.?\d*)', problem_text)
        if linear_match:
            a = float(linear_match.group(1)) if linear_match.group(1) else 1.0
            sign = linear_match.group(2)
            b = float(linear_match.group(3))
            c = float(linear_match.group(4))
            
            if sign == '-':
                b = -b
            
            data['coefficients'] = {'a': a, 'b': b, 'c': c}
        
        return data
    
    def _extract_trigonometry_data(self, problem_text: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        data = {}
        
        # –ü–æ–∏—Å–∫ —É–≥–ª–æ–≤
        angle_match = re.search(r'(\d+\.?\d*)\s*(–≥—Ä–∞–¥—É—Å|—Ä–∞–¥–∏–∞–Ω|¬∞)', problem_text.lower())
        if angle_match:
            angle = float(angle_match.group(1))
            unit = angle_match.group(2)
            if unit in ['–≥—Ä–∞–¥—É—Å', '¬∞']:
                data['angle_degrees'] = angle
                data['angle_radians'] = math.radians(angle)
            else:
                data['angle_radians'] = angle
                data['angle_degrees'] = math.degrees(angle)
        
        return data
    
    def _solve_arithmetic(self, data: Dict[str, Any], problem_text: str) -> Dict[str, Any]:
        """–†–µ—à–µ–Ω–∏–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        problem_lower = problem_text.lower()
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á —Ç–∏–ø–∞ "—Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å"
        if any(word in problem_lower for word in ['–æ—Å—Ç–∞–ª–æ—Å—å', '–æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞', '—É–∫–∞—Ç–∏–ª–æ—Å—å', '—É–ø–∞–ª–æ', '—Å—ä–µ–ª', '–ø–æ—Ç–µ—Ä—è–ª', '–ø–æ—Ç—Ä–∞—Ç–∏–ª']):
            numbers = data.get('numbers', [])
            if len(numbers) >= 2:
                # –ó–∞–¥–∞—á–∏ —Ç–∏–ø–∞ "2 —è–±–ª–æ–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ –æ–¥–Ω–æ —É–∫–∞—Ç–∏–ª–æ—Å—å, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å"
                initial_count = numbers[0]  # –±—ã–ª–æ
                removed_count = numbers[1] if len(numbers) > 1 else 1  # —É–∫–∞—Ç–∏–ª–æ—Å—å/–ø–æ—Ç–µ—Ä—è–ª
                result = initial_count - removed_count
                
                return {
                    'answer': f"{int(result)}",
                    'steps': [
                        f"–ë—ã–ª–æ: {int(initial_count)}",
                        f"–£–∫–∞—Ç–∏–ª–æ—Å—å/–ø–æ—Ç–µ—Ä—è–ª: {int(removed_count)}",
                        f"–û—Å—Ç–∞–ª–æ—Å—å: {int(initial_count)} - {int(removed_count)} = {int(result)}"
                    ],
                    'confidence': 0.95,
                    'explanation': f"–ï—Å–ª–∏ –±—ã–ª–æ {int(initial_count)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∞ {int(removed_count)} —É–∫–∞—Ç–∏–ª–æ—Å—å/–ø–æ—Ç–µ—Ä—è–ª, —Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å {int(result)}"
                }
        
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            expression = self._clean_expression(problem_text)
            result = eval(expression)
            
            return {
                'answer': result,
                'steps': [f"–í—ã—á–∏—Å–ª—è–µ–º: {expression} = {result}"],
                'confidence': 0.9,
                'explanation': f"–ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ {expression} —Ä–∞–≤–Ω–æ {result}"
            }
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–∞ –∏–∑ –∑–∞–¥–∞—á–∏
            numbers = data.get('numbers', [])
            if len(numbers) >= 2:
                # –ü—Ä–æ—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                if '+' in problem_text:
                    result = sum(numbers)
                    operation = "—Å–ª–æ–∂–µ–Ω–∏–µ"
                elif '-' in problem_text:
                    result = numbers[0] - numbers[1]
                    operation = "–≤—ã—á–∏—Ç–∞–Ω–∏–µ"
                elif '*' in problem_text or '√ó' in problem_text:
                    result = numbers[0] * numbers[1]
                    operation = "—É–º–Ω–æ–∂–µ–Ω–∏–µ"
                elif '/' in problem_text or '√∑' in problem_text:
                    result = numbers[0] / numbers[1]
                    operation = "–¥–µ–ª–µ–Ω–∏–µ"
                else:
                    result = sum(numbers)
                    operation = "—Å–ª–æ–∂–µ–Ω–∏–µ"
                
                return {
                    'answer': result,
                    'steps': [f"–í—ã–ø–æ–ª–Ω—è–µ–º {operation}: {numbers[0]} {operation} {numbers[1]} = {result}"],
                    'confidence': 0.8,
                    'explanation': f"–†–µ–∑—É–ª—å—Ç–∞—Ç {operation} —á–∏—Å–µ–ª {numbers[0]} –∏ {numbers[1]} —Ä–∞–≤–µ–Ω {result}"
                }
        
        return {
            'answer': "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å",
            'steps': ["–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"],
            'confidence': 0.0,
            'explanation': "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"
        }
    
    def _solve_linear_equation(self, data: Dict[str, Any], problem_text: str) -> Dict[str, Any]:
        """–†–µ—à–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π"""
        coefficients = data.get('coefficients', {})
        
        if not coefficients:
            return {
                'answer': "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —É—Ä–∞–≤–Ω–µ–Ω–∏—è",
                'steps': ["–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —É—Ä–∞–≤–Ω–µ–Ω–∏—è"],
                'confidence': 0.0,
                'explanation': "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ª–∏–Ω–µ–π–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è"
            }
        
        a = coefficients.get('a', 1)
        b = coefficients.get('b', 0)
        c = coefficients.get('c', 0)
        
        if a == 0:
            return {
                'answer': "–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ –∏–º–µ–µ—Ç —Ä–µ—à–µ–Ω–∏—è –∏–ª–∏ –∏–º–µ–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –º–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏–π",
                'steps': ["a = 0, —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã—Ä–æ–∂–¥–µ–Ω–Ω–æ–µ"],
                'confidence': 0.9,
                'explanation': "–ü—Ä–∏ a = 0 —É—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–º"
            }
        
        # –†–µ—à–µ–Ω–∏–µ: x = (c - b) / a
        x = (c - b) / a
        
        steps = [
            f"–£—Ä–∞–≤–Ω–µ–Ω–∏–µ: {a}x + {b} = {c}",
            f"–ü–µ—Ä–µ–Ω–æ—Å–∏–º {b} –≤ –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å: {a}x = {c} - {b}",
            f"–£–ø—Ä–æ—â–∞–µ–º: {a}x = {c - b}",
            f"–î–µ–ª–∏–º –Ω–∞ {a}: x = {c - b} / {a}",
            f"–û—Ç–≤–µ—Ç: x = {x}"
        ]
        
        return {
            'answer': x,
            'steps': steps,
            'confidence': 0.95,
            'explanation': f"–õ–∏–Ω–µ–π–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ {a}x + {b} = {c} –∏–º–µ–µ—Ç —Ä–µ—à–µ–Ω–∏–µ x = {x}"
        }
    
    def _solve_quadratic_equation(self, data: Dict[str, Any], problem_text: str) -> Dict[str, Any]:
        """–†–µ—à–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π"""
        # –ü–∞—Ä—Å–∏–Ω–≥ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–∏–¥–∞ ax¬≤ + bx + c = 0
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: x¬≤ + 5x + 6 = 0
        quadratic_pattern = r'x[¬≤¬≤^2]\s*([+\-]?)\s*(\d*)\s*x\s*([+\-]?)\s*(\d*)\s*=\s*(\d+)'
        quadratic_match = re.search(quadratic_pattern, problem_text)
        
        if quadratic_match:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                a_sign = quadratic_match.group(1) or '+'
                b_coeff = quadratic_match.group(2) or '1'
                c_sign = quadratic_match.group(3) or '+'
                c_coeff = quadratic_match.group(4) or '0'
                right_side = int(quadratic_match.group(5))
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ–æ—Ä–º—É ax¬≤ + bx + c = 0
                a = 1  # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏ x¬≤ –≤—Å–µ–≥–¥–∞ 1 –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ
                b = int(a_sign + b_coeff) if b_coeff else 0
                c = int(c_sign + c_coeff) if c_coeff else 0
                
                # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å –≤–ª–µ–≤–æ
                c = c - right_side
            except:
                # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
                numbers = data.get('numbers', [])
                if len(numbers) >= 3:
                    a, b, c = numbers[0], numbers[1], numbers[2]
                else:
                    return {
                        'answer': "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤",
                        'steps': ["–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã"],
                        'confidence': 0.0,
                        'explanation': "–î–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω—É–∂–Ω—ã 3 –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞"
                    }
        else:
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
            numbers = data.get('numbers', [])
            if len(numbers) >= 3:
                a, b, c = numbers[0], numbers[1], numbers[2]
            else:
                return {
                    'answer': "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤",
                    'steps': ["–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã"],
                    'confidence': 0.0,
                    'explanation': "–î–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω—É–∂–Ω—ã 3 –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞"
                }
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç–∞
        discriminant = b**2 - 4*a*c
        
        steps = [
            f"–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: {a}x¬≤ + {b}x + {c} = 0",
            f"–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç: D = b¬≤ - 4ac = {b}¬≤ - 4¬∑{a}¬∑{c} = {discriminant}"
        ]
        
        if discriminant > 0:
            x1 = (-b + math.sqrt(discriminant)) / (2*a)
            x2 = (-b - math.sqrt(discriminant)) / (2*a)
            steps.extend([
                f"D > 0, —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–º–µ–µ—Ç –¥–≤–∞ –∫–æ—Ä–Ω—è:",
                f"x‚ÇÅ = (-b + ‚àöD) / (2a) = (-{b} + ‚àö{discriminant}) / (2¬∑{a}) = {x1}",
                f"x‚ÇÇ = (-b - ‚àöD) / (2a) = (-{b} - ‚àö{discriminant}) / (2¬∑{a}) = {x2}"
            ])
            answer = {"x1": x1, "x2": x2}
            explanation = f"–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–º–µ–µ—Ç –¥–≤–∞ –∫–æ—Ä–Ω—è: x‚ÇÅ = {x1}, x‚ÇÇ = {x2}"
            
        elif discriminant == 0:
            x = -b / (2*a)
            steps.extend([
                f"D = 0, —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–º–µ–µ—Ç –æ–¥–∏–Ω –∫–æ—Ä–µ–Ω—å:",
                f"x = -b / (2a) = -{b} / (2¬∑{a}) = {x}"
            ])
            answer = x
            explanation = f"–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–º–µ–µ—Ç –æ–¥–∏–Ω –∫–æ—Ä–µ–Ω—å: x = {x}"
            
        else:
            steps.extend([
                f"D < 0, —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ –∏–º–µ–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ—Ä–Ω–µ–π",
                f"–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∫–æ—Ä–Ω–∏: x = (-{b} ¬± i‚àö{abs(discriminant)}) / (2¬∑{a})"
            ])
            answer = "–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ—Ä–Ω–µ–π"
            explanation = "–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ –∏–º–µ–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ—Ä–Ω–µ–π"
        
        return {
            'answer': answer,
            'steps': steps,
            'confidence': 0.9,
            'explanation': explanation
        }
    
    def _solve_system_equations(self, data: Dict[str, Any], problem_text: str) -> Dict[str, Any]:
        """–†–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º —É—Ä–∞–≤–Ω–µ–Ω–∏–π"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º 2x2
        numbers = data.get('numbers', [])
        
        if len(numbers) >= 6:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –≤–∏–¥–∞:
            # a1*x + b1*y = c1
            # a2*x + b2*y = c2
            a1, b1, c1, a2, b2, c2 = numbers[:6]
            
            # –ú–µ—Ç–æ–¥ –ö—Ä–∞–º–µ—Ä–∞
            det = a1*b2 - a2*b1
            
            if abs(det) < 1e-10:
                return {
                    'answer': "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–º–µ–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è",
                    'steps': ["–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å —Ä–∞–≤–µ–Ω –Ω—É–ª—é"],
                    'confidence': 0.9,
                    'explanation': "–°–∏—Å—Ç–µ–º–∞ —É—Ä–∞–≤–Ω–µ–Ω–∏–π –≤—ã—Ä–æ–∂–¥–µ–Ω–Ω–∞—è"
                }
            
            det_x = c1*b2 - c2*b1
            det_y = a1*c2 - a2*c1
            
            x = det_x / det
            y = det_y / det
            
            steps = [
                f"–°–∏—Å—Ç–µ–º–∞ —É—Ä–∞–≤–Ω–µ–Ω–∏–π:",
                f"{a1}x + {b1}y = {c1}",
                f"{a2}x + {b2}y = {c2}",
                f"–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å: Œî = {a1}¬∑{b2} - {a2}¬∑{b1} = {det}",
                f"Œîx = {c1}¬∑{b2} - {c2}¬∑{b1} = {det_x}",
                f"Œîy = {a1}¬∑{c2} - {a2}¬∑{c1} = {det_y}",
                f"x = Œîx/Œî = {det_x}/{det} = {x}",
                f"y = Œîy/Œî = {det_y}/{det} = {y}"
            ]
            
            return {
                'answer': {"x": x, "y": y},
                'steps': steps,
                'confidence': 0.85,
                'explanation': f"–†–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: x = {x}, y = {y}"
            }
        
        return {
            'answer': "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã",
            'steps': ["–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã"],
            'confidence': 0.0,
            'explanation': "–î–ª—è —Å–∏—Å—Ç–µ–º—ã 2x2 –Ω—É–∂–Ω–æ 6 –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤"
        }
    
    def _solve_area_calculation(self, data: Dict[str, Any], problem_text: str) -> Dict[str, Any]:
        """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ —Ä–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏"""
        problem_lower = problem_text.lower()
        
        if '—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫' in problem_lower:
            base = data.get('base')
            height = data.get('height')
            
            if base and height:
                area = 0.5 * base * height
                steps = [
                    f"–ü–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞: S = (1/2) √ó –æ—Å–Ω–æ–≤–∞–Ω–∏–µ √ó –≤—ã—Å–æ—Ç–∞",
                    f"S = (1/2) √ó {base} √ó {height}",
                    f"S = {area}"
                ]
                return {
                    'answer': area,
                    'steps': steps,
                    'confidence': 0.95,
                    'explanation': f"–ü–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º {base} –∏ –≤—ã—Å–æ—Ç–æ–π {height} —Ä–∞–≤–Ω–∞ {area}"
                }
        
        elif '–∫—Ä—É–≥' in problem_lower:
            radius = data.get('radius')
            
            if radius:
                area = math.pi * radius**2
                steps = [
                    f"–ü–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞: S = œÄ √ó r¬≤",
                    f"S = œÄ √ó {radius}¬≤",
                    f"S = {math.pi} √ó {radius**2}",
                    f"S = {area}"
                ]
                return {
                    'answer': area,
                    'steps': steps,
                    'confidence': 0.95,
                    'explanation': f"–ü–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ —Å —Ä–∞–¥–∏—É—Å–æ–º {radius} —Ä–∞–≤–Ω–∞ {area}"
                }
        
        elif '–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫' in problem_lower:
            length = data.get('length')
            width = data.get('width')
            
            if length and width:
                area = length * width
                steps = [
                    f"–ü–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞: S = –¥–ª–∏–Ω–∞ √ó —à–∏—Ä–∏–Ω–∞",
                    f"S = {length} √ó {width}",
                    f"S = {area}"
                ]
                return {
                    'answer': area,
                    'steps': steps,
                    'confidence': 0.95,
                    'explanation': f"–ü–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ {length}√ó{width} —Ä–∞–≤–Ω–∞ {area}"
                }
        
        return {
            'answer': "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∏–≥—É—Ä—ã",
            'steps': ["–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–≥—É—Ä—ã"],
            'confidence': 0.0,
            'explanation': "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π —Ñ–∏–≥—É—Ä—ã"
        }
    
    def _solve_volume_calculation(self, data: Dict[str, Any], problem_text: str) -> Dict[str, Any]:
        """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ —Ä–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—ä–µ–º–Ω—ã—Ö —Ñ–∏–≥—É—Ä
        numbers = data.get('numbers', [])
        problem_lower = problem_text.lower()
        
        if '–∫—É–±' in problem_lower and numbers:
            side = numbers[0]
            volume = side**3
            steps = [
                f"–û–±—ä–µ–º –∫—É–±–∞: V = a¬≥",
                f"V = {side}¬≥",
                f"V = {volume}"
            ]
            return {
                'answer': volume,
                'steps': steps,
                'confidence': 0.95,
                'explanation': f"–û–±—ä–µ–º –∫—É–±–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–æ–π {side} —Ä–∞–≤–µ–Ω {volume}"
            }
        
        elif '—Ü–∏–ª–∏–Ω–¥—Ä' in problem_lower and len(numbers) >= 2:
            radius, height = numbers[0], numbers[1]
            volume = math.pi * radius**2 * height
            steps = [
                f"–û–±—ä–µ–º —Ü–∏–ª–∏–Ω–¥—Ä–∞: V = œÄ √ó r¬≤ √ó h",
                f"V = œÄ √ó {radius}¬≤ √ó {height}",
                f"V = {math.pi} √ó {radius**2} √ó {height}",
                f"V = {volume}"
            ]
            return {
                'answer': volume,
                'steps': steps,
                'confidence': 0.95,
                'explanation': f"–û–±—ä–µ–º —Ü–∏–ª–∏–Ω–¥—Ä–∞ —Å —Ä–∞–¥–∏—É—Å–æ–º {radius} –∏ –≤—ã—Å–æ—Ç–æ–π {height} —Ä–∞–≤–µ–Ω {volume}"
            }
        
        return {
            'answer': "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ–±—ä–µ–º–Ω–æ–π —Ñ–∏–≥—É—Ä—ã",
            'steps': ["–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–≥—É—Ä—ã"],
            'confidence': 0.0,
            'explanation': "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø –æ–±—ä–µ–º–Ω–æ–π —Ñ–∏–≥—É—Ä—ã"
        }
    
    def _solve_trigonometry(self, data: Dict[str, Any], problem_text: str) -> Dict[str, Any]:
        """–†–µ—à–µ–Ω–∏–µ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        angle_rad = data.get('angle_radians')
        angle_deg = data.get('angle_degrees')
        
        if not angle_rad and not angle_deg:
            return {
                'answer': "–ù–µ –Ω–∞–π–¥–µ–Ω —É–≥–æ–ª",
                'steps': ["–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —É–≥–æ–ª –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"],
                'confidence': 0.0,
                'explanation': "–î–ª—è —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –Ω—É–∂–µ–Ω —É–≥–æ–ª"
            }
        
        if not angle_rad:
            angle_rad = math.radians(angle_deg)
        if not angle_deg:
            angle_deg = math.degrees(angle_rad)
        
        sin_val = math.sin(angle_rad)
        cos_val = math.cos(angle_rad)
        tan_val = math.tan(angle_rad)
        
        steps = [
            f"–£–≥–æ–ª: {angle_deg}¬∞ = {angle_rad:.4f} —Ä–∞–¥–∏–∞–Ω",
            f"sin({angle_deg}¬∞) = {sin_val:.4f}",
            f"cos({angle_deg}¬∞) = {cos_val:.4f}",
            f"tan({angle_deg}¬∞) = {tan_val:.4f}"
        ]
        
        return {
            'answer': {
                'sin': sin_val,
                'cos': cos_val,
                'tan': tan_val,
                'angle_degrees': angle_deg,
                'angle_radians': angle_rad
            },
            'steps': steps,
            'confidence': 0.95,
            'explanation': f"–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–≥–ª–∞ {angle_deg}¬∞: sin={sin_val:.4f}, cos={cos_val:.4f}, tan={tan_val:.4f}"
        }
    
    def _solve_calculus(self, data: Dict[str, Any], problem_text: str) -> Dict[str, Any]:
        """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö
        problem_lower = problem_text.lower()
        
        if '–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è' in problem_lower:
            # –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ
            func_match = re.search(r'(\w+)\s*\(', problem_text)
            if func_match:
                func_name = func_match.group(1)
                
                if func_name in ['sin', 'cos', 'tan']:
                    # –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
                    derivatives = {
                        'sin': 'cos(x)',
                        'cos': '-sin(x)',
                        'tan': '1/cos¬≤(x)'
                    }
                    
                    return {
                        'answer': derivatives[func_name],
                        'steps': [f"–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è {func_name}(x) = {derivatives[func_name]}"],
                        'confidence': 0.9,
                        'explanation': f"–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è {func_name}(x) —Ä–∞–≤–Ω–∞ {derivatives[func_name]}"
                    }
        
        return {
            'answer': "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞",
            'steps': ["–û—à–∏–±–∫–∞: –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–∏–ø –∑–∞–¥–∞—á–∏"],
            'confidence': 0.0,
            'explanation': "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∑–∞–¥–∞—á–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        }
    
    def _solve_statistics(self, data: Dict[str, Any], problem_text: str) -> Dict[str, Any]:
        """–†–µ—à–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        numbers = data.get('numbers', [])
        
        if not numbers:
            return {
                'answer': "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                'steps': ["–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"],
                'confidence': 0.0,
                'explanation': "–î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–Ω—ã —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"
            }
        
        # –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        mean = sum(numbers) / len(numbers)
        sorted_numbers = sorted(numbers)
        n = len(sorted_numbers)
        
        if n % 2 == 0:
            median = (sorted_numbers[n//2-1] + sorted_numbers[n//2]) / 2
        else:
            median = sorted_numbers[n//2]
        
        variance = sum((x - mean)**2 for x in numbers) / len(numbers)
        std_dev = math.sqrt(variance)
        
        steps = [
            f"–î–∞–Ω–Ω—ã–µ: {numbers}",
            f"–°—Ä–µ–¥–Ω–µ–µ: Œº = Œ£x/n = {sum(numbers)}/{len(numbers)} = {mean:.2f}",
            f"–ú–µ–¥–∏–∞–Ω–∞: {median}",
            f"–î–∏—Å–ø–µ—Ä—Å–∏—è: œÉ¬≤ = Œ£(x-Œº)¬≤/n = {variance:.2f}",
            f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: œÉ = ‚àöœÉ¬≤ = {std_dev:.2f}"
        ]
        
        return {
            'answer': {
                'mean': mean,
                'median': median,
                'variance': variance,
                'standard_deviation': std_dev,
                'count': len(numbers)
            },
            'steps': steps,
            'confidence': 0.9,
            'explanation': f"–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: —Å—Ä–µ–¥–Ω–µ–µ={mean:.2f}, –º–µ–¥–∏–∞–Ω–∞={median}, œÉ={std_dev:.2f}"
        }
    
    def _solve_percentage(self, data: Dict[str, Any], problem_text: str) -> Dict[str, Any]:
        """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç—ã"""
        numbers = data.get('numbers', [])
        
        if len(numbers) >= 2:
            number, percent = numbers[0], numbers[1]
            result = (number * percent) / 100
            
            steps = [
                f"–ù–∞–π—Ç–∏ {percent}% –æ—Ç {number}",
                f"–§–æ—Ä–º—É–ª–∞: (—á–∏—Å–ª–æ √ó –ø—Ä–æ—Ü–µ–Ω—Ç) / 100",
                f"({number} √ó {percent}) / 100 = {result}"
            ]
            
            return {
                'answer': result,
                'steps': steps,
                'confidence': 0.95,
                'explanation': f"{percent}% –æ—Ç {number} —Ä–∞–≤–Ω–æ {result}"
            }
        
        return {
            'answer': "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö",
            'steps': ["–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —á–∏—Å–ª–æ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç"],
            'confidence': 0.0,
            'explanation': "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω—É–∂–Ω—ã —á–∏—Å–ª–æ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç"
        }
    
    def _solve_physics_problem(self, data: Dict[str, Any], problem_text: str) -> Dict[str, Any]:
        """–†–µ—à–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        try:
            logger.info(f"üîç –û—Ç–ª–∞–¥–∫–∞: problem_text = {problem_text}, type = {type(problem_text)}")
            logger.info(f"üîç –û—Ç–ª–∞–¥–∫–∞: data = {data}, type = {type(data)}")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
            formula_name = self._detect_physics_formula(problem_text)
            
            if formula_name:
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –∑–∞–¥–∞—á–∏
                variables = self._extract_physics_variables(problem_text)
                
                # –†–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å
                solution = self.physics_solver.solve_physics_formula(formula_name, variables)
                
                return {
                    'answer': solution.final_answer,
                    'steps': solution.solution_steps,
                    'confidence': solution.confidence,
                    'explanation': solution.explanation,
                    'formula': formula_name,
                    'variables': variables
                }
            else:
                return {
                    'answer': "–§–∏–∑–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞",
                    'steps': ["–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É"],
                    'confidence': 0.1,
                    'explanation': "–§–∏–∑–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏: {e}")
            return {
                'answer': "–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è",
                'steps': ["–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"],
                'confidence': 0.0,
                'explanation': f"–û—à–∏–±–∫–∞: {e}"
            }
    
    def _solve_chemistry_problem(self, problem_text: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """–†–µ—à–µ–Ω–∏–µ —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        try:
            logger.info(f"üîç –•–∏–º–∏—è: problem_text = {problem_text}, type = {type(problem_text)}")
            logger.info(f"üîç –•–∏–º–∏—è: data = {data}, type = {type(data)}")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
            formula_name = self._detect_chemistry_formula(problem_text)
            
            if formula_name:
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –∑–∞–¥–∞—á–∏
                variables = self._extract_chemistry_variables(problem_text)
                
                # –†–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ö–∏–º–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å
                solution = self.chemistry_solver.solve_chemistry_formula(formula_name, variables)
                
                return {
                    'answer': solution.final_answer,
                    'steps': solution.solution_steps,
                    'confidence': solution.confidence,
                    'explanation': solution.explanation,
                    'formula': formula_name,
                    'variables': variables
                }
            else:
                return {
                    'answer': "–•–∏–º–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞",
                    'steps': ["–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É"],
                    'confidence': 0.1,
                    'explanation': "–•–∏–º–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è —Ö–∏–º–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏: {e}")
            return {
                'answer': "–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è",
                'steps': ["–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"],
                'confidence': 0.0,
                'explanation': f"–û—à–∏–±–∫–∞: {e}"
            }
    
    def _solve_graph_problem(self, problem_text: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            image_path = self._extract_image_path(problem_text)
            
            if image_path:
                return {
                    'answer': f"–ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞: {image_path}",
                    'steps': [
                        f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_path}",
                        "–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥—Ä–∞—Ñ–∏–∫–∞",
                        "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é OCR",
                        "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                    ],
                    'confidence': 0.8,
                    'explanation': "–ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ OCR –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è",
                    'image_path': image_path
                }
            else:
                return {
                    'answer': "–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    'steps': ["–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"],
                    'confidence': 0.1,
                    'explanation': "–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return {
                'answer': "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞",
                'steps': ["–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"],
                'confidence': 0.0,
                'explanation': f"–û—à–∏–±–∫–∞: {e}"
            }
    
    def _solve_visualization_problem(self, problem_text: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–¥–∞—á–∏
            viz_data = self._extract_visualization_data(problem_text)
            
            if viz_data:
                return {
                    'answer': "–ì—Ä–∞—Ñ–∏–∫ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω",
                    'steps': [
                        "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–¥–∞—á–∏",
                        "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏",
                        "–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞",
                        "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"
                    ],
                    'confidence': 0.9,
                    'explanation': "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤",
                    'data': viz_data
                }
            else:
                return {
                    'answer': "–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    'steps': ["–£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞"],
                    'confidence': 0.1,
                    'explanation': "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return {
                'answer': "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
                'steps': ["–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"],
                'confidence': 0.0,
                'explanation': f"–û—à–∏–±–∫–∞: {e}"
            }
    
    def _solve_symbolic_problem(self, problem_text: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å–∏–º–≤–æ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π"""
        try:
            if not self.symbolic_calculator:
                return {
                    'answer': "–°–∏–º–≤–æ–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    'steps': ["–ú–æ–¥—É–ª—å SymPy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"],
                    'confidence': 0.0,
                    'explanation': "–î–ª—è —Å–∏–º–≤–æ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–æ–¥—É–ª—å SymPy"
                }
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–∏–º–≤–æ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            if "—É–ø—Ä–æ—Å—Ç–∏—Ç—å" in problem_text.lower():
                result = self.symbolic_calculator.simplify_expression(problem_text)
            elif "—Ä–µ—à–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ" in problem_text.lower():
                result = self.symbolic_calculator.solve_equation(problem_text)
            elif "–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è" in problem_text.lower():
                result = self.symbolic_calculator.differentiate(problem_text)
            elif "–∏–Ω—Ç–µ–≥—Ä–∞–ª" in problem_text.lower():
                result = self.symbolic_calculator.integrate(problem_text)
            else:
                result = self.symbolic_calculator.simplify_expression(problem_text)
            
            return {
                'answer': str(result.result),
                'steps': result.steps,
                'confidence': result.confidence,
                'explanation': result.explanation,
                'latex_output': result.latex_output
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–º–≤–æ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: {e}")
            return {
                'answer': "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π",
                'steps': ["–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"],
                'confidence': 0.0,
                'explanation': f"–û—à–∏–±–∫–∞: {e}"
            }
    
    def _solve_equation_problem(self, problem_text: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """–†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–π"""
        try:
            if not self.symbolic_calculator:
                return {
                    'answer': "–°–∏–º–≤–æ–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    'steps': ["–ú–æ–¥—É–ª—å SymPy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"],
                    'confidence': 0.0,
                    'explanation': "–î–ª—è —Ä–µ—à–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–æ–¥—É–ª—å SymPy"
                }
            
            result = self.symbolic_calculator.solve_equation(problem_text)
            
            return {
                'answer': str(result.result),
                'steps': result.steps,
                'confidence': result.confidence,
                'explanation': result.explanation,
                'latex_output': result.latex_output
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
            return {
                'answer': "–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è",
                'steps': ["–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"],
                'confidence': 0.0,
                'explanation': f"–û—à–∏–±–∫–∞: {e}"
            }
    
    def _solve_differentiation_problem(self, problem_text: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            if not self.symbolic_calculator:
                return {
                    'answer': "–°–∏–º–≤–æ–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    'steps': ["–ú–æ–¥—É–ª—å SymPy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"],
                    'confidence': 0.0,
                    'explanation': "–î–ª—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–æ–¥—É–ª—å SymPy"
                }
            
            result = self.symbolic_calculator.differentiate(problem_text)
            
            return {
                'answer': str(result.result),
                'steps': result.steps,
                'confidence': result.confidence,
                'explanation': result.explanation,
                'latex_output': result.latex_output
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return {
                'answer': "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π",
                'steps': ["–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"],
                'confidence': 0.0,
                'explanation': f"–û—à–∏–±–∫–∞: {e}"
            }
    
    def _solve_integration_problem(self, problem_text: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            if not self.symbolic_calculator:
                return {
                    'answer': "–°–∏–º–≤–æ–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    'steps': ["–ú–æ–¥—É–ª—å SymPy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"],
                    'confidence': 0.0,
                    'explanation': "–î–ª—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–æ–¥—É–ª—å SymPy"
                }
            
            result = self.symbolic_calculator.integrate(problem_text)
            
            return {
                'answer': str(result.result),
                'steps': result.steps,
                'confidence': result.confidence,
                'explanation': result.explanation,
                'latex_output': result.latex_output
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return {
                'answer': "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π",
                'steps': ["–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"],
                'confidence': 0.0,
                'explanation': f"–û—à–∏–±–∫–∞: {e}"
            }
    
    def _solve_matrix_problem(self, problem_text: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """–†–µ—à–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á"""
        try:
            if not self.symbolic_calculator:
                return {
                    'answer': "–°–∏–º–≤–æ–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    'steps': ["–ú–æ–¥—É–ª—å SymPy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"],
                    'confidence': 0.0,
                    'explanation': "–î–ª—è –º–∞—Ç—Ä–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–æ–¥—É–ª—å SymPy"
                }
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            matrix_data = [[1, 2], [3, 4]]  # –ó–∞–≥–ª—É—à–∫–∞
            
            operation = "determinant"
            if "–æ–±—Ä–∞—Ç–Ω–∞—è" in problem_text.lower():
                operation = "inverse"
            elif "—Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è" in problem_text.lower():
                operation = "transpose"
            elif "—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è" in problem_text.lower():
                operation = "eigenvalues"
            
            result = self.symbolic_calculator.matrix_operations(operation, matrix_data)
            
            return {
                'answer': str(result.result),
                'steps': result.steps,
                'confidence': result.confidence,
                'explanation': result.explanation,
                'latex_output': result.latex_output
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Ç—Ä–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
            return {
                'answer': "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π",
                'steps': ["–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"],
                'confidence': 0.0,
                'explanation': f"–û—à–∏–±–∫–∞: {e}"
            }
    
    def _solve_plotting_problem(self, problem_text: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        try:
            if not self.symbolic_calculator:
                return {
                    'answer': "–°–∏–º–≤–æ–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    'steps': ["–ú–æ–¥—É–ª—å SymPy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"],
                    'confidence': 0.0,
                    'explanation': "–î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–æ–¥—É–ª—å SymPy"
                }
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            function = "x**2 + 2*x + 1"  # –ó–∞–≥–ª—É—à–∫–∞
            
            result = self.symbolic_calculator.plot_function(function)
            
            return {
                'answer': "–ì—Ä–∞—Ñ–∏–∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω",
                'steps': result.steps,
                'confidence': result.confidence,
                'explanation': result.explanation,
                'plot_data': result.plot_data
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return {
                'answer': "–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è",
                'steps': ["–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"],
                'confidence': 0.0,
                'explanation': f"–û—à–∏–±–∫–∞: {e}"
            }
    
    def _detect_physics_formula(self, problem_text: str) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—É–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏"""
        text_lower = problem_text.lower()
        
        # –ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞–¥–µ–∂–∏
        if any(phrase in text_lower for phrase in ["–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è", "–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫—É—é —ç–Ω–µ—Ä–≥–∏—é", "–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏"]):
            return "–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è_—ç–Ω–µ—Ä–≥–∏—è"
        elif any(phrase in text_lower for phrase in ["–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è", "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é", "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏"]):
            return "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è_—ç–Ω–µ—Ä–≥–∏—è"
        elif "–∑–∞–∫–æ–Ω –æ–º–∞" in text_lower:
            return "–∑–∞–∫–æ–Ω_–æ–º–∞"
        elif ("–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ" in text_lower and "—Ç–æ–∫" in text_lower and ("—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ" in text_lower or "—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–∏" in text_lower)):
            return "–∑–∞–∫–æ–Ω_–æ–º–∞"
        elif "–º–æ—â–Ω–æ—Å—Ç—å" in text_lower:
            return "–º–æ—â–Ω–æ—Å—Ç—å"
        elif "—Å–∏–ª–∞ —Ç—è–∂–µ—Å—Ç–∏" in text_lower:
            return "—Å–∏–ª–∞_—Ç—è–∂–µ—Å—Ç–∏"
        elif "—É—Å–∫–æ—Ä–µ–Ω–∏–µ" in text_lower:
            return "—É—Å–∫–æ—Ä–µ–Ω–∏–µ"
        elif "–ø—É—Ç—å" in text_lower:
            return "–ø—É—Ç—å"
        
        return None
    
    def _detect_chemistry_formula(self, problem_text: str) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ö–∏–º–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—É–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏"""
        text_lower = problem_text.lower()
        
        # –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞–¥–µ–∂–∏
        if any(word in text_lower for word in ["–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è", "–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é", "–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏"]):
            return "–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è"
        elif any(word in text_lower for word in ["–º–æ–ª—è—Ä–Ω–∞—è –º–∞—Å—Å–∞", "–º–æ–ª—è—Ä–Ω—É—é –º–∞—Å—Å—É", "–º–æ–ª—è—Ä–Ω–æ–π –º–∞—Å—Å—ã"]):
            return "–º–æ–ª—è—Ä–Ω–∞—è_–º–∞—Å—Å–∞"
        elif "–∑–∞–∫–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Å—Å—ã" in text_lower:
            return "–∑–∞–∫–æ–Ω_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è_–º–∞—Å—Å—ã"
        
        return None
    
    def _extract_physics_variables(self, problem_text: str) -> Dict[str, float]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏"""
        variables = {}
        
        # –ü–æ–∏—Å–∫ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        numbers = re.findall(r'\d+(?:\.\d+)?', problem_text)
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞: {numbers}")
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if any(word in problem_text.lower() for word in ["–º–∞—Å—Å–∞", "–º–∞—Å—Å–æ–π", "–º–∞—Å—Å—É"]):
            # –ù–∞–π—Ç–∏ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º "–∫–≥"
            massa_match = re.search(r'(\d+(?:\.\d+)?)\s*–∫–≥', problem_text.lower())
            if massa_match:
                variables["m"] = float(massa_match.group(1))
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ –º–∞—Å—Å–∞: {variables['m']} –∫–≥")
        if any(word in problem_text.lower() for word in ["—Å–∫–æ—Ä–æ—Å—Ç—å", "—Å–∫–æ—Ä–æ—Å—Ç—å—é", "—Å–∫–æ—Ä–æ—Å—Ç–∏"]):
            # –ù–∞–π—Ç–∏ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º "–º/—Å"
            speed_match = re.search(r'(\d+(?:\.\d+)?)\s*–º/—Å', problem_text.lower())
            if speed_match:
                variables["v"] = float(speed_match.group(1))
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å: {variables['v']} –º/—Å")
        if any(word in problem_text.lower() for word in ["—Ç–æ–∫", "—Ç–æ–∫–æ–º", "—Ç–æ–∫–µ"]):
            # –ù–∞–π—Ç–∏ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º "—Ç–æ–∫" –∏–ª–∏ "–∞"
            tok_match = re.search(r'(\d+(?:\.\d+)?)\s*[–∞–∞]', problem_text.lower())
            if tok_match:
                variables["I"] = float(tok_match.group(1))
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω —Ç–æ–∫: {variables['I']} –ê")
        if any(word in problem_text.lower() for word in ["—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ", "—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–∏", "—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ–º"]):
            # –ù–∞–π—Ç–∏ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º "–æ–º" –∏–ª–∏ "–æ–º–æ–≤"
            sopr_match = re.search(r'(\d+(?:\.\d+)?)\s*–æ–º', problem_text.lower())
            if sopr_match:
                variables["R"] = float(sopr_match.group(1))
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {variables['R']} –û–º")
        if any(word in problem_text.lower() for word in ["–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ", "–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–∏", "–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ–º"]):
            # –ù–∞–π—Ç–∏ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º "–≤" –∏–ª–∏ "–≤–æ–ª—å—Ç"
            voltage_match = re.search(r'(\d+(?:\.\d+)?)\s*[–≤–≤]', problem_text.lower())
            if voltage_match:
                variables["U"] = float(voltage_match.group(1))
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {variables['U']} –í")
            else:
                # Fallback: –≤–∑—è—Ç—å –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ
                if len(numbers) > 0:
                    variables["U"] = float(numbers[0])
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ (fallback): {variables['U']} –í")
        if "–≤—ã—Å–æ—Ç–∞" in problem_text.lower() and len(numbers) > 0:
            variables["h"] = float(numbers[0])
        
        logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {variables}")
        return variables
    
    def _extract_chemistry_variables(self, problem_text: str) -> Dict[str, float]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ö–∏–º–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏"""
        variables = {}
        
        # –ü–æ–∏—Å–∫ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        numbers = re.findall(r'\d+(?:\.\d+)?', problem_text)
        logger.info(f"üîç –•–∏–º–∏—è - –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞: {numbers}")
        
        # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if any(word in problem_text.lower() for word in ["–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ—Å—Ç–≤–∞", "–º–æ–ª—å –≤–µ—â–µ—Å—Ç–≤–∞", "–º–æ–ª—å"]):
            # –ù–∞–π—Ç–∏ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º "–º–æ–ª—å"
            mol_match = re.search(r'(\d+(?:\.\d+)?)\s*–º–æ–ª—å', problem_text.lower())
            if mol_match:
                variables["n"] = float(mol_match.group(1))
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ—Å—Ç–≤–∞: {variables['n']} –º–æ–ª—å")
        
        if any(word in problem_text.lower() for word in ["–æ–±—ä–µ–º", "–æ–±—ä–µ–º—É", "–æ–±—ä–µ–º–µ", "–ª —Ä–∞—Å—Ç–≤–æ—Ä–∞", "–ª–∏—Ç—Ä", "–ª–∏—Ç—Ä–æ–≤"]):
            # –ù–∞–π—Ç–∏ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º "–ª"
            volume_match = re.search(r'(\d+(?:\.\d+)?)\s*–ª', problem_text.lower())
            if volume_match:
                variables["V"] = float(volume_match.group(1))
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω –æ–±—ä–µ–º: {variables['V']} –ª")
        
        if any(word in problem_text.lower() for word in ["–º–∞—Å—Å–∞ –≤–µ—â–µ—Å—Ç–≤–∞", "–º–∞—Å—Å—É –≤–µ—â–µ—Å—Ç–≤–∞", "–º–∞—Å—Å–µ –≤–µ—â–µ—Å—Ç–≤–∞"]):
            # –ù–∞–π—Ç–∏ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º "–≥"
            mass_match = re.search(r'(\d+(?:\.\d+)?)\s*–≥', problem_text.lower())
            if mass_match:
                variables["m"] = float(mass_match.group(1))
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ –º–∞—Å—Å–∞ –≤–µ—â–µ—Å—Ç–≤–∞: {variables['m']} –≥")
        
        logger.info(f"üîç –•–∏–º–∏—è - –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {variables}")
        return variables
    
    def _extract_image_path(self, problem_text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–∑ –∑–∞–¥–∞—á–∏"""
        # –ü–æ–∏—Å–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
        paths = re.findall(r'[a-zA-Z]:\\[^\\/:*?"<>]+\.[a-zA-Z]+|[a-zA-Z0-9_/.-]+\.(?:png|jpg|jpeg|gif|bmp)', problem_text)
        return paths[0] if paths else None
    
    def _extract_visualization_data(self, problem_text: str) -> Optional[Dict[str, List[float]]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –∑–∞–¥–∞—á–∏"""
        logger.info(f"üîç –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑: {problem_text}")
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω 1: "A: 1,2,3,4,5 B: 2,4,6,8,10"
        data_pattern = r'([A-Za-z]+):\s*([0-9.,\s]+)'
        matches = re.findall(data_pattern, problem_text)
        
        if matches:
            data = {}
            for label, values_str in matches:
                values = [float(x.strip()) for x in values_str.split(',')]
                data[label] = values
            logger.info(f"üîç –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è - –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ (–ø–∞—Ç—Ç–µ—Ä–Ω 1): {data}")
            return data
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω 2: "–Ø–±–ª–æ–∫–∏ 25, –ë–∞–Ω–∞–Ω—ã 30, –ê–ø–µ–ª—å—Å–∏–Ω—ã 20"
        category_pattern = r'([–ê-–Ø–∞-—èA-Za-z]+)\s+(\d+(?:\.\d+)?)'
        category_matches = re.findall(category_pattern, problem_text)
        
        if category_matches:
            data = {}
            for category, value in category_matches:
                data[category] = [float(value)]
            logger.info(f"üîç –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è - –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ (–ø–∞—Ç—Ç–µ—Ä–Ω 2): {data}")
            return data
        
        logger.info("üîç –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è - –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None

    def _solve_generic(self, problem_text: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ—à–∞—Ç–µ–ª—å –¥–ª—è –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        return {
            'answer': "–ó–∞–¥–∞—á–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞",
            'steps': ["–ü–æ–ø—ã—Ç–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å"],
            'confidence': 0.1,
            'explanation': "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º"
        }
    
    def _clean_expression(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
        # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤
        expression = re.sub(r'[^\d\+\-\*/\(\)\.\s]', '', text)
        expression = expression.strip()
        return expression
    
    def _verify_solution(self, result: Dict[str, Any], data: Dict[str, Any], problem_type: ProblemType) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏—è"""
        try:
            answer = result.get('answer')
            
            if problem_type == ProblemType.LINEAR_EQUATION:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π
                coefficients = data.get('coefficients', {})
                if coefficients and isinstance(answer, (int, float)):
                    a, b, c = coefficients.get('a', 1), coefficients.get('b', 0), coefficients.get('c', 0)
                    left_side = a * answer + b
                    return abs(left_side - c) < 1e-6
            
            elif problem_type == ProblemType.AREA_CALCULATION:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if isinstance(answer, (int, float)):
                    return answer > 0
            
            elif problem_type == ProblemType.ARITHMETIC:
                # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                return isinstance(answer, (int, float))
            
            return True
            
        except:
            return False

# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
class PhysicsFormulaSolver:
    """–†–µ—à–∞—Ç–µ–ª—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª"""
    
    def __init__(self):
        self.formulas = {
            "–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è_—ç–Ω–µ—Ä–≥–∏—è": {
                "formula": "E = 0.5 * m * v¬≤",
                "variables": {"m": "–º–∞—Å—Å–∞ (–∫–≥)", "v": "—Å–∫–æ—Ä–æ—Å—Ç—å (–º/—Å)"},
                "units": "–î–∂",
                "description": "–ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è –¥–≤–∏–∂—É—â–µ–≥–æ—Å—è —Ç–µ–ª–∞"
            },
            "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è_—ç–Ω–µ—Ä–≥–∏—è": {
                "formula": "E = m * g * h",
                "variables": {"m": "–º–∞—Å—Å–∞ (–∫–≥)", "g": "—É—Å–∫–æ—Ä–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è (–º/—Å¬≤)", "h": "–≤—ã—Å–æ—Ç–∞ (–º)"},
                "units": "–î–∂",
                "description": "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è —Ç–µ–ª–∞ –≤ –ø–æ–ª–µ —Ç—è–∂–µ—Å—Ç–∏"
            },
            "–∑–∞–∫–æ–Ω_–æ–º–∞": {
                "formula": "U = I * R",
                "variables": {"U": "–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–í)", "I": "—Ç–æ–∫ (–ê)", "R": "—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ (–û–º)"},
                "units": "–í",
                "description": "–ó–∞–∫–æ–Ω –û–º–∞ –¥–ª—è —É—á–∞—Å—Ç–∫–∞ —Ü–µ–ø–∏"
            },
            "–º–æ—â–Ω–æ—Å—Ç—å": {
                "formula": "P = U * I",
                "variables": {"P": "–º–æ—â–Ω–æ—Å—Ç—å (–í—Ç)", "U": "–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–í)", "I": "—Ç–æ–∫ (–ê)"},
                "units": "–í—Ç",
                "description": "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è –º–æ—â–Ω–æ—Å—Ç—å"
            },
            "—Å–∏–ª–∞_—Ç—è–∂–µ—Å—Ç–∏": {
                "formula": "F = m * g",
                "variables": {"F": "—Å–∏–ª–∞ —Ç—è–∂–µ—Å—Ç–∏ (–ù)", "m": "–º–∞—Å—Å–∞ (–∫–≥)", "g": "—É—Å–∫–æ—Ä–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è (–º/—Å¬≤)"},
                "units": "–ù",
                "description": "–°–∏–ª–∞ —Ç—è–∂–µ—Å—Ç–∏"
            },
            "—É—Å–∫–æ—Ä–µ–Ω–∏–µ": {
                "formula": "a = (v - v‚ÇÄ) / t",
                "variables": {"a": "—É—Å–∫–æ—Ä–µ–Ω–∏–µ (–º/—Å¬≤)", "v": "–∫–æ–Ω–µ—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–º/—Å)", "v‚ÇÄ": "–Ω–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–º/—Å)", "t": "–≤—Ä–µ–º—è (—Å)"},
                "units": "–º/—Å¬≤",
                "description": "–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏"
            },
            "–ø—É—Ç—å": {
                "formula": "s = v‚ÇÄ * t + 0.5 * a * t¬≤",
                "variables": {"s": "–ø—É—Ç—å (–º)", "v‚ÇÄ": "–Ω–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–º/—Å)", "t": "–≤—Ä–µ–º—è (—Å)", "a": "—É—Å–∫–æ—Ä–µ–Ω–∏–µ (–º/—Å¬≤)"},
                "units": "–º",
                "description": "–ü—É—Ç—å –ø—Ä–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏"
            }
        }
    
    def solve_physics_formula(self, formula_name: str, variables: Dict[str, float]) -> ProblemSolution:
        """–†–µ—à–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—É–ª—ã"""
        try:
            if formula_name not in self.formulas:
                return ProblemSolution(
                    problem_type=ProblemType.PHYSICS_FORMULAS,
                    input_data={"formula": formula_name, "variables": variables},
                    solution_steps=["–§–æ—Ä–º—É–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"],
                    final_answer="–û—à–∏–±–∫–∞: —Ñ–æ—Ä–º—É–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    verification=False,
                    confidence=0.0,
                    explanation="–§–æ—Ä–º—É–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                )
            
            formula_info = self.formulas[formula_name]
            steps = []
            
            # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º—É–ª—É
            if formula_name == "–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è_—ç–Ω–µ—Ä–≥–∏—è":
                m, v = variables.get("m", 0), variables.get("v", 0)
                result = 0.5 * m * v**2
                steps.append(f"E = 0.5 * m * v¬≤")
                steps.append(f"E = 0.5 * {m} * {v}¬≤")
                steps.append(f"E = 0.5 * {m} * {v**2}")
                steps.append(f"E = {result} –î–∂")
                
            elif formula_name == "–∑–∞–∫–æ–Ω_–æ–º–∞":
                I, R = variables.get("I", 0), variables.get("R", 0)
                result = I * R
                steps.append(f"U = I * R")
                steps.append(f"U = {I} * {R}")
                steps.append(f"U = {result} –í")
                
            elif formula_name == "–º–æ—â–Ω–æ—Å—Ç—å":
                U, I = variables.get("U", 0), variables.get("I", 0)
                result = U * I
                steps.append(f"P = U * I")
                steps.append(f"P = {U} * {I}")
                steps.append(f"P = {result} –í—Ç")
                
            elif formula_name == "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è_—ç–Ω–µ—Ä–≥–∏—è":
                m, g, h = variables.get("m", 0), variables.get("g", 9.81), variables.get("h", 0)
                result = m * g * h
                steps.append(f"E = m * g * h")
                steps.append(f"E = {m} * {g} * {h}")
                steps.append(f"E = {result} –î–∂")
                
            elif formula_name == "—Å–∏–ª–∞_—Ç—è–∂–µ—Å—Ç–∏":
                m, g = variables.get("m", 0), variables.get("g", 9.81)
                result = m * g
                steps.append(f"F = m * g")
                steps.append(f"F = {m} * {g}")
                steps.append(f"F = {result} –ù")
                
            else:
                result = 0
                steps.append("–§–æ—Ä–º—É–ª–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
            
            return ProblemSolution(
                problem_type=ProblemType.PHYSICS_FORMULAS,
                input_data={"formula": formula_name, "variables": variables},
                solution_steps=steps,
                final_answer=f"{result} {formula_info['units']}",
                verification=True,
                confidence=0.95,
                explanation=f"{formula_info['description']}. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result} {formula_info['units']}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—É–ª—ã: {e}")
            return ProblemSolution(
                problem_type=ProblemType.PHYSICS_FORMULAS,
                input_data={"formula": formula_name, "variables": variables},
                solution_steps=["–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"],
                final_answer="–û—à–∏–±–∫–∞",
                verification=False,
                confidence=0.0,
                explanation=f"–û—à–∏–±–∫–∞: {e}"
            )

class ChemistryFormulaSolver:
    """–†–µ—à–∞—Ç–µ–ª—å —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª"""
    
    def __init__(self):
        self.formulas = {
            "–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è": {
                "formula": "C = n / V",
                "variables": {"C": "–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è (–º–æ–ª—å/–ª)", "n": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ—Å—Ç–≤–∞ (–º–æ–ª—å)", "V": "–æ–±—ä–µ–º (–ª)"},
                "units": "–º–æ–ª—å/–ª",
                "description": "–ú–æ–ª—è—Ä–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—Ç–≤–æ—Ä–∞"
            },
            "–º–æ–ª—è—Ä–Ω–∞—è_–º–∞—Å—Å–∞": {
                "formula": "M = m / n",
                "variables": {"M": "–º–æ–ª—è—Ä–Ω–∞—è –º–∞—Å—Å–∞ (–≥/–º–æ–ª—å)", "m": "–º–∞—Å—Å–∞ –≤–µ—â–µ—Å—Ç–≤–∞ (–≥)", "n": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ—Å—Ç–≤–∞ (–º–æ–ª—å)"},
                "units": "–≥/–º–æ–ª—å",
                "description": "–ú–æ–ª—è—Ä–Ω–∞—è –º–∞—Å—Å–∞ –≤–µ—â–µ—Å—Ç–≤–∞"
            },
            "–∑–∞–∫–æ–Ω_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è_–º–∞—Å—Å—ã": {
                "formula": "Œ£m_–≤—Ö–æ–¥ = Œ£m_–≤—ã—Ö–æ–¥",
                "variables": {"m_–≤—Ö–æ–¥": "–º–∞—Å—Å–∞ —Ä–µ–∞–≥–µ–Ω—Ç–æ–≤ (–≥)", "m_–≤—ã—Ö–æ–¥": "–º–∞—Å—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–≥)"},
                "units": "–≥",
                "description": "–ó–∞–∫–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Å—Å—ã –≤ —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∞–∫—Ü–∏—è—Ö"
            }
        }
    
    def solve_chemistry_formula(self, formula_name: str, variables: Dict[str, float]) -> ProblemSolution:
        """–†–µ—à–µ–Ω–∏–µ —Ö–∏–º–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—É–ª—ã"""
        try:
            if formula_name not in self.formulas:
                return ProblemSolution(
                    problem_type=ProblemType.CHEMISTRY_CALCULATIONS,
                    input_data={"formula": formula_name, "variables": variables},
                    solution_steps=["–§–æ—Ä–º—É–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"],
                    final_answer="–û—à–∏–±–∫–∞: —Ñ–æ—Ä–º—É–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    verification=False,
                    confidence=0.0,
                    explanation="–§–æ—Ä–º—É–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                )
            
            formula_info = self.formulas[formula_name]
            steps = []
            
            # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º—É–ª—É
            if formula_name == "–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è":
                n, V = variables.get("n", 0), variables.get("V", 0)
                if V == 0:
                    return ProblemSolution(
                        problem_type=ProblemType.CHEMISTRY_CALCULATIONS,
                        input_data={"formula": formula_name, "variables": variables},
                        solution_steps=["–û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å"],
                        final_answer="–û—à–∏–±–∫–∞: –æ–±—ä–µ–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω –Ω—É–ª—é",
                        verification=False,
                        confidence=0.0,
                        explanation="–û–±—ä–µ–º —Ä–∞—Å—Ç–≤–æ—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω –Ω—É–ª—é"
                    )
                result = n / V
                steps.append(f"C = n / V")
                steps.append(f"C = {n} / {V}")
                steps.append(f"C = {result} –º–æ–ª—å/–ª")
                
            elif formula_name == "–º–æ–ª—è—Ä–Ω–∞—è_–º–∞—Å—Å–∞":
                m, n = variables.get("m", 0), variables.get("n", 0)
                if n == 0:
                    return ProblemSolution(
                        problem_type=ProblemType.CHEMISTRY_CALCULATIONS,
                        input_data={"formula": formula_name, "variables": variables},
                        solution_steps=["–û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å"],
                        final_answer="–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ—Å—Ç–≤–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω–æ –Ω—É–ª—é",
                        verification=False,
                        confidence=0.0,
                        explanation="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ—Å—Ç–≤–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω–æ –Ω—É–ª—é"
                    )
                result = m / n
                steps.append(f"M = m / n")
                steps.append(f"M = {m} / {n}")
                steps.append(f"M = {result} –≥/–º–æ–ª—å")
                
            else:
                result = 0
                steps.append("–§–æ—Ä–º—É–ª–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
            
            return ProblemSolution(
                problem_type=ProblemType.CHEMISTRY_CALCULATIONS,
                input_data={"formula": formula_name, "variables": variables},
                solution_steps=steps,
                final_answer=f"{result} {formula_info['units']}",
                verification=True,
                confidence=0.95,
                explanation=f"{formula_info['description']}. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result} {formula_info['units']}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è —Ö–∏–º–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—É–ª—ã: {e}")
            return ProblemSolution(
                problem_type=ProblemType.CHEMISTRY_CALCULATIONS,
                input_data={"formula": formula_name, "variables": variables},
                solution_steps=["–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"],
                final_answer="–û—à–∏–±–∫–∞",
                verification=False,
                confidence=0.0,
                explanation=f"–û—à–∏–±–∫–∞: {e}"
            )

if __name__ == "__main__":
    solver = MathematicalProblemSolver()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    test_problems = [
        "–í—ã—á–∏—Å–ª–∏ 2 + 3 * 4",
        "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ 2x + 5 = 13",
        "–ù–∞–π–¥–∏ –ø–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º 5 –∏ –≤—ã—Å–æ—Ç–æ–π 3",
        "–†–µ—à–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x¬≤ - 5x + 6 = 0",
        "–ù–∞–π–¥–∏ 15% –æ—Ç 200",
        "–í—ã—á–∏—Å–ª–∏ sin(30¬∞)",
        "–ù–∞–π–¥–∏ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–µ–ª 1, 2, 3, 4, 5",
        # –ù–æ–≤—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        "–ù–∞–π—Ç–∏ –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫—É—é —ç–Ω–µ—Ä–≥–∏—é —Ç–µ–ª–∞ –º–∞—Å—Å–æ–π 2 –∫–≥, –¥–≤–∏–∂—É—â–µ–≥–æ—Å—è —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 10 –º/—Å",
        "–ù–∞–π—Ç–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø—Ä–∏ —Ç–æ–∫–µ 2 –ê –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–∏ 5 –û–º",
        "–ù–∞–π—Ç–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é —Ä–∞—Å—Ç–≤–æ—Ä–∞ —Å 0.5 –º–æ–ª—å –≤–µ—â–µ—Å—Ç–≤–∞ –≤ 2 –ª —Ä–∞—Å—Ç–≤–æ—Ä–∞",
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–∞–π–ª–µ sales_chart.png",
        "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ A: 1,2,3,4,5 B: 2,4,6,8,10"
    ]
    
    print("üßÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–µ—à–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á\n")
    
    for i, problem in enumerate(test_problems, 1):
        print(f"–ó–∞–¥–∞—á–∞ {i}: {problem}")
        solution = solver.solve_problem(problem)
        
        print(f"–¢–∏–ø: {solution.problem_type.value}")
        print(f"–û—Ç–≤–µ—Ç: {solution.final_answer}")
        print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {solution.confidence:.2f}")
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {'‚úì' if solution.verification else '‚úó'}")
        print(f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {solution.explanation}")
        print("-" * 50)

