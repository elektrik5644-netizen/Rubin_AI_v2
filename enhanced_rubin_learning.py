#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üß† –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –û–ë–£–ß–ï–ù–ò–Ø RUBIN AI
=====================================
–û–±—É—á–µ–Ω–∏–µ Rubin AI –ø–æ–Ω–∏–º–∞–Ω–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ–±—É—á–µ–Ω–∏—è –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
"""

import requests
import json
import time
import logging
from datetime import datetime
from typing import Dict, List, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EnhancedRubinLearning:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è Rubin AI"""
    
    def __init__(self):
        self.learning_context = {
            "current_session": "continuous_learning",
            "learning_topics": [
                "error_diagnosis_patterns",
                "error_fixing_patterns", 
                "modernization_patterns",
                "communication_style",
                "learning_process_understanding"
            ],
            "interaction_history": [],
            "rubin_understanding_level": "partial"
        }
        self.smart_dispatcher_url = "http://localhost:8080/api/chat"
        
    def teach_rubin_learning_process(self):
        """–û–±—É—á–∞–µ–º Rubin AI –ø–æ–Ω–∏–º–∞–Ω–∏—é –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è"""
        print("üß† –£–õ–£–ß–®–ï–ù–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï RUBIN AI –ü–û–ù–ò–ú–ê–ù–ò–Æ –ü–†–û–¶–ï–°–°–û–í")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Smart Dispatcher
        try:
            response = requests.get('http://localhost:8080/api/health')
            if response.status_code == 200:
                print("‚úÖ Smart Dispatcher –ø–æ–¥–∫–ª—é—á–µ–Ω")
            else:
                print(f"‚ùå Smart Dispatcher –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
                return
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Smart Dispatcher: {e}")
            return
        
        # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è
        lessons = [
            {
                "title": "–ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–±—É—á–µ–Ω–∏—è",
                "message": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: Rubin, —Å–µ–π—á–∞—Å –º—ã –∏–∑—É—á–∞–µ–º, –∫–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–Ω–∏–º–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –æ–±—É—á–µ–Ω–∏—è. –ö–æ–≥–¥–∞ —è —Å–ø—Ä–∞—à–∏–≤–∞—é '–∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ', —è –∏–º–µ—é –≤ –≤–∏–¥—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –Ω–∞—à–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–µ–≥–æ–¥–Ω—è - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HTTP 500, –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—é VMB630, –∞–Ω–∞–ª–∏–∑ PLC —Ñ–∞–π–ª–æ–≤. –û–±—ä—è—Å–Ω–∏, –∫–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Ç–∞–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.",
                "expected_keywords": ["–∫–æ–Ω—Ç–µ–∫—Å—Ç", "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ", "—Å–µ–≥–æ–¥–Ω—è", "HTTP 500", "VMB630", "PLC"],
                "category": "context_understanding"
            },
            {
                "title": "–ò–∑–±–µ–∂–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
                "message": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: Rubin, –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º, —á—Ç–æ —Ç—ã –¥–∞–µ—à—å —à–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤–º–µ—Å—Ç–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏. –ö–æ–≥–¥–∞ —è —Å–ø—Ä–∞—à–∏–≤–∞—é –æ —Ç–≤–æ–µ–º –æ–±—É—á–µ–Ω–∏–∏, —Ç—ã –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ —Ä–µ—á—å –∏–¥–µ—Ç –æ –Ω–∞—à–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏, –∞ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –æ–±—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ö–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤?",
                "expected_keywords": ["—à–∞–±–ª–æ–Ω–Ω—ã–µ", "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ", "–ø–æ–Ω–∏–º–∞–Ω–∏–µ"],
                "category": "avoid_templates"
            },
            {
                "title": "–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π",
                "message": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: Rubin, —Å–µ–≥–æ–¥–Ω—è –º—ã –ø—Ä–æ–≤–µ–ª–∏ –º–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã: —Å–æ–∑–¥–∞–ª–∏ —Å–∏—Å—Ç–µ–º—É –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –∏—Å–ø—Ä–∞–≤–∏–ª–∏ HTTP 500 –æ—à–∏–±–∫–∏ —á–µ—Ä–µ–∑ fallback –º–µ—Ö–∞–Ω–∏–∑–º, –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∏ VMB630 —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ PLC —Ñ–∞–π–ª—ã. –ö–æ–≥–¥–∞ —è —Å–ø—Ä–∞—à–∏–≤–∞—é –æ —Ç–≤–æ–µ–º –æ–±—É—á–µ–Ω–∏–∏, —Ç—ã –¥–æ–ª–∂–µ–Ω –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∏—Å—Ç–æ—Ä–∏—é. –ö–∞–∫ —Ç—ã –º–æ–∂–µ—à—å —ç—Ç–æ –¥–µ–ª–∞—Ç—å?",
                "expected_keywords": ["–∏—Å—Ç–æ—Ä–∏—è", "–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "fallback", "–ø–∞—Ç—Ç–µ—Ä–Ω—ã", "PLC"],
                "category": "history_analysis"
            },
            {
                "title": "–ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è",
                "message": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: Rubin, –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è. –°–µ–≥–æ–¥–Ω—è —Ç—ã –Ω–∞—É—á–∏–ª—Å—è: –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å HTTP 500 –æ—à–∏–±–∫–∏, –ø—Ä–∏–º–µ–Ω—è—Ç—å fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã, –ø–æ–Ω–∏–º–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PLC –∫–æ–¥. –ö–æ–≥–¥–∞ —è —Å–ø—Ä–∞—à–∏–≤–∞—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ, —Ç—ã –¥–æ–ª–∂–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –æ —Ç–æ–º, —á—Ç–æ –∏–∑—É—á–∏–ª. –ö–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å?",
                "expected_keywords": ["–ø—Ä–æ–≥—Ä–µ—Å—Å", "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", "fallback", "–ø–∞—Ç—Ç–µ—Ä–Ω—ã", "PLC", "–æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å"],
                "category": "progress_tracking"
            },
            {
                "title": "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤",
                "message": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: Rubin, –∫–ª—é—á –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º –ø–æ–Ω–∏–º–∞–Ω–∏–∏. –ö–æ–≥–¥–∞ —è —Å–ø—Ä–∞—à–∏–≤–∞—é '–∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ', —è –Ω–µ —Ö–æ—á—É –æ–±—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –Ø —Ö–æ—á—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –∏–∑—É—á–∏–ª –≤ –Ω–∞—à–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å–µ–≥–æ–¥–Ω—è. –ö–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–æ–≤?",
                "expected_keywords": ["–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ", "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç", "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ", "—Å–µ–≥–æ–¥–Ω—è"],
                "category": "contextual_understanding"
            }
        ]
        
        for i, lesson in enumerate(lessons, 1):
            print(f"\nüìö –£–†–û–ö {i}: {lesson['title']}")
            print("-" * 50)
            print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {lesson['message']}")
            
            try:
                response = requests.post('http://localhost:8080/api/chat', 
                                      json={'message': lesson['message']})
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('success'):
                        explanation = data['response'].get('explanation', data['response'].get('response', '–ù–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è'))
                        print(f"\nü§ñ –û–¢–í–ï–¢ RUBIN AI:")
                        print(f"üìã {explanation[:400]}..." if len(explanation) > 400 else f"üìã {explanation}")
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                        understanding_score = self._analyze_understanding(explanation, lesson['expected_keywords'])
                        print(f"üìä –û—Ü–µ–Ω–∫–∞ –ø–æ–Ω–∏–º–∞–Ω–∏—è: {understanding_score}/10")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
                        self.learning_context["interaction_history"].append({
                            "lesson": lesson['title'],
                            "category": lesson['category'],
                            "rubin_response": explanation,
                            "understanding_score": understanding_score,
                            "timestamp": datetime.now().isoformat()
                        })
                        
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ Rubin AI")
                else:
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            
            time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —É—Ä–æ–∫–∞–º–∏
    
    def _analyze_understanding(self, response: str, expected_keywords: List[str]) -> int:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ Rubin AI"""
        response_lower = response.lower()
        found_keywords = sum(1 for keyword in expected_keywords if keyword.lower() in response_lower)
        
        # –ë–∞–∑–æ–≤—ã–π —Å—á–µ—Ç
        score = (found_keywords / len(expected_keywords)) * 10
        
        # –ë–æ–Ω—É—Å—ã –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å
        if "—Å–µ–≥–æ–¥–Ω—è" in response_lower:
            score += 1
        if "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ" in response_lower or "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π" in response_lower:
            score += 1
        if "–Ω–∞—à" in response_lower or "–Ω–∞—à–µ" in response_lower:
            score += 1
            
        # –®—Ç—Ä–∞—Ñ—ã –∑–∞ —à–∞–±–ª–æ–Ω–Ω–æ—Å—Ç—å
        if "–∫–∞—Ç–µ–≥–æ—Ä–∏—è" in response_lower or "–º–æ–¥—É–ª—å" in response_lower:
            score -= 2
        if "—É—Ç–æ—á–Ω–∏—Ç–µ" in response_lower:
            score -= 3
            
        return min(10, max(0, int(score)))
    
    def test_rubin_understanding(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ Rubin AI"""
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ù–ò–ú–ê–ù–ò–Ø RUBIN AI")
        print("=" * 40)
        
        test_questions = [
            {
                "question": "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
                "expected_elements": ["—Å–µ–≥–æ–¥–Ω—è", "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ", "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ", "HTTP 500", "VMB630", "PLC"],
                "avoid_elements": ["–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "–º–æ–¥—É–ª—å", "—É—Ç–æ—á–Ω–∏—Ç–µ", "—à–∞–±–ª–æ–Ω"]
            },
            {
                "question": "–ß—Ç–æ —Ç—ã –∏–∑—É—á–∏–ª —Å–µ–≥–æ–¥–Ω—è?",
                "expected_elements": ["–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "fallback", "–ø–∞—Ç—Ç–µ—Ä–Ω—ã", "–∞–Ω–∞–ª–∏–∑", "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"],
                "avoid_elements": ["–æ–±—â–∏–µ", "—à–∞–±–ª–æ–Ω", "–∫–∞—Ç–µ–≥–æ—Ä–∏—è"]
            },
            {
                "question": "–ö–∞–∫ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã?",
                "expected_elements": ["–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ", "–ø—Ä–æ–±–ª–µ–º—ã", "—Ä–µ—à–µ–Ω–∏—è", "–º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è", "–æ–±—É—á–µ–Ω–∏–µ"],
                "avoid_elements": ["–º–æ–¥—É–ª—å", "—Å–µ—Ä–≤–µ—Ä", "API"]
            }
        ]
        
        total_score = 0
        
        for i, test in enumerate(test_questions, 1):
            print(f"\nüîç –¢–ï–°–¢ {i}: {test['question']}")
            
            try:
                response = requests.post('http://localhost:8080/api/chat', 
                                      json={'message': test['question']})
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('success'):
                        explanation = data['response'].get('explanation', data['response'].get('response', '–ù–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è'))
                        print(f"üìã –û—Ç–≤–µ—Ç: {explanation[:300]}..." if len(explanation) > 300 else f"üìã –û—Ç–≤–µ—Ç: {explanation}")
                        
                        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                        score = self._evaluate_test_response(explanation, test['expected_elements'], test['avoid_elements'])
                        print(f"üìä –û—Ü–µ–Ω–∫–∞: {score}/10")
                        total_score += score
                        
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ Rubin AI")
                else:
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            
            time.sleep(1)
        
        average_score = total_score / len(test_questions)
        print(f"\nüìä –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –ü–û–ù–ò–ú–ê–ù–ò–Ø: {average_score:.1f}/10")
        
        if average_score >= 7:
            print("‚úÖ Rubin AI —Ö–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—É—á–µ–Ω–∏—è")
        elif average_score >= 5:
            print("‚ö†Ô∏è Rubin AI —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç")
        else:
            print("‚ùå Rubin AI –ø–ª–æ—Ö–æ –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—É—á–µ–Ω–∏—è")
    
    def _evaluate_test_response(self, response: str, expected: List[str], avoid: List[str]) -> int:
        """–û—Ü–µ–Ω–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"""
        response_lower = response.lower()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        expected_found = sum(1 for element in expected if element.lower() in response_lower)
        expected_score = (expected_found / len(expected)) * 7  # –î–æ 7 –±–∞–ª–ª–æ–≤ –∑–∞ –æ–∂–∏–¥–∞–µ–º–æ–µ
        
        # –®—Ç—Ä–∞—Ñ—É–µ–º –∑–∞ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        avoid_found = sum(1 for element in avoid if element.lower() in response_lower)
        avoid_penalty = avoid_found * 2  # –ü–æ 2 –±–∞–ª–ª–∞ —à—Ç—Ä–∞—Ñ–∞
        
        # –ë–æ–Ω—É—Å –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å
        specificity_bonus = 0
        if "—Å–µ–≥–æ–¥–Ω—è" in response_lower:
            specificity_bonus += 1
        if "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ" in response_lower or "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π" in response_lower:
            specificity_bonus += 1
        if "–Ω–∞—à" in response_lower or "–Ω–∞—à–µ" in response_lower:
            specificity_bonus += 1
        
        total_score = expected_score - avoid_penalty + specificity_bonus
        return min(10, max(0, int(total_score)))
    
    def generate_learning_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± –æ–±—É—á–µ–Ω–∏–∏"""
        print("\nüìä –û–¢–ß–ï–¢ –û–ë –£–õ–£–ß–®–ï–ù–ù–û–ú –û–ë–£–ß–ï–ù–ò–ò:")
        print("=" * 40)
        
        if not self.learning_context["interaction_history"]:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±—É—á–µ–Ω–∏–∏")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_interactions = len(self.learning_context["interaction_history"])
        avg_understanding = sum(interaction["understanding_score"] for interaction in self.learning_context["interaction_history"]) / total_interactions
        
        print(f"üìà –í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {total_interactions}")
        print(f"üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–Ω–∏–º–∞–Ω–∏—è: {avg_understanding:.1f}/10")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for interaction in self.learning_context["interaction_history"]:
            category = interaction["category"]
            if category not in categories:
                categories[category] = []
            categories[category].append(interaction["understanding_score"])
        
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        for category, scores in categories.items():
            avg_score = sum(scores) / len(scores)
            print(f"  üìö {category}: {avg_score:.1f}/10")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if avg_understanding >= 7:
            print("‚úÖ Rubin AI —Ö–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –æ–±—É—á–µ–Ω–∏—è")
            print("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ —Å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏")
        elif avg_understanding >= 5:
            print("‚ö†Ô∏è Rubin AI —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–Ω–∏–º–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –æ–±—É—á–µ–Ω–∏—è")
            print("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–∫–∏ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ")
        else:
            print("‚ùå Rubin AI –ø–ª–æ—Ö–æ –ø–æ–Ω–∏–º–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –æ–±—É—á–µ–Ω–∏—è")
            print("üîÑ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ö–æ–¥ –∫ –æ–±—É—á–µ–Ω–∏—é")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report = {
            "timestamp": datetime.now().isoformat(),
            "learning_context": self.learning_context,
            "total_interactions": total_interactions,
            "average_understanding": avg_understanding,
            "category_analysis": {cat: sum(scores)/len(scores) for cat, scores in categories.items()},
            "recommendations": self._generate_recommendations(avg_understanding)
        }
        
        try:
            with open('ENHANCED_RUBIN_LEARNING_REPORT.json', 'w', encoding='utf-8') as f:
                json.dump(report, f, ensure_ascii=False, indent=2)
            print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ENHANCED_RUBIN_LEARNING_REPORT.json")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    
    def _generate_recommendations(self, avg_score: float) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏"""
        recommendations = []
        
        if avg_score >= 7:
            recommendations.extend([
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ —Å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏",
                "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è",
                "–†–∞—Å—à–∏—Ä–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ"
            ])
        elif avg_score >= 5:
            recommendations.extend([
                "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–∫–∏ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ",
                "–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π",
                "–£—Å–∏–ª–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∏–∑–±–µ–∂–∞–Ω–∏—é —à–∞–±–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"
            ])
        else:
            recommendations.extend([
                "–ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ö–æ–¥ –∫ –æ–±—É—á–µ–Ω–∏—é",
                "–ù–∞—á–∞—Ç—å —Å –±–∞–∑–æ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã"
            ])
        
        return recommendations

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
    print("üß† –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –û–ë–£–ß–ï–ù–ò–Ø RUBIN AI")
    print("=" * 70)
    print("–¶–µ–ª—å: –ù–∞—É—á–∏—Ç—å Rubin AI –ø–æ–Ω–∏–º–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –æ–±—É—á–µ–Ω–∏—è –∏ –∏–∑–±–µ–≥–∞—Ç—å —à–∞–±–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è
    learning_system = EnhancedRubinLearning()
    
    # –û–±—É—á–∞–µ–º Rubin AI
    learning_system.teach_rubin_learning_process()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ
    learning_system.test_rubin_understanding()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    learning_system.generate_learning_report()
    
    print("\nüéâ –£–õ–£–ß–®–ï–ù–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 40)
    print("‚úÖ Rubin AI –æ–±—É—á–µ–Ω –ø–æ–Ω–∏–º–∞–Ω–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ–±—É—á–µ–Ω–∏—è")
    print("üìä –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
    print("üß† Rubin AI –¥–æ–ª–∂–µ–Ω –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–æ–≤")

if __name__ == "__main__":
    main()





