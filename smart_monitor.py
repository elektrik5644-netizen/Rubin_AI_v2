#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–ª—è Rubin AI v2
"""

import subprocess
import time
import requests
import logging
import psutil
import os
import signal
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('smart_monitor.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class SmartMonitor:
    def __init__(self):
        self.running = True
        self.processes = {}
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
        self.modules = {
            "smart_dispatcher": {
                "path": "smart_dispatcher.py",
                "port": 8080,
                "health_endpoint": "/api/health",
                "startup_delay": 5
            },
            "electrical": {
                "path": "api/electrical_api.py",
                "port": 8087,
                "health_endpoint": "/health",
                "startup_delay": 3
            },
            "radiomechanics": {
                "path": "api/radiomechanics_api.py",
                "port": 8089,
                "health_endpoint": "/health",
                "startup_delay": 3
            },
            "controllers": {
                "path": "api/controllers_api.py",
                "port": 9000,
                "health_endpoint": "/health",
                "startup_delay": 3
            },
            "mathematics": {
                "path": "api/mathematics_api.py",
                "port": 8086,
                "health_endpoint": "/health",
                "startup_delay": 3
            },
            "programming": {
                "path": "api/programming_api.py",
                "port": 8088,
                "health_endpoint": "/health",
                "startup_delay": 3
            },
            "general": {
                "path": "api/general_api.py",
                "port": 8085,
                "health_endpoint": "/health",
                "startup_delay": 3
            },
            "localai": {
                "path": "simple_localai_server.py",
                "port": 11434,
                "health_endpoint": "/health",
                "startup_delay": 3
            },
            "neuro": {
                "path": "api/neuro_repository_api.py",
                "port": 8090,
                "health_endpoint": "/health",
                "startup_delay": 5
            }
        }
        
        # –°—á–µ—Ç—á–∏–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        self.failure_count = {name: 0 for name in self.modules.keys()}
        self.max_failures = 5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 5 –ø–æ–ø—ã—Ç–æ–∫
        self.restart_count = {name: 0 for name in self.modules.keys()}
        self.max_restarts = 5
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)

    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        self.running = False
        self.stop_all()

    def kill_port_process(self, port):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É"""
        try:
            for proc in psutil.process_iter(['pid', 'name']):
                try:
                    connections = proc.net_connections(kind='inet')
                    for conn in connections:
                        if conn.laddr.port == port:
                            logger.info(f"üõë –ó–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å {proc.pid} –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                            proc.terminate()
                            time.sleep(1)
                            if proc.is_running():
                                proc.kill()
                            return True
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess, AttributeError):
                    pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}: {e}")
        return False

    def start_module(self, name):
        """–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è"""
        if name in self.processes and self.processes[name].poll() is None:
            logger.info(f"‚úÖ {name} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return True
            
        module = self.modules[name]
        script_path = module["path"]
        port = module["port"]
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É, –µ—Å–ª–∏ –æ–Ω –∑–∞–Ω—è—Ç
        self.kill_port_process(port)
        time.sleep(1)
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é {name} (–ø–æ—Ä—Ç {port})...")
        try:
            process = subprocess.Popen(
                f"python {script_path}",
                shell=True,
                cwd=os.getcwd(),
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            self.processes[name] = process
            logger.info(f"‚úÖ {name} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            time.sleep(module["startup_delay"])
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {e}")
            return False

    def stop_module(self, name):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è"""
        if name not in self.processes:
            return
            
        process = self.processes[name]
        if process.poll() is None:
            logger.info(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {name}...")
            try:
                process.terminate()
                time.sleep(2)
                if process.poll() is None:
                    process.kill()
                logger.info(f"‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}: {e}")
        
        del self.processes[name]

    def check_health(self, name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–¥—É–ª—è"""
        module = self.modules[name]
        try:
            url = f"http://localhost:{module['port']}{module['health_endpoint']}"
            response = requests.get(url, timeout=10)
            return response.status_code == 200
        except Exception as e:
            logger.debug(f"Health check failed for {name}: {e}")
            return False

    def is_running(self, name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–æ–¥—É–ª—å"""
        if name not in self.processes:
            return False
        process = self.processes[name]
        return process.poll() is None

    def restart_module(self, name):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è"""
        if self.restart_count[name] >= self.max_restarts:
            logger.error(f"‚ùå {name} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ ({self.max_restarts})")
            return False
            
        self.restart_count[name] += 1
        logger.warning(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é {name} (–ø–æ–ø—ã—Ç–∫–∞ {self.restart_count[name]}/{self.max_restarts})...")
        
        self.stop_module(name)
        time.sleep(3)
        success = self.start_module(name)
        
        if success:
            self.failure_count[name] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á
            
        return success

    def start_all(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –≤—Å–µ –º–æ–¥—É–ª–∏ Rubin AI v2...")
        
        for name in self.modules.keys():
            self.start_module(name)
            time.sleep(2)
        
        logger.info("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã")

    def monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"""
        logger.info("–ù–∞—á–∏–Ω–∞—é —É–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
        
        while self.running:
            try:
                for name in self.modules.keys():
                    if not self.running:
                        break
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–æ–¥—É–ª—å
                    if not self.is_running(name):
                        logger.warning(f"‚ö†Ô∏è {name} –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é...")
                        self.restart_module(name)
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
                    if not self.check_health(name):
                        self.failure_count[name] += 1
                        if self.failure_count[name] >= self.max_failures:
                            logger.warning(f"‚ö†Ô∏è {name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç {self.failure_count[name]} —Ä–∞–∑ –ø–æ–¥—Ä—è–¥, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é...")
                            self.restart_module(name)
                        else:
                            logger.debug(f"‚ö†Ô∏è {name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç ({self.failure_count[name]}/{self.max_failures})")
                        continue
                    else:
                        # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –∑–¥–æ—Ä–æ–≤, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                        self.failure_count[name] = 0
                
                # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥
                time.sleep(120)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 2 –º–∏–Ω—É—Ç
                
            except KeyboardInterrupt:
                logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
                self.running = False
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                time.sleep(10)

    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—Å–µ –º–æ–¥—É–ª–∏...")
        for name in list(self.processes.keys()):
            self.stop_module(name)
        logger.info("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    def status_report(self):
        """–û—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("–û—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ —Å–∏—Å—Ç–µ–º—ã:")
        for name in self.modules.keys():
            status = "–û–ù–õ–ê–ô–ù" if self.is_running(name) and self.check_health(name) else "–û–§–§–õ–ê–ô–ù"
            restarts = self.restart_count[name]
            failures = self.failure_count[name]
            logger.info(f"  {name}: {status} (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤: {restarts}, –Ω–µ—É–¥–∞—á: {failures})")

def main():
    monitor = SmartMonitor()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
        monitor.start_all()
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        time.sleep(10)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ
        monitor.status_report()
        
        # –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        monitor.monitor()
        
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        monitor.stop_all()
        logger.info("üëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    main()
