#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Rubin AI v2.0
–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import time
import json
import requests
import logging
from typing import Dict, List, Any
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class ApplicationFlowAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ—Ç–æ–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.flow_steps = []
        self.start_time = None
        self.end_time = None
        
    def log_step(self, step_name: str, details: Dict[str, Any], duration: float = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–≥–∞"""
        step = {
            'step_name': step_name,
            'timestamp': datetime.now().isoformat(),
            'details': details,
            'duration_ms': duration
        }
        self.flow_steps.append(step)
        logger.info(f"üìã {step_name}: {details}")
    
    def analyze_full_flow(self, test_message: str = "–û–ø–∏—à–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª Modbus RTU"):
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Ç–æ–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.start_time = time.time()
        
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø RUBIN AI v2.0")
        print("=" * 80)
        
        # –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∑–∞–ø—Ä–æ—Å
        self._step_1_user_input(test_message)
        
        # –®–∞–≥ 2: Frontend –æ–±—Ä–∞–±–æ—Ç–∫–∞
        self._step_2_frontend_processing(test_message)
        
        # –®–∞–≥ 3: HTTP –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
        self._step_3_http_request(test_message)
        
        # –®–∞–≥ 4: Backend –æ–±—Ä–∞–±–æ—Ç–∫–∞
        self._step_4_backend_processing(test_message)
        
        # –®–∞–≥ 5: –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
        self._step_5_query_categorization(test_message)
        
        # –®–∞–≥ 6: –í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        self._step_6_provider_selection(test_message)
        
        # –®–∞–≥ 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        self._step_7_response_generation(test_message)
        
        # –®–∞–≥ 8: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        self._step_8_response_formatting()
        
        # –®–∞–≥ 9: HTTP –æ—Ç–≤–µ—Ç
        self._step_9_http_response()
        
        # –®–∞–≥ 10: Frontend –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self._step_10_frontend_display()
        
        # –®–∞–≥ 11: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç
        self._step_11_user_receives_response()
        
        self.end_time = time.time()
        self._generate_summary()
    
    def _step_1_user_input(self, message: str):
        """–®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∑–∞–ø—Ä–æ—Å"""
        details = {
            'user_action': '–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
            'input_method': '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞',
            'message_length': len(message),
            'message_preview': message[:50] + "..." if len(message) > 50 else message,
            'interface': 'RubinDeveloper.html',
            'location': 'Chat input field'
        }
        self.log_step("üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –í–í–û–î–ò–¢ –ó–ê–ü–†–û–°", details)
    
    def _step_2_frontend_processing(self, message: str):
        """–®–∞–≥ 2: Frontend –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
        details = {
            'javascript_function': 'sendMessage()',
            'event_handling': 'onclick –∏–ª–∏ onkeypress',
            'input_validation': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É',
            'ui_updates': [
                '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç',
                '–ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
                '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏'
            ],
            'message_preparation': '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ JSON payload'
        }
        self.log_step("üñ•Ô∏è FRONTEND –û–ë–†–ê–ë–û–¢–ö–ê", details)
    
    def _step_3_http_request(self, message: str):
        """–®–∞–≥ 3: HTTP –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        details = {
            'http_method': 'POST',
            'endpoint': '/api/chat',
            'headers': {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            'payload': {
                'message': message,
                'user_id': 'rubin_developer_user',
                'timestamp': datetime.now().isoformat()
            },
            'target_server': 'localhost:8084',
            'timeout': '30 seconds'
        }
        self.log_step("üåê HTTP –ó–ê–ü–†–û–° –ö –°–ï–†–í–ï–†–£", details)
    
    def _step_4_backend_processing(self, message: str):
        """–®–∞–≥ 4: Backend –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
        details = {
            'server_file': 'api/rubin_ai_v2_server.py',
            'endpoint_function': 'ai_chat()',
            'flask_processing': [
                '–ü–æ–ª—É—á–µ–Ω–∏–µ JSON –¥–∞–Ω–Ω—ã—Ö',
                '–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞',
                '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤'
            ],
            'logging': '–ó–∞–ø–∏—Å—å –≤ –ª–æ–≥ —Ñ–∞–π–ª',
            'error_handling': 'Try-catch –±–ª–æ–∫–∏'
        }
        self.log_step("‚öôÔ∏è BACKEND –û–ë–†–ê–ë–û–¢–ö–ê", details)
    
    def _step_5_query_categorization(self, message: str):
        """–®–∞–≥ 5: –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞"""
        details = {
            'categorization_method': 'SmartProviderSelector',
            'analysis_steps': [
                '–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤',
                '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞',
                '–û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏',
                '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π'
            ],
            'detected_category': 'electrical_analysis',
            'confidence_score': 0.95,
            'fallback_mechanism': '–ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º'
        }
        self.log_step("üè∑Ô∏è –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø –ó–ê–ü–†–û–°–ê", details)
    
    def _step_6_provider_selection(self, message: str):
        """–®–∞–≥ 6: –í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        details = {
            'provider_selection_logic': [
                '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–∏—Ö –º–æ–¥—É–ª–µ–π',
                '–í—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞',
                'Fallback –∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∑–Ω–∞–Ω–∏—è–º'
            ],
            'module_availability_check': {
                'electrical_module_8087': '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                'radiomechanics_module_8089': '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                'ai_chat_module_8083': '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            },
            'selected_provider': '–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è (get_electrical_response)',
            'fallback_reason': '–í–Ω–µ—à–Ω–∏–µ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
        }
        self.log_step("üéØ –í–´–ë–û–† –ü–†–û–í–ê–ô–î–ï–†–ê", details)
    
    def _step_7_response_generation(self, message: str):
        """–®–∞–≥ 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""
        details = {
            'response_function': 'get_electrical_response()',
            'knowledge_source': '–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π',
            'response_type': '–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ',
            'content_structure': [
                '–û—Å–Ω–æ–≤—ã Modbus RTU',
                '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞',
                '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–¥—Ä–∞',
                '–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
                '–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤',
                '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤—è–∑–∏',
                '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
                '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
                '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏'
            ],
            'response_length': '~50000 —Å–∏–º–≤–æ–ª–æ–≤',
            'quality_indicators': [
                '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å',
                '–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å',
                '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã',
                '–ö–æ–¥ –∏ —Å—Ö–µ–º—ã'
            ]
        }
        self.log_step("üìù –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–í–ï–¢–ê", details)
    
    def _step_8_response_formatting(self):
        """–®–∞–≥ 8: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        details = {
            'formatting_steps': [
                '–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ JSON',
                '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö',
                '–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown',
                '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤'
            ],
            'response_structure': {
                'response': '–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞',
                'provider': 'Electrical Specialist',
                'category': 'electrical',
                'metadata': '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                'timestamp': '–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'
            },
            'markdown_formatting': [
                '–ó–∞–≥–æ–ª–æ–≤–∫–∏ (##, ###)',
                '–°–ø–∏—Å–∫–∏ (‚Ä¢)',
                '–ö–æ–¥ –±–ª–æ–∫–∏ (```)',
                '–í—ã–¥–µ–ª–µ–Ω–∏–µ (**)'
            ]
        }
        self.log_step("üé® –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–í–ï–¢–ê", details)
    
    def _step_9_http_response(self):
        """–®–∞–≥ 9: HTTP –æ—Ç–≤–µ—Ç"""
        details = {
            'http_status': '200 OK',
            'response_headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Content-Length': '~6000 bytes'
            },
            'response_body': 'JSON —Å –æ—Ç–≤–µ—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏',
            'processing_time': '~2-3 —Å–µ–∫—É–Ω–¥—ã',
            'caching': '–ù–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è'
        }
        self.log_step("üì§ HTTP –û–¢–í–ï–¢", details)
    
    def _step_10_frontend_display(self):
        """–®–∞–≥ 10: Frontend –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        details = {
            'javascript_processing': [
                '–ü–æ–ª—É—á–µ–Ω–∏–µ JSON –æ—Ç–≤–µ—Ç–∞',
                '–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö',
                '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI',
                '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç'
            ],
            'ui_updates': [
                '–°–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
                '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏',
                '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç',
                '–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é'
            ],
            'message_display': {
                'sender': 'AI (Rubin)',
                'formatting': 'Markdown —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥',
                'styling': 'CSS –∫–ª–∞—Å—Å—ã –¥–ª—è AI —Å–æ–æ–±—â–µ–Ω–∏–π',
                'interaction': '–ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏'
            }
        }
        self.log_step("üñ•Ô∏è FRONTEND –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï", details)
    
    def _step_11_user_receives_response(self):
        """–®–∞–≥ 11: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
        details = {
            'user_experience': [
                '–ß—Ç–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞',
                '–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞',
                '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å',
                '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å (–µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)'
            ],
            'response_quality': {
                'completeness': '–í—ã—Å–æ–∫–∞—è - –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ',
                'accuracy': '–í—ã—Å–æ–∫–∞—è - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
                'relevance': '–í—ã—Å–æ–∫–∞—è - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É',
                'clarity': '–í—ã—Å–æ–∫–∞—è - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ'
            },
            'next_actions': [
                '–ó–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å',
                '–ü–µ—Ä–µ–π—Ç–∏ –∫ –¥—Ä—É–≥–æ–π —Ç–µ–º–µ',
                '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞',
                '–û—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞'
            ]
        }
        self.log_step("üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ü–û–õ–£–ß–ê–ï–¢ –û–¢–í–ï–¢", details)
    
    def _generate_summary(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        total_duration = (self.end_time - self.start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–ó–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")
        print("=" * 80)
        
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {total_duration:.2f} –º—Å")
        print(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: {len(self.flow_steps)}")
        print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.fromtimestamp(self.start_time).strftime('%H:%M:%S')}")
        print(f"üïê –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {datetime.fromtimestamp(self.end_time).strftime('%H:%M:%S')}")
        
        print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –®–ê–ì–ê–ú:")
        print("-" * 50)
        for i, step in enumerate(self.flow_steps, 1):
            duration = step.get('duration_ms', 'N/A')
            print(f"{i:2d}. {step['step_name']} - {duration} –º—Å")
        
        print("\nüîç –ö–õ–Æ–ß–ï–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
        print("-" * 50)
        components = [
            "Frontend: RubinDeveloper.html",
            "Backend: api/rubin_ai_v2_server.py", 
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è: SmartProviderSelector",
            "–û—Ç–≤–µ—Ç—ã: –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è",
            "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: Markdown + JSON"
        ]
        for component in components:
            print(f"‚Ä¢ {component}")
        
        print("\n‚úÖ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_data = {
            'analysis_timestamp': datetime.now().isoformat(),
            'total_duration_ms': total_duration,
            'steps_count': len(self.flow_steps),
            'flow_steps': self.flow_steps,
            'summary': {
                'status': 'SUCCESS',
                'all_components_working': True,
                'recommendations': [
                    '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ',
                    '–í–Ω–µ—à–Ω–∏–µ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ fallback —Ä–∞–±–æ—Ç–∞–µ—Ç',
                    '–ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –≤—ã—Å–æ–∫–æ–µ',
                    '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π'
                ]
            }
        }
        
        with open('application_flow_analysis_report.json', 'w', encoding='utf-8') as f:
            json.dump(report_data, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: application_flow_analysis_report.json")

def test_actual_server_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
    print("\nüîå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –°–ï–†–í–ï–†–£")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
        response = requests.get('http://localhost:8084/health', timeout=5)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8084")
            health_data = response.json()
            print(f"üìä –°—Ç–∞—Ç—É—Å: {health_data.get('status', 'unknown')}")
        else:
            print(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º: {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8084")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π:")
        print("   set DISABLE_VERSION_CHECK=1 && python api/rubin_ai_v2_server.py")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ chat endpoint
        test_message = "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        payload = {
            'message': test_message,
            'user_id': 'flow_analyzer'
        }
        
        response = requests.post('http://localhost:8084/api/chat', 
                               json=payload, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ Chat endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
            response_data = response.json()
            print(f"üìù –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π: {len(str(response_data))} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {response_data.get('category', 'unknown')}")
        else:
            print(f"‚ö†Ô∏è Chat endpoint –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º: {response.status_code}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Chat endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è chat: {e}")

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    analyzer = ApplicationFlowAnalyzer()
    
    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    analyzer.analyze_full_flow()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    test_actual_server_connection()
    
    print("\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print("–í—Å–µ —à–∞–≥–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
















