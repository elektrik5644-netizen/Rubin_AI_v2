#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üíª PROGRAMMING SERVER
====================
–°–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
"""

from flask import Flask, request, jsonify
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

@app.route('/api/programming/explain', methods=['POST'])
def explain_programming():
    """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—Å–∫–∏—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π"""
    try:
        data = request.get_json()
        concept = data.get('concept', '')
        
        logger.info(f"üíª –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: {concept[:50]}...")
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        if "python" in concept.lower():
            result = "Python - –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–æ—Å—Ç—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º"
        elif "–∞–ª–≥–æ—Ä–∏—Ç–º" in concept.lower():
            result = "–ê–ª–≥–æ—Ä–∏—Ç–º - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–∞–≥–æ–≤ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"
        elif "—Ñ—É–Ω–∫—Ü–∏—è" in concept.lower():
            result = "–§—É–Ω–∫—Ü–∏—è - –±–ª–æ–∫ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ"
        elif "–∫–ª–∞—Å—Å" in concept.lower():
            result = "–ö–ª–∞—Å—Å - —à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –û–û–ü"
        else:
            result = f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ '{concept}' —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        
        return jsonify({
            "module": "programming",
            "concept": concept,
            "explanation": result,
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ programming: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/api/programming/analyze', methods=['POST'])
def analyze_code():
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞"""
    try:
        data = request.get_json()
        code = data.get('code', '')
        
        logger.info(f"üíª –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞: {len(code)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑
        lines = code.count('\n') + 1
        functions = code.count('def ')
        classes = code.count('class ')
        
        result = f"–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞: {lines} —Å—Ç—Ä–æ–∫, {functions} —Ñ—É–Ω–∫—Ü–∏–π, {classes} –∫–ª–∞—Å—Å–æ–≤"
        
        return jsonify({
            "module": "programming",
            "analysis": result,
            "metrics": {
                "lines": lines,
                "functions": functions,
                "classes": classes
            },
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/api/health', methods=['GET'])
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "service": "programming",
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0"
    })

if __name__ == "__main__":
    print("üíª Programming Server –∑–∞–ø—É—â–µ–Ω")
    print("URL: http://localhost:8088")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    print("  - POST /api/programming/explain - –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π")
    print("  - POST /api/programming/analyze - –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞")
    print("  - GET /api/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    app.run(host='0.0.0.0', port=8088, debug=True)





