#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
API —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è–º–∏ Rubin AI v2.0
"""

import os
import sys
import subprocess
import time
import json
import signal
from flask import Flask, request, jsonify
from flask_cors import CORS
import threading

app = Flask(__name__)
CORS(app)

class ModuleManager:
    def __init__(self):
        self.processes = {}
        self.modules = {
            'main': {
                'name': 'AI –ß–∞—Ç (–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä)',
                'port': 8084,
                'command': [sys.executable, 'api/rubin_ai_v2_server.py'],
                'status': 'stopped'
            },
            'electrical': {
                'name': '–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞',
                'port': 8087,
                'command': [sys.executable, 'api/electrical_api.py'],
                'status': 'stopped'
            },
            'radiomechanics': {
                'name': '–†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞',
                'port': 8089,
                'command': [sys.executable, 'api/radiomechanics_api.py'],
                'status': 'stopped'
            },
            'controllers': {
                'name': '–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã',
                'port': 8090,
                'command': [sys.executable, 'api/controllers_api.py'],
                'status': 'stopped'
            }
        }
    
    def start_module(self, module_key):
        """–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è"""
        if module_key not in self.modules:
            return False, f"–ú–æ–¥—É–ª—å {module_key} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        module = self.modules[module_key]
        
        if module_key in self.processes:
            return False, f"–ú–æ–¥—É–ª—å {module['name']} —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            env = os.environ.copy()
            env['PYTHONIOENCODING'] = 'utf-8'
            
            process = subprocess.Popen(
                module['command'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                encoding='utf-8',
                errors='ignore',
                env=env
            )
            
            self.processes[module_key] = process
            module['status'] = 'running'
            
            return True, f"–ú–æ–¥—É–ª—å {module['name']} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})"
            
        except Exception as e:
            module['status'] = 'error'
            return False, f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {module['name']}: {str(e)}"
    
    def stop_module(self, module_key):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è"""
        if module_key not in self.modules:
            return False, f"–ú–æ–¥—É–ª—å {module_key} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        module = self.modules[module_key]
        
        if module_key not in self.processes:
            return False, f"–ú–æ–¥—É–ª—å {module['name']} –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        
        try:
            process = self.processes[module_key]
            process.terminate()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            try:
                process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                process.kill()
                process.wait()
            
            del self.processes[module_key]
            module['status'] = 'stopped'
            
            return True, f"–ú–æ–¥—É–ª—å {module['name']} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {module['name']}: {str(e)}"
    
    def get_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        status = {}
        for module_key, module in self.modules.items():
            status[module_key] = {
                'name': module['name'],
                'port': module['port'],
                'status': module['status'],
                'running': module_key in self.processes
            }
        return status
    
    def start_all(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        results = {}
        for module_key in self.modules:
            success, message = self.start_module(module_key)
            results[module_key] = {'success': success, 'message': message}
            time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
        return results
    
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        results = {}
        for module_key in list(self.processes.keys()):
            success, message = self.stop_module(module_key)
            results[module_key] = {'success': success, 'message': message}
        return results

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
manager = ModuleManager()

@app.route('/api/status', methods=['GET'])
def get_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    return jsonify({
        'success': True,
        'modules': manager.get_status()
    })

@app.route('/api/start/<module_key>', methods=['POST'])
def start_module(module_key):
    """–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    success, message = manager.start_module(module_key)
    return jsonify({
        'success': success,
        'message': message
    })

@app.route('/api/stop/<module_key>', methods=['POST'])
def stop_module(module_key):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    success, message = manager.stop_module(module_key)
    return jsonify({
        'success': success,
        'message': message
    })

@app.route('/api/start-all', methods=['POST'])
def start_all():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    results = manager.start_all()
    return jsonify({
        'success': True,
        'results': results
    })

@app.route('/api/stop-all', methods=['POST'])
def stop_all():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    results = manager.stop_all()
    return jsonify({
        'success': True,
        'results': results
    })

@app.route('/api/restart-all', methods=['POST'])
def restart_all():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ
    stop_results = manager.stop_all()
    time.sleep(3)
    
    # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ
    start_results = manager.start_all()
    
    return jsonify({
        'success': True,
        'stop_results': stop_results,
        'start_results': start_results
    })

@app.route('/health', methods=['GET'])
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return jsonify({
        'status': 'healthy',
        'service': 'Rubin AI Module Manager API',
        'version': '2.0'
    })

def cleanup_on_exit():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ"""
    print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π...")
    manager.stop_all()
    print("–í—Å–µ –º–æ–¥—É–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

if __name__ == '__main__':
    import atexit
    atexit.register(cleanup_on_exit)
    
    print("üöÄ –ó–∞–ø—É—Å–∫ API –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥—É–ª–µ–π Rubin AI v2.0...")
    print("üìä API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8086")
    print("üéõÔ∏è  –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8086/RubinModuleManager.html")
    print("üìã –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8086/health")
    print("\n–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        app.run(host='0.0.0.0', port=8086, debug=False)
    except KeyboardInterrupt:
        print("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        cleanup_on_exit()


















