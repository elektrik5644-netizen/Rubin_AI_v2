#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Rubin AI –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É
"""

import subprocess
import time
import sys
import os
import requests
import psutil

def kill_processes_on_port(port):
    """–£–±–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É"""
    try:
        print(f"üîç –ò—â—É –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
        
        for proc in psutil.process_iter(['pid', 'name', 'connections']):
            try:
                connections = proc.info['connections']
                if connections:
                    for conn in connections:
                        if hasattr(conn, 'laddr') and conn.laddr and conn.laddr.port == port:
                            print(f"üî™ –£–±–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å {proc.info['name']} (PID: {proc.info['pid']}) –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                            proc.kill()
                            time.sleep(1)
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass
                
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")

def check_port(port):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞"""
    try:
        response = requests.get(f"http://localhost:{port}/api/health", timeout=3)
        return response.status_code == 200
    except:
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
    print("üîÑ –ü–ï–†–ï–ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ RUBIN AI")
    print("=" * 50)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç–∞—Ö
    ports_to_clear = [5000, 8080, 8084, 8087, 8088, 8089, 8090]
    
    for port in ports_to_clear:
        kill_processes_on_port(port)
    
    print("\n‚è≥ –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã...")
    time.sleep(3)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    components = [
        ("–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ç–æ—Ä", "enhanced_request_categorizer"),
        ("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "programming_knowledge_handler"),
        ("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∏", "electrical_knowledge_handler"),
        ("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä", "intelligent_dispatcher"),
        ("–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å", "neural_rubin")
    ]
    
    all_ok = True
    for name, module in components:
        try:
            __import__(module)
            print(f"‚úÖ {name}")
        except ImportError as e:
            print(f"‚ùå {name}: {e}")
            all_ok = False
    
    if not all_ok:
        print("\n‚ùå –ù–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã!")
        return False
    
    print("\nüöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8084...")
    print("üìç RubinDeveloper: file:///C:/Users/elekt/OneDrive/Desktop/Rubin_AI_v2/matrix/RubinDeveloper.html")
    print("\nüß™ –¢–ï–°–¢–û–í–´–ï –ó–ê–ü–†–û–°–´:")
    print("‚Ä¢ –°—Ä–∞–≤–Ω–∏ C++ –∏ Python –¥–ª—è –∑–∞–¥–∞—á –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
    print("‚Ä¢ –ö–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ü–µ–ø–∏ –æ—Ç –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–º—ã–∫–∞–Ω–∏—è?")
    print("‚Ä¢ –ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç–æ–π PLC-–∫–æ–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ–π–µ—Ä–æ–º")
    print("‚Ä¢ —á—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏ –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç?")
    print("\n" + "=" * 50)
    print("üîÑ –û–ß–ò–°–¢–ò–¢–ï –ö–≠–® –ë–†–ê–£–ó–ï–†–ê (Ctrl+Shift+R) –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º!")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    try:
        from rubin_server import app
        app.run(host='0.0.0.0', port=8084, debug=False, threaded=True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()