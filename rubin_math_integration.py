#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è —Å Rubin AI
================================================

–ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π Rubin AI.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–¥—É–ª—å.

–ê–≤—Ç–æ—Ä: Rubin AI System
–í–µ—Ä—Å–∏—è: 2.0
"""

import re
import logging
from typing import Dict, Any, Optional
from mathematical_problem_solver import MathematicalProblemSolver

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class RubinMathIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è —Å Rubin AI"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        self.solver = MathematicalProblemSolver()
        self.math_patterns = self._initialize_math_patterns()
        
    def _initialize_math_patterns(self) -> list:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return [
            # –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            r'\d+\s*[\+\-\*/]\s*\d+',  # 2+2, 3*4, 10-5
            r'–≤—ã—á–∏—Å–ª–∏|–ø–æ—Å—á–∏—Ç–∞–π|–Ω–∞–π–¥–∏\s+–∑–Ω–∞—á–µ–Ω–∏–µ|—Ä–µ–∑—É–ª—å—Ç–∞—Ç',
            r'—Å–∫–æ–ª—å–∫–æ\s+–±—É–¥–µ—Ç|—á–µ–º—É\s+—Ä–∞–≤–Ω–æ',
            
            # –£—Ä–∞–≤–Ω–µ–Ω–∏—è
            r'—Ä–µ—à–∏\s+—É—Ä–∞–≤–Ω–µ–Ω–∏–µ|–Ω–∞–π–¥–∏\s+x|–Ω–∞–π–¥–∏\s+–∫–æ—Ä–µ–Ω—å',
            r'[a-zA-Z]\s*[\+\-]\s*\d+\s*=\s*\d+',  # x+5=10
            r'[a-zA-Z]\^?2\s*[\+\-]',  # x¬≤+5
            
            # –ì–µ–æ–º–µ—Ç—Ä–∏—è
            r'–ø–ª–æ—â–∞–¥—å|–æ–±—ä–µ–º|–ø–µ—Ä–∏–º–µ—Ç—Ä|–Ω–∞–π–¥–∏\s+–ø–ª–æ—â–∞–¥—å',
            r'—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫|–∫—Ä—É–≥|–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫|–∫–≤–∞–¥—Ä–∞—Ç',
            
            # –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è
            r'sin|cos|tan|—Å–∏–Ω—É—Å|–∫–æ—Å–∏–Ω—É—Å|—Ç–∞–Ω–≥–µ–Ω—Å',
            r'–≥—Ä–∞–¥—É—Å|—Ä–∞–¥–∏–∞–Ω|—É–≥–æ–ª',
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            r'—Å—Ä–µ–¥–Ω–µ–µ|–º–µ–¥–∏–∞–Ω–∞|–º–æ–¥–∞|–¥–∏—Å–ø–µ—Ä—Å–∏—è',
            r'—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å',
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç—ã
            r'–ø—Ä–æ—Ü–µ–Ω—Ç|%|\d+\s*–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤',
            r'–Ω–∞–π—Ç–∏\s+\d+%\s+–æ—Ç',
            
            # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
            r'[\+\-\*/=]',  # +, -, *, /, =
            r'\d+\.?\d*',  # —á–∏—Å–ª–∞
        ]
    
    def is_math_query(self, query: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º"""
        query_lower = query.lower()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for pattern in self.math_patterns:
            if re.search(pattern, query_lower):
                return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if any(word in query_lower for word in ['–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π', '–≤—ã—á–∏—Å–ª–∏—Ç—å', '—Ä–µ—à–∏—Ç—å']):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        if re.match(r'^\d+\s*[\+\-\*/]\s*\d+\s*[=]?\s*$', query.strip()):
            return True
        
        return False
    
    def process_query(self, query: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å"""
        try:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {query}")
            
            # –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            solution = self.solver.solve_problem(query)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Å—Ç–∏–ª–µ Rubin AI
            response = {
                "success": True,
                "query": query,
                "answer": solution.final_answer,
                "problem_type": solution.problem_type.value,
                "confidence": solution.confidence,
                "explanation": solution.explanation,
                "steps": solution.solution_steps,
                "verification": solution.verification,
                "module": "Mathematical Problem Solver",
                "processing_time": getattr(solution, 'processing_time', 0)
            }
            
            logger.info(f"–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å —Ä–µ—à–µ–Ω: {solution.final_answer}")
            return response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏: {e}")
            return {
                "success": False,
                "query": query,
                "error": str(e),
                "module": "Mathematical Problem Solver"
            }
    
    def get_enhanced_response(self, query: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ —Å—Ç–∏–ª–µ Rubin AI"""
        result = self.process_query(query)
        
        if not result["success"]:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏: {result['error']}"
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        response_parts = []
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
        response_parts.append(f"üßÆ **–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ:**")
        response_parts.append(f"**–í–æ–ø—Ä–æ—Å:** {query}")
        response_parts.append(f"**–û—Ç–≤–µ—Ç:** {result['answer']}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        response_parts.append(f"**–¢–∏–ø –∑–∞–¥–∞—á–∏:** {result['problem_type']}")
        response_parts.append(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {result['confidence']:.1%}")
        
        if result['verification']:
            response_parts.append("‚úÖ **–ü—Ä–æ–≤–µ—Ä–∫–∞:** –†–µ—à–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        if result['steps']:
            response_parts.append("\nüìã **–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ:**")
            for i, step in enumerate(result['steps'], 1):
                response_parts.append(f"{i}. {step}")
        
        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ
        if result['explanation']:
            response_parts.append(f"\nüí° **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {result['explanation']}")
        
        return "\n".join(response_parts)

def demo_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üîó –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° RUBIN AI")
    print("=" * 60)
    
    integration = RubinMathIntegration()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        "2+2=?",
        "3+4=?",
        "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ 2x + 5 = 13",
        "–ù–∞–π–¥–∏ –ø–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º 5 –∏ –≤—ã—Å–æ—Ç–æ–π 3",
        "–ù–∞–π–¥–∏ 15% –æ—Ç 200",
        "–í—ã—á–∏—Å–ª–∏ sin(30¬∞)",
        "–ù–∞–π–¥–∏ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–µ–ª 1, 2, 3, 4, 5"
    ]
    
    for query in test_queries:
        print(f"\nüìù –ó–∞–ø—Ä–æ—Å: {query}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º
        is_math = integration.is_math_query(query)
        print(f"üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π: {'‚úÖ –î–∞' if is_math else '‚ùå –ù–µ—Ç'}")
        
        if is_math:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å
            response = integration.get_enhanced_response(query)
            print(f"üßÆ –û—Ç–≤–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è:")
            print(response)
        else:
            print("üì° –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–æ–º—É –º–æ–¥—É–ª—é Rubin AI")
        
        print("-" * 50)

def simulate_rubin_ai_with_math():
    """–°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã Rubin AI —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –º–æ–¥—É–ª–µ–º"""
    print("\nü§ñ –°–ò–ú–£–õ–Ø–¶–ò–Ø RUBIN AI –° –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ú –ú–û–î–£–õ–ï–ú")
    print("=" * 60)
    
    integration = RubinMathIntegration()
    
    # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_queries = [
        "2+2=?",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ Rubin AI?",
        "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ 3x - 7 = 8",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
        "–ù–∞–π–¥–∏ 20% –æ—Ç 150"
    ]
    
    for query in user_queries:
        print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {query}")
        
        if integration.is_math_query(query):
            print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å: –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å")
            print("üì° –ù–∞–ø—Ä–∞–≤–ª—è—é –∫ –º–æ–¥—É–ª—é: –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å")
            response = integration.get_enhanced_response(query)
            print(f"üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å: {response}")
        else:
            print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å: –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å")
            print("üì° –ù–∞–ø—Ä–∞–≤–ª—è—é –∫ –º–æ–¥—É–ª—é: AI –ß–∞—Ç")
            print("ü§ñ AI –ß–∞—Ç: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

if __name__ == "__main__":
    demo_integration()
    simulate_rubin_ai_with_math()

