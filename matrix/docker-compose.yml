version: '3.8'

services:
  # Gateway - Центральный шлюз
  gateway:
    build: ./gateway_app
    container_name: rubin_gateway
    ports:
      - "${GATEWAY_PORT:-8083}:80"
    environment:
      - POSTGRES_HOST=postgres_db
      - POSTGRES_USER=${POSTGRES_USER:-rubin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-rubin_matrix_2025}
      - POSTGRES_DB=${POSTGRES_DB:-rubin_ai}
      - QDRANT_HOST=${QDRANT_HOST:-qdrant_db}
      - QDRANT_PORT=${QDRANT_PORT:-6333}
      - OLLAMA_HOST=${OLLAMA_HOST:-ollama_service}
      - OLLAMA_PORT=${OLLAMA_PORT:-11434}
      - JWT_SECRET=${JWT_SECRET:-rubin_matrix_jwt_secret_key_2025}
      - COMPUTE_CORE_HOST=compute_core
      - COMPUTE_CORE_PORT=${COMPUTE_CORE_PORT:-5000}
    depends_on:
      postgres_db:
        condition: service_healthy
      qdrant_db:
        condition: service_healthy
      ollama_service:
        condition: service_healthy
      compute_core:
        condition: service_started
    volumes:
      - ./data/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rubin_matrix_network

  # Compute Core - Вычислительное ядро
  compute_core:
    build: ./cpp_core
    container_name: rubin_compute_core
    environment:
      - PMAC_CONNECTION_STRING=${PMAC_CONNECTION_STRING:-/dev/ttyUSB0}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0  # Доступ к COM-порту (если нужно)
    volumes:
      - ./data/cpp:/app/data
      - ./data/logs:/app/logs
    ports:
      - "${COMPUTE_CORE_PORT:-5000}:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rubin_matrix_network

  # PostgreSQL - Реляционная база данных
  postgres_db:
    image: postgres:16-alpine
    container_name: rubin_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-rubin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-rubin_matrix_2025}
      POSTGRES_DB: ${POSTGRES_DB:-rubin_ai}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./configs/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-rubin}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rubin_matrix_network

  # Qdrant - Векторная база данных
  qdrant_db:
    image: qdrant/qdrant:latest
    container_name: rubin_qdrant
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    volumes:
      - ./data/qdrant:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rubin_matrix_network

  # Ollama - Локальный AI сервис
  ollama_service:
    image: ollama/ollama:latest
    container_name: rubin_ollama
    environment:
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: "*"
    volumes:
      - ./data/ollama:/root/.ollama
    ports:
      - "11434:11434"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rubin_matrix_network

networks:
  rubin_matrix_network:
    driver: bridge
    name: rubin_matrix_network
