#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ MCSetup
"""

import os
import sys
import subprocess
import time
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    try:
        import watchdog
        logger.info("‚úÖ watchdog —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except ImportError:
        logger.error("‚ùå watchdog –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install watchdog")
        return False

def check_mcsetup_path():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—É—Ç—å –∫ MCSetup"""
    mcsetup_path = r"C:\Users\elekt\OneDrive\Desktop\MCSetup_V1_9_0\MCSetup_V1_9_0"
    
    if not Path(mcsetup_path).exists():
        logger.error(f"‚ùå –ü—É—Ç—å MCSetup –Ω–µ –Ω–∞–π–¥–µ–Ω: {mcsetup_path}")
        return False
    
    plot_dir = Path(mcsetup_path) / "Plot, Watch windows" / "Plot"
    if not plot_dir.exists():
        logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {plot_dir}")
        return False
    
    logger.info(f"‚úÖ MCSetup –Ω–∞–π–¥–µ–Ω: {mcsetup_path}")
    return True

def check_servers():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    import requests
    
    servers = [
        ("MCSetup Bridge", "http://localhost:8096/api/mcsetup/health"),
        ("Smart Dispatcher", "http://localhost:8080/api/health")
    ]
    
    all_ok = True
    for name, url in servers:
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                logger.info(f"‚úÖ {name} –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                logger.warning(f"‚ö†Ô∏è {name} –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
                all_ok = False
        except Exception as e:
            logger.error(f"‚ùå {name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            all_ok = False
    
    return all_ok

def check_telegram_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram"""
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    chat_id = os.getenv('TELEGRAM_CHAT_ID')
    
    if not token:
        logger.warning("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    if not chat_id:
        logger.warning("‚ö†Ô∏è TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    logger.info("‚úÖ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    return True

def start_auto_analyzer():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ MCSetup...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        subprocess.run([sys.executable, "mcsetup_auto_analyzer.py"], check=True)
        
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä MCSetup")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    if not check_dependencies():
        return
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ MCSetup...")
    if not check_mcsetup_path():
        return
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
    if not check_servers():
        logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram...")
    telegram_ok = check_telegram_config()
    if not telegram_ok:
        logger.warning("‚ö†Ô∏è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è")
    
    print("\n" + "=" * 50)
    logger.info("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
    logger.info("üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    logger.info("üí° –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å' –≤ MCSetup –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∞–Ω–∞–ª–∏–∑")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫
    start_auto_analyzer()

if __name__ == '__main__':
    main()



