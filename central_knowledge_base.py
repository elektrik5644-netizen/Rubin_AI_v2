#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ë–∞–∑–∞ –ó–Ω–∞–Ω–∏–π Rubin AI
–ï–¥–∏–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Å–µ—Ö –∑–Ω–∞–Ω–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤
"""

import sqlite3
import json
import logging
from datetime import datetime
from typing import Dict, List, Optional, Tuple, Any
import hashlib
import re
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class CentralKnowledgeBase:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ë–∞–∑–∞ –ó–Ω–∞–Ω–∏–π Rubin AI"""
    
    def __init__(self, db_path: str = "rubin_knowledge.db"):
        self.db_path = db_path
        self.init_database()
        self.pending_suggestions = []  # –û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        self.user_feedback_history = []  # –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS knowledge_facts (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    category TEXT NOT NULL,
                    title TEXT NOT NULL,
                    content TEXT NOT NULL,
                    keywords TEXT,
                    formulas TEXT,
                    examples TEXT,
                    confidence REAL DEFAULT 1.0,
                    source TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    usage_count INTEGER DEFAULT 0,
                    user_rating REAL DEFAULT 0.0,
                    is_verified BOOLEAN DEFAULT FALSE
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∑–Ω–∞–Ω–∏—è–º–∏
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS knowledge_relations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    from_fact_id INTEGER,
                    to_fact_id INTEGER,
                    relation_type TEXT NOT NULL,
                    strength REAL DEFAULT 1.0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (from_fact_id) REFERENCES knowledge_facts (id),
                    FOREIGN KEY (to_fact_id) REFERENCES knowledge_facts (id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS knowledge_suggestions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    category TEXT NOT NULL,
                    title TEXT NOT NULL,
                    content TEXT NOT NULL,
                    keywords TEXT,
                    formulas TEXT,
                    examples TEXT,
                    confidence REAL DEFAULT 0.5,
                    source TEXT,
                    suggested_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    status TEXT DEFAULT 'pending',
                    user_feedback TEXT,
                    feedback_at TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS learning_history (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    question TEXT NOT NULL,
                    answer TEXT NOT NULL,
                    category TEXT,
                    confidence REAL,
                    user_rating INTEGER,
                    feedback TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_category ON knowledge_facts(category)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_keywords ON knowledge_facts(keywords)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_title ON knowledge_facts(title)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_suggestions_status ON knowledge_suggestions(status)')
            
            conn.commit()
            conn.close()
            
            logger.info("‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ë–∞–∑–∞ –ó–Ω–∞–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    def add_knowledge(self, category: str, title: str, content: str, 
                     keywords: str = "", formulas: str = "", examples: str = "",
                     confidence: float = 1.0, source: str = "") -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –∑–Ω–∞–Ω–∏–µ
            cursor.execute('''
                SELECT id FROM knowledge_facts 
                WHERE category = ? AND title = ? AND content = ?
            ''', (category, title, content))
            
            if cursor.fetchone():
                logger.warning(f"‚ö†Ô∏è –ó–Ω–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {title}")
                conn.close()
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞–Ω–∏–µ
            cursor.execute('''
                INSERT INTO knowledge_facts 
                (category, title, content, keywords, formulas, examples, confidence, source)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (category, title, content, keywords, formulas, examples, confidence, source))
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–Ω–∞–Ω–∏–µ: {title} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏—è: {e}")
            return False
    
    def suggest_knowledge(self, category: str, title: str, content: str,
                         keywords: str = "", formulas: str = "", examples: str = "",
                         confidence: float = 0.5, source: str = "") -> int:
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª–æ—Å—å –ª–∏ —É–∂–µ
            cursor.execute('''
                SELECT id FROM knowledge_suggestions 
                WHERE category = ? AND title = ? AND status = 'pending'
            ''', (category, title))
            
            if cursor.fetchone():
                logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {title}")
                conn.close()
                return -1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            cursor.execute('''
                INSERT INTO knowledge_suggestions 
                (category, title, content, keywords, formulas, examples, confidence, source)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (category, title, content, keywords, formulas, examples, confidence, source))
            
            suggestion_id = cursor.lastrowid
            conn.commit()
            conn.close()
            
            logger.info(f"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞–Ω–∏–µ: {title} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
            return suggestion_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–Ω–∞–Ω–∏—è: {e}")
            return -1
    
    def get_pending_suggestions(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT id, category, title, content, keywords, formulas, examples, 
                       confidence, source, suggested_at
                FROM knowledge_suggestions 
                WHERE status = 'pending'
                ORDER BY suggested_at DESC
            ''')
            
            suggestions = []
            for row in cursor.fetchall():
                suggestions.append({
                    'id': row[0],
                    'category': row[1],
                    'title': row[2],
                    'content': row[3],
                    'keywords': row[4],
                    'formulas': row[5],
                    'examples': row[6],
                    'confidence': row[7],
                    'source': row[8],
                    'suggested_at': row[9]
                })
            
            conn.close()
            return suggestions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
            return []
    
    def approve_suggestion(self, suggestion_id: int, user_feedback: str = "") -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            cursor.execute('''
                SELECT category, title, content, keywords, formulas, examples, confidence, source
                FROM knowledge_suggestions WHERE id = ? AND status = 'pending'
            ''', (suggestion_id,))
            
            suggestion = cursor.fetchone()
            if not suggestion:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {suggestion_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                conn.close()
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É
            cursor.execute('''
                INSERT INTO knowledge_facts 
                (category, title, content, keywords, formulas, examples, confidence, source, is_verified)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, TRUE)
            ''', suggestion)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            cursor.execute('''
                UPDATE knowledge_suggestions 
                SET status = 'approved', user_feedback = ?, feedback_at = CURRENT_TIMESTAMP
                WHERE id = ?
            ''', (user_feedback, suggestion_id))
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {suggestion_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
            return False
    
    def reject_suggestion(self, suggestion_id: int, user_feedback: str = "") -> bool:
        """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE knowledge_suggestions 
                SET status = 'rejected', user_feedback = ?, feedback_at = CURRENT_TIMESTAMP
                WHERE id = ?
            ''', (user_feedback, suggestion_id))
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {suggestion_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
            return False
    
    def search_knowledge(self, query: str, category: str = None, limit: int = 10) -> List[Dict]:
        """–ò—â–µ—Ç –∑–Ω–∞–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            if category:
                cursor.execute('''
                    SELECT id, category, title, content, keywords, formulas, examples, 
                           confidence, usage_count, user_rating
                    FROM knowledge_facts 
                    WHERE category = ? AND (
                        title LIKE ? OR content LIKE ? OR keywords LIKE ?
                    )
                    ORDER BY confidence DESC, usage_count DESC
                    LIMIT ?
                ''', (category, f'%{query}%', f'%{query}%', f'%{query}%', limit))
            else:
                cursor.execute('''
                    SELECT id, category, title, content, keywords, formulas, examples, 
                           confidence, usage_count, user_rating
                    FROM knowledge_facts 
                    WHERE title LIKE ? OR content LIKE ? OR keywords LIKE ?
                    ORDER BY confidence DESC, usage_count DESC
                    LIMIT ?
                ''', (f'%{query}%', f'%{query}%', f'%{query}%', limit))
            
            results = []
            for row in cursor.fetchall():
                results.append({
                    'id': row[0],
                    'category': row[1],
                    'title': row[2],
                    'content': row[3],
                    'keywords': row[4],
                    'formulas': row[5],
                    'examples': row[6],
                    'confidence': row[7],
                    'usage_count': row[8],
                    'user_rating': row[9]
                })
            
            conn.close()
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–Ω–∞–Ω–∏–π: {e}")
            return []
    
    def get_knowledge_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute('SELECT COUNT(*) FROM knowledge_facts')
            total_facts = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM knowledge_suggestions WHERE status = "pending"')
            pending_suggestions = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM knowledge_suggestions WHERE status = "approved"')
            approved_suggestions = cursor.fetchone()[0]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            cursor.execute('''
                SELECT category, COUNT(*) as count 
                FROM knowledge_facts 
                GROUP BY category 
                ORDER BY count DESC
            ''')
            categories = dict(cursor.fetchall())
            
            conn.close()
            
            return {
                'total_facts': total_facts,
                'pending_suggestions': pending_suggestions,
                'approved_suggestions': approved_suggestions,
                'categories': categories
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def load_initial_knowledge(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π"""
        try:
            logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π...")
            
            # –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è
            electrical_knowledge = [
                {
                    'category': '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞',
                    'title': '–ó–∞–∫–æ–Ω –û–º–∞',
                    'content': '–ó–∞–∫–æ–Ω –û–º–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ–º, —Ç–æ–∫–æ–º –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ–º –≤ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–ø–∏.',
                    'keywords': '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, —Ç–æ–∫, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ, –∑–∞–∫–æ–Ω –æ–º–∞',
                    'formulas': 'U = I * R, I = U / R, R = U / I',
                    'examples': '–ï—Å–ª–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ 12–í, –∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ 4–û–º, —Ç–æ —Ç–æ–∫ = 12/4 = 3–ê'
                },
                {
                    'category': '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞',
                    'title': '–ú–æ—â–Ω–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–∫–∞',
                    'content': '–ú–æ—â–Ω–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–∫–∞ - —ç—Ç–æ —Ä–∞–±–æ—Ç–∞, —Å–æ–≤–µ—Ä—à–∞–µ–º–∞—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–º –ø–æ–ª–µ–º –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏.',
                    'keywords': '–º–æ—â–Ω–æ—Å—Ç—å, —Ç–æ–∫, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, —Ä–∞–±–æ—Ç–∞',
                    'formulas': 'P = U * I, P = I¬≤ * R, P = U¬≤ / R',
                    'examples': '–ü—Ä–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–∏ 220–í –∏ —Ç–æ–∫–µ 2–ê –º–æ—â–Ω–æ—Å—Ç—å = 220 * 2 = 440–í—Ç'
                },
                {
                    'category': '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞',
                    'title': '–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä',
                    'content': '–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä - —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ –∑–∞—Ä—è–¥–∞ –∏ —ç–Ω–µ—Ä–≥–∏–∏ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—è.',
                    'keywords': '–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä, –∑–∞—Ä—è–¥, –µ–º–∫–æ—Å—Ç—å, –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ',
                    'formulas': 'Q = C * U, C = Q / U',
                    'examples': '–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä –µ–º–∫–æ—Å—Ç—å—é 1000–º–∫–§ –ø—Ä–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–∏ 12–í –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç –∑–∞—Ä—è–¥ 0.012–ö–ª'
                }
            ]
            
            # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è
            math_knowledge = [
                {
                    'category': '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
                    'title': '–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ',
                    'content': '–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ - —ç—Ç–æ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∏–¥–∞ ax¬≤ + bx + c = 0, –≥–¥–µ a ‚â† 0.',
                    'keywords': '–∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ, –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç, –∫–æ—Ä–Ω–∏',
                    'formulas': 'D = b¬≤ - 4ac, x = (-b ¬± ‚àöD) / 2a',
                    'examples': 'x¬≤ - 5x + 6 = 0: D = 25-24 = 1, x‚ÇÅ = 3, x‚ÇÇ = 2'
                },
                {
                    'category': '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
                    'title': '–¢–µ–æ—Ä–µ–º–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞',
                    'content': '–í –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–µ –∫–≤–∞–¥—Ä–∞—Ç –≥–∏–ø–æ—Ç–µ–Ω—É–∑—ã —Ä–∞–≤–µ–Ω —Å—É–º–º–µ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –∫–∞—Ç–µ—Ç–æ–≤.',
                    'keywords': '–ø–∏—Ñ–∞–≥–æ—Ä, —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫, –≥–∏–ø–æ—Ç–µ–Ω—É–∑–∞, –∫–∞—Ç–µ—Ç—ã',
                    'formulas': 'c¬≤ = a¬≤ + b¬≤',
                    'examples': '–ï—Å–ª–∏ –∫–∞—Ç–µ—Ç—ã 3 –∏ 4, —Ç–æ –≥–∏–ø–æ—Ç–µ–Ω—É–∑–∞ = ‚àö(3¬≤ + 4¬≤) = 5'
                }
            ]
            
            # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
            programming_knowledge = [
                {
                    'category': '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
                    'title': '–¶–∏–∫–ª for –≤ Python',
                    'content': '–¶–∏–∫–ª for –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.',
                    'keywords': '—Ü–∏–∫–ª, for, python, –∏—Ç–µ—Ä–∞—Ü–∏—è',
                    'formulas': 'for item in sequence:',
                    'examples': 'for i in range(5): print(i)  # –≤—ã–≤–µ–¥–µ—Ç 0,1,2,3,4'
                }
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∑–Ω–∞–Ω–∏—è
            all_knowledge = electrical_knowledge + math_knowledge + programming_knowledge
            
            for knowledge in all_knowledge:
                self.add_knowledge(**knowledge)
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_knowledge)} –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π: {e}")

class KnowledgeSuggestionEngine:
    """–î–≤–∏–∂–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π"""
    
    def __init__(self, knowledge_base: CentralKnowledgeBase):
        self.kb = knowledge_base
        self.suggestion_patterns = [
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∏
            (r'—á—Ç–æ —Ç–∞–∫–æ–µ (\w+)', '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞', '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'),
            (r'–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç (\w+)', '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞', '–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã'),
            (r'—Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è (\w+)', '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞', '–§–æ—Ä–º—É–ª–∞'),
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
            (r'—Ä–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è'),
            (r'–≤—ã—á–∏—Å–ª–∏ (\w+)', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–í—ã—á–∏—Å–ª–µ–Ω–∏–µ'),
            (r'—Ñ–æ—Ä–º—É–ª–∞ (\w+)', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞'),
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
            (r'–∫–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å (\w+)', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'),
            (r'—Å–∏–Ω—Ç–∞–∫—Å–∏—Å (\w+)', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–°–∏–Ω—Ç–∞–∫—Å–∏—Å'),
        ]
    
    def analyze_question(self, question: str) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞–Ω–∏–µ"""
        try:
            question_lower = question.lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            for pattern, category, knowledge_type in self.suggestion_patterns:
                match = re.search(pattern, question_lower)
                if match:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
                    keyword = match.group(1) if match.groups() else question_lower
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –∑–Ω–∞–Ω–∏–µ
                    existing = self.kb.search_knowledge(keyword, category)
                    if not existing:
                        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞–Ω–∏–µ
                        suggestion = {
                            'category': category,
                            'title': f"{knowledge_type}: {keyword}",
                            'content': f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {keyword} –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ {category}",
                            'keywords': keyword,
                            'confidence': 0.6,
                            'source': 'auto_suggestion'
                        }
                        
                        suggestion_id = self.kb.suggest_knowledge(**suggestion)
                        if suggestion_id > 0:
                            return {
                                'suggestion_id': suggestion_id,
                                'suggestion': suggestion,
                                'reason': f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å –æ {keyword}, –Ω–æ –∑–Ω–∞–Ω–∏—è –Ω–µ—Ç –≤ –±–∞–∑–µ"
                            }
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            return None
    
    def generate_suggestion_message(self, suggestion_data: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –∑–Ω–∞–Ω–∏—è"""
        suggestion = suggestion_data['suggestion']
        reason = suggestion_data['reason']
        
        message = f"""
üí° **Rubin AI –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞–Ω–∏–µ:**

**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {suggestion['category']}
**–ù–∞–∑–≤–∞–Ω–∏–µ:** {suggestion['title']}
**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** {suggestion['content']}
**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** {suggestion['keywords']}

**–ü—Ä–∏—á–∏–Ω–∞:** {reason}

**–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –∑–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É?**
- ‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å
- ‚ùå –ù–µ—Ç, –Ω–µ –Ω—É–∂–Ω–æ
- ‚úèÔ∏è –î–∞, –Ω–æ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏

*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã: approve {suggestion_data['suggestion_id']}, reject {suggestion_data['suggestion_id']}, –∏–ª–∏ edit {suggestion_data['suggestion_id']}*
"""
        return message

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
knowledge_base = None

def get_knowledge_base():
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    global knowledge_base
    if knowledge_base is None:
        knowledge_base = CentralKnowledgeBase()
        knowledge_base.load_initial_knowledge()
    return knowledge_base

def get_suggestion_engine():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–≤–∏–∂–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    return KnowledgeSuggestionEngine(get_knowledge_base())

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ë–∞–∑—ã –ó–Ω–∞–Ω–∏–π Rubin AI")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    kb = get_knowledge_base()
    engine = get_suggestion_engine()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = kb.get_knowledge_stats()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:")
    print(f"‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–∫—Ç–æ–≤: {stats['total_facts']}")
    print(f"‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {stats['pending_suggestions']}")
    print(f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {stats['approved_suggestions']}")
    print(f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {stats['categories']}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞:")
    results = kb.search_knowledge("–∑–∞–∫–æ–Ω –æ–º–∞")
    for result in results:
        print(f"‚Ä¢ {result['title']}: {result['content'][:50]}...")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    print(f"\nüí° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:")
    test_questions = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä?",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –®–ò–ú?",
        "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x^2 + 5x + 6 = 0"
    ]
    
    for question in test_questions:
        suggestion = engine.analyze_question(question)
        if suggestion:
            print(f"‚Ä¢ –í–æ–ø—Ä–æ—Å: {question}")
            print(f"  –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {suggestion['suggestion']['title']}")
            print(f"  –ü—Ä–∏—á–∏–Ω–∞: {suggestion['reason']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    pending = kb.get_pending_suggestions()
    if pending:
        print(f"\n‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:")
        for suggestion in pending:
            print(f"‚Ä¢ ID {suggestion['id']}: {suggestion['title']}")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")










