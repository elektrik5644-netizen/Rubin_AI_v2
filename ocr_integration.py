#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è OCR Module —Å Rubin AI
"""

import json
import requests
from datetime import datetime
from enhanced_ocr_module import EnhancedRubinOCRModule

def integrate_ocr_with_rubin():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è OCR –º–æ–¥—É–ª—è —Å Rubin AI"""
    print("üîç –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø OCR MODULE –° RUBIN AI")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR –º–æ–¥—É–ª—è
    ocr = EnhancedRubinOCRModule()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ
    info = ocr.get_module_info()
    print(f"üìä OCR Module: {info['name']} v{info['version']}")
    print(f"üîß Tesseract –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ' if info['tesseract_available'] else '‚ùå'}")
    print(f"‚ö° –ú–µ—Ç–æ–¥—ã: {', '.join(info['methods'])}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
    print("-" * 30)
    
    test_cases = [
        {
            'name': '–ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏',
            'image': 'test_graph.png',
            'description': '–ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏'
        },
        {
            'name': '–ê–Ω–∞–ª–∏–∑ –¥–∏–∞–≥—Ä–∞–º–º—ã',
            'image': 'test_chart.jpg',
            'description': '–ê–Ω–∞–ª–∏–∑ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –ø—Ä–æ–¥–∞–∂'
        },
        {
            'name': '–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—É–ª',
            'image': 'test_formula.png',
            'description': '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª'
        },
        {
            'name': '–ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º—ã',
            'image': 'test_circuit.bmp',
            'description': '–ê–Ω–∞–ª–∏–∑ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π —Å—Ö–µ–º—ã'
        }
    ]
    
    results = []
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}Ô∏è‚É£ {test_case['name']}: {test_case['image']}")
        
        # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if '–≥—Ä–∞—Ñ–∏–∫' in test_case['name'].lower():
            result = ocr.analyze_graph(test_case['image'])
        elif '—Å—Ö–µ–º–∞' in test_case['name'].lower():
            result = ocr.analyze_circuit_diagram(test_case['image'])
        else:
            result = ocr.extract_text_from_image(test_case['image'])
        
        if result['success']:
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f})")
            print(f"üîß –ú–µ—Ç–æ–¥: {result.get('method', 'unknown')}")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Rubin AI
            try:
                response = send_to_rubin_ai(test_case, result)
                if response:
                    print(f"üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Rubin AI: {response['status']}")
                else:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Rubin AI")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Rubin AI: {e}")
            
            results.append({
                'test': test_case['name'],
                'success': True,
                'confidence': result['confidence'],
                'method': result.get('method', 'unknown')
            })
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result['error']}")
            results.append({
                'test': test_case['name'],
                'success': False,
                'error': result['error']
            })
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
    print("-" * 30)
    
    success_count = sum(1 for r in results if r['success'])
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: {success_count}/{len(results)} ({success_count/len(results)*100:.1f}%)")
    
    if success_count > 0:
        avg_confidence = sum(r.get('confidence', 0) for r in results if r['success']) / success_count
        print(f"üéØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2f}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    integration_results = {
        'timestamp': datetime.now().isoformat(),
        'ocr_module_info': info,
        'test_results': results,
        'statistics': {
            'success_rate': success_count/len(results)*100,
            'avg_confidence': avg_confidence if success_count > 0 else 0,
            'total_tests': len(results)
        }
    }
    
    with open('ocr_integration_results.json', 'w', encoding='utf-8') as f:
        json.dump(integration_results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ocr_integration_results.json")
    
    return integration_results

def send_to_rubin_ai(test_case: dict, ocr_result: dict) -> dict:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ OCR –∞–Ω–∞–ª–∏–∑–∞ –≤ Rubin AI"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Rubin AI
        message = f"""
–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {test_case['name']}
–û–ø–∏—Å–∞–Ω–∏–µ: {test_case['description']}
–§–∞–π–ª: {test_case['image']}

–†–µ–∑—É–ª—å—Ç–∞—Ç OCR –∞–Ω–∞–ª–∏–∑–∞:
- –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ocr_result['confidence']:.2f}
- –ú–µ—Ç–æ–¥: {ocr_result.get('method', 'unknown')}
- –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {ocr_result['text'][:200]}...

–¢–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {ocr_result.get('image_type', 'unknown')}
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Smart Dispatcher
        response = requests.post(
            'http://localhost:8080/api/chat',
            json={'message': message},
            timeout=10
        )
        
        if response.status_code == 200:
            return {
                'status': 'success',
                'response': response.json()
            }
        else:
            return {
                'status': 'error',
                'code': response.status_code
            }
            
    except Exception as e:
        return {
            'status': 'error',
            'error': str(e)
        }

def demonstrate_ocr_capabilities():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π OCR –º–æ–¥—É–ª—è"""
    print("\nüéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô OCR:")
    print("-" * 35)
    
    ocr = EnhancedRubinOCRModule()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    print("\nüìä –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏:")
    graph_result = ocr.analyze_graph('test_graph.png')
    if graph_result['success']:
        analysis = graph_result['analysis']
        print(f"‚úÖ –¢–∏–ø: {analysis['graph_type']}")
        print(f"üìê –§—É–Ω–∫—Ü–∏—è: {analysis['function']}")
        print(f"üìç –¢–æ—á–∫–∏: {len(analysis['data_points'])}")
        print(f"üè∑Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫: {analysis['title']}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ö–µ–º—ã
    print("\n‚ö° –ê–Ω–∞–ª–∏–∑ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π —Å—Ö–µ–º—ã:")
    circuit_result = ocr.analyze_circuit_diagram('test_circuit.bmp')
    if circuit_result['success']:
        analysis = circuit_result['analysis']
        print(f"‚úÖ –¢–∏–ø —Å—Ö–µ–º—ã: {analysis['circuit_type']}")
        print(f"üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {len(analysis['components'])}")
        print(f"üìä –ó–Ω–∞—á–µ–Ω–∏—è: {analysis['values']}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª
    print("\nüìê –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª:")
    formula_result = ocr.extract_text_from_image('test_formula.png')
    if formula_result['success']:
        math_content = ocr._extract_mathematical_content(formula_result['text'])
        print(f"‚úÖ –§–æ—Ä–º—É–ª—ã: {len(math_content['formulas'])}")
        print(f"üìê –£—Ä–∞–≤–Ω–µ–Ω–∏—è: {len(math_content['equations'])}")
        print(f"üî¢ –ß–∏—Å–ª–∞: {len(math_content['numbers'])}")
        print(f"üìù –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {math_content['variables']}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø OCR MODULE –° RUBIN AI")
    print("=" * 50)
    
    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Rubin AI
    integration_results = integrate_ocr_with_rubin()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    demonstrate_ocr_capabilities()
    
    print("\nüéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø OCR MODULE –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 40)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    success_rate = integration_results['statistics']['success_rate']
    avg_confidence = integration_results['statistics']['avg_confidence']
    
    print(f"üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {success_rate:.1f}%")
    print(f"üéØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2f}")
    
    if success_rate >= 80 and avg_confidence >= 0.6:
        print("üéâ OCR Module —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å Rubin AI!")
    elif success_rate >= 60:
        print("‚ö†Ô∏è OCR Module —á–∞—Å—Ç–∏—á–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
    else:
        print("‚ùå OCR Module —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")

if __name__ == "__main__":
    main()





