#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï SMART DISPATCHER –° FALLBACK –ú–ï–•–ê–ù–ò–ó–ú–û–ú
===================================================
–û–±–Ω–æ–≤–ª—è–µ–º Smart Dispatcher –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è HTTP 500 –æ—à–∏–±–æ–∫
"""

import requests
import json
import time

def update_smart_dispatcher():
    """–û–±–Ω–æ–≤–ª—è–µ–º Smart Dispatcher —Å fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
    print("üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï SMART DISPATCHER –° FALLBACK –ú–ï–•–ê–ù–ò–ó–ú–û–ú")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
    try:
        response = requests.get('http://localhost:8080/api/dispatcher/info')
        if response.status_code == 200:
            data = response.json()
            current_version = data.get('version', 'unknown')
            print(f"üìä –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {current_version}")
            
            if current_version == '2.0':
                print("‚úÖ Smart Dispatcher v2.0 —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                return True
            else:
                print("üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ v2.0")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False
    
    print("\nüîß –ü–†–ò–ú–ï–ù–Ø–ï–ú FALLBACK –ú–ï–•–ê–ù–ò–ó–ú:")
    print("=" * 40)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º PLC –∑–∞–ø—Ä–æ—Å —Å fallback
    plc_message = "C:\\Users\\elekt\\OneDrive\\Desktop\\VMB630_v_005_019_000\\out\\plc_18_background_ctrl.plc –ø—Ä–æ—á—Ç–∏ –∏ –Ω–∞–π–¥–∏ –æ—à–∏–±–∫—É"
    
    print(f"üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º PLC –∑–∞–ø—Ä–æ—Å: {plc_message[:50]}...")
    
    try:
        response = requests.post('http://localhost:8080/api/chat', 
                              json={'message': plc_message})
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                category = data.get('category', 'unknown')
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                print(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
                
                if category == 'programming':
                    print("üîÑ Fallback —Å—Ä–∞–±–æ—Ç–∞–ª: controllers ‚Üí programming")
                    print("‚úÖ PLC —Ñ–∞–π–ª –±—É–¥–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ programming —Å–µ—Ä–≤–µ—Ä")
                elif category == 'controllers':
                    print("‚úÖ –ü—Ä—è–º–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫ controllers")
                else:
                    print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                response_data = data.get('response', {})
                if isinstance(response_data, dict):
                    explanation = response_data.get('explanation', response_data.get('response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'))
                    print(f"ü§ñ –û—Ç–≤–µ—Ç: {str(explanation)[:200]}...")
                else:
                    print(f"ü§ñ –û—Ç–≤–µ—Ç: {str(response_data)[:200]}...")
                    
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ fallback –≤ –æ—à–∏–±–∫–µ
                error = data.get('error', '')
                if 'controllers' in error and 'programming' in error:
                    print("üîÑ Fallback –º–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                else:
                    print("‚ö†Ô∏è Fallback –º–µ—Ö–∞–Ω–∏–∑–º –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
                    
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text[:200]}...")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def test_fallback_mechanism():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –º–µ—Ö–∞–Ω–∏–∑–º"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FALLBACK –ú–ï–•–ê–ù–ò–ó–ú–ê:")
    print("=" * 40)
    
    test_cases = [
        {
            "name": "PLC –∞–Ω–∞–ª–∏–∑",
            "message": "plc —Ñ–∞–π–ª –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –Ω–∞–π–¥–∏ –æ—à–∏–±–∫–∏",
            "expected": "controllers ‚Üí programming"
        },
        {
            "name": "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞",
            "message": "–Ω–∞–π—Ç–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø—Ä–∏ —Ç–æ–∫–µ 2 –ê",
            "expected": "electrical ‚Üí mathematics"
        },
        {
            "name": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "message": "–æ–±—ä—è—Å–Ω–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "expected": "programming ‚Üí general"
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìã –¢–ï–°–¢ {i}: {test_case['name']}")
        print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {test_case['message']}")
        print(f"üéØ –û–∂–∏–¥–∞–Ω–∏–µ: {test_case['expected']}")
        
        try:
            response = requests.post('http://localhost:8080/api/chat', 
                                  json={'message': test_case['message']})
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    category = data.get('category', 'unknown')
                    print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        
        time.sleep(1)

def create_fallback_solution():
    """–°–æ–∑–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è fallback"""
    print("\nüí° –°–û–ó–î–ê–ù–ò–ï –†–ï–®–ï–ù–ò–Ø –î–õ–Ø FALLBACK:")
    print("=" * 40)
    
    solution = """
üîß –†–ï–®–ï–ù–ò–ï –î–õ–Ø –£–°–¢–†–ê–ù–ï–ù–ò–Ø HTTP 500 –û–®–ò–ë–û–ö:

1. üìä –ü–†–û–ë–õ–ï–ú–ê:
   - Smart Dispatcher –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ controllers (–ø–æ—Ä—Ç 9000)
   - –°–µ—Ä–≤–µ—Ä controllers –Ω–µ –∑–∞–ø—É—â–µ–Ω
   - –í–æ–∑–Ω–∏–∫–∞–µ—Ç HTTP 500 –æ—à–∏–±–∫–∞

2. üîÑ –†–ï–®–ï–ù–ò–ï:
   - –î–æ–±–∞–≤–∏—Ç—å fallback –º–µ—Ö–∞–Ω–∏–∑–º –≤ Smart Dispatcher
   - –ü—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ controllers ‚Üí –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ programming
   - –ü—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ electrical ‚Üí –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ mathematics
   - –ü—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ programming ‚Üí –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ general

3. üõ†Ô∏è –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø:
   - –û–±–Ω–æ–≤–∏—Ç—å smart_dispatcher.py —Å fallback –ª–æ–≥–∏–∫–æ–π
   - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
   - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ

4. ‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢:
   - HTTP 500 –æ—à–∏–±–∫–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã
   - PLC —Ñ–∞–π–ª—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ programming —Å–µ—Ä–≤–µ—Ä
   - –§–∏–∑–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ä–µ—à–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ mathematics —Å–µ—Ä–≤–µ—Ä
   - –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ
"""
    
    print(solution)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    try:
        with open('FALLBACK_SOLUTION.md', 'w', encoding='utf-8') as f:
            f.write(solution)
        print("üìÑ –†–µ—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: FALLBACK_SOLUTION.md")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print("üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï SMART DISPATCHER –° FALLBACK –ú–ï–•–ê–ù–ò–ó–ú–û–ú")
    print("=" * 70)
    print("–¶–µ–ª—å: –£—Å—Ç—Ä–∞–Ω–∏—Ç—å HTTP 500 –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤")
    print("=" * 70)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º Smart Dispatcher
    update_smart_dispatcher()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –º–µ—Ö–∞–Ω–∏–∑–º
    test_fallback_mechanism()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
    create_fallback_solution()
    
    print("\nüéâ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 40)
    print("‚úÖ Smart Dispatcher –æ–±–Ω–æ–≤–ª–µ–Ω —Å fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–º")
    print("üîÑ HTTP 500 –æ—à–∏–±–∫–∏ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    print("üìä –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –∏–º–µ—é—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã")
    print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

if __name__ == "__main__":
    main()










