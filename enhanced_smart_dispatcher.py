#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß† Enhanced Smart Dispatcher —Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç—å—é
–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—à–∏–±–æ–∫
"""

from flask import Flask, jsonify, request
from flask_cors import CORS
import requests
import logging
import json
import time
import os
from datetime import datetime
import threading
import queue

# –ò–º–ø–æ—Ä—Ç Qdrant –∞–¥–∞–ø—Ç–µ—Ä–∞
try:
    from enhanced_qdrant_adapter import EnhancedQdrantAdapter
    QDRANT_AVAILABLE = True
except ImportError:
    QDRANT_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('enhanced_dispatcher.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
neural_logger = logging.getLogger('neural_router')
routing_logger = logging.getLogger('routing')
kb_logger = logging.getLogger('knowledge_base')
error_logger = logging.getLogger('error_tracker')

app = Flask(__name__)
CORS(app)

# –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ—à–∏–±–æ–∫
error_queue = queue.Queue()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
SERVERS = {
    "general": {
        "port": 8085,
        "endpoint": "/api/chat",
        "method": "POST",
        "keywords": ["–ø—Ä–∏–≤–µ—Ç", "–∫–∞–∫ –¥–µ–ª–∞", "—á—Ç–æ –Ω–æ–≤–æ–≥–æ", "–æ–±—â–µ–µ", "–ø–æ–º–æ—â—å", "—Å–ø—Ä–∞–≤–∫–∞"],
        "priority": 1
    },
    "mathematics": {
        "port": 8086,
        "endpoint": "/health",
        "method": "GET",
        "keywords": ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π", "–≤—ã—á–∏—Å–ª–µ–Ω–∏–µ", "—Ñ–æ—Ä–º—É–ª–∞", "—É—Ä–∞–≤–Ω–µ–Ω–∏–µ", "–∏–Ω—Ç–µ–≥—Ä–∞–ª", "–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è"],
        "priority": 2
    },
    "electrical": {
        "port": 8087,
        "endpoint": "/api/electrical/solve",
        "method": "POST",
        "keywords": ["—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞", "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "—Ç–æ–∫", "–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ", "–º–æ—â–Ω–æ—Å—Ç—å", "—Å—Ö–µ–º–∞", "–¥–∏–æ–¥", "—Ä–µ–∑–∏—Å—Ç–æ—Ä", "–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä", "—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä", "–∫–∏—Ä—Ö–≥–æ—Ñ–∞", "–∑–∞–∫–æ–Ω", "—Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥"],
        "priority": 2
    },
    "programming": {
        "port": 8088,
        "endpoint": "/api/programming/explain",
        "method": "GET",
        "keywords": ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∫–æ–¥", "–∞–ª–≥–æ—Ä–∏—Ç–º", "python", "javascript", "java", "c++"],
        "priority": 2
    },
    "radiomechanics": {
        "port": 8089,
        "endpoint": "/api/chat",
        "method": "POST",
        "keywords": ["—Ä–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞", "—Ä–∞–¥–∏–æ", "–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫", "–ø—Ä–∏–µ–º–Ω–∏–∫", "–∞–Ω—Ç–µ–Ω–Ω–∞", "—á–∞—Å—Ç–æ—Ç–∞"],
        "priority": 2
    },
    # "neuro": {
    #     "port": 8090,
    #     "endpoint": "/api/neuro/health",
    #     "method": "GET",
    #     "keywords": ["–Ω–µ–π—Ä–æ—Å–µ—Ç—å", "–Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "ai"],
    #     "priority": 3
    # },
    # "controllers": {
    #     "port": 9000,
    #     "endpoint": "/api/controllers/topic/general",
    #     "method": "GET",
    #     "keywords": ["–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä", "pmac", "plc", "—Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥", "—Å–µ—Ä–≤–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å", "–ø—Ä–∏–≤–æ–¥", "–¥–≤–∏–≥–∞—Ç–µ–ª—å"],
    #     "priority": 2
    # },
    "plc_analysis": {
        "port": 8099,
        "endpoint": "/api/plc/health",
        "method": "GET",
        "keywords": ["plc –∞–Ω–∞–ª–∏–∑", "ladder logic", "–ø—Ä–æ–≥—Ä–∞–º–º–∞ plc", "–æ—Ç–ª–∞–¥–∫–∞ plc"],
        "priority": 2
    },
    # –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ - –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    # "advanced_math": {
    #     "port": 8100,
    #     "endpoint": "/api/advanced_math/health",
    #     "method": "GET",
    #     "keywords": ["–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Å–ª–æ–∂–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è", "–≤—ã—Å—à–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"],
    #     "priority": 2
    # },
    # "data_processing": {
    #     "port": 8101,
    #     "endpoint": "/api/data_processing/health",
    #     "method": "GET",
    #     "keywords": ["–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è"],
    #     "priority": 2
    # },
    # "search_engine": {
    #     "port": 8102,
    #     "endpoint": "/api/search/health",
    #     "method": "GET",
    #     "keywords": ["–ø–æ–∏—Å–∫", "–≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫", "—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫"],
    #     "priority": 2
    # },
    # "system_utils": {
    #     "port": 8103,
    #     "endpoint": "/api/system/health",
    #     "method": "GET",
    #     "keywords": ["—Å–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã", "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "–ø—Ä–æ–±–ª–µ–º—ã", "–æ—à–∏–±–∫–∏", "–∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã"],
    #     "priority": 1
    # },
    "gai_server": {
        "port": 8104,
        "endpoint": "/api/gai/health",
        "method": "GET",
        "keywords": ["–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π ai", "—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞", "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞"],
        "priority": 2
    },
    "unified_manager": {
        "port": 8084,
        "endpoint": "/api/system/health",
        "method": "GET",
        "keywords": ["—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π", "–º–µ–Ω–µ–¥–∂–µ—Ä", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"],
        "priority": 1
    },
    "ethical_core": {
        "port": 8105,
        "endpoint": "/api/ethical/health",
        "method": "GET",
        "keywords": ["—ç—Ç–∏–∫–∞", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "—ç—Ç–∏—á–µ—Å–∫–æ–µ —è–¥—Ä–æ"],
        "priority": 1
    }
}

class NeuralRouter:
    """üß† –ù–µ–π—Ä–æ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç–æ—è—â–µ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
        try:
            from neural_rubin import NeuralRubinAI
            self.neural_ai = NeuralRubinAI()
            self.neural_available = True
            neural_logger.info("‚úÖ –ù–∞—Å—Ç–æ—è—â–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            neural_logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å: {e}")
            self.neural_ai = None
            self.neural_available = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Qdrant –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        if QDRANT_AVAILABLE:
            try:
                self.qdrant_adapter = EnhancedQdrantAdapter(use_embedded=False)
                self.qdrant_available = True
                neural_logger.info("‚úÖ Qdrant –∞–¥–∞–ø—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                neural_logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Qdrant: {e}")
                self.qdrant_adapter = None
                self.qdrant_available = False
        else:
            self.qdrant_adapter = None
            self.qdrant_available = False
        
        # Fallback –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self.knowledge_base = {
            "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ": ["pmac", "plc", "—Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥", "—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞", "—Ä–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞", "–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä", "—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä", "–¥–∏–æ–¥", "—Ä–µ–∑–∏—Å—Ç–æ—Ä", "–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä", "–∑–∞–∫–æ–Ω –∫–∏—Ä—Ö–≥–æ—Ñ–∞", "–∑–∞–∫–æ–Ω –æ–º–∞"],
            "–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ": ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–≤—ã—á–∏—Å–ª–µ–Ω–∏–µ", "—Ñ–æ—Ä–º—É–ª–∞", "—É—Ä–∞–≤–Ω–µ–Ω–∏–µ", "–∏–Ω—Ç–µ–≥—Ä–∞–ª", "–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è", "2+2", "—Å–ª–æ–∂–µ–Ω–∏–µ", "–≤—ã—á–∏—Ç–∞–Ω–∏–µ", "—É–º–Ω–æ–∂–µ–Ω–∏–µ", "–¥–µ–ª–µ–Ω–∏–µ", "–ø–ª–æ—â–∞–¥—å", "–æ–±—ä–µ–º"],
            "–ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ": ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∫–æ–¥", "–∞–ª–≥–æ—Ä–∏—Ç–º", "python", "javascript", "java", "c++", "–Ω–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É"],
            "—Å–∏—Å—Ç–µ–º–Ω—ã–µ": ["–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "–ø—Ä–æ–±–ª–µ–º—ã", "–æ—à–∏–±–∫–∏"],
            "ai_—Å–≤—è–∑–∞–Ω–Ω—ã–µ": ["–Ω–µ–π—Ä–æ—Å–µ—Ç—å", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "ai"],
            "–æ–±—â–∏–µ": ["–ø—Ä–∏–≤–µ—Ç", "–∫–∞–∫ –¥–µ–ª–∞", "—á—Ç–æ –Ω–æ–≤–æ–≥–æ", "–ø–æ–º–æ—â—å", "—Å–ø—Ä–∞–≤–∫–∞", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"]
        }
    
    def analyze_message(self, message):
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –Ω–∞—Å—Ç–æ—è—â–µ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        neural_logger.info(f"üß† –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: '{message[:50]}...'")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≤ Qdrant
        if self.qdrant_available and self.qdrant_adapter:
            try:
                # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
                similar_docs = self.qdrant_adapter.search_similar(
                    collection_name="rubin_knowledge",
                    query_text=message,
                    limit=3,
                    score_threshold=0.7
                )
                
                if similar_docs:
                    neural_logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(similar_docs)} –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Qdrant")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
                    return "knowledge_base", 0.9
                    
            except Exception as e:
                neural_logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â—É—é –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å
        if self.neural_available and self.neural_ai:
            try:
                category, confidence = self.neural_ai.classify_question(message)
                neural_logger.info(f"  üéØ –ù–µ–π—Ä–æ–Ω–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {category} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
                
                # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–∞ –Ω–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                neural_to_our_mapping = {
                    '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞': '–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ',
                    '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞': '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ', 
                    '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ': '–ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ',
                    '—Ñ–∏–∑–∏–∫–∞': '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ',
                    '–æ–±—â–∏–µ_–≤–æ–ø—Ä–æ—Å—ã': '–æ–±—â–∏–µ',
                    '—Ç–µ—Ö–Ω–∏–∫–∞': '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ',
                    '–Ω–∞—É–∫–∞': '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ',
                    '–¥—Ä—É–≥–æ–µ': '–æ–±—â–∏–µ',
                    'time_series': '–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ',
                    'graph_analysis': '–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ',
                    'data_visualization': '–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ',
                    'formula_calculation': '–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ'
                }
                
                mapped_category = neural_to_our_mapping.get(category, '–æ–±—â–∏–µ')
                return mapped_category, confidence
                
            except Exception as e:
                neural_logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
        
        # Fallback: –ø—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        message_lower = message.lower()
        category_scores = {}
        for category, keywords in self.knowledge_base.items():
            score = sum(1 for keyword in keywords if keyword in message_lower)
            if score > 0:
                category_scores[category] = score
                neural_logger.debug(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}': {score} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category_scores:
            best_category = max(category_scores, key=category_scores.get)
            confidence = category_scores[best_category] / len(message_lower.split())
            neural_logger.info(f"  üéØ Fallback –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {best_category} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
            return best_category, confidence
        
        neural_logger.info("  üîÑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º '–æ–±—â–∏–µ'")
        return "–æ–±—â–∏–µ", 0.1
    
    def suggest_route(self, message):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        category, confidence = self.analyze_message(message)
        neural_logger.info(f"üîÄ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã
        category_mapping = {
            "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ": ["electrical", "controllers", "radiomechanics", "plc_analysis"],
            "–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ": ["mathematics", "advanced_math"],
            "–ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ": ["programming"],
            "—Å–∏—Å—Ç–µ–º–Ω—ã–µ": ["system_utils", "unified_manager"],
            "ai_—Å–≤—è–∑–∞–Ω–Ω—ã–µ": ["neuro", "gai_server"],
            "–æ–±—â–∏–µ": ["general"]
        }
        
        suggested_servers = category_mapping.get(category, ["general"])
        suggested_server = suggested_servers[0]
        neural_logger.info(f"  üéØ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {suggested_server} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
        return suggested_server, confidence

class ErrorTracker:
    """üìä –¢—Ä–µ–∫–µ—Ä –æ—à–∏–±–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.errors = []
        self.server_status = {}
    
    def log_error(self, server_name, error_type, message, details=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        error = {
            "timestamp": datetime.now().isoformat(),
            "server": server_name,
            "type": error_type,
            "message": message,
            "details": details
        }
        self.errors.append(error)
        error_queue.put(error)
        logger.error(f"‚ùå {server_name}: {error_type} - {message}")
    
    def update_server_status(self, server_name, status, response_time=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.server_status[server_name] = {
            "status": status,
            "last_check": datetime.now().isoformat(),
            "response_time": response_time
        }
    
    def get_errors(self, limit=50):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫"""
        return self.errors[-limit:]
    
    def get_system_health(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        total_servers = len(SERVERS)
        healthy_servers = sum(1 for status in self.server_status.values() if status["status"] == "healthy")
        
        return {
            "total_servers": total_servers,
            "healthy_servers": healthy_servers,
            "unhealthy_servers": total_servers - healthy_servers,
            "health_percentage": (healthy_servers / total_servers * 100) if total_servers > 0 else 0,
            "last_check": datetime.now().isoformat()
        }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
neural_router = NeuralRouter()
error_tracker = ErrorTracker()

def check_server_health(server_name, config):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        url = f"http://host.docker.internal:{config['port']}{config['endpoint']}"
        start_time = time.time()
        
        if config['method'] == 'GET':
            response = requests.get(url, timeout=3)
        else:
            response = requests.post(url, json={}, timeout=3)
        
        response_time = (time.time() - start_time) * 1000
        
        if response.status_code == 200:
            error_tracker.update_server_status(server_name, "healthy", response_time)
            return True
        else:
            error_tracker.log_error(server_name, "HTTP_ERROR", f"Status {response.status_code}")
            error_tracker.update_server_status(server_name, "unhealthy")
            return False
            
    except requests.exceptions.ConnectionError:
        error_tracker.log_error(server_name, "CONNECTION_ERROR", "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        error_tracker.update_server_status(server_name, "offline")
        return False
    except requests.exceptions.Timeout:
        error_tracker.log_error(server_name, "TIMEOUT_ERROR", "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        error_tracker.update_server_status(server_name, "timeout")
        return False
    except Exception as e:
        error_tracker.log_error(server_name, "UNKNOWN_ERROR", str(e))
        error_tracker.update_server_status(server_name, "error")
        return False

def categorize_message(message):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
    message_lower = message.lower()
    
    # –ü–†–ò–û–†–ò–¢–ï–¢: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–æ—á–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    # 1. –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–≤—ã–º, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª–æ—Å—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π)
    if any(word in message_lower for word in ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∫–æ–¥", "python", "javascript", "java", "c++", "–∞–ª–≥–æ—Ä–∏—Ç–º", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "–Ω–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É", "–Ω–∞–ø–∏—à–∏ –∫–æ–¥", "—Å–æ–∑–¥–∞–π –ø—Ä–æ–≥—Ä–∞–º–º—É"]):
        logger.info("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º programming")
        return "programming", 0.9
    
    # 2. –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞
    if any(word in message_lower for word in ["—Ä–µ–∑–∏—Å—Ç–æ—Ä", "–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä", "—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä", "–¥–∏–æ–¥", "—Ç–æ–∫", "–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ", "—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞", "–∫–∏—Ä—Ö–≥–æ—Ñ–∞", "–∑–∞–∫–æ–Ω –æ–º–∞", "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "–º–æ—â–Ω–æ—Å—Ç—å", "—Å—Ö–µ–º–∞"]):
        logger.info("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º electrical")
        return "electrical", 0.9
    
    # 3. –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–µ–π, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ)
    if any(word in message_lower for word in ["—Ä–µ—à–∏", "—É—Ä–∞–≤–Ω–µ–Ω–∏–µ", "–≤—ã—á–∏—Å–ª–∏", "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "2+2", "—Ñ–æ—Ä–º—É–ª–∞", "–∏–Ω—Ç–µ–≥—Ä–∞–ª", "–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è", "—Å–ª–æ–∂–µ–Ω–∏–µ", "–≤—ã—á–∏—Ç–∞–Ω–∏–µ", "—É–º–Ω–æ–∂–µ–Ω–∏–µ", "–¥–µ–ª–µ–Ω–∏–µ"]):
        logger.info("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º mathematics")
        return "mathematics", 0.9
    
    # –ù–µ–π—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    suggested_server, confidence = neural_router.suggest_route(message)
    
    logger.info(f"üß† –ù–µ–π—Ä–æ—Å–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∞: {suggested_server} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
    
    # –ü–†–ò–û–†–ò–¢–ï–¢: –î–ª—è electrical, mathematics, general —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    priority_handlers = ["electrical", "mathematics", "general"]
    if suggested_server in priority_handlers:
        logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: {suggested_server}")
        return suggested_server, confidence
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    if suggested_server in SERVERS:
        config = SERVERS[suggested_server]
        if check_server_health(suggested_server, config):
            logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä {suggested_server} –¥–æ—Å—Ç—É–ø–µ–Ω")
            return suggested_server, confidence
        else:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä {suggested_server} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∏–∑ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category, _ = neural_router.analyze_message(message)
            alternative_servers = get_alternative_servers(category, suggested_server)
            
            for alt_server in alternative_servers:
                if alt_server in SERVERS:
                    alt_config = SERVERS[alt_server]
                    if check_server_health(alt_server, alt_config):
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {alt_server}")
                        return alt_server, confidence * 0.8  # –ù–µ–º–Ω–æ–≥–æ —Å–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            
            # –ï—Å–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º general
            logger.warning(f"‚ö†Ô∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º general")
            return "general", confidence * 0.3  # –°–∏–ª—å–Ω–æ —Å–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    
    # –ï—Å–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑
    logger.warning(f"‚ö†Ô∏è –ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è: {message[:50]}...")
    
    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–∞–∫ fallback
    for server_name, config in SERVERS.items():
        if server_name == "general":
            continue
        for keyword in config.get('keywords', []):
            if keyword.lower() in message_lower:
                if check_server_health(server_name, config):
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–µ—Ä–≤–µ—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {server_name}")
                    return server_name, 0.6  # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è keyword matching
    
    # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º general
    logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º general —Å–µ—Ä–≤–µ—Ä –∫–∞–∫ fallback")
    return "general", 0.1

def get_alternative_servers(category, excluded_server):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_mapping = {
        "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ": ["controllers", "electrical", "radiomechanics", "plc_analysis"],
        "–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ": ["mathematics", "advanced_math"],
        "–ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ": ["programming"],
        "—Å–∏—Å—Ç–µ–º–Ω—ã–µ": ["system_utils", "unified_manager"],
        "ai_—Å–≤—è–∑–∞–Ω–Ω—ã–µ": ["neuro", "gai_server"],
        "–æ–±—â–∏–µ": ["general"]
    }
    
    alternatives = category_mapping.get(category, ["general"])
    # –£–±–∏—Ä–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
    return [s for s in alternatives if s != excluded_server]

def forward_request(server_name, message):
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    if server_name not in SERVERS:
        error_tracker.log_error(server_name, "CONFIG_ERROR", "–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return {"error": "–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"}
    
    # –ü–†–ò–û–†–ò–¢–ï–¢: –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è electrical, mathematics, general
    priority_handlers = ["electrical", "mathematics", "general"]
    if server_name in priority_handlers:
        internal_result = try_internal_handlers(server_name, message)
        if internal_result:
            return internal_result
        # –ï—Å–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–µ—Ä
        # –¥–ª—è —ç—Ç–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ general
        if server_name != "general":
            logger.warning(f"‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ {server_name} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º general")
            return try_internal_handlers("general", message) or {"error": "–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"}
    
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—Ä–æ–±—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    internal_result = try_internal_handlers(server_name, message)
    if internal_result:
        return internal_result
    
    # –ï—Å–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä—ã
    config = SERVERS[server_name]
    
    try:
        url = f"http://host.docker.internal:{config['port']}{config['endpoint']}"
        
        if config['method'] == 'GET':
            # –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params = {}
            if server_name == 'controllers':
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
                message_lower = message.lower()
                if 'pmac' in message_lower:
                    params['topic'] = 'pmac'
                elif 'plc' in message_lower:
                    params['topic'] = 'plc'
                elif '—Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥' in message_lower or '—Å–µ—Ä–≤–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å' in message_lower:
                    params['topic'] = '—Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥'
                else:
                    params['topic'] = 'general'
            
            response = requests.get(url, params=params, timeout=5)
        else:
            # –î–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
            payload = {'message': message}
            response = requests.post(url, json=payload, timeout=5)
        
        if response.status_code == 200:
            return response.json()
        else:
            error_tracker.log_error(server_name, "HTTP_ERROR", f"Status {response.status_code}")
            return {"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}"}
            
    except requests.exceptions.ConnectionError:
        error_tracker.log_error(server_name, "CONNECTION_ERROR", "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return {"error": "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
    except requests.exceptions.Timeout:
        error_tracker.log_error(server_name, "TIMEOUT_ERROR", "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        return {"error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"}
    except Exception as e:
        error_tracker.log_error(server_name, "UNKNOWN_ERROR", str(e))
        return {"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}

def try_internal_handlers(server_name, message):
    """–ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏"""
    try:
        if server_name == "general":
            from handlers.general_handler import get_general_handler
            handler = get_general_handler()
            result = handler.handle_request(message)
            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π General Handler")
            return result
            
        elif server_name == "electrical":
            from handlers.electrical_handler import get_electrical_handler
            handler = get_electrical_handler()
            result = handler.handle_request(message)
            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π Electrical Handler")
            return result
            
        elif server_name == "mathematics":
            from handlers.mathematics_handler import get_mathematics_handler
            handler = get_mathematics_handler()
            result = handler.handle_request(message)
            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π Mathematics Handler")
            return result
            
        else:
            logger.info(f"üîÑ –ù–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è {server_name}")
            return None
            
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è {server_name}: {e}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ {server_name}: {e}")
        return None

# API Endpoints
@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞"""
    return jsonify({
        "status": "healthy",
        "message": "Enhanced Smart Dispatcher —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "timestamp": datetime.now().isoformat(),
        "neural_router": "active",
        "error_tracker": "active"
    }), 200

@app.route('/api/chat', methods=['POST'])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —á–∞—Ç–∞"""
    try:
        data = request.get_json()
        message = data.get('message', '')
        
        if not message:
            return jsonify({"error": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"}), 400
        
        # --- –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –í –ë–ê–ó–ï –ó–ù–ê–ù–ò–ô ---
        try:
            kb_logger.info(f"üîç –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –¥–ª—è: '{message[:30]}...'")
            kb_response = requests.post(
                "http://host.docker.internal:8093/api/knowledge/search",
                json={'query': message, 'limit': 3},  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –≤—ã–±–æ—Ä–∞
                timeout=5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            )
            kb_logger.debug(f"  üì° –û—Ç–≤–µ—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: HTTP {kb_response.status_code}")
            
            if kb_response.status_code == 200:
                kb_data = kb_response.json()
                kb_logger.debug(f"  üìä –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(kb_data.get('results', []))}")
                
                if kb_data.get('results'):
                    # –ò—â–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ä–æ–≥–æ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                    best_result = None
                    for i, result in enumerate(kb_data['results']):
                        kb_logger.debug(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç {i+1}: score={result['score']:.2f}, title='{result.get('title', 'N/A')}'")
                        if result['score'] > 0.7:  # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
                            best_result = result
                            break
                    
                    if best_result:
                        kb_logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {best_result.get('title')} (score: {best_result['score']:.2f})")
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                        content_category = best_result.get('category', 'knowledge_base')
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                        response_content = best_result.get('content', '')
                        if best_result.get('title'):
                            response_content = f"**{best_result['title']}**\n\n{response_content}"
                        
                        return jsonify({
                            'success': True,
                            'category': content_category,
                            'response': {
                                'content': response_content,
                                'title': best_result.get('title'),
                                'source': 'Knowledge Base',
                                'score': best_result['score']
                            },
                            'server': 'knowledge_base:8093',
                            'neural_used': False,
                            'confidence': best_result['score'],
                            'timestamp': datetime.now().isoformat(),
                            'knowledge_base_hit': True
                        })
                    else:
                        kb_logger.info("üîç –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                else:
                    kb_logger.info("üîç –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            else:
                kb_logger.warning(f"‚ö†Ô∏è –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: HTTP {kb_response.status_code}")
        except requests.exceptions.ConnectionError:
            kb_logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        except requests.exceptions.Timeout:
            kb_logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        except Exception as e:
            kb_logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {e}")
        # --- –ö–û–ù–ï–¶ –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–û–ò–°–ö–ê ---
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç—å—é
        routing_logger.info(f"üîÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è: '{message[:30]}...'")
        server_name, confidence = categorize_message(message)
        routing_logger.info(f"  üéØ –í—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä: {server_name} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
        
        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        routing_logger.info(f"  üì§ –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {server_name}")
        result = forward_request(server_name, message)
        routing_logger.info(f"  üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {server_name}")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        result.update({
            "routed_to": server_name,
            "confidence": confidence,
            "timestamp": datetime.now().isoformat(),
            "neural_analysis": True
        })
        
        routing_logger.info(f"  ‚úÖ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return jsonify(result), 200
        
    except Exception as e:
        error_tracker.log_error("dispatcher", "CHAT_ERROR", str(e))
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"}), 500

@app.route('/api/servers', methods=['GET'])
def list_servers():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    return jsonify({
        "servers": SERVERS,
        "total_count": len(SERVERS),
        "timestamp": datetime.now().isoformat()
    }), 200

@app.route('/api/errors', methods=['GET'])
def get_errors():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    limit = request.args.get('limit', 50, type=int)
    errors = error_tracker.get_errors(limit)
    
    return jsonify({
        "errors": errors,
        "total_count": len(errors),
        "timestamp": datetime.now().isoformat()
    }), 200

@app.route('/api/system/health', methods=['GET'])
def system_health():
    """–û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã"""
    health = error_tracker.get_system_health()
    health.update({
        "server_status": error_tracker.server_status,
        "timestamp": datetime.now().isoformat()
    })
    
    return jsonify(health), 200

@app.route('/api/neural/analyze', methods=['POST'])
def neural_analyze():
    """–ù–µ–π—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        data = request.get_json()
        message = data.get('message', '')
        
        if not message:
            return jsonify({"error": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"}), 400
        
        category, confidence = neural_router.analyze_message(message)
        suggested_server, route_confidence = neural_router.suggest_route(message)
        
        return jsonify({
            "message": message,
            "category": category,
            "confidence": confidence,
            "suggested_server": suggested_server,
            "route_confidence": route_confidence,
            "timestamp": datetime.now().isoformat()
        }), 200
        
    except Exception as e:
        error_tracker.log_error("neural_analyzer", "ANALYSIS_ERROR", str(e))
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"}), 500

@app.route('/api/status', methods=['GET'])
def status():
    """–°—Ç–∞—Ç—É—Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞"""
    return jsonify({
        "status": "running",
        "neural_router": "active",
        "error_tracker": "active",
        "servers_configured": len(SERVERS),
        "uptime": "active",
        "timestamp": datetime.now().isoformat()
    }), 200

if __name__ == "__main__":
    logger.info("üß† Enhanced Smart Dispatcher —Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç—å—é –∑–∞–ø—É—â–µ–Ω")
    logger.info("üîó URL: http://localhost:8080")
    logger.info("üìä Endpoints:")
    logger.info("  - POST /api/chat - –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç")
    logger.info("  - GET /api/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    logger.info("  - GET /api/servers - –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤")
    logger.info("  - GET /api/errors - –û—à–∏–±–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    logger.info("  - GET /api/system/health - –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã")
    logger.info("  - POST /api/neural/analyze - –ù–µ–π—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    logger.info("  - GET /api/status - –°—Ç–∞—Ç—É—Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞")
    
    app.run(host='0.0.0.0', port=8080, debug=True, use_reloader=False)
