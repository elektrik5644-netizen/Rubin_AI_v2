#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ Memory Optimized Launcher - –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏
"""

import subprocess
import time
import psutil
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MemoryOptimizedLauncher:
    def __init__(self):
        self.servers = {
            'smart_dispatcher': {
                'command': 'python simple_dispatcher.py',
                'port': 8080,
                'memory_limit': 100,  # MB
                'priority': 1
            },
            'general_api': {
                'command': 'python api/general_api.py',
                'port': 8085,
                'memory_limit': 150,
                'priority': 1
            },
            'mathematics': {
                'command': 'python api/mathematics_api.py',
                'port': 8086,
                'memory_limit': 200,
                'priority': 2
            },
            'electrical': {
                'command': 'python api/electrical_api.py',
                'port': 8087,
                'memory_limit': 150,
                'priority': 2
            },
            'programming': {
                'command': 'python api/programming_api.py',
                'port': 8088,
                'memory_limit': 200,
                'priority': 2
            },
            'neuro': {
                'command': 'python simple_neuro_api_server.py',
                'port': 8090,
                'memory_limit': 100,
                'priority': 3
            },
            'controllers': {
                'command': 'python simple_controllers_api_server.py',
                'port': 9000,
                'memory_limit': 100,
                'priority': 3
            },
            'plc_analysis': {
                'command': 'python simple_plc_analysis_api_server.py',
                'port': 8099,
                'memory_limit': 100,
                'priority': 3
            },
            'advanced_math': {
                'command': 'python simple_advanced_math_api_server.py',
                'port': 8100,
                'memory_limit': 150,
                'priority': 3
            },
            'data_processing': {
                'command': 'python simple_data_processing_api_server.py',
                'port': 8101,
                'memory_limit': 150,
                'priority': 3
            },
            'search_engine': {
                'command': 'python search_engine_api_server.py',
                'port': 8102,
                'memory_limit': 200,
                'priority': 3
            },
            'system_utils': {
                'command': 'python system_utils_api_server.py',
                'port': 8103,
                'memory_limit': 100,
                'priority': 3
            },
            'gai_server': {
                'command': 'python lightweight_gai_server.py',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                'port': 8104,
                'memory_limit': 100,
                'priority': 3
            },
            'unified_manager': {
                'command': 'python unified_system_manager.py',
                'port': 8084,
                'memory_limit': 150,
                'priority': 2
            },
            'ethical_core': {
                'command': 'python ethical_core_api_server.py',
                'port': 8105,
                'memory_limit': 100,
                'priority': 3
            }
        }
        
        self.running_processes = {}
    
    def check_memory_available(self, required_mb):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏"""
        memory = psutil.virtual_memory()
        available_mb = memory.available // (1024**2)
        return available_mb >= required_mb
    
    def get_total_memory_usage(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ Python –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏"""
        total_memory = 0
        for proc in psutil.process_iter(['pid', 'name', 'memory_info']):
            try:
                if proc.info['name'] and 'python' in proc.info['name'].lower():
                    total_memory += proc.info['memory_info'].rss
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        return total_memory // (1024**2)  # MB
    
    def start_server(self, server_name):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞–º—è—Ç–∏"""
        if server_name not in self.servers:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {server_name}")
            return False
        
        server_config = self.servers[server_name]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏
        if not self.check_memory_available(server_config['memory_limit']):
            logger.warning(f"‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è {server_name} (—Ç—Ä–µ–±—É–µ—Ç—Å—è {server_config['memory_limit']}MB)")
            return False
        
        try:
            # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
            process = subprocess.Popen(
                server_config['command'],
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            
            self.running_processes[server_name] = process
            logger.info(f"‚úÖ {server_name} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            time.sleep(2)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {server_name}: {e}")
            return False
    
    def start_priority_servers(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        sorted_servers = sorted(
            self.servers.items(),
            key=lambda x: x[1]['priority']
        )
        
        started_count = 0
        total_memory_used = 0
        
        for server_name, config in sorted_servers:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
            current_memory = self.get_total_memory_usage()
            if current_memory > 4000:  # –õ–∏–º–∏—Ç 4GB
                logger.warning(f"‚ö†Ô∏è  –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏ ({current_memory}MB), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—É—Å–∫")
                break
            
            if self.start_server(server_name):
                started_count += 1
                total_memory_used += config['memory_limit']
                logger.info(f"üìä –ó–∞–ø—É—â–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {started_count}, –ü–∞–º—è—Ç—å: {total_memory_used}MB")
        
        return started_count
    
    def monitor_servers(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                for server_name, process in list(self.running_processes.items()):
                    if process.poll() is not None:
                        logger.warning(f"‚ö†Ô∏è  {server_name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
                        del self.running_processes[server_name]
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                memory_usage = self.get_total_memory_usage()
                logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(self.running_processes)}, –ü–∞–º—è—Ç—å: {memory_usage}MB")
                
                time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except KeyboardInterrupt:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(10)
    
    def stop_all_servers(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã"""
        logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã...")
        
        for server_name, process in self.running_processes.items():
            try:
                process.terminate()
                logger.info(f"‚úÖ {server_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {server_name}: {e}")
        
        self.running_processes.clear()

def main():
    launcher = MemoryOptimizedLauncher()
    
    try:
        logger.info("üöÄ Memory Optimized Launcher –∑–∞–ø—É—â–µ–Ω")
        logger.info("=" * 50)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–∞–º—è—Ç—å
        memory = psutil.virtual_memory()
        available_gb = memory.available // (1024**3)
        logger.info(f"üíæ –î–æ—Å—Ç—É–ø–Ω–æ –ø–∞–º—è—Ç–∏: {available_gb}GB")
        
        if available_gb < 2:
            logger.warning("‚ö†Ô∏è  –ú–∞–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å RAM")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã
        started = launcher.start_priority_servers()
        logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {started} —Å–µ—Ä–≤–µ—Ä–æ–≤")
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        launcher.monitor_servers()
        
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        launcher.stop_all_servers()
        logger.info("üèÅ Launcher –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == '__main__':
    main()



