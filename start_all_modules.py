#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π Rubin AI v2
"""

import subprocess
import time
import sys
import os
from pathlib import Path

def start_server(script_path, description):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    try:
        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é {description}...")
        process = subprocess.Popen(
            [sys.executable, script_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            creationflags=subprocess.CREATE_NEW_CONSOLE if os.name == 'nt' else 0
        )
        print(f"‚úÖ {description} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
        return process
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {description}: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    print("=" * 60)
    print("ü§ñ RUBIN AI v2 - –ó–ê–ü–£–°–ö –í–°–ï–• –ú–û–î–£–õ–ï–ô")
    print("=" * 60)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
    base_path = Path(__file__).parent
    
    servers = [
        {
            "script": "smart_dispatcher.py",
            "description": "–£–º–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä (–ø–æ—Ä—Ç 8080)",
            "port": 8080
        },
        {
            "script": "api/electrical_api.py",
            "description": "–°–µ—Ä–≤–µ—Ä —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∏ (–ø–æ—Ä—Ç 8087)",
            "port": 8087
        },
        {
            "script": "api/radiomechanics_api.py",
            "description": "–°–µ—Ä–≤–µ—Ä —Ä–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∏ (–ø–æ—Ä—Ç 8089)",
            "port": 8089
        },
        {
            "script": "api/controllers_api.py",
            "description": "–°–µ—Ä–≤–µ—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ (–ø–æ—Ä—Ç 9000)",
            "port": 9000
        },
        {
            "script": "math_server.py",
            "description": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä (–ø–æ—Ä—Ç 8086)",
            "port": 8086
        },
        {
            "script": "api/programming_api.py",
            "description": "–°–µ—Ä–≤–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ—Ä—Ç 8088)",
            "port": 8088
        }
    ]
    
    processes = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
    for server in servers:
        script_path = base_path / server["script"]
        
        if script_path.exists():
            process = start_server(script_path, server["description"])
            if process:
                processes.append({
                    "process": process,
                    "description": server["description"],
                    "port": server["port"]
                })
            time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
    
    print("\n" + "=" * 60)
    print("üìä –°–¢–ê–¢–£–° –ó–ê–ü–£–©–ï–ù–ù–´–• –°–ï–†–í–ï–†–û–í:")
    print("=" * 60)
    
    for server_info in processes:
        print(f"‚úÖ {server_info['description']} - PID: {server_info['process'].pid}")
    
    print("\n" + "=" * 60)
    print("üåê –î–û–°–¢–£–ü–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´:")
    print("=" * 60)
    print("üîó –£–º–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä: http://localhost:8080/api/chat")
    print("‚ö° –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞: http://localhost:8087/api/electrical/explain")
    print("üì° –†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞: http://localhost:8089/api/radiomechanics/explain")
    print("üéõÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã: http://localhost:9000/api/controllers/topic/general")
    print("üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: http://localhost:8086/api/chat")
    print("üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: http://localhost:8088/api/programming/explain")
    
    print("\n" + "=" * 60)
    print("üéØ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:")
    print("=" * 60)
    print("‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ http://localhost:8080/api/chat")
    print("‚Ä¢ –£–º–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç –∑–∞–ø—Ä–æ—Å –∫ –Ω—É–∂–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É")
    print("‚Ä¢ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    print("\n" + "=" * 60)
    print("‚è≥ –û–ñ–ò–î–ê–ù–ò–ï –ó–ê–ü–†–û–°–û–í...")
    print("=" * 60)
    
    try:
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while True:
            time.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
            active_processes = []
            for server_info in processes:
                if server_info["process"].poll() is None:
                    active_processes.append(server_info)
                else:
                    print(f"‚ö†Ô∏è {server_info['description']} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
            
            processes = active_processes
            
            if not processes:
                print("‚ùå –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å")
                break
                
    except KeyboardInterrupt:
        print("\n\nüõë –û–°–¢–ê–ù–û–í–ö–ê –°–ï–†–í–ï–†–û–í...")
        
        for server_info in processes:
            try:
                server_info["process"].terminate()
                print(f"‚úÖ {server_info['description']} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {server_info['description']}: {e}")
        
        print("\nüëã –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

if __name__ == "__main__":
    main()