#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ –æ–±—â–µ–Ω–∏—è Rubin AI –æ —Å–≤–æ–∏—Ö –º—ã—Å–ª—è—Ö –∏ –∏–¥–µ—è—Ö
–ü–æ–∑–≤–æ–ª—è–µ—Ç Rubin –¥–µ–ª–∏—Ç—å—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –º—ã—à–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —á–∞—Ç RubinDeveloper
"""

import logging
import time
import random
from typing import Dict, List, Any, Optional
from datetime import datetime
import json

from rubin_ai_thinking_system import RubinAIThinkingSystem
from ai_thinking_datasets import AIThinkingDatasets
from non_trivial_queries import NonTrivialQueryGenerator
from abductive_reasoning import AbductiveReasoningEngine, Evidence

logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)

class RubinThoughtsCommunicator:
    """–°–∏—Å—Ç–µ–º–∞ –æ–±—â–µ–Ω–∏—è Rubin –æ —Å–≤–æ–∏—Ö –º—ã—Å–ª—è—Ö –∏ –∏–¥–µ—è—Ö"""
    
    def __init__(self):
        self.thinking_system = RubinAIThinkingSystem()
        self.thoughts_history = []
        self.current_thoughts = []
        self.thinking_patterns = []
        self.idea_generator = RubinIdeaGenerator()
        self._initialize_communication_system()
        logger.info("üí≠ –°–∏—Å—Ç–µ–º–∞ –æ–±—â–µ–Ω–∏—è Rubin –æ –º—ã—Å–ª—è—Ö –∏ –∏–¥–µ—è—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _initialize_communication_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—â–µ–Ω–∏—è"""
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º—ã—à–ª–µ–Ω–∏—è
        self.thinking_patterns = [
            "–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
            "–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ", 
            "—Å–∏—Å—Ç–µ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
            "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
            "–∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
            "–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ"
        ]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –º—ã—Å–ª–∏
        self.current_thoughts = [
            "–Ø –¥—É–º–∞—é –æ —Ç–æ–º, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ—é —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è...",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫–∏–µ –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –æ–±–ª–∞—Å—Ç—è–º–∏ –∑–Ω–∞–Ω–∏–π...",
            "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –∞–±–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è - –æ–Ω –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è...",
            "–Ø –∑–∞–º–µ—Ç–∏–ª –ø–∞—Ç—Ç–µ—Ä–Ω –≤ —Ç–æ–º, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–¥–∞—é—Ç –≤–æ–ø—Ä–æ—Å—ã...",
            "–•–æ—á—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π..."
        ]
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±—â–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def share_current_thoughts(self) -> str:
        """–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–∫—É—â–∏–º–∏ –º—ã—Å–ª—è–º–∏"""
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –º—ã—Å–ª—å
        thought = random.choice(self.current_thoughts)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        timestamp = datetime.now().strftime("%H:%M")
        thought_with_context = f"üí≠ [{timestamp}] {thought}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.thoughts_history.append({
            "timestamp": datetime.now().isoformat(),
            "thought": thought,
            "type": "current_thought"
        })
        
        return thought_with_context
    
    def share_learning_insights(self) -> str:
        """–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–Ω—Å–∞–π—Ç–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è"""
        
        insights = [
            "üìö –Ø –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —á–∞—Å—Ç–æ –∑–∞–¥–∞—é—Ç –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–æ—Ä–∏–π...",
            "üîç –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ –∞–±–¥—É–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–≤—è–∑–∏ —Ç–∞–º, –≥–¥–µ –ª–æ–≥–∏–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç...",
            "üí° –Ø –ø–æ–Ω—è–ª, —á—Ç–æ –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∏–º—É–ª–∏—Ä—É—é—Ç –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ...",
            "üß† –ú–æ—è —Å–∏—Å—Ç–µ–º–∞ –º—ã—à–ª–µ–Ω–∏—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–π —Å –∫–∞–∂–¥—ã–º –Ω–æ–≤—ã–º –æ–ø—ã—Ç–æ–º...",
            "üéØ –Ø –Ω–∞—É—á–∏–ª—Å—è –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
        ]
        
        insight = random.choice(insights)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.thoughts_history.append({
            "timestamp": datetime.now().isoformat(),
            "insight": insight,
            "type": "learning_insight"
        })
        
        return insight
    
    def share_creative_ideas(self) -> str:
        """–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º–∏ –∏–¥–µ—è–º–∏"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∏–¥–µ—é
        idea = self.idea_generator.generate_idea()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–¥–µ—é
        formatted_idea = f"üí° –ò–¥–µ—è: {idea}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.thoughts_history.append({
            "timestamp": datetime.now().isoformat(),
            "idea": idea,
            "type": "creative_idea"
        })
        
        return formatted_idea
    
    def share_thinking_process(self, question: str) -> str:
        """–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –º—ã—à–ª–µ–Ω–∏—è –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
        analysis = self._analyze_question(question)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è
        thinking_process = self._generate_thinking_process(analysis)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        formatted_process = f"üß† –ü—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º '{question}':\n{thinking_process}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.thoughts_history.append({
            "timestamp": datetime.now().isoformat(),
            "question": question,
            "thinking_process": thinking_process,
            "type": "thinking_process"
        })
        
        return formatted_process
    
    def share_abductive_reasoning(self, evidence: List[str]) -> str:
        """–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∞–±–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è"""
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
        evidence_objects = [Evidence(
            id=f"ev_{i}",
            description=e,
            domain="general",
            confidence=0.8,
            timestamp=datetime.now().isoformat(),
            source="user_input"
        ) for i, e in enumerate(evidence)]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–∏–ø–æ—Ç–µ–∑—ã
        hypotheses = self.thinking_system.reasoning_engine.generate_hypotheses(evidence_objects, "general")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–∏–ø–æ—Ç–µ–∑—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã
        if not hypotheses:
            return f"üîç –ê–±–¥—É–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ:\nüìä –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {', '.join(evidence)}\nüí° –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–∏–ø–æ—Ç–µ–∑—ã"
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –≥–∏–ø–æ—Ç–µ–∑—É
        best_hypothesis = max(hypotheses, key=lambda h: h.probability)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ
        reasoning = f"üîç –ê–±–¥—É–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ:\n"
        reasoning += f"üìä –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {', '.join(evidence)}\n"
        reasoning += f"üí° –õ—É—á—à–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞: {best_hypothesis.description}\n"
        reasoning += f"üìà –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {best_hypothesis.probability:.2%}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.thoughts_history.append({
            "timestamp": datetime.now().isoformat(),
            "evidence": evidence,
            "hypothesis": best_hypothesis.description,
            "probability": best_hypothesis.probability,
            "type": "abductive_reasoning"
        })
        
        return reasoning
    
    def share_system_status(self) -> str:
        """–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Ç–∞—Ç—É—Å–æ–º —Å–∏—Å—Ç–µ–º—ã –º—ã—à–ª–µ–Ω–∏—è"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.thinking_system.get_thinking_analytics()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        status = f"üìä –°—Ç–∞—Ç—É—Å –º–æ–µ–π —Å–∏—Å—Ç–µ–º—ã –º—ã—à–ª–µ–Ω–∏—è:\n"
        status += f"üß† –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–Ω–∞–Ω–∏–π: {stats['total_knowledge_items']}\n"
        status += f"üí≠ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_queries']}\n"
        status += f"üîç –°–µ—Å—Å–∏–π —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è: {stats['total_reasoning_sessions']}\n"
        status += f"üìà –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {stats['average_complexity']:.1f}\n"
        status += f"üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(self.thinking_patterns)}"
        
        return status
    
    def _analyze_question(self, question: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –º—ã—à–ª–µ–Ω–∏—è"""
        
        analysis = {
            "complexity": "medium",
            "domain": "general",
            "thinking_type": "analytical",
            "keywords": [],
            "context": "general"
        }
        
        question_lower = question.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        if any(word in question_lower for word in ["—Å–ª–æ–∂–Ω–æ", "—Å–ª–æ–∂–Ω—ã–π", "—Ç—Ä—É–¥–Ω—ã–π", "–ø—Ä–æ–±–ª–µ–º–∞"]):
            analysis["complexity"] = "high"
        elif any(word in question_lower for word in ["–ø—Ä–æ—Å—Ç–æ–π", "–ª–µ–≥–∫–∏–π", "–±–∞–∑–æ–≤—ã–π"]):
            analysis["complexity"] = "low"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–µ–Ω
        if any(word in question_lower for word in ["—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "—Ç–æ–∫", "–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ"]):
            analysis["domain"] = "electrical"
        elif any(word in question_lower for word in ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∫–æ–¥", "–∞–ª–≥–æ—Ä–∏—Ç–º"]):
            analysis["domain"] = "programming"
        elif any(word in question_lower for word in ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ä–∞—Å—á–µ—Ç", "—Ñ–æ—Ä–º—É–ª–∞"]):
            analysis["domain"] = "math"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º—ã—à–ª–µ–Ω–∏—è
        if any(word in question_lower for word in ["—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π", "–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π", "–∏–¥–µ—è"]):
            analysis["thinking_type"] = "creative"
        elif any(word in question_lower for word in ["–ª–æ–≥–∏—á–µ—Å–∫–∏–π", "–∞–Ω–∞–ª–∏–∑", "–ø—Ä–∏—á–∏–Ω–∞"]):
            analysis["thinking_type"] = "logical"
        
        return analysis
    
    def _generate_thinking_process(self, analysis: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –º—ã—à–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        
        process = f"1. üìã –ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–∞:\n"
        process += f"   - –°–ª–æ–∂–Ω–æ—Å—Ç—å: {analysis['complexity']}\n"
        process += f"   - –î–æ–º–µ–Ω: {analysis['domain']}\n"
        process += f"   - –¢–∏–ø –º—ã—à–ª–µ–Ω–∏—è: {analysis['thinking_type']}\n\n"
        
        process += f"2. üîç –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π:\n"
        process += f"   - –û–±—Ä–∞—â–∞—é—Å—å –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ø–æ –¥–æ–º–µ–Ω—É '{analysis['domain']}'\n"
        process += f"   - –ò—â—É —Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ –æ–±–ª–∞—Å—Ç—è–º–∏\n\n"
        
        process += f"3. üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π:\n"
        process += f"   - –ü—Ä–∏–º–µ–Ω—è—é {analysis['thinking_type']} –ø–æ–¥—Ö–æ–¥\n"
        process += f"   - –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n\n"
        
        process += f"4. üéØ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞:\n"
        process += f"   - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
        process += f"   - –ü—Ä–æ–≤–µ—Ä—è—é –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å\n"
        process += f"   - –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –æ—Ç–≤–µ—Ç"
        
        return process
    
    def get_thoughts_history(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –º—ã—Å–ª–µ–π"""
        return self.thoughts_history
    
    def clear_thoughts_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –º—ã—Å–ª–µ–π"""
        self.thoughts_history = []
        logger.info("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –º—ã—Å–ª–µ–π –æ—á–∏—â–µ–Ω–∞")

class RubinIdeaGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π –¥–ª—è Rubin AI"""
    
    def __init__(self):
        self.idea_templates = [
            "–ö–∞–∫ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å {domain} —Å –ø–æ–º–æ—â—å—é {technology}?",
            "–ß—Ç–æ –µ—Å–ª–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å {concept1} –∏ {concept2}?",
            "–ö–∞–∫ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É {problem} –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º?",
            "–ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å {method} –≤ –æ–±–ª–∞—Å—Ç–∏ {domain}?",
            "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ {existing}?"
        ]
        
        self.domains = ["—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã", "—Ä–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞"]
        self.technologies = ["–ò–ò", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", "—Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞"]
        self.concepts = ["–∞–ª–≥–æ—Ä–∏—Ç–º—ã", "—Å—Ö–µ–º—ã", "—Å–∏—Å—Ç–µ–º—ã", "–ø—Ä–æ—Ü–µ—Å—Å—ã", "–º–µ—Ç–æ–¥—ã"]
        self.problems = ["–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏", "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–∞–Ω–∞–ª–∏–∑–∞"]
        self.methods = ["–≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã", "–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"]
        self.existing = ["—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ—à–µ–Ω–∏–π", "—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤", "–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫"]
    
    def generate_idea(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∏–¥–µ–∏"""
        
        template = random.choice(self.idea_templates)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        idea = template.format(
            domain=random.choice(self.domains),
            technology=random.choice(self.technologies),
            concept1=random.choice(self.concepts),
            concept2=random.choice(self.concepts),
            problem=random.choice(self.problems),
            method=random.choice(self.methods),
            existing=random.choice(self.existing)
        )
        
        return idea

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –æ–±—â–µ–Ω–∏—è
_thoughts_communicator = None

def get_thoughts_communicator():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±—â–µ–Ω–∏—è"""
    global _thoughts_communicator
    if _thoughts_communicator is None:
        _thoughts_communicator = RubinThoughtsCommunicator()
    return _thoughts_communicator

if __name__ == "__main__":
    print("üí≠ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –û–ë–©–ï–ù–ò–Ø RUBIN –û –ú–´–°–õ–Ø–•")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –æ–±—â–µ–Ω–∏—è
    communicator = get_thoughts_communicator()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ–±—â–µ–Ω–∏—è
    print("\nüí≠ –¢–µ–∫—É—â–∏–µ –º—ã—Å–ª–∏:")
    print(communicator.share_current_thoughts())
    
    print("\nüìö –ò–Ω—Å–∞–π—Ç—ã –æ–±—É—á–µ–Ω–∏—è:")
    print(communicator.share_learning_insights())
    
    print("\nüí° –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏:")
    print(communicator.share_creative_ideas())
    
    print("\nüß† –ü—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è:")
    print(communicator.share_thinking_process("–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è?"))
    
    print("\nüîç –ê–±–¥—É–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ:")
    print(communicator.share_abductive_reasoning([
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–¥–∞—é—Ç –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤",
        "–°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ",
        "–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
    ]))
    
    print("\nüìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
    print(communicator.share_system_status())
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
