#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Smart Dispatcher
"""

import requests
import json

def test_smart_dispatcher_direct():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Smart Dispatcher –Ω–∞–ø—Ä—è–º—É—é"""
    
    print("üß™ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Smart Dispatcher")
    print("=" * 60)
    
    # –¢–µ—Å—Ç health check
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Smart Dispatcher...")
    try:
        response = requests.get('http://localhost:8080/api/health', timeout=5)
        if response.status_code == 200:
            print("‚úÖ Smart Dispatcher —Ä–∞–±–æ—Ç–∞–µ—Ç")
            data = response.json()
            print(f"üìä –°—Ç–∞—Ç—É—Å: {data.get('status')}")
            print(f"üîß –ú–æ–¥—É–ª–µ–π: {data.get('total_modules')}")
            print(f"‚úÖ –ó–¥–æ—Ä–æ–≤—ã—Ö: {data.get('healthy_modules')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ health check: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return
    
    # –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    print("\n2. –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    test_questions = [
        "—á—Ç–æ —Ç–∞–∫–æ–µ —Ñ–æ—Ç–æ–Ω?",
        "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω",
        "—á—Ç–æ —Ç–∞–∫–æ–µ –∞—Ç–æ–º?",
        "–æ–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é –º–µ—Ö–∞–Ω–∏–∫—É"
    ]
    
    for question in test_questions:
        print(f"\nüìù –í–æ–ø—Ä–æ—Å: {question}")
        
        try:
            response = requests.post(
                'http://localhost:8080/api/chat',
                json={'message': question},
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
                print(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback
                if 'fallback_used' in data:
                    print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback: {data['fallback_used']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
                if 'server_used' in data:
                    print(f"üñ•Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å–µ—Ä–≤–µ—Ä: {data['server_used']}")
                
                print(f"üí¨ –û—Ç–≤–µ—Ç: {data.get('response', '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞')[:100]}...")
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        
        print("-" * 40)

if __name__ == '__main__':
    test_smart_dispatcher_direct()



