#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Qdrant –¥–ª—è Rubin AI v2.0
"""

import subprocess
import sys
import os
import requests
import json
from pathlib import Path

def install_qdrant_client():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Qdrant"""
    try:
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Qdrant Python –∫–ª–∏–µ–Ω—Ç–∞...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "qdrant-client"])
        print("‚úÖ Qdrant –∫–ª–∏–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Qdrant –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False

def check_docker():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker"""
    try:
        result = subprocess.run(["docker", "--version"], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Docker –Ω–∞–π–¥–µ–Ω: {result.stdout.strip()}")
            return True
        else:
            print("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except FileNotFoundError:
        print("‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def start_qdrant_docker():
    """–ó–∞–ø—É—Å–∫ Qdrant –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"""
    try:
        print("üê≥ –ó–∞–ø—É—Å–∫ Qdrant –≤ Docker...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ Qdrant
        result = subprocess.run(["docker", "ps", "--filter", "name=qdrant", "--format", "{{.Names}}"], 
                              capture_output=True, text=True)
        
        if "qdrant" in result.stdout:
            print("‚úÖ Qdrant —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Qdrant
        cmd = [
            "docker", "run", "-p", "6333:6333", "-p", "6334:6334",
            "-v", f"{os.getcwd()}/qdrant_storage:/qdrant/storage:z",
            "--name", "qdrant", "-d",
            "qdrant/qdrant"
        ]
        
        subprocess.check_call(cmd)
        print("‚úÖ Qdrant –∑–∞–ø—É—â–µ–Ω –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
        print("üåê Qdrant –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:6333")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Qdrant: {e}")
        return False

def test_qdrant_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant"""
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant...")
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
        import time
        time.sleep(5)
        
        response = requests.get("http://localhost:6333/collections", timeout=10)
        if response.status_code == 200:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant: {e}")
        return False

def create_qdrant_config():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è Qdrant"""
    config = {
        "qdrant": {
            "host": "localhost",
            "port": 6333,
            "grpc_port": 6334,
            "timeout": 30,
            "collections": {
                "rubin_knowledge": {
                    "vector_size": 384,
                    "distance": "Cosine",
                    "description": "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π Rubin AI"
                },
                "rubin_documents": {
                    "vector_size": 768,
                    "distance": "Cosine", 
                    "description": "–î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
                },
                "rubin_conversations": {
                    "vector_size": 384,
                    "distance": "Cosine",
                    "description": "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"
                }
            }
        }
    }
    
    config_path = Path("config/qdrant_config.json")
    config_path.parent.mkdir(exist_ok=True)
    
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Qdrant —Å–æ–∑–¥–∞–Ω–∞: {config_path}")
    return config_path

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("üöÄ –£–°–¢–ê–ù–û–í–ö–ê QDRANT –î–õ–Ø RUBIN AI v2.0")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Qdrant
    os.makedirs("qdrant_storage", exist_ok=True)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –∫–ª–∏–µ–Ω—Ç
    if not install_qdrant_client():
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
    if not check_docker():
        print("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ Qdrant —Ç—Ä–µ–±—É–µ—Ç—Å—è Docker")
        print("   –°–∫–∞—á–∞–π—Ç–µ Docker —Å https://www.docker.com/get-started")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Qdrant
    if not start_qdrant_docker():
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not test_qdrant_connection():
        return False
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    create_qdrant_config()
    
    print("\n" + "=" * 50)
    print("üéâ QDRANT –£–°–ü–ï–®–ù–û –£–°–¢–ê–ù–û–í–õ–ï–ù –ò –ù–ê–°–¢–†–û–ï–ù!")
    print("=" * 50)
    print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:6333/dashboard")
    print("üì° API: http://localhost:6333")
    print("üîß gRPC: localhost:6334")
    print("üìÅ –î–∞–Ω–Ω—ã–µ: ./qdrant_storage/")
    print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Rubin AI")
    print("   2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
    print("   3. –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ")
    
    return True

if __name__ == "__main__":
    success = main()
    if not success:
        print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Qdrant –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)
    else:
        print("\n‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Qdrant –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")







