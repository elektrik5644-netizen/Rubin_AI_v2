#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –≤ Rubin AI v2.0
"""

import os
import sys
from pathlib import Path

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìö –ó–ê–ì–†–£–ó–ö–ê –¢–ï–•–ù–ò–ß–ï–°–ö–û–ô –õ–ò–¢–ï–†–ê–¢–£–†–´ –í RUBIN AI v2.0")
    print("=" * 60)
    
    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–æ–π
    tech_literature_path = r"E:\03.–¢–µ—Ö.–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"
    
    print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É: {tech_literature_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    if not os.path.exists(tech_literature_path):
        print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {tech_literature_path}")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏")
        print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∏—Å–∫ E: –ø–æ–¥–∫–ª—é—á–µ–Ω")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏
        alternative_paths = [
            r"C:\Users\{}\Documents\03.–¢–µ—Ö.–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞".format(os.getenv('USERNAME')),
            r"C:\03.–¢–µ—Ö.–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
            r"D:\03.–¢–µ—Ö.–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
            "sample_documents"  # –ü–∞–ø–∫–∞ —Å –æ–±—Ä–∞–∑—Ü–∞–º–∏
        ]
        
        print(f"\nüìÇ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏:")
        for i, path in enumerate(alternative_paths, 1):
            if os.path.exists(path):
                print(f"   {i}. ‚úÖ {path} (–Ω–∞–π–¥–µ–Ω)")
            else:
                print(f"   {i}. ‚ùå {path} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É —Å –æ–±—Ä–∞–∑—Ü–∞–º–∏, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        print(f"\nüéØ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É —Å –æ–±—Ä–∞–∑—Ü–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        from start_documents_system import create_sample_documents
        docs_dir = create_sample_documents()
        tech_literature_path = str(docs_dir)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ —Å –æ–±—Ä–∞–∑—Ü–∞–º–∏: {tech_literature_path}")
    
    else:
        print(f"‚úÖ –ü–∞–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {tech_literature_path}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
        try:
            files = list(Path(tech_literature_path).rglob('*'))
            file_count = len([f for f in files if f.is_file()])
            print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {file_count}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ñ–∞–π–ª–æ–≤
            print(f"\nüìã –ü–µ—Ä–≤—ã–µ 10 —Ñ–∞–π–ª–æ–≤:")
            for i, file_path in enumerate(files[:10]):
                if file_path.is_file():
                    size = file_path.stat().st_size
                    print(f"   {i+1}. {file_path.name} ({size} –±–∞–π—Ç)")
            
            if file_count > 10:
                print(f"   ... –∏ –µ—â–µ {file_count - 10} —Ñ–∞–π–ª–æ–≤")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    print(f"\nüì• –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    
    try:
        from document_loader import DocumentLoader
        loader = DocumentLoader()
        
        success = loader.load_directory(tech_literature_path)
        
        if success:
            print(f"\n‚úÖ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("=" * 50)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = loader.get_document_stats()
            if stats:
                print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ì–†–£–ó–ö–ò:")
                print(f"   üìö –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {stats['total_documents']}")
                print(f"   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(stats['categories'])}")
                print(f"   üìÑ –¢–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤: {len(stats['file_types'])}")
                
                print(f"\nüìÇ –ö–ê–¢–ï–ì–û–†–ò–ò –î–û–ö–£–ú–ï–ù–¢–û–í:")
                for category, count in stats['categories']:
                    print(f"   ‚Ä¢ {category}: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                
                print(f"\nüìÑ –¢–ò–ü–´ –§–ê–ô–õ–û–í:")
                for file_type, count in stats['file_types']:
                    print(f"   ‚Ä¢ {file_type}: {count} —Ñ–∞–π–ª–æ–≤")
            
            print(f"\nüåê –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
            print(f"   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ API –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
            print(f"      python api/documents_api.py")
            print(f"   2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:")
            print(f"      http://localhost:8088/DocumentsManager.html")
            print(f"   3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Rubin AI")
            
            print(f"\nüîç –ü–†–ò–ú–ï–†–´ –ü–û–ò–°–ö–û–í–´–• –ó–ê–ü–†–û–°–û–í:")
            print(f"   ‚Ä¢ '–∑–∞–∫–æ–Ω –æ–º–∞' - –Ω–∞–π–¥–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ")
            print(f"   ‚Ä¢ '–∞–ª–≥–æ—Ä–∏—Ç–º' - –Ω–∞–π–¥–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é")
            print(f"   ‚Ä¢ 'pid —Ä–µ–≥—É–ª—è—Ç–æ—Ä' - –Ω–∞–π–¥–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
            print(f"   ‚Ä¢ '–º–æ–¥—É–ª—è—Ü–∏—è' - –Ω–∞–π–¥–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Ä–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–µ")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            print(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª–µ document_loader.log")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:")
        print(f"   pip install flask flask-cors")

if __name__ == "__main__":
    main()


















