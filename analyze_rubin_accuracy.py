#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤ Rubin AI
"""

import json
import sqlite3
from datetime import datetime

def analyze_test_results():
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –ê–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤ Rubin AI")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    try:
        with open('rubin_quick_test_results.json', 'r', encoding='utf-8') as f:
            test_data = json.load(f)
        
        total_questions = test_data['total_questions']
        results = test_data['results']
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        successful_answers = 0
        failed_answers = 0
        response_times = []
        
        for result in results:
            if result['expected_result']['status'] == 'success':
                successful_answers += 1
                response_times.append(result['expected_result']['response_time'])
            else:
                failed_answers += 1
        
        success_rate = (successful_answers / total_questions) * 100
        avg_response_time = sum(response_times) / len(response_times) if response_times else 0
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {successful_answers}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {failed_answers}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
        print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.2f}—Å")
        
        return success_rate, avg_response_time
        
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return 0, 0

def analyze_learning_database():
    """–ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è"""
    print(f"\nüìö –ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è:")
    print("-" * 30)
    
    try:
        conn = sqlite3.connect('rubin_learning.db')
        cursor = conn.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute('SELECT COUNT(*) FROM interactions')
        total_interactions = cursor.fetchone()[0]
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –æ—Ü–µ–Ω–∫–∞–º —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        cursor.execute('SELECT AVG(success_score) FROM interactions WHERE success_score IS NOT NULL')
        avg_success = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM interactions WHERE success_score > 0.8')
        high_success = cursor.fetchone()[0]
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        cursor.execute('SELECT AVG(confidence) FROM interactions WHERE confidence IS NOT NULL')
        avg_confidence = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM interactions WHERE confidence > 0.8')
        high_confidence = cursor.fetchone()[0]
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        cursor.execute('SELECT AVG(response_time) FROM interactions WHERE response_time IS NOT NULL')
        avg_response_time = cursor.fetchone()[0]
        
        print(f"–í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {total_interactions}")
        print(f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {avg_success:.3f}" if avg_success else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        print(f"–í—ã—Å–æ–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ (>0.8): {high_success} ({(high_success/total_interactions*100):.1f}%)" if total_interactions > 0 else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        print(f"–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.3f}" if avg_confidence else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        print(f"–í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (>0.8): {high_confidence} ({(high_confidence/total_interactions*100):.1f}%)" if total_interactions > 0 else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.3f}—Å" if avg_response_time else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        conn.close()
        
        return avg_success, high_success, total_interactions
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return 0, 0, 0

def analyze_api_accuracy():
    """–ê–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ API"""
    print(f"\nüîß –ê–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ API:")
    print("-" * 25)
    
    try:
        with open('rubin_quick_test_results.json', 'r', encoding='utf-8') as f:
            test_data = json.load(f)
        
        results = test_data['results']
        api_stats = {}
        
        for result in results:
            api = result['expected_result']['api']
            status = result['expected_result']['status']
            
            if api not in api_stats:
                api_stats[api] = {'total': 0, 'success': 0, 'times': []}
            
            api_stats[api]['total'] += 1
            if status == 'success':
                api_stats[api]['success'] += 1
                api_stats[api]['times'].append(result['expected_result']['response_time'])
        
        for api, stats in api_stats.items():
            success_rate = (stats['success'] / stats['total']) * 100
            avg_time = sum(stats['times']) / len(stats['times']) if stats['times'] else 0
            print(f"{api}: {stats['success']}/{stats['total']} ({success_rate:.1f}%) - {avg_time:.2f}—Å")
        
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")

def analyze_response_quality():
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
    print(f"\nüìù –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤:")
    print("-" * 25)
    
    try:
        with open('rubin_quick_test_results.json', 'r', encoding='utf-8') as f:
            test_data = json.load(f)
        
        results = test_data['results']
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–º—É API
        correct_routing = 0
        total_questions = len(results)
        
        for result in results:
            expected_api = result['expected_api']
            actual_api = result['expected_result']['api']
            
            if expected_api == actual_api:
                correct_routing += 1
        
        routing_accuracy = (correct_routing / total_questions) * 100
        
        print(f"–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è: {correct_routing}/{total_questions} ({routing_accuracy:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤
        specialized_responses = 0
        for result in results:
            response = result['expected_result']['response']
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if any(keyword in response.lower() for keyword in ['pmac', 'plc', '–∑–∞–∫–æ–Ω –æ–º–∞', '–∞–Ω—Ç–µ–Ω–Ω–∞', '–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫']):
                specialized_responses += 1
        
        specialization_rate = (specialized_responses / total_questions) * 100
        print(f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {specialized_responses}/{total_questions} ({specialization_rate:.1f}%)")
        
        return routing_accuracy, specialization_rate
        
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return 0, 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    print(f"üß† –ê–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–æ—Å—Ç–∏ Rubin AI")
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_success_rate, test_avg_time = analyze_test_results()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è
    learning_success, high_success, total_interactions = analyze_learning_database()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ API
    analyze_api_accuracy()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
    routing_accuracy, specialization_rate = analyze_response_quality()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û –¢–û–ß–ù–û–°–¢–ò")
    print("=" * 60)
    
    print(f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (10 –≤–æ–ø—Ä–æ—Å–æ–≤):")
    print(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {test_success_rate:.1f}%")
    print(f"  ‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {test_avg_time:.2f}—Å")
    
    print(f"\nüìö –ë–∞–∑–∞ –æ–±—É—á–µ–Ω–∏—è ({total_interactions} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π):")
    print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {learning_success:.3f}" if learning_success else "  ‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    print(f"  ‚Ä¢ –í—ã—Å–æ–∫–∏–µ –æ—Ü–µ–Ω–∫–∏: {high_success} ({(high_success/total_interactions*100):.1f}%)" if total_interactions > 0 else "  ‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    print(f"\nüîß –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏—Å—Ç–µ–º—ã:")
    print(f"  ‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è: {routing_accuracy:.1f}%")
    print(f"  ‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialization_rate:.1f}%")
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
    if test_success_rate > 0:
        overall_accuracy = (test_success_rate + routing_accuracy + specialization_rate) / 3
        print(f"\nüèÜ –û–ë–©–ê–Ø –¢–û–ß–ù–û–°–¢–¨: {overall_accuracy:.1f}%")
        
        if overall_accuracy >= 90:
            print("üü¢ –û–¢–õ–ò–ß–ù–û - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ")
        elif overall_accuracy >= 80:
            print("üü° –•–û–†–û–®–û - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
        elif overall_accuracy >= 70:
            print("üü† –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û - –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π")
        else:
            print("üî¥ –¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–ô - –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞")

if __name__ == '__main__':
    main()























