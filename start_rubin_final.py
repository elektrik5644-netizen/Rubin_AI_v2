#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ Rubin AI —Å –ø–æ–ª–Ω–æ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
"""

import subprocess
import sys
import os
import time
import webbrowser
from threading import Thread

def start_rubin_final():
    """–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ Rubin AI"""
    
    print("üöÄ –ó–ê–ü–£–°–ö RUBIN AI - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    required_files = [
        'rubin_enhanced_database.py',
        'rubin_final_interface.html'
    ]
    
    for file in required_files:
        if not os.path.exists(file):
            print(f"‚ùå –§–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
    
    print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_files = [
        'rubin_ai_v2.db',
        'rubin_ai_documents.db',
        'rubin_knowledge_base.db'
    ]
    
    print("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö:")
    for db_file in db_files:
        if os.path.exists(db_file):
            size = os.path.getsize(db_file)
            print(f"  ‚úÖ {db_file}: {size:,} –±–∞–π—Ç")
        else:
            print(f"  ‚ùå {db_file}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    test_docs_dir = 'test_documents'
    if os.path.exists(test_docs_dir):
        files = os.listdir(test_docs_dir)
        print(f"üìö –¢–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {len(files)} —Ñ–∞–π–ª–æ–≤")
        for file in files:
            size = os.path.getsize(os.path.join(test_docs_dir, file))
            print(f"  üìÑ {file}: {size:,} –±–∞–π—Ç")
    else:
        print("‚ùå –ü–∞–ø–∫–∞ test_documents –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    print("\nüåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8087...")
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        server_process = subprocess.Popen([
            sys.executable, 'rubin_enhanced_database.py'
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        time.sleep(3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        if server_process.poll() is None:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            def open_browser():
                time.sleep(2)
                webbrowser.open('file://' + os.path.abspath('rubin_final_interface.html'))
            
            browser_thread = Thread(target=open_browser)
            browser_thread.daemon = True
            browser_thread.start()
            
            print("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –±—Ä–∞—É–∑–µ—Ä–µ...")
            print("\nüì° –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
            print("üîó API: http://localhost:8087")
            print("üåê –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: rubin_final_interface.html")
            print("\nüí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:")
            print("  ‚Ä¢ –ü–æ–∏—Å–∫ –≤ –ø–æ–ª–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
            print("  ‚Ä¢ 7 —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            print("  ‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            print("  ‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")
            print("  ‚Ä¢ –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏")
            print("\nüõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            
            try:
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                server_process.wait()
            except KeyboardInterrupt:
                print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
                server_process.terminate()
                server_process.wait()
                print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            return True
        else:
            stdout, stderr = server_process.communicate()
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:")
            print(f"STDOUT: {stdout.decode()}")
            print(f"STDERR: {stderr.decode()}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def show_system_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    print("\nüìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï:")
    print("=" * 30)
    
    # –†–∞–∑–º–µ—Ä –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    total_db_size = 0
    for db_file in ['rubin_ai_v2.db', 'rubin_ai_documents.db', 'rubin_knowledge_base.db']:
        if os.path.exists(db_file):
            size = os.path.getsize(db_file)
            total_db_size += size
            print(f"üìä {db_file}: {size:,} –±–∞–π—Ç")
    
    print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ë–î: {total_db_size:,} –±–∞–π—Ç")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    test_docs_dir = 'test_documents'
    if os.path.exists(test_docs_dir):
        files = os.listdir(test_docs_dir)
        total_docs_size = 0
        for file in files:
            size = os.path.getsize(os.path.join(test_docs_dir, file))
            total_docs_size += size
        print(f"üìö –¢–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {len(files)} —Ñ–∞–π–ª–æ–≤, {total_docs_size:,} –±–∞–π—Ç")
    
    print(f"üíæ –û–±—â–∏–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö: {total_db_size + total_docs_size:,} –±–∞–π—Ç")

if __name__ == "__main__":
    print("ü§ñ RUBIN AI - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø")
    print("=" * 50)
    
    show_system_info()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    if start_rubin_final():
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üéâ Rubin AI –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª–Ω–æ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π!")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        sys.exit(1)