#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
"""

import sqlite3
import re
from typing import List, Dict, Tuple, Set
from datetime import datetime

class EnhancedSearchWithVocabulary:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ª–æ–≤–∞—Ä—è"""
    
    def __init__(self, db_path: str = "rubin_ai_v2.db"):
        self.db_path = db_path
        self.connection = None
        self.connect_database()
    
    def connect_database(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.connection = sqlite3.connect(self.db_path)
            self.connection.execute("PRAGMA foreign_keys = ON")
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise
    
    def get_synonyms(self, term: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞"""
        try:
            cursor = self.connection.cursor()
            
            # –ò—â–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã –≤ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
            cursor.execute("""
                SELECT DISTINCT synonym FROM technical_synonyms 
                WHERE main_term = ? OR synonym = ?
                UNION
                SELECT DISTINCT synonym FROM synonyms 
                WHERE term = ? OR synonym = ?
            """, (term, term, term, term))
            
            synonyms = [row[0] for row in cursor.fetchall()]
            return synonyms
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤: {e}")
            return []
    
    def expand_query_with_synonyms(self, query: str) -> Dict[str, List[str]]:
        """–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏"""
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª–æ–≤–∞
            words = re.findall(r'\b\w+\b', query.lower())
            
            expanded_terms = {}
            
            for word in words:
                if len(word) > 2:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                    synonyms = self.get_synonyms(word)
                    if synonyms:
                        expanded_terms[word] = synonyms
            
            return expanded_terms
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {}
    
    def search_documents_with_synonyms(self, query: str, limit: int = 10) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏–Ω–æ–Ω–∏–º–æ–≤"""
        try:
            cursor = self.connection.cursor()
            
            # –†–∞—Å—à–∏—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
            expanded_terms = self.expand_query_with_synonyms(query)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
            search_terms = [query]
            for term, synonyms in expanded_terms.items():
                search_terms.extend(synonyms)
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            search_terms = list(set(search_terms))
            
            # –°–æ–∑–¥–∞–µ–º SQL –∑–∞–ø—Ä–æ—Å —Å OR —É—Å–ª–æ–≤–∏—è–º–∏
            placeholders = ' OR '.join(['content LIKE ?' for _ in search_terms])
            sql_query = f"""
                SELECT DISTINCT 
                    id, file_name, content, category, tags, difficulty_level,
                    CASE 
                        WHEN content LIKE ? THEN 3
                        WHEN content LIKE ? THEN 2
                        ELSE 1
                    END as relevance_score
                FROM documents 
                WHERE {placeholders}
                ORDER BY relevance_score DESC, id DESC
                LIMIT ?
            """
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params = []
            for term in search_terms:
                params.append(f'%{term}%')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            params.append(f'%{query}%')
            params.append(f'%{query}%')
            params.append(limit)
            
            cursor.execute(sql_query, params)
            results = cursor.fetchall()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            formatted_results = []
            for row in results:
                formatted_results.append({
                    'id': row[0],
                    'file_name': row[1],
                    'content': row[2][:500] + '...' if len(row[2]) > 500 else row[2],
                    'category': row[3],
                    'tags': row[4],
                    'difficulty_level': row[5],
                    'relevance_score': row[6],
                    'matched_terms': self.find_matched_terms(row[2], search_terms)
                })
            
            return formatted_results
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            return []
    
    def find_matched_terms(self, content: str, search_terms: List[str]) -> List[str]:
        """–ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–≤—à–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ"""
        matched = []
        content_lower = content.lower()
        
        for term in search_terms:
            if term.lower() in content_lower:
                matched.append(term)
        
        return matched
    
    def get_category_suggestions(self, query: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        try:
            cursor = self.connection.cursor()
            
            # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º
            cursor.execute("""
                SELECT DISTINCT category, COUNT(*) as count
                FROM technical_synonyms 
                WHERE main_term LIKE ? OR synonym LIKE ?
                GROUP BY category
                ORDER BY count DESC
                LIMIT 5
            """, (f'%{query}%', f'%{query}%'))
            
            categories = [row[0] for row in cursor.fetchall()]
            return categories
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            return []
    
    def get_related_terms(self, term: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤"""
        try:
            cursor = self.connection.cursor()
            
            # –ò—â–µ–º —Ç–µ—Ä–º–∏–Ω—ã –≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            cursor.execute("""
                SELECT DISTINCT main_term
                FROM technical_synonyms 
                WHERE category = (
                    SELECT category FROM technical_synonyms 
                    WHERE main_term = ? OR synonym = ? 
                    LIMIT 1
                )
                AND main_term != ?
                LIMIT 10
            """, (term, term, term))
            
            related = [row[0] for row in cursor.fetchall()]
            return related
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤: {e}")
            return []
    
    def analyze_query_complexity(self, query: str) -> Dict[str, any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            words = re.findall(r'\b\w+\b', query.lower())
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            expanded_terms = self.expand_query_with_synonyms(query)
            
            analysis = {
                'word_count': len(words),
                'unique_terms': len(set(words)),
                'synonym_coverage': len(expanded_terms),
                'total_synonyms': sum(len(syns) for syns in expanded_terms.values()),
                'complexity_score': 0,
                'suggested_categories': self.get_category_suggestions(query)
            }
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            if analysis['word_count'] > 5:
                analysis['complexity_score'] += 2
            if analysis['synonym_coverage'] > 3:
                analysis['complexity_score'] += 2
            if analysis['total_synonyms'] > 10:
                analysis['complexity_score'] += 1
            
            return analysis
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {}
    
    def test_search_functionality(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞"""
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–û–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò")
        print("=" * 50)
        
        test_queries = [
            "–ü–ò–î —Ä–µ–≥—É–ª—è—Ç–æ—Ä",
            "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞",
            "—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞",
            "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ python",
            "–¥–∞—Ç—á–∏–∫–∏ –∏ —Å–µ–Ω—Å–æ—Ä—ã",
            "—Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        ]
        
        for query in test_queries:
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: '{query}'")
            
            # –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            analysis = self.analyze_query_complexity(query)
            print(f"  üìä –ê–Ω–∞–ª–∏–∑: {analysis['word_count']} —Å–ª–æ–≤, {analysis['synonym_coverage']} —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏")
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
            expanded = self.expand_query_with_synonyms(query)
            if expanded:
                print(f"  üîó –ù–∞–π–¥–µ–Ω—ã —Å–∏–Ω–æ–Ω–∏–º—ã:")
                for term, synonyms in expanded.items():
                    print(f"    ‚Ä¢ {term}: {', '.join(synonyms[:3])}")
            
            # –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            results = self.search_documents_with_synonyms(query, limit=3)
            print(f"  üìÑ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(results)}")
            
            for i, result in enumerate(results, 1):
                print(f"    {i}. {result['file_name']} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result['relevance_score']})")
                if result['matched_terms']:
                    print(f"       –°–æ–≤–ø–∞–¥–µ–Ω–∏—è: {', '.join(result['matched_terms'][:3])}")
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories = self.get_category_suggestions(query)
            if categories:
                print(f"  üìã –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories)}")
    
    def close_connection(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.connection:
            self.connection.close()
            print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–û–ò–°–ö–ê –° –°–õ–û–í–ê–†–ï–ú")
    print("=" * 60)
    
    searcher = EnhancedSearchWithVocabulary()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        searcher.test_search_functionality()
        
        print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        searcher.close_connection()

if __name__ == "__main__":
    main()






















