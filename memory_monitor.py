#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìä Memory Monitor - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏
"""

import psutil
import time
import json
from datetime import datetime

def get_memory_usage():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏"""
    memory = psutil.virtual_memory()
    return {
        "total": memory.total,
        "available": memory.available,
        "used": memory.used,
        "percentage": memory.percent,
        "free": memory.free
    }

def get_processes_memory():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ Python"""
    python_processes = []
    
    for proc in psutil.process_iter(['pid', 'name', 'memory_info', 'cmdline']):
        try:
            if proc.info['name'] and 'python' in proc.info['name'].lower():
                memory_info = proc.info['memory_info']
                cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
                
                python_processes.append({
                    "pid": proc.info['pid'],
                    "name": proc.info['name'],
                    "memory_rss": memory_info.rss,  # Resident Set Size
                    "memory_vms": memory_info.vms,  # Virtual Memory Size
                    "memory_percent": proc.memory_percent(),
                    "cmdline": cmdline
                })
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    
    return python_processes

def monitor_memory():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    print("üìä Memory Monitor –∑–∞–ø—É—â–µ–Ω")
    print("=" * 60)
    
    while True:
        try:
            # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
            memory = get_memory_usage()
            processes = get_processes_memory()
            
            print(f"\nüïê {datetime.now().strftime('%H:%M:%S')}")
            print(f"üíæ –û–±—â–∞—è –ø–∞–º—è—Ç—å: {memory['used'] // (1024**3):.1f}GB / {memory['total'] // (1024**3):.1f}GB ({memory['percentage']:.1f}%)")
            print(f"üÜì –î–æ—Å—Ç—É–ø–Ω–æ: {memory['available'] // (1024**3):.1f}GB")
            
            if memory['percentage'] > 80:
                print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 80%!")
            
            # –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –ø–∞–º—è—Ç–∏
            processes.sort(key=lambda x: x['memory_rss'], reverse=True)
            print(f"\nüêç Python –ø—Ä–æ—Ü–µ—Å—Å—ã (—Ç–æ–ø-5):")
            for i, proc in enumerate(processes[:5]):
                memory_mb = proc['memory_rss'] // (1024**2)
                print(f"  {i+1}. PID {proc['pid']}: {memory_mb}MB - {proc['cmdline'][:50]}...")
            
            time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            
        except KeyboardInterrupt:
            print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            time.sleep(5)

if __name__ == '__main__':
    monitor_memory()








