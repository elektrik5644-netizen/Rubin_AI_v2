#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ Rubin AI
"""

import requests
import json
import time

def test_enhanced_server():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    server_url = "http://localhost:8083"
    
    print("üß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ì–û –°–ï–†–í–ï–†–ê RUBIN AI")
    print("="*50)
    
    # –¢–µ—Å—Ç 1: Health check
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint...")
    try:
        response = requests.get(f"{server_url}/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('message', 'OK')}")
            if 'database' in data:
                print(f"   üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {data['database']['messages']} —Å–æ–æ–±—â–µ–Ω–∏–π, {data['database']['documents']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        else:
            print(f"   ‚ùå HTTP {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 2: Chat
    print("\n2. –¢–µ—Å—Ç —á–∞—Ç–∞...")
    try:
        response = requests.post(f"{server_url}/api/chat", 
                               json={"message": "–ü—Ä–∏–≤–µ—Ç, Enhanced Rubin!"}, 
                               timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {data.get('response', '')[:50]}...")
            print(f"   üìù Message ID: {data.get('message_id', 'N/A')}")
        else:
            print(f"   ‚ùå HTTP {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
    print("\n3. –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞...")
    try:
        test_code = "def hello():\n    print('Hello, World!')"
        response = requests.post(f"{server_url}/api/code/analyze", 
                               json={"code": test_code, "language": "python"}, 
                               timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
            print(f"   üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {data.get('quality_score', 'N/A')}")
            print(f"   üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(data.get('issues', []))}")
            print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(data.get('recommendations', []))}")
        else:
            print(f"   ‚ùå HTTP {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 4: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    print("\n4. –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    try:
        test_content = "–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Enhanced Rubin AI"
        response = requests.post(f"{server_url}/api/documents/upload-content", 
                               json={
                                   "filename": "test_document.txt",
                                   "content": test_content,
                                   "category": "test",
                                   "tags": ["test", "enhanced"]
                               }, 
                               timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {data.get('message', 'OK')}")
            print(f"   üìÑ Document ID: {data.get('document_id', 'N/A')}")
            print(f"   üìè –†–∞–∑–º–µ—Ä: {data.get('size', 'N/A')} –±–∞–π—Ç")
        else:
            print(f"   ‚ùå HTTP {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    print("\n5. –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    try:
        response = requests.get(f"{server_url}/api/documents/stats", timeout=5)
        if response.status_code == 200:
            data = response.json()
            stats = data.get('statistics', {})
            print(f"   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
            print(f"   üìä –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {stats.get('total_documents', 'N/A')}")
            print(f"   üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {stats.get('total_size_mb', 'N/A')} MB")
            print(f"   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {stats.get('categories', {})}")
        else:
            print(f"   ‚ùå HTTP {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 6: –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n6. –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    try:
        response = requests.get(f"{server_url}/api/system/stats", timeout=5)
        if response.status_code == 200:
            data = response.json()
            stats = data.get('system_stats', {})
            print(f"   ‚úÖ –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
            print(f"   üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('messages', {}).get('total', 'N/A')}")
            print(f"   ‚è∞ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {stats.get('messages', {}).get('last_hour', 'N/A')}")
            print(f"   üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {stats.get('documents', {}).get('total', 'N/A')}")
        else:
            print(f"   ‚ùå HTTP {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n" + "="*50)
    print("üéâ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")

if __name__ == "__main__":
    test_enhanced_server()
