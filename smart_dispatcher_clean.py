#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
"""

from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import requests
import logging
import os
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
CORS(app)

# –ò–º–ø–æ—Ä—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–∏–≤
try:
    from directives_manager import check_and_apply_directives, process_directives_command
    DIRECTIVES_AVAILABLE = True
except ImportError:
    DIRECTIVES_AVAILABLE = False

# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
CONVERSATION_HISTORY = {
    "sessions": {},
    "global_context": {
        "last_topics": [],
        "frequent_categories": {},
        "user_preferences": {}
    }
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
SERVERS = {
    'general': {
        'port': 8085,
        'keywords': ['–æ–±—â–µ–µ', '–ø–æ–º–æ—â—å', '—Å–ø—Ä–∞–≤–∫–∞', '—á—Ç–æ', '–∫–∞–∫', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–∫—Ç–æ']
    },
    'mathematics': {
        'port': 8086,
        'keywords': ['–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–º–∞—Ç–µ–º', '—á–∏—Å–ª–æ', '—á–∏—Å–ª–∞', '—Å—á–∏—Ç–∞—Ç—å', '–≤—ã—á–∏—Å–ª–∏—Ç—å', '—Ñ–æ—Ä–º—É–ª–∞', '—É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '–∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '–∞–ª–≥–µ–±—Ä–∞', '–≥–µ–æ–º–µ—Ç—Ä–∏—è', '—Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è', '–ª–æ–≥–∞—Ä–∏—Ñ–º', '–∏–Ω—Ç–µ–≥—Ä–∞–ª', '–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è', '—Ñ—É–Ω–∫—Ü–∏—è', '–≥—Ä–∞—Ñ–∏–∫', '–≥—Ä–∞—Ñ–∏–∫–∏', '–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π', '–≤—ã—á–∏—Å–ª–µ–Ω–∏—è', '—Ä–∞—Å—á–µ—Ç', '—Ä–∞—Å—á–µ—Ç—ã']
    },
    'electrical': {
        'port': 8087,
        'keywords': ['—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π', '—Ç–æ–∫', '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', '—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ', '—Ä–µ–∑–∏—Å—Ç–æ—Ä', '–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä', '–∫–∞—Ç—É—à–∫–∞', '–∏–Ω–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–µ–º–∫–æ—Å—Ç—å', '—Å—Ö–µ–º–∞', '—Å—Ö–µ–º—ã', '—Ü–µ–ø–∏', '–∑–∞–∫–æ–Ω', '–∫–∏—Ä—Ö–≥–æ—Ñ–∞', '–æ–º', '–≤–∞—Ç—Ç', '–≤–æ–ª—å—Ç', '–∞–º–ø–µ—Ä', '–º–æ—â–Ω–æ—Å—Ç—å', '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏', 'power factor', 'cos œÜ', '—Ä–µ–∞–∫—Ç–∏–≤–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å', '–º–æ–¥—É–±—É—Å', 'modbus', 'rtu', '–ø—Ä–æ—Ç–æ–∫–æ–ª']
    },
    'programming': {
        'port': 8088,
        'keywords': ['–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å', '–∫–æ–¥', '–∫–æ–¥–∏—Ç—å', 'python', 'java', 'c++', 'javascript', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–∞–ª–≥–æ—Ä–∏—Ç–º—ã', '–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ', '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è', '–ª–æ–≥–∏–∫–∞', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', 'if', 'endif', '—É—Å–ª–æ–≤–∏—è', '—Ü–∏–∫–ª—ã', '—Ñ—É–Ω–∫—Ü–∏–∏', '–º–µ—Ç–æ–¥—ã', '–∫–ª–∞—Å—Å—ã', '–æ–±—ä–µ–∫—Ç—ã', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–ø—Ä–æ–≥—Ä–∞–º–º—ã', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å']
    },
    'neuro': {
        'port': 8090,
        'keywords': ['–Ω–µ–π—Ä–æ–Ω–Ω–∞—è', '–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ', '—Å–µ—Ç—å', '—Å–µ—Ç–∏', '–º–∞—à–∏–Ω–Ω–æ–µ', '–æ–±—É—á–µ–Ω–∏–µ', '–æ–±—É—á–∞–µ—Ç—Å—è', '–æ–±—É—á–∞—Ç—å', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π', '–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', 'ai', 'ml', 'deep learning', '–Ω–µ–π—Ä–æ—Å–µ—Ç—å', '–Ω–µ–π—Ä–æ—Å–µ—Ç–∏']
    },
    'controllers': {
        'port': 9000,
        'keywords': ['–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã', '–ø–ª–∫', '–ü–õ–ö', 'plc', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å', 'scada', '—Å–∫–∞–¥–∞', '–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', '–¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏—è', 'pmac', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∞', 'pid', '—Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥', '–ø—Ä–∏–≤–æ–¥', '–¥–≤–∏–≥–∞—Ç–µ–ª—å', '–º–æ—Ç–æ—Ä']
    },
    'gai': {
        'port': 8104,
        'keywords': ['–≥–µ–Ω–µ—Ä–∞—Ü–∏—è', '–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å', '—Å–æ–∑–¥–∞—Ç—å', '—Å–æ–∑–¥–∞–Ω–∏–µ', '—Ç–µ–∫—Å—Ç', '–∫–æ–¥', '–¥–∏–∞–≥—Ä–∞–º–º–∞', '–¥–∏–∞–≥—Ä–∞–º–º—ã', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', '–∫–æ–Ω—Ç–µ–Ω—Ç', '–∫–æ–Ω—Ç–µ–Ω—Ç–∞']
    }
}

def get_session_id():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç ID —Å–µ—Å—Å–∏–∏"""
    session_id = request.headers.get('X-Session-ID')
    if not session_id:
        session_id = f"session_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    return session_id

def add_to_history(session_id, message, category, response):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"""
    if session_id not in CONVERSATION_HISTORY["sessions"]:
        CONVERSATION_HISTORY["sessions"][session_id] = {
            "messages": [],
            "last_category": None,
            "created_at": datetime.now().isoformat()
        }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    CONVERSATION_HISTORY["sessions"][session_id]["messages"].append({
        "timestamp": datetime.now().isoformat(),
        "message": message,
        "category": category,
        "response": response[:200] + "..." if len(response) > 200 else response
    })
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    CONVERSATION_HISTORY["sessions"][session_id]["last_category"] = category
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    CONVERSATION_HISTORY["global_context"]["last_topics"].append(category)
    if len(CONVERSATION_HISTORY["global_context"]["last_topics"]) > 10:
        CONVERSATION_HISTORY["global_context"]["last_topics"].pop(0)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if category in CONVERSATION_HISTORY["global_context"]["frequent_categories"]:
        CONVERSATION_HISTORY["global_context"]["frequent_categories"][category] += 1
    else:
        CONVERSATION_HISTORY["global_context"]["frequent_categories"][category] = 1

def get_context_for_message(session_id, message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    context_hint = ""
    
    if session_id in CONVERSATION_HISTORY["sessions"]:
        session_data = CONVERSATION_HISTORY["sessions"][session_id]
        last_category = session_data.get("last_category")
        recent_messages = session_data.get("messages", [])[-3:]
        
        if last_category:
            context_hint += f"[–ö–æ–Ω—Ç–µ–∫—Å—Ç: –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–µ–º–∞ - {last_category}] "
        
        if recent_messages:
            recent_topics = [msg["category"] for msg in recent_messages]
            context_hint += f"[–ù–µ–¥–∞–≤–Ω–∏–µ —Ç–µ–º—ã: {', '.join(recent_topics)}] "
    
    return context_hint

def categorize_message(message):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä"""
    message_lower = message.lower()
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    technical_categories = ['electrical', 'mathematics', 'programming', 'controllers', 'neuro', 'gai']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
    for category in technical_categories:
        if category in SERVERS:
            keywords = SERVERS[category]['keywords']
            for keyword in keywords:
                if keyword.lower() in message_lower:
                    logger.info(f"üîç –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}'")
                    return category
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for category, config in SERVERS.items():
        if category in technical_categories:
            continue  # –£–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        keywords = config['keywords']
        for keyword in keywords:
            if keyword.lower() in message_lower:
                logger.info(f"üîç –û–±—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}'")
                return category
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    logger.info("üîç –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º 'general'")
    return 'general'

def _is_greeting(message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º"""
    greetings = ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', '–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å']
    message_lower = message.lower().strip()
    return any(greeting in message_lower for greeting in greetings)

def _extract_text_from_result(result):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    if isinstance(result, str):
        return result
    elif isinstance(result, dict):
        if 'response' in result:
            response = result['response']
            if isinstance(response, dict) and 'explanation' in response:
                return response['explanation']
            elif isinstance(response, str):
                return response
        elif 'explanation' in result:
            return result['explanation']
        elif 'message' in result:
            return result['message']
        elif 'text' in result:
            return result['text']
        else:
            return str(result)
    elif isinstance(result, list) and len(result) > 0:
        return _extract_text_from_result(result[0])
    else:
        return str(result)

def forward_request(message, category):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–µ—Ä"""
    if category not in SERVERS:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        return {"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"}
    
    server_config = SERVERS[category]
    port = server_config['port']
    url = f"http://localhost:{port}"
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–µ—Å—Å–∏–∏
    session_id = get_session_id()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
    context_hint = get_context_for_message(session_id, message)
    contextual_message = f"{context_hint}{message}"
    
    logger.info(f"üì° –ù–∞–ø—Ä–∞–≤–ª—è—é –∫ –º–æ–¥—É–ª—é: {category} (–ø–æ—Ä—Ç {port})")
    
    try:
        if category == 'controllers':
            # –î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
            response = requests.post(
                f"{url}/api/controllers/topic/general",
                json={"message": contextual_message},
                timeout=30
            )
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
            response = requests.post(
                f"{url}/api/chat",
                json={"message": contextual_message},
                timeout=30
            )
        
        if response.status_code == 200:
            result = response.json()
            extracted_text = _extract_text_from_result(result)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            add_to_history(session_id, message, category, extracted_text)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–∏—Ä–µ–∫—Ç–∏–≤—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            if DIRECTIVES_AVAILABLE:
                context = {
                    "category": category,
                    "message": message,
                    "response": extracted_text,
                    "session_id": session_id
                }
                directive_results = check_and_apply_directives(context)
                if directive_results:
                    logger.info(f"üìã –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–∏—Ä–µ–∫—Ç–∏–≤—ã: {len(directive_results)}")
                    if isinstance(result, dict):
                        result["directives_applied"] = directive_results
            
            return extracted_text
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code} –æ—Ç {category}")
            return f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {category}: HTTP {response.status_code}"
    
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ {category}: {e}")
        return f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É {category}"
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ {category}: {e}")
        return f"–û—à–∏–±–∫–∞: {str(e)}"

@app.route('/api/chat', methods=['POST'])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —á–∞—Ç–∞"""
    try:
        data = request.get_json()
        message = data.get('message', '').strip()
        
        if not message:
            return jsonify({"error": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}), 400
        
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å: \"{message}\"")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–∏—Ä–µ–∫—Ç–∏–≤
        if DIRECTIVES_AVAILABLE and any(cmd in message.lower() for cmd in [
            '–ø—Ä–∏–º–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤—É', '—Å–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–∏–≤', '—É–¥–∞–ª–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤—É', 
            '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏—Ä–µ–∫—Ç–∏–≤', '–ø–æ–º–æ—â—å –ø–æ –¥–∏—Ä–µ–∫—Ç–∏–≤–∞–º'
        ]):
            user_id = data.get('user_id', 'default')
            directive_result = process_directives_command(message, user_id)
            return jsonify(directive_result)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = categorize_message(message)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        if _is_greeting(message):
            greeting_response = "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é, —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –ß–µ–º –∑–∞–Ω—è—Ç—å—Å—è?"
            add_to_history(get_session_id(), message, 'general', greeting_response)
            return jsonify({"response": greeting_response})
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        result = forward_request(message, category)
        
        return jsonify({"response": result})
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ chat(): {e}")
        return jsonify({"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500

@app.route('/api/health', methods=['GET'])
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Smart Dispatcher"""
    module_status = {}
    for name, config in SERVERS.items():
        try:
            response = requests.get(f"http://localhost:{config['port']}/api/health", timeout=5)
            module_status[name] = {
                'status': 'healthy' if response.status_code == 200 else 'unhealthy',
                'port': config['port'],
                'response_time': response.elapsed.total_seconds()
            }
        except Exception as e:
            module_status[name] = {
                'status': 'unreachable',
                'port': config['port'],
                'error': str(e)
            }
    
    unhealthy_count = sum(1 for status in module_status.values() if status['status'] != 'healthy')
    overall_status = 'healthy' if unhealthy_count == 0 else 'degraded' if unhealthy_count < len(SERVERS) else 'critical'
    
    return jsonify({
        'service': 'Smart Dispatcher',
        'status': overall_status,
        'timestamp': datetime.now().isoformat(),
        'version': '1.0',
        'modules': module_status,
        'total_modules': len(SERVERS),
        'healthy_modules': len(SERVERS) - unhealthy_count,
        'unhealthy_modules': unhealthy_count
    })

@app.route('/api/chat/history', methods=['GET'])
def get_history():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""
    session_id = request.args.get('session_id')
    if session_id and session_id in CONVERSATION_HISTORY["sessions"]:
        return jsonify({
            'success': True,
            'session_id': session_id,
            'history': CONVERSATION_HISTORY["sessions"][session_id]
        })
    else:
        return jsonify({
            'success': True,
            'sessions': list(CONVERSATION_HISTORY["sessions"].keys()),
            'global_context': CONVERSATION_HISTORY["global_context"]
        })

@app.route('/api/chat/context', methods=['GET'])
def get_context():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞"""
    session_id = request.args.get('session_id')
    if session_id:
        context_hint = get_context_for_message(session_id, "")
        return jsonify({
            'success': True,
            'session_id': session_id,
            'context': context_hint,
            'session_data': CONVERSATION_HISTORY["sessions"].get(session_id, {})
        })
    else:
        return jsonify({
            'success': True,
            'global_context': CONVERSATION_HISTORY["global_context"]
        })

@app.route('/api/status', methods=['GET'])
def status():
    """–°—Ç–∞—Ç—É—Å Smart Dispatcher"""
    return jsonify({
        'service': 'Smart Dispatcher',
        'status': 'online',
        'port': 8080,
        'version': '1.0',
        'modules': list(SERVERS.keys()),
        'directives_available': DIRECTIVES_AVAILABLE,
        'uptime': 'running',
        'requests_processed': 'active'
    })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ Smart Dispatcher...")
    print("üì° –ü–æ—Ä—Ç: 8080")
    print("üîó URL: http://localhost:8080")
    print("üìã –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    print("  - POST /api/chat - –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç")
    print("  - GET /api/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    print("  - GET /api/chat/history - –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤")
    print("  - GET /api/chat/context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞")
    print("=" * 50)
    
    app.run(host='0.0.0.0', port=8080, debug=False)






