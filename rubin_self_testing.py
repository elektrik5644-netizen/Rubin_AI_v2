#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Rubin AI
–ü–æ–∑–≤–æ–ª—è–µ—Ç Rubin AI —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
"""

import requests
import logging
import json
import time
from datetime import datetime
from typing import Dict, List, Optional, Any
import asyncio
import concurrent.futures

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class RubinSelfTesting:
    """–°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Rubin AI"""
    
    def __init__(self):
        self.servers = {
            'smart_dispatcher': {'port': 8080, 'name': 'Smart Dispatcher', 'endpoint': '/api/health'},
            'general_api': {'port': 8085, 'name': 'General API', 'endpoint': '/api/health'},
            'math_server': {'port': 8086, 'name': 'Math Server', 'endpoint': '/health'},
            'electrical_server': {'port': 8088, 'name': 'Electrical Server', 'endpoint': '/api/electrical/status'},
            'programming_server': {'port': 8089, 'name': 'Programming Server', 'endpoint': '/health'},
            'radiomechanics_server': {'port': 8090, 'name': 'Radiomechanics Server', 'endpoint': '/api/radiomechanics/status'},
            'controllers_server': {'port': 9000, 'name': 'Controllers Server', 'endpoint': '/api/controllers/topic/general'},
            'neural_network': {'port': 8091, 'name': 'Neural Network', 'endpoint': '/api/health'},
            'learning_system': {'port': 8092, 'name': 'Learning System', 'endpoint': '/api/learning/health'},
            'pytorch_system': {'port': 8093, 'name': 'PyTorch System', 'endpoint': '/api/health'},
            'knowledge_base': {'port': 8094, 'name': 'Knowledge Base', 'endpoint': '/api/knowledge/health'},
            'thinking_system': {'port': 8095, 'name': 'Thinking System', 'endpoint': '/api/thinking/health'},
            'cnn_system': {'port': 8096, 'name': 'CNN System', 'endpoint': '/api/cnn/health'},
            'rnn_system': {'port': 8097, 'name': 'RNN System', 'endpoint': '/api/rnn/health'},
            'gan_system': {'port': 8098, 'name': 'GAN System', 'endpoint': '/api/gan/health'},
            'argumentation_system': {'port': 8100, 'name': 'Argumentation System', 'endpoint': '/api/argumentation/health'},
            'thoughts_communicator': {'port': 8101, 'name': 'Thoughts Communicator', 'endpoint': '/api/thoughts/health'}
        }
        
        self.capabilities = {
            'smart_dispatcher': [
                "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤",
                "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏",
                "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–∞–º",
                "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å —à–∞–±–ª–æ–Ω–∞–º–∏"
            ],
            'general_api': [
                "–û—Ç–≤–µ—Ç—ã –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                "–ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            ],
            'math_server': [
                "–†–µ—à–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á",
                "–ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
                "–ê–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è",
                "–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã",
                "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"
            ],
            'electrical_server': [
                "–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã",
                "–ó–∞–∫–æ–Ω –û–º–∞ –∏ –ö–∏—Ä—Ö–≥–æ—Ñ–∞",
                "–ê–Ω–∞–ª–∏–∑ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ø–µ–π",
                "–ü–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤—ã–µ –ø—Ä–∏–±–æ—Ä—ã",
                "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã"
            ],
            'programming_server': [
                "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —è–∑—ã–∫–∞—Ö",
                "–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö",
                "–ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                "–û—Ç–ª–∞–¥–∫–∞ –∫–æ–¥–∞",
                "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º"
            ],
            'radiomechanics_server': [
                "–†–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã",
                "–ê–Ω—Ç–µ–Ω–Ω—ã –∏ —Ä–∞–¥–∏–æ–≤–æ–ª–Ω—ã",
                "–ú–æ–¥—É–ª—è—Ü–∏—è –∏ –¥–µ–º–æ–¥—É–ª—è—Ü–∏—è",
                "–†–∞–¥–∏–æ—Å–≤—è–∑—å",
                "–≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –ø–æ–ª—è"
            ],
            'controllers_server': [
                "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
                "–ü–õ–ö –∏ –ß–ü–£",
                "–°–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                "PID —Ä–µ–≥—É–ª—è—Ç–æ—Ä—ã",
                "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–µ—Ç–∏"
            ],
            'neural_network': [
                "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏",
                "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
                "–ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
                "–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
            ],
            'learning_system': [
                "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
                "–°–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ",
                "–£–ª—É—á—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞",
                "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤"
            ],
            'pytorch_system': [
                "PyTorch —Ñ—Ä–µ–π–º–≤–æ—Ä–∫",
                "–¢–µ–Ω–∑–æ—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
                "–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫",
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ"
            ],
            'knowledge_base': [
                "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π",
                "–•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                "–ü–æ–∏—Å–∫ –ø–æ –∑–Ω–∞–Ω–∏—è–º",
                "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
            ],
            'thinking_system': [
                "–°–∏—Å—Ç–µ–º–∞ –º—ã—à–ª–µ–Ω–∏—è",
                "–ê–±–¥—É–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ",
                "–ù–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
                "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á"
            ],
            'cnn_system': [
                "–°–≤–µ—Ä—Ç–æ—á–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏",
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤",
                "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ"
            ],
            'rnn_system': [
                "–†–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏",
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π",
                "LSTM –∏ GRU",
                "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã"
            ],
            'gan_system': [
                "–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ-—Å–æ—Å—Ç—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ç–∏",
                "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
                "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–∑—Ü—ã",
                "–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"
            ],
            'argumentation_system': [
                "–°–∏—Å—Ç–µ–º–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
                "–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –ø—Ä–∞–≤–æ—Ç—ã",
                "–ü—Ä–∏–∑–Ω–∞–Ω–∏–µ –æ—à–∏–±–æ–∫",
                "–õ–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è"
            ],
            'thoughts_communicator': [
                "–û–±—â–µ–Ω–∏–µ –æ –º—ã—Å–ª—è—Ö",
                "–û–±–º–µ–Ω –∏–¥–µ—è–º–∏",
                "–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã",
                "–ü—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è"
            ]
        }
        
        self.test_questions = {
            'math_server': "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 2x + 5 = 13",
            'electrical_server': "–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–∫–æ–Ω –û–º–∞?",
            'programming_server': "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞",
            'radiomechanics_server': "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω—Ç–µ–Ω–Ω–∞?",
            'controllers_server': "–ß—Ç–æ —Ç–∞–∫–æ–µ –ü–õ–ö?",
            'neural_network': "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏",
            'thinking_system': "–ù–∞–π–¥–∏ –Ω–µ–æ—á–µ–≤–∏–¥–Ω—É—é —Å–≤—è–∑—å –º–µ–∂–¥—É –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π –∏ –º—É–∑—ã–∫–æ–π",
            'argumentation_system': "–î–æ–∫–∞–∂–∏, —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ"
        }
        
        logger.info("üß™ –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Rubin AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def run_full_self_test(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Rubin AI...")
        
        start_time = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        server_status = self._check_all_servers()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        functionality_tests = self._test_functionality()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
        capabilities_report = self._generate_capabilities_report()
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        report = {
            "timestamp": start_time.isoformat(),
            "duration_seconds": duration,
            "server_status": server_status,
            "functionality_tests": functionality_tests,
            "capabilities_report": capabilities_report,
            "summary": self._generate_summary(server_status, functionality_tests)
        }
        
        logger.info(f"‚úÖ –°–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
        return report
    
    def _check_all_servers(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        server_status = {}
        
        for server_id, server_info in self.servers.items():
            try:
                health_url = f"http://localhost:{server_info['port']}{server_info['endpoint']}"
                response = requests.get(health_url, timeout=3)
                
                if response.status_code == 200:
                    server_status[server_id] = {
                        "status": "online",
                        "port": server_info['port'],
                        "name": server_info['name'],
                        "response_time": response.elapsed.total_seconds(),
                        "health_data": response.json() if response.headers.get('content-type', '').startswith('application/json') else None
                    }
                    logger.info(f"‚úÖ {server_info['name']} (–ø–æ—Ä—Ç {server_info['port']}) - –û–ù–õ–ê–ô–ù")
                else:
                    server_status[server_id] = {
                        "status": "error",
                        "port": server_info['port'],
                        "name": server_info['name'],
                        "error": f"HTTP {response.status_code}",
                        "response_time": response.elapsed.total_seconds()
                    }
                    logger.warning(f"‚ùå {server_info['name']} (–ø–æ—Ä—Ç {server_info['port']}) - –û–®–ò–ë–ö–ê HTTP {response.status_code}")
                    
            except requests.exceptions.ConnectionError:
                server_status[server_id] = {
                    "status": "offline",
                    "port": server_info['port'],
                    "name": server_info['name'],
                    "error": "Connection refused"
                }
                logger.warning(f"‚ùå {server_info['name']} (–ø–æ—Ä—Ç {server_info['port']}) - –ù–ï–î–û–°–¢–£–ü–ï–ù")
                
            except requests.exceptions.Timeout:
                server_status[server_id] = {
                    "status": "timeout",
                    "port": server_info['port'],
                    "name": server_info['name'],
                    "error": "Request timeout"
                }
                logger.warning(f"‚è∞ {server_info['name']} (–ø–æ—Ä—Ç {server_info['port']}) - –¢–ê–ô–ú–ê–£–¢")
                
            except Exception as e:
                server_status[server_id] = {
                    "status": "error",
                    "port": server_info['port'],
                    "name": server_info['name'],
                    "error": str(e)
                }
                logger.error(f"üí• {server_info['name']} (–ø–æ—Ä—Ç {server_info['port']}) - –û–®–ò–ë–ö–ê: {e}")
        
        return server_status
    
    def _test_functionality(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        functionality_tests = {}
        
        for server_id, test_question in self.test_questions.items():
            if server_id not in self.servers:
                continue
                
            server_info = self.servers[server_id]
            
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if server_id == 'math_server':
                    test_url = f"http://localhost:{server_info['port']}/api/solve"
                elif server_id in ['electrical_server', 'programming_server', 'radiomechanics_server', 'controllers_server']:
                    test_url = f"http://localhost:{server_info['port']}/api/chat"
                elif server_id == 'neural_network':
                    test_url = f"http://localhost:{server_info['port']}/api/neural/process"
                elif server_id == 'thinking_system':
                    test_url = f"http://localhost:{server_info['port']}/api/thinking/analyze"
                elif server_id == 'argumentation_system':
                    test_url = f"http://localhost:{server_info['port']}/api/argumentation/create_argument"
                else:
                    test_url = f"http://localhost:{server_info['port']}/api/test"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                response = requests.post(
                    test_url,
                    json={"message": test_question},
                    timeout=10
                )
                
                if response.status_code == 200:
                    functionality_tests[server_id] = {
                        "status": "working",
                        "test_question": test_question,
                        "response_time": response.elapsed.total_seconds(),
                        "response_preview": str(response.json())[:200] + "..." if len(str(response.json())) > 200 else str(response.json())
                    }
                    logger.info(f"‚úÖ {server_info['name']} - –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ –†–ê–ë–û–¢–ê–ï–¢")
                else:
                    functionality_tests[server_id] = {
                        "status": "error",
                        "test_question": test_question,
                        "error": f"HTTP {response.status_code}",
                        "response_time": response.elapsed.total_seconds()
                    }
                    logger.warning(f"‚ùå {server_info['name']} - –û–®–ò–ë–ö–ê –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò HTTP {response.status_code}")
                    
            except requests.exceptions.ConnectionError:
                functionality_tests[server_id] = {
                    "status": "offline",
                    "test_question": test_question,
                    "error": "Server offline"
                }
                logger.warning(f"‚ùå {server_info['name']} - –°–ï–†–í–ï–† –ù–ï–î–û–°–¢–£–ü–ï–ù")
                
            except Exception as e:
                functionality_tests[server_id] = {
                    "status": "error",
                    "test_question": test_question,
                    "error": str(e)
                }
                logger.error(f"üí• {server_info['name']} - –û–®–ò–ë–ö–ê: {e}")
        
        return functionality_tests
    
    def _generate_capabilities_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö"""
        logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö...")
        
        total_capabilities = 0
        capabilities_by_category = {}
        
        for server_id, capabilities_list in self.capabilities.items():
            capabilities_by_category[server_id] = {
                "name": self.servers.get(server_id, {}).get('name', server_id),
                "capabilities": capabilities_list,
                "count": len(capabilities_list)
            }
            total_capabilities += len(capabilities_list)
        
        return {
            "total_capabilities": total_capabilities,
            "capabilities_by_category": capabilities_by_category,
            "categories_count": len(self.capabilities)
        }
    
    def _generate_summary(self, server_status: Dict, functionality_tests: Dict) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_servers = len(server_status)
        online_servers = len([s for s in server_status.values() if s['status'] == 'online'])
        working_servers = len([s for s in functionality_tests.values() if s['status'] == 'working'])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        main_capabilities = []
        if server_status.get('smart_dispatcher', {}).get('status') == 'online':
            main_capabilities.append("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è")
        if server_status.get('math_server', {}).get('status') == 'online':
            main_capabilities.append("–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")
        if server_status.get('electrical_server', {}).get('status') == 'online':
            main_capabilities.append("–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã")
        if server_status.get('programming_server', {}).get('status') == 'online':
            main_capabilities.append("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
        if server_status.get('neural_network', {}).get('status') == 'online':
            main_capabilities.append("–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏")
        if server_status.get('thinking_system', {}).get('status') == 'online':
            main_capabilities.append("–°–∏—Å—Ç–µ–º–∞ –º—ã—à–ª–µ–Ω–∏—è")
        if server_status.get('argumentation_system', {}).get('status') == 'online':
            main_capabilities.append("–ê—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ —Å–ø–æ—Ä—ã")
        
        return {
            "total_servers": total_servers,
            "online_servers": online_servers,
            "working_servers": working_servers,
            "availability_percentage": (online_servers / total_servers * 100) if total_servers > 0 else 0,
            "functionality_percentage": (working_servers / total_servers * 100) if total_servers > 0 else 0,
            "main_capabilities": main_capabilities,
            "status": "excellent" if online_servers >= total_servers * 0.8 else "good" if online_servers >= total_servers * 0.6 else "needs_attention"
        }
    
    def generate_self_description(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Rubin AI"""
        
        report = self.run_full_self_test()
        summary = report['summary']
        
        description = f"""
ü§ñ **RUBIN AI - –°–ò–°–¢–ï–ú–ê –ò–°–ö–£–°–°–¢–í–ï–ù–ù–û–ì–û –ò–ù–¢–ï–õ–õ–ï–ö–¢–ê**

**üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**
‚Ä¢ –í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: {summary['total_servers']}
‚Ä¢ –û–Ω–ª–∞–π–Ω –º–æ–¥—É–ª–µ–π: {summary['online_servers']}
‚Ä¢ –†–∞–±–æ—á–∏—Ö –º–æ–¥—É–ª–µ–π: {summary['working_servers']}
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {summary['availability_percentage']:.1f}%
‚Ä¢ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {summary['functionality_percentage']:.1f}%

**üöÄ –û–°–ù–û–í–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:**
"""
        
        for capability in summary['main_capabilities']:
            description += f"‚Ä¢ {capability}\n"
        
        description += f"""
**üß† –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ú–û–î–£–õ–ò:**

**üìê –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞:**
‚Ä¢ –†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–π –∏ –∑–∞–¥–∞—á
‚Ä¢ –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑

**‚ö° –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞:**
‚Ä¢ –ó–∞–∫–æ–Ω –û–º–∞ –∏ –ö–∏—Ä—Ö–≥–æ—Ñ–∞
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ø–µ–π
‚Ä¢ –ü–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤—ã–µ –ø—Ä–∏–±–æ—Ä—ã
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã

**üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ –†–∞–∑–ª–∏—á–Ω—ã–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –û—Ç–ª–∞–¥–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è

**üì° –†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞:**
‚Ä¢ –†–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã
‚Ä¢ –ê–Ω—Ç–µ–Ω–Ω—ã –∏ —Ä–∞–¥–∏–æ–≤–æ–ª–Ω—ã
‚Ä¢ –ú–æ–¥—É–ª—è—Ü–∏—è –∏ –ø–µ—Ä–µ–¥–∞—á–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –ø–æ–ª—è

**üè≠ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:**
‚Ä¢ –ü–õ–ö –∏ –ß–ü–£ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –°–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ PID —Ä–µ–≥—É–ª—è—Ç–æ—Ä—ã
‚Ä¢ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–µ—Ç–∏

**üß† –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç:**
‚Ä¢ –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ (CNN, RNN, GAN)
‚Ä¢ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
‚Ä¢ –ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö

**üí≠ –°–∏—Å—Ç–µ–º–∞ –º—ã—à–ª–µ–Ω–∏—è:**
‚Ä¢ –ê–±–¥—É–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ
‚Ä¢ –ù–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á
‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ–ø—ã—Ç–µ

**‚öñÔ∏è –ê—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è:**
‚Ä¢ –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –ø—Ä–∞–≤–æ—Ç—ã
‚Ä¢ –ü—Ä–∏–∑–Ω–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
‚Ä¢ –õ–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–æ—Ä—ã

**üéØ –û–°–û–ë–ï–ù–ù–û–°–¢–ò:**
‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
‚Ä¢ –°–∞–º–æ–∞–Ω–∞–ª–∏–∑ –∏ —É–ª—É—á—à–µ–Ω–∏–µ
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π

**üìà –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´: {summary['status'].upper()}**

–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –¥–æ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞! üöÄ
"""
        
        return description

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
_self_testing_system = None

def get_self_testing_system():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global _self_testing_system
    if _self_testing_system is None:
        _self_testing_system = RubinSelfTesting()
    return _self_testing_system

if __name__ == "__main__":
    print("üß™ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –°–ê–ú–û–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø RUBIN AI")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    self_testing = get_self_testing_system()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    print("\nü§ñ –û–ü–ò–°–ê–ù–ò–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô RUBIN AI:")
    print(self_testing.generate_self_description())
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
