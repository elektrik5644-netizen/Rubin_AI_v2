"""
Rubin AI v2.0 - –õ–æ–∫–∞–ª—å–Ω—ã–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä
–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

from typing import Dict, List, Optional, Any
import logging
import re
from .base_provider import BaseProvider, TaskType, ResponseFormat

class LocalLLMProvider(BaseProvider):
    """–õ–æ–∫–∞–ª—å–Ω—ã–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    
    def __init__(self):
        super().__init__("local_llm", priority=1)
        self.logger = logging.getLogger("rubin_ai.local_llm")
        
    def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        try:
            self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...")
            self.is_available = True
            self.logger.info("–õ–æ–∫–∞–ª—å–Ω—ã–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            self.log_error(e)
            return False
    
    def get_response(self, message: str, context: Optional[Dict] = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ LLM"""
        if not self.is_available:
            return ResponseFormat.create_error_response(
                "–õ–æ–∫–∞–ª—å–Ω—ã–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                self.name,
                context.get('task_type', TaskType.GENERAL_CHAT) if context else TaskType.GENERAL_CHAT
            )
        
        try:
            task_type = context.get('task_type', TaskType.GENERAL_CHAT) if context else TaskType.GENERAL_CHAT
            documents = context.get('documents', []) if context else []
            
            thinking_process = []
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            if documents:
                response_content = self._generate_response_from_documents(message, documents, thinking_process)
            else:
                response_content = self._generate_fallback_response(message, thinking_process)
            
            return ResponseFormat.create_response(
                content=response_content,
                provider=self.name,
                task_type=task_type,
                metadata={'documents_used': len(documents), 'method': 'local_generation'},
                thinking_process=thinking_process
            )
            
        except Exception as e:
            self.log_error(e)
            return ResponseFormat.create_error_response(
                str(e),
                self.name,
                context.get('task_type', TaskType.GENERAL_CHAT) if context else TaskType.GENERAL_CHAT
            )
    
    def _generate_response_from_documents(self, message: str, documents: List[Dict], thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        thinking_process.append("üìö –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        relevant_info = []
        for doc in documents[:5]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            title = doc.get('file_name', doc.get('title', '–î–æ–∫—É–º–µ–Ω—Ç'))
            content = doc.get('content_preview', doc.get('content', ''))
            
            if content:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                sentences = self._extract_relevant_sentences(content, message)
                if sentences:
                    relevant_info.append({
                        'title': title,
                        'sentences': sentences
                    })
        
        thinking_process.append(f"üìñ –ù–∞–π–¥–µ–Ω–æ {len(relevant_info)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        if not relevant_info:
            return self._generate_fallback_response(message, thinking_process)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
        message_lower = message.lower()
        
        # –ú–ï–¢–ê-–í–û–ü–†–û–°–´ –û –ü–û–ù–ò–ú–ê–ù–ò–ò –ò –ú–´–®–õ–ï–ù–ò–ò (–¥–æ–±–∞–≤–ª—è–µ–º –ü–ï–†–ï–î —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏)
        if any(phrase in message_lower for phrase in [
            "–∫–∞–∫ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å", "–∫–∞–∫ —Ç—ã –º–µ–Ω—è –ø–æ–Ω–∏–º–∞–µ—à—å", 
            "–∫–∞–∫ —Ç—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å", "–∫–∞–∫ —Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å"
        ]):
            return self._generate_understanding_process_response(thinking_process)
        
        if any(phrase in message_lower for phrase in [
            "–∫–∞–∫ —Ç—ã —Ä–∞–∑–º—ã—à–ª—è–µ—à—å", "–∫–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å",
            "–∫–∞–∫ —Ç—ã –º—ã—Å–ª–∏—à—å", "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–≤–æ–π –º–æ–∑–≥"
        ]):
            return self._generate_thinking_process_response(thinking_process)
        
        if any(phrase in message_lower for phrase in [
            "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞", "–∫–∞–∫ —Ç—ã –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —Ä–µ—à–µ–Ω–∏—è",
            "–∫–∞–∫ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å –æ—Ç–≤–µ—Ç", "–∫–∞–∫ —Ç—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å"
        ]):
            return self._generate_decision_process_response(thinking_process)
        
        # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        if any(word in message_lower for word in ['—ç–Ω–∫–æ–¥–µ—Ä', 'encoder', '–¥–∞—Ç—á–∏–∫', 'sensor']):
            return self._generate_encoder_response(relevant_info, thinking_process)
        elif any(word in message_lower for word in ['–ø–∏–¥', 'pid', '—Ä–µ–≥—É–ª—è—Ç–æ—Ä', 'controller']):
            return self._generate_pid_response(relevant_info, thinking_process)
        elif any(word in message_lower for word in ['–¥–∏–æ–¥', 'diode', '–ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫', 'semiconductor']):
            return self._generate_diode_response(relevant_info, thinking_process)
        elif any(word in message_lower for word in ['–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', 'controller', '–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π', 'industrial']):
            return self._generate_controller_response(relevant_info, thinking_process)
        elif any(word in message_lower for word in ['modbus', 'rtu', 'tcp', '–ø—Ä–æ—Ç–æ–∫–æ–ª', 'protocol', '—Å–≤—è–∑—å', 'communication']):
            return self._generate_protocol_response(relevant_info, thinking_process)
        elif any(word in message_lower for word in ['–∑–∞—â–∏—Ç', 'protection', '–∫–æ—Ä–æ—Ç–∫', 'short', '–∑–∞–º—ã–∫–∞–Ω–∏–µ', 'circuit', '–ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å', 'fuse', '–∞–≤—Ç–æ–º–∞—Ç', 'breaker', '–≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å', 'switch']):
            return self._generate_protection_response(relevant_info, thinking_process)
        elif any(word in message_lower for word in ['–∫–∏—Ä—Ö–≥–æ—Ñ', 'kirchhoff', '–∑–∞–∫–æ–Ω', 'law', '–æ–º', 'ohm', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫', 'electrical']):
            return self._generate_electrical_laws_response(relevant_info, thinking_process)
        elif any(word in message_lower for word in ['–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'safety', '–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å', 'reliability', '—ç–º—Å', 'emc']):
            return self._generate_safety_response(relevant_info, thinking_process)
        elif any(word in message_lower for word in ['—Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö', 'data gathering', '–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', 'monitoring']):
            return self._generate_data_gathering_response(relevant_info, thinking_process)
        elif any(word in message_lower for word in ['—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ', '–∑–∞–≥—Ä—É–∑–∫–∞', 'downloading', 'uploading', '–ø—Ä–æ–≥—Ä–∞–º–º', 'programs']):
            return self._generate_programming_response(relevant_info, thinking_process)
        elif any(word in message_lower for word in ['—Å–∏–º–∏—Å—Ç—Ä', '—Ç–∏—Ä–∏—Å—Ç–æ—Ä', 'thyristor', 'semiconductor', '–ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫']):
            return self._generate_semiconductor_response(relevant_info, thinking_process)
        elif any(word in message_lower for word in ['–∞–ª–≥–æ—Ä–∏—Ç–º', 'algorithm', 'python', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–Ω–≤–µ–π–µ—Ä', 'conveyor']):
            return self._generate_programming_algorithm_response(relevant_info, thinking_process)
        elif any(word in message_lower for word in ['–æ–æ–ø', 'oop', '–æ–±—ä–µ–∫—Ç–Ω–æ', '–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ', '–∫–ª–∞—Å—Å', 'class', '–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', 'inheritance', '–∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è', 'encapsulation']):
            return self._generate_oop_response(relevant_info, thinking_process)
        elif any(word in message_lower for word in ['–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏', 'power factor', 'cos œÜ', 'cos phi', '—Ä–µ–∞–∫—Ç–∏–≤–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å', 'reactive power']):
            return self._generate_power_factor_response(relevant_info, thinking_process)
        elif any(word in message_lower for word in ['—Å–∏–Ω—Ç–∞–∫—Å–∏—Å', 'syntax', '–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ', 'variables', '—Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö', 'data types']):
            return self._generate_syntax_response(relevant_info, thinking_process)
        elif any(word in message_lower for word in ['–æ—Ç–ª–∞–¥–∫–∞', 'debugging', '–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏', 'troubleshooting', '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', 'diagnostics']):
            return self._generate_debugging_response(relevant_info, thinking_process)
        elif any(word in message_lower for word in ['–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ', 'advanced', '—Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ', 'specific', '—Ñ—É–Ω–∫—Ü–∏–∏', 'functions']):
            return self._generate_advanced_functions_response(relevant_info, thinking_process)
        else:
            # –û–±—â–∏–π –æ—Ç–≤–µ—Ç
            return self._generate_general_technical_response(relevant_info, thinking_process)
    
    def _extract_relevant_sentences(self, content: str, query: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentences = re.split(r'[.!?]+', content)
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        query_words = [word.lower() for word in query.split() if len(word) > 2]
        
        relevant_sentences = []
        for sentence in sentences:
            sentence = sentence.strip()
            if len(sentence) < 10:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                continue
            
            sentence_lower = sentence.lower()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            if any(word in sentence_lower for word in query_words):
                relevant_sentences.append(sentence)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ
        if not relevant_sentences:
            relevant_sentences = [s.strip() for s in sentences[:3] if len(s.strip()) > 10]
        
        return relevant_sentences[:8]  # –ú–∞–∫—Å–∏–º—É–º 8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    
    def _generate_encoder_response(self, relevant_info: List[Dict], thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ–± —ç–Ω–∫–æ–¥–µ—Ä–∞—Ö"""
        thinking_process.append("üîç –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –æ–± —ç–Ω–∫–æ–¥–µ—Ä–∞—Ö...")
        
        response_parts = ["**–≠–Ω–∫–æ–¥–µ—Ä—ã –∏ –¥–∞—Ç—á–∏–∫–∏:**\n"]
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–Ω–∫–æ–¥–µ—Ä–∞—Ö
        response_parts.append("–≠–Ω–∫–æ–¥–µ—Ä - —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —É–≥–ª–æ–≤–æ–≥–æ –∏–ª–∏ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã:")
        response_parts.append("")
        response_parts.append("‚Ä¢ **–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —ç–Ω–∫–æ–¥–µ—Ä—ã** - –≤—ã–¥–∞—é—Ç –∏–º–ø—É–ª—å—Å—ã –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏")
        response_parts.append("‚Ä¢ **–ê–±—Å–æ–ª—é—Ç–Ω—ã–µ —ç–Ω–∫–æ–¥–µ—Ä—ã** - –≤—ã–¥–∞—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è")
        response_parts.append("‚Ä¢ **–û–ø—Ç–∏—á–µ—Å–∫–∏–µ —ç–Ω–∫–æ–¥–µ—Ä—ã** - –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–≤–µ—Ç–æ–¥–∏–æ–¥—ã –∏ —Ñ–æ—Ç–æ—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã")
        response_parts.append("‚Ä¢ **–ú–∞–≥–Ω–∏—Ç–Ω—ã–µ —ç–Ω–∫–æ–¥–µ—Ä—ã** - —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞–≥–Ω–∏—Ç–Ω–æ–≥–æ –ø–æ–ª—è")
        response_parts.append("‚Ä¢ **–†–µ–∑–æ–ª—å–≤–µ—Ä—ã** - –∏—Å–ø–æ–ª—å–∑—É—é—Ç —ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω—É—é –∏–Ω–¥—É–∫—Ü–∏—é")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if relevant_info:
            response_parts.append(f"\n**–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**")
            for info in relevant_info[:3]:
                response_parts.append(f"\nüìÑ **{info['title']}:**")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                useful_sentences = [s for s in info['sentences'][:4] if len(s.strip()) > 20 and not s.strip().startswith(';')]
                if useful_sentences:
                    response_parts.append(f"‚Ä¢ {useful_sentences[0]}")
                else:
                    response_parts.append("‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–Ω–∫–æ–¥–µ—Ä–∞—Ö –∏ –¥–∞—Ç—á–∏–∫–∞—Ö –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        
        return "\n".join(response_parts)
    
    def _generate_pid_response(self, relevant_info: List[Dict], thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ –ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞—Ö"""
        thinking_process.append("üéõÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –æ –ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞—Ö...")
        
        response_parts = ["**–ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä:**\n"]
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞—Ö
        response_parts.append("–ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä (Proportional-Integral-Derivative) - —ç—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é.")
        response_parts.append("")
        response_parts.append("**–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**")
        response_parts.append("‚Ä¢ **P (–ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è)** - —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ç–µ–∫—É—â—É—é –æ—à–∏–±–∫—É")
        response_parts.append("‚Ä¢ **I (–ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–∞—è)** - —É—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É")
        response_parts.append("‚Ä¢ **D (–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è)** - –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –±—É–¥—É—â—É—é –æ—à–∏–±–∫—É")
        response_parts.append("")
        response_parts.append("**–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:** –†–µ–≥—É–ª—è—Ç–æ—Ä —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏.")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if relevant_info:
            response_parts.append(f"\n**–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**")
            for info in relevant_info[:3]:
                response_parts.append(f"\nüìÑ **{info['title']}:**")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                useful_sentences = [s for s in info['sentences'][:4] if len(s.strip()) > 20 and not s.strip().startswith(';')]
                if useful_sentences:
                    response_parts.append(f"‚Ä¢ {useful_sentences[0]}")
                else:
                    response_parts.append("‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞—Ö –∏ —Å–∏—Å—Ç–µ–º–∞—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        
        return "\n".join(response_parts)
    
    def _generate_diode_response(self, relevant_info: List[Dict], thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ –¥–∏–æ–¥–∞—Ö"""
        thinking_process.append("‚ö° –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –æ –¥–∏–æ–¥–∞—Ö...")
        
        response_parts = ["**–î–∏–æ–¥—ã:**\n"]
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–æ–¥–∞—Ö
        response_parts.append("–î–∏–æ–¥ - —ç—Ç–æ –ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤—ã–π –ø—Ä–∏–±–æ—Ä, –ø—Ä–æ–ø—É—Å–∫–∞—é—â–∏–π —Ç–æ–∫ —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.")
        response_parts.append("")
        response_parts.append("**–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã:**")
        response_parts.append("‚Ä¢ **–í—ã–ø—Ä—è–º–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏–æ–¥—ã** - –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–∞ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π")
        response_parts.append("‚Ä¢ **–°—Ç–∞–±–∏–ª–∏—Ç—Ä–æ–Ω—ã** - –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è")
        response_parts.append("‚Ä¢ **–°–≤–µ—Ç–æ–¥–∏–æ–¥—ã (LED)** - –¥–ª—è –∏–∑–ª—É—á–µ–Ω–∏—è —Å–≤–µ—Ç–∞")
        response_parts.append("‚Ä¢ **–§–æ—Ç–æ–¥–∏–æ–¥—ã** - –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–≤–µ—Ç–∞ –≤ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å–∏–≥–Ω–∞–ª")
        response_parts.append("")
        response_parts.append("**–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:** –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ p-n –ø–µ—Ä–µ—Ö–æ–¥–µ, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –±–∞—Ä—å–µ—Ä –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–æ–≤ –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if relevant_info:
            response_parts.append(f"\n**–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**")
            for info in relevant_info[:3]:
                response_parts.append(f"\nüìÑ **{info['title']}:**")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                useful_sentences = [s for s in info['sentences'][:4] if len(s.strip()) > 20 and not s.strip().startswith(';')]
                if useful_sentences:
                    response_parts.append(f"‚Ä¢ {useful_sentences[0]}")
                else:
                    response_parts.append("‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–æ–¥–∞—Ö, —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä–∞—Ö –∏ –ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤—ã—Ö –ø—Ä–∏–±–æ—Ä–∞—Ö")
        
        
        return "\n".join(response_parts)
    
    def _generate_controller_response(self, relevant_info: List[Dict], thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö"""
        thinking_process.append("üéÆ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö...")
        
        response_parts = ["**–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã:**\n"]
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö
        response_parts.append("–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä - —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.")
        response_parts.append("")
        response_parts.append("**–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã:**")
        response_parts.append("‚Ä¢ **PLC (–ü–õ–ö)** - –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º—ã–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã")
        response_parts.append("‚Ä¢ **PAC** - –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã")
        response_parts.append("‚Ä¢ **DCS** - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        response_parts.append("‚Ä¢ **SCADA** - —Å–∏—Å—Ç–µ–º—ã –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        response_parts.append("")
        response_parts.append("**–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:** –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º.")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if relevant_info:
            response_parts.append(f"\n**–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**")
            for info in relevant_info[:3]:
                response_parts.append(f"\nüìÑ **{info['title']}:**")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                useful_sentences = [s for s in info['sentences'][:4] if len(s.strip()) > 20 and not s.strip().startswith(';')]
                if useful_sentences:
                    response_parts.append(f"‚Ä¢ {useful_sentences[0]}")
                else:
                    response_parts.append("‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PLC, PMAC –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö")
        
        
        return "\n".join(response_parts)
    
    def _generate_general_technical_response(self, relevant_info: List[Dict], thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç"""
        thinking_process.append("üîß –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—â–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç...")
        
        response_parts = []
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if relevant_info:
            for info in relevant_info[:3]:
                response_parts.append(f"üìÑ **{info['title']}:**")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                useful_sentences = [s for s in info['sentences'][:4] if len(s.strip()) > 20 and not s.strip().startswith(';')]
                if useful_sentences:
                    response_parts.append(f"‚Ä¢ {useful_sentences[0]}")
                else:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    content = info.get('content', '')
                    if content:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                        meaningful_text = content.strip()
                        if meaningful_text:
                            response_parts.append(f"‚Ä¢ {meaningful_text}...")
                        else:
                            response_parts.append("‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ")
                response_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
        else:
            response_parts.append("üîç **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**")
            response_parts.append("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É.")
            response_parts.append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏.")
        
        return "\n".join(response_parts)
    
    def _generate_protocol_response(self, relevant_info: List[Dict], thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö —Å–≤—è–∑–∏"""
        thinking_process.append("üì° –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö —Å–≤—è–∑–∏...")
        
        response_parts = ["**–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–≤—è–∑–∏:**\n"]
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö
        response_parts.append("**Modbus RTU** - —ç—Ç–æ –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.")
        response_parts.append("")
        response_parts.append("**–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ Modbus RTU:**")
        response_parts.append("‚Ä¢ **–§–∏–∑–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å:** RS-485, RS-232")
        response_parts.append("‚Ä¢ **–°–∫–æ—Ä–æ—Å—Ç—å:** 1200-115200 –±–æ–¥")
        response_parts.append("‚Ä¢ **–¢–æ–ø–æ–ª–æ–≥–∏—è:** –ú–∞—Å—Ç–µ—Ä-–°–ª–µ–π–≤ (Master-Slave)")
        response_parts.append("‚Ä¢ **–ê–¥—Ä–µ—Å–∞—Ü–∏—è:** 1-247 —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        response_parts.append("‚Ä¢ **–§—É–Ω–∫—Ü–∏–∏:** –ß—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤")
        response_parts.append("")
        response_parts.append("**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–¥—Ä–∞:**")
        response_parts.append("‚Ä¢ –ê–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (1 –±–∞–π—Ç)")
        response_parts.append("‚Ä¢ –ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ (1 –±–∞–π—Ç)")
        response_parts.append("‚Ä¢ –î–∞–Ω–Ω—ã–µ (N –±–∞–π—Ç)")
        response_parts.append("‚Ä¢ CRC (2 –±–∞–π—Ç–∞)")
        response_parts.append("")
        response_parts.append("**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**")
        response_parts.append("‚Ä¢ 03h - –ß—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤")
        response_parts.append("‚Ä¢ 06h - –ó–∞–ø–∏—Å—å –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞")
        response_parts.append("‚Ä¢ 10h - –ó–∞–ø–∏—Å—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if relevant_info:
            response_parts.append(f"\n**–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**")
            for info in relevant_info[:3]:
                response_parts.append(f"\nüìÑ **{info['title']}:**")
                useful_sentences = [s for s in info['sentences'][:4] if len(s.strip()) > 20 and not s.strip().startswith(';')]
                if useful_sentences:
                    response_parts.append(f"‚Ä¢ {useful_sentences[0]}")
                else:
                    response_parts.append("‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Modbus RTU, TCP –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö —Å–≤—è–∑–∏")
        
        
        return "\n".join(response_parts)
    
    def _generate_electrical_laws_response(self, relevant_info: List[Dict], thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ –∑–∞–∫–æ–Ω–∞—Ö —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∏"""
        thinking_process.append("‚ö° –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –æ –∑–∞–∫–æ–Ω–∞—Ö —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∏...")
        
        response_parts = ["**–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–∫–æ–Ω—ã —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∏:**\n"]
        
        # –ó–∞–∫–æ–Ω –û–º–∞
        response_parts.append("**1. –ó–∞–∫–æ–Ω –û–º–∞:**")
        response_parts.append("U = I √ó R")
        response_parts.append("–≥–¥–µ: U - –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–í), I - —Ç–æ–∫ (–ê), R - —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ (–û–º)")
        response_parts.append("")
        
        # –ó–∞–∫–æ–Ω—ã –ö–∏—Ä—Ö–≥–æ—Ñ–∞
        response_parts.append("**2. –ó–∞–∫–æ–Ω—ã –ö–∏—Ä—Ö–≥–æ—Ñ–∞:**")
        response_parts.append("")
        response_parts.append("**–ü–µ—Ä–≤—ã–π –∑–∞–∫–æ–Ω (–ó–ö–¢):**")
        response_parts.append("–°—É–º–º–∞ —Ç–æ–∫–æ–≤, –≤—Ö–æ–¥—è—â–∏—Ö –≤ —É–∑–µ–ª, —Ä–∞–≤–Ω–∞ —Å—É–º–º–µ —Ç–æ–∫–æ–≤, –≤—ã—Ö–æ–¥—è—â–∏—Ö –∏–∑ —É–∑–ª–∞")
        response_parts.append("Œ£I–≤—Ö = Œ£I–≤—ã—Ö")
        response_parts.append("")
        response_parts.append("**–í—Ç–æ—Ä–æ–π –∑–∞–∫–æ–Ω (–ó–ö–ù):**")
        response_parts.append("–í –∑–∞–º–∫–Ω—É—Ç–æ–º –∫–æ–Ω—Ç—É—Ä–µ –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∞—è —Å—É–º–º–∞ –≠–î–° —Ä–∞–≤–Ω–∞ –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–æ–π —Å—É–º–º–µ –ø–∞–¥–µ–Ω–∏–π –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–π")
        response_parts.append("Œ£E = Œ£IR")
        response_parts.append("")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–∫–æ–Ω—ã
        response_parts.append("**3. –î—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –∑–∞–∫–æ–Ω—ã:**")
        response_parts.append("‚Ä¢ **–ó–∞–∫–æ–Ω –î–∂–æ—É–ª—è-–õ–µ–Ω—Ü–∞:** Q = I¬≤Rt")
        response_parts.append("‚Ä¢ **–ó–∞–∫–æ–Ω –§–∞—Ä–∞–¥–µ—è:** –≠–î–° –∏–Ω–¥—É–∫—Ü–∏–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞–≥–Ω–∏—Ç–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞")
        response_parts.append("‚Ä¢ **–ü—Ä–∞–≤–∏–ª–æ –±—É—Ä–∞–≤—á–∏–∫–∞:** –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–Ω–∏—Ç–Ω–æ–≥–æ –ø–æ–ª—è –≤–æ–∫—Ä—É–≥ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞ —Å —Ç–æ–∫–æ–º")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if relevant_info:
            response_parts.append(f"\n**–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**")
            for info in relevant_info[:3]:
                response_parts.append(f"\nüìÑ **{info['title']}:**")
                useful_sentences = [s for s in info['sentences'][:4] if len(s.strip()) > 20 and not s.strip().startswith(';')]
                if useful_sentences:
                    response_parts.append(f"‚Ä¢ {useful_sentences[0]}")
                else:
                    response_parts.append("‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ä–º—É–ª—ã –∏ —Ä–∞—Å—á–µ—Ç—ã –ø–æ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ")
        
        
        return "\n".join(response_parts)
    
    def _generate_safety_response(self, relevant_info: List[Dict], thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏"""
        thinking_process.append("üõ°Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏...")
        
        response_parts = ["**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:**\n"]
        
        # –û–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        response_parts.append("**–ü—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:**")
        response_parts.append("‚Ä¢ **–≠–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å** - –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–º —Ç–æ–∫–æ–º")
        response_parts.append("‚Ä¢ **–≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–≠–ú–°)** - –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–º–µ—Ö")
        response_parts.append("‚Ä¢ **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å** - SIL (Safety Integrity Level)")
        response_parts.append("‚Ä¢ **–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å** - –∑–∞—â–∏—Ç–Ω—ã–µ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è")
        response_parts.append("")
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã
        response_parts.append("**–ö–ª—é—á–µ–≤—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã:**")
        response_parts.append("‚Ä¢ **IEC 61508** - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
        response_parts.append("‚Ä¢ **IEC 61511** - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        response_parts.append("‚Ä¢ **IEC 61000** - –≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
        response_parts.append("‚Ä¢ **–ì–û–°–¢ –†** - –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        response_parts.append("")
        
        # –£—Ä–æ–≤–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        response_parts.append("**–£—Ä–æ–≤–Ω–∏ SIL (Safety Integrity Level):**")
        response_parts.append("‚Ä¢ **SIL 1** - –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ (10‚Åª‚Åµ-10‚Åª‚Å∂)")
        response_parts.append("‚Ä¢ **SIL 2** - –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ (10‚Åª‚Å∂-10‚Åª‚Å∑)")
        response_parts.append("‚Ä¢ **SIL 3** - –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ (10‚Åª‚Å∑-10‚Åª‚Å∏)")
        response_parts.append("‚Ä¢ **SIL 4** - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ (10‚Åª‚Å∏-10‚Åª‚Åπ)")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if relevant_info:
            response_parts.append(f"\n**–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**")
            for info in relevant_info[:3]:
                response_parts.append(f"\nüìÑ **{info['title']}:**")
                useful_sentences = [s for s in info['sentences'][:4] if len(s.strip()) > 20 and not s.strip().startswith(';')]
                if useful_sentences:
                    response_parts.append(f"‚Ä¢ {useful_sentences[0]}")
                else:
                    response_parts.append("‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –≠–ú–°")
        
        
        return "\n".join(response_parts)
    
    def _generate_data_gathering_response(self, relevant_info: List[Dict], thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö"""
        thinking_process.append("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –æ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        response_parts = ["**–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ (Data Gathering):**\n"]
        
        # –ú–µ—Ç–æ–¥—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        response_parts.append("**–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:**")
        response_parts.append("‚Ä¢ **SCADA —Å–∏—Å—Ç–µ–º—ã** - Supervisory Control and Data Acquisition")
        response_parts.append("‚Ä¢ **HMI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã** - Human Machine Interface")
        response_parts.append("‚Ä¢ **–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–µ—Ç–∏** - Ethernet, Profinet, Modbus")
        response_parts.append("‚Ä¢ **–î–∞—Ç—á–∏–∫–∏ –∏ –∏–∑–º–µ—Ä–∏—Ç–µ–ª–∏** - –∞–Ω–∞–ª–æ–≥–æ–≤—ã–µ –∏ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
        response_parts.append("")
        
        # –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        response_parts.append("**–¢–∏–ø—ã —Å–æ–±–∏—Ä–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö:**")
        response_parts.append("‚Ä¢ **–ü—Ä–æ—Ü–µ—Å—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ** - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –¥–∞–≤–ª–µ–Ω–∏–µ, —Ä–∞—Å—Ö–æ–¥")
        response_parts.append("‚Ä¢ **–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è** - –≤–∫–ª—é—á–µ–Ω–æ/–≤—ã–∫–ª—é—á–µ–Ω–æ, –∞–≤–∞—Ä–∏–∏")
        response_parts.append("‚Ä¢ **–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏** - –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∫–∞—á–µ—Å—Ç–≤–æ")
        response_parts.append("‚Ä¢ **–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è** - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        response_parts.append("")
        
        # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º
        response_parts.append("**–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:**")
        response_parts.append("‚Ä¢ **–ü–æ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å** - –¥–∞—Ç—á–∏–∫–∏, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã")
        response_parts.append("‚Ä¢ **–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å** - PLC, –ü–ö")
        response_parts.append("‚Ä¢ **–£—Ä–æ–≤–µ–Ω—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è** - SCADA, HMI")
        response_parts.append("‚Ä¢ **–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å** - ERP, MES —Å–∏—Å—Ç–µ–º—ã")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if relevant_info:
            response_parts.append(f"\n**–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**")
            for info in relevant_info[:3]:
                response_parts.append(f"\nüìÑ **{info['title']}:**")
                useful_sentences = [s for s in info['sentences'][:4] if len(s.strip()) > 20 and not s.strip().startswith(';')]
                if useful_sentences:
                    response_parts.append(f"‚Ä¢ {useful_sentences[0]}")
                else:
                    response_parts.append("‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–∞—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        
        return "\n".join(response_parts)
    
    def _generate_programming_response(self, relevant_info: List[Dict], thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º"""
        thinking_process.append("üíª –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏...")
        
        response_parts = ["**–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º:**\n"]
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏
        response_parts.append("**–û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º:**")
        response_parts.append("‚Ä¢ **–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π** - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        response_parts.append("‚Ä¢ **–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ** - –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        response_parts.append("‚Ä¢ **–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ** - –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞")
        response_parts.append("‚Ä¢ **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ** - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏")
        response_parts.append("‚Ä¢ **–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ** - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—É—é —Å—Ä–µ–¥—É")
        response_parts.append("")
        
        # –¢–∏–ø—ã –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è
        response_parts.append("**–¢–∏–ø—ã –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –ü–û:**")
        response_parts.append("‚Ä¢ **PLC –ø—Ä–æ–≥—Ä–∞–º–º—ã** - –ª–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º")
        response_parts.append("‚Ä¢ **SCADA —Å–∏—Å—Ç–µ–º—ã** - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        response_parts.append("‚Ä¢ **HMI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã** - –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
        response_parts.append("‚Ä¢ **–î—Ä–∞–π–≤–µ—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–∏—Ñ–µ—Ä–∏–µ–π")
        response_parts.append("")
        
        # –ú–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏
        response_parts.append("**–ú–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º:**")
        response_parts.append("‚Ä¢ **USB/Flash** - —á–µ—Ä–µ–∑ —Å—ä–µ–º–Ω—ã–µ –Ω–æ—Å–∏—Ç–µ–ª–∏")
        response_parts.append("‚Ä¢ **Ethernet** - –ø–æ —Å–µ—Ç–µ–≤–æ–º—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é")
        response_parts.append("‚Ä¢ **RS-232/RS-485** - —á–µ—Ä–µ–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—ã")
        response_parts.append("‚Ä¢ **Wi-Fi/Bluetooth** - –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if relevant_info:
            response_parts.append(f"\n**–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**")
            for info in relevant_info[:3]:
                # –£–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                useful_sentences = [s for s in info['sentences'][:4] if len(s.strip()) > 20 and not s.strip().startswith(';')]
                if useful_sentences:
                    response_parts.append(f"‚Ä¢ {useful_sentences[0]}")
                else:
                    response_parts.append("‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        
        return "\n".join(response_parts)
    
    def _generate_semiconductor_response(self, relevant_info: List[Dict], thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ –ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞—Ö"""
        thinking_process.append("üî¨ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –æ –ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞—Ö...")
        
        response_parts = ["**–ü–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∏ –∏ —Ç–∏—Ä–∏—Å—Ç–æ—Ä—ã:**\n"]
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞—Ö
        response_parts.append("**–ü–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∏** - –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç—å—é –º–µ–∂–¥—É –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞–º–∏ –∏ –¥–∏—ç–ª–µ–∫—Ç—Ä–∏–∫–∞–º–∏.")
        response_parts.append("")
        response_parts.append("**–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤:**")
        response_parts.append("‚Ä¢ **–î–∏–æ–¥—ã** - –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç—å")
        response_parts.append("‚Ä¢ **–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã** - —É—Å–∏–ª–∏—Ç–µ–ª–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏")
        response_parts.append("‚Ä¢ **–¢–∏—Ä–∏—Å—Ç–æ—Ä—ã (—Å–∏–º–∏—Å—Ç–æ—Ä—ã)** - —É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –≤—ã–ø—Ä—è–º–∏—Ç–µ–ª–∏")
        response_parts.append("‚Ä¢ **–û–ø—Ç–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã** - —Å–≤–µ—Ç–æ–¥–∏–æ–¥—ã, —Ñ–æ—Ç–æ—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã")
        response_parts.append("")
        
        # –¢–∏—Ä–∏—Å—Ç–æ—Ä—ã (—Å–∏–º–∏—Å—Ç–æ—Ä—ã)
        response_parts.append("**–¢–∏—Ä–∏—Å—Ç–æ—Ä—ã (—Å–∏–º–∏—Å—Ç—Ä—ã):**")
        response_parts.append("‚Ä¢ **–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:** –£–ø—Ä–∞–≤–ª—è–µ–º—ã–π –ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤—ã–π –ø—Ä–∏–±–æ—Ä")
        response_parts.append("‚Ä¢ **–°—Ç—Ä—É–∫—Ç—É—Ä–∞:** 4-—Å–ª–æ–π–Ω–∞—è p-n-p-n —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
        response_parts.append("‚Ä¢ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:** –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —ç–ª–µ–∫—Ç—Ä–æ–¥")
        response_parts.append("‚Ä¢ **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:** –†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ –º–æ—â–Ω–æ—Å—Ç–∏, –∫–æ–º–º—É—Ç–∞—Ü–∏—è")
        response_parts.append("")
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
        response_parts.append("**–û–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:**")
        response_parts.append("‚Ä¢ **–°–∏–ª–æ–≤–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–≥–∞—Ç–µ–ª—è–º–∏")
        response_parts.append("‚Ä¢ **–†–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è** - –¥–∏–º–º–µ—Ä—ã")
        response_parts.append("‚Ä¢ **–ù–∞–≥—Ä–µ–≤** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¢–≠–ù–∞–º–∏")
        response_parts.append("‚Ä¢ **–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è** - –∫–æ–º–º—É—Ç–∞—Ü–∏—è —Ü–µ–ø–µ–π")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if relevant_info:
            response_parts.append(f"\n**–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**")
            for info in relevant_info[:3]:
                useful_sentences = [s for s in info['sentences'][:4] if len(s.strip()) > 20 and not s.strip().startswith(';')]
                if useful_sentences:
                    response_parts.append(f"‚Ä¢ {useful_sentences[0]}")
                else:
                    response_parts.append("‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏—Ä–∏—Å—Ç–æ—Ä–∞—Ö, —Å–∏–º–∏—Å—Ç–æ—Ä–∞—Ö –∏ –ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤—ã—Ö –ø—Ä–∏–±–æ—Ä–∞—Ö")
        
        
        return "\n".join(response_parts)
    
    def _generate_programming_algorithm_response(self, relevant_info: List[Dict], thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤"""
        thinking_process.append("üêç –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤...")
        
        response_parts = ["**–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n"]
        
        # –û–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        response_parts.append("**–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤:**")
        response_parts.append("‚Ä¢ **–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏** - –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
        response_parts.append("‚Ä¢ **–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏** - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
        response_parts.append("‚Ä¢ **–†–µ–∞–ª–∏–∑–∞—Ü–∏—è** - –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞")
        response_parts.append("‚Ä¢ **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ** - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏")
        response_parts.append("")
        
        # Python –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏
        response_parts.append("**Python –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:**")
        response_parts.append("‚Ä¢ **–ü—Ä–æ—Å—Ç–æ—Ç–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞** - –±—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞")
        response_parts.append("‚Ä¢ **–ë–æ–≥–∞—Ç—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏** - NumPy, SciPy, Pandas")
        response_parts.append("‚Ä¢ **–°–µ—Ç–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏** - TCP/IP, Modbus, OPC")
        response_parts.append("‚Ä¢ **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º** - —á–µ—Ä–µ–∑ –¥—Ä–∞–π–≤–µ—Ä—ã")
        response_parts.append("")
        
        # –ê–ª–≥–æ—Ä–∏—Ç–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ–π–µ—Ä–æ–º
        response_parts.append("**–ê–ª–≥–æ—Ä–∏—Ç–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ–π–µ—Ä–æ–º –Ω–∞ Python:**")
        response_parts.append("```python")
        response_parts.append("import time")
        response_parts.append("import threading")
        response_parts.append("")
        response_parts.append("class ConveyorController:")
        response_parts.append("    def __init__(self):")
        response_parts.append("        self.running = False")
        response_parts.append("        self.speed = 0")
        response_parts.append("    ")
        response_parts.append("    def start_conveyor(self):")
        response_parts.append("        self.running = True")
        response_parts.append("        print('–ö–æ–Ω–≤–µ–π–µ—Ä –∑–∞–ø—É—â–µ–Ω')")
        response_parts.append("    ")
        response_parts.append("    def stop_conveyor(self):")
        response_parts.append("        self.running = False")
        response_parts.append("        print('–ö–æ–Ω–≤–µ–π–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')")
        response_parts.append("```")
        response_parts.append("")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        response_parts.append("**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:**")
        response_parts.append("‚Ä¢ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å—é** - —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ —á–∞—Å—Ç–æ—Ç—ã")
        response_parts.append("‚Ä¢ **–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è** - –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥")
        response_parts.append("‚Ä¢ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è** - –¥–∞—Ç—á–∏–∫–∏ –∏ —Å–∏–≥–Ω–∞–ª—ã")
        response_parts.append("‚Ä¢ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫** - –∞–≤–∞—Ä–∏–π–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if relevant_info:
            response_parts.append(f"\n**–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**")
            for info in relevant_info[:3]:
                useful_sentences = [s for s in info['sentences'][:4] if len(s.strip()) > 20 and not s.strip().startswith(';')]
                if useful_sentences:
                    response_parts.append(f"‚Ä¢ {useful_sentences[0]}")
                else:
                    response_parts.append("‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        
        return "\n".join(response_parts)
    
    def _generate_oop_response(self, relevant_info: List[Dict], thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ–± –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        thinking_process.append("üèóÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –æ–± –û–û–ü...")
        
        response_parts = ["**–ü—Ä–∏–Ω—Ü–∏–ø—ã –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–û–û–ü):**\n"]
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –û–û–ü
        response_parts.append("**1. –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è (Encapsulation):**")
        response_parts.append("‚Ä¢ –°–æ–∫—Ä—ã—Ç–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞")
        response_parts.append("‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã")
        response_parts.append("‚Ä¢ –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        response_parts.append("")
        
        response_parts.append("**2. –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (Inheritance):**")
        response_parts.append("‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö")
        response_parts.append("‚Ä¢ –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        response_parts.append("‚Ä¢ –ò–µ—Ä–∞—Ä—Ö–∏—è –∫–ª–∞—Å—Å–æ–≤ (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∏ –¥–æ—á–µ—Ä–Ω–∏–µ)")
        response_parts.append("")
        
        response_parts.append("**3. –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º (Polymorphism):**")
        response_parts.append("‚Ä¢ –û–¥–∏–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å - –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π")
        response_parts.append("‚Ä¢ –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞—Ö")
        response_parts.append("‚Ä¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤")
        response_parts.append("")
        
        response_parts.append("**4. –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è (Abstraction):**")
        response_parts.append("‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º")
        response_parts.append("‚Ä¢ –§–æ–∫—É—Å –Ω–∞ –≤–∞–∂–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö")
        response_parts.append("‚Ä¢ –°–æ–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")
        response_parts.append("")
        
        # –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        response_parts.append("**–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:**")
        response_parts.append("‚Ä¢ **–°–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è** - –∫–ª–∞—Å—Å—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤")
        response_parts.append("‚Ä¢ **SCADA —Å–∏—Å—Ç–µ–º—ã** - –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        response_parts.append("‚Ä¢ **–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö** - –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –∫–ª–∞—Å—Å—ã")
        response_parts.append("‚Ä¢ **–°–µ—Ç–µ–≤—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã** - –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if relevant_info:
            response_parts.append(f"\n**–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**")
            for info in relevant_info[:3]:
                useful_sentences = [s for s in info['sentences'][:2] if len(s.strip()) > 20 and not s.strip().startswith(';') and not s.strip().startswith('üìÑ')]
                if useful_sentences:
                    response_parts.append(f"‚Ä¢ {useful_sentences[0]}")
                else:
                    response_parts.append("‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏")
        
        
        return "\n".join(response_parts)
    
    def _generate_power_factor_response(self, relevant_info: List[Dict], thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–µ –º–æ—â–Ω–æ—Å—Ç–∏"""
        thinking_process.append("‚ö° –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–µ –º–æ—â–Ω–æ—Å—Ç–∏...")
        
        response_parts = ["**–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏ –∏ –µ–≥–æ —É–ª—É—á—à–µ–Ω–∏–µ:**\n"]
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        response_parts.append("**–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏:**")
        response_parts.append("‚Ä¢ **–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:** cos œÜ = P/S (–∞–∫—Ç–∏–≤–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å / –ø–æ–ª–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å)")
        response_parts.append("‚Ä¢ **–î–∏–∞–ø–∞–∑–æ–Ω:** –æ—Ç 0 –¥–æ 1 (–∏–¥–µ–∞–ª—å–Ω—ã–π = 1)")
        response_parts.append("‚Ä¢ **–§–∏–∑–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª:** –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏")
        response_parts.append("")
        
        # –¢–∏–ø—ã –º–æ—â–Ω–æ—Å—Ç–∏
        response_parts.append("**–¢–∏–ø—ã —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π –º–æ—â–Ω–æ—Å—Ç–∏:**")
        response_parts.append("‚Ä¢ **–ê–∫—Ç–∏–≤–Ω–∞—è (P)** - –ø–æ–ª–µ–∑–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –≤ –í—Ç")
        response_parts.append("‚Ä¢ **–†–µ–∞–∫—Ç–∏–≤–Ω–∞—è (Q)** - —ç–Ω–µ—Ä–≥–∏—è –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –ø–æ–ª–µ–π, –í–ê—Ä")
        response_parts.append("‚Ä¢ **–ü–æ–ª–Ω–∞—è (S)** - –æ–±—â–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –í–ê")
        response_parts.append("‚Ä¢ **–§–æ—Ä–º—É–ª–∞:** S¬≤ = P¬≤ + Q¬≤")
        response_parts.append("")
        
        # –í–ª–∏—è–Ω–∏–µ –Ω–∏–∑–∫–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
        response_parts.append("**–ü—Ä–æ–±–ª–µ–º—ã –Ω–∏–∑–∫–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –º–æ—â–Ω–æ—Å—Ç–∏:**")
        response_parts.append("‚Ä¢ **–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å** –≤ –ª–∏–Ω–∏—è—Ö –ø–µ—Ä–µ–¥–∞—á–∏")
        response_parts.append("‚Ä¢ **–ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è** (—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä—ã, –∫–∞–±–µ–ª–∏)")
        response_parts.append("‚Ä¢ **–®—Ç—Ä–∞—Ñ—ã –æ—Ç —ç–Ω–µ—Ä–≥–æ—Å–Ω–∞–±–∂–∞—é—â–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π**")
        response_parts.append("‚Ä¢ **–°–Ω–∏–∂–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏**")
        response_parts.append("")
        
        # –ú–µ—Ç–æ–¥—ã —É–ª—É—á—à–µ–Ω–∏—è
        response_parts.append("**–ú–µ—Ç–æ–¥—ã —É–ª—É—á—à–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –º–æ—â–Ω–æ—Å—Ç–∏:**")
        response_parts.append("‚Ä¢ **–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä–Ω—ã–µ –±–∞—Ç–∞—Ä–µ–∏** - –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏")
        response_parts.append("‚Ä¢ **–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ç–æ—Ä—ã** - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏")
        response_parts.append("‚Ä¢ **–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ç–æ—Ä—ã (SVC)** - –±—ã—Å—Ç—Ä–∞—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞")
        response_parts.append("‚Ä¢ **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏** - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if relevant_info:
            response_parts.append(f"\n**–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**")
            for info in relevant_info[:3]:
                useful_sentences = [s for s in info['sentences'][:2] if len(s.strip()) > 20 and not s.strip().startswith(';') and not s.strip().startswith('üìÑ')]
                if useful_sentences:
                    response_parts.append(f"‚Ä¢ {useful_sentences[0]}")
                else:
                    response_parts.append("‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–æ–Ω–∞—Ö –ö–∏—Ä—Ö–≥–æ—Ñ–∞, –û–º–∞ –∏ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–∞—Ö")
        
        
        return "\n".join(response_parts)
    
    def _generate_syntax_response(self, relevant_info: List[Dict], thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        thinking_process.append("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ...")
        
        response_parts = ["**–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏:**\n"]
        
        # –û—Å–Ω–æ–≤—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        response_parts.append("**–û—Å–Ω–æ–≤—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:**")
        response_parts.append("‚Ä¢ **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã** - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
        response_parts.append("‚Ä¢ **–ü—Ä–∞–≤–∏–ª–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è** - –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏")
        response_parts.append("‚Ä¢ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏** - –ø–æ—è—Å–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
        response_parts.append("‚Ä¢ **–ë–ª–æ–∫–∏ –∫–æ–¥–∞** - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
        response_parts.append("")
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        response_parts.append("**–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:**")
        response_parts.append("‚Ä¢ **–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è** - –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –ø–∞–º—è—Ç–∏")
        response_parts.append("‚Ä¢ **–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è** - –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è")
        response_parts.append("‚Ä¢ **–û–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏** - –≥–¥–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞")
        response_parts.append("‚Ä¢ **–¢–∏–ø–∏–∑–∞—Ü–∏—è** - —Å—Ç—Ä–æ–≥–∞—è –∏–ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è")
        response_parts.append("")
        
        # –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        response_parts.append("**–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:**")
        response_parts.append("‚Ä¢ **–¶–µ–ª—ã–µ —á–∏—Å–ª–∞** - int, integer (1, 100, -5)")
        response_parts.append("‚Ä¢ **–î—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞** - float, double (3.14, 2.5)")
        response_parts.append("‚Ä¢ **–°—Ç—Ä–æ–∫–∏** - string, char ('Hello', 'A')")
        response_parts.append("‚Ä¢ **–õ–æ–≥–∏—á–µ—Å–∫–∏–µ** - boolean (true/false)")
        response_parts.append("‚Ä¢ **–ú–∞—Å—Å–∏–≤—ã** - –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        response_parts.append("")
        
        # –°–ø–µ—Ü–∏—Ñ–∏–∫–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        response_parts.append("**–°–∏–Ω—Ç–∞–∫—Å–∏—Å –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏:**")
        response_parts.append("‚Ä¢ **PLC —è–∑—ã–∫–∏** - Ladder Logic, Function Block Diagram")
        response_parts.append("‚Ä¢ **–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞** - I/O mapping")
        response_parts.append("‚Ä¢ **–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –ü–õ–ö** - BOOL, INT, REAL, DINT")
        response_parts.append("‚Ä¢ **–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç** - ST (Structured Text)")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if relevant_info:
            response_parts.append(f"\n**–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**")
            for info in relevant_info[:3]:
                useful_sentences = [s for s in info['sentences'][:2] if len(s.strip()) > 20 and not s.strip().startswith(';') and not s.strip().startswith('üìÑ')]
                if useful_sentences:
                    response_parts.append(f"‚Ä¢ {useful_sentences[0]}")
                else:
                    response_parts.append("‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏")
        
        
        return "\n".join(response_parts)
    
    def _generate_debugging_response(self, relevant_info: List[Dict], thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ–± –æ—Ç–ª–∞–¥–∫–µ –∏ –ø–æ–∏—Å–∫–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π"""
        thinking_process.append("üîß –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –æ–± –æ—Ç–ª–∞–¥–∫–µ...")
        
        response_parts = ["**–û—Ç–ª–∞–¥–∫–∞ –∏ –ø–æ–∏—Å–∫ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π:**\n"]
        
        # –ú–µ—Ç–æ–¥—ã –æ—Ç–ª–∞–¥–∫–∏
        response_parts.append("**–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ª–∞–¥–∫–∏:**")
        response_parts.append("‚Ä¢ **–ü–æ—à–∞–≥–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ** - —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∫–æ–¥–∞")
        response_parts.append("‚Ä¢ **–¢–æ—á–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∞** - breakpoints –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        response_parts.append("‚Ä¢ **–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ** - –∑–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π")
        response_parts.append("‚Ä¢ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö** - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π")
        response_parts.append("")
        
        # –ü–æ–∏—Å–∫ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏
        response_parts.append("**–ü–æ–∏—Å–∫ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö:**")
        response_parts.append("‚Ä¢ **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è** - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤")
        response_parts.append("‚Ä¢ **–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤** - —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∂—É—Ä–Ω–∞–ª—ã –∏ —Å–æ–±—ã—Ç–∏—è")
        response_parts.append("‚Ä¢ **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —Å–≤—è–∑–∏** - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤")
        response_parts.append("‚Ä¢ **–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤** - HMI –∏ SCADA –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        response_parts.append("")
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        response_parts.append("**–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:**")
        response_parts.append("‚Ä¢ **–ú—É–ª—å—Ç–∏–º–µ—Ç—Ä—ã** - –∏–∑–º–µ—Ä–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –∏ —Ç–æ–∫–∞")
        response_parts.append("‚Ä¢ **–û—Å—Ü–∏–ª–ª–æ–≥—Ä–∞—Ñ—ã** - –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤")
        response_parts.append("‚Ä¢ **–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤** - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞")
        response_parts.append("‚Ä¢ **–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ –æ—Ç–ª–∞–¥—á–∏–∫–∏** - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã IDE")
        response_parts.append("")
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        response_parts.append("**–°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:**")
        response_parts.append("‚Ä¢ **–ò–∑–æ–ª—è—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã** - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏")
        response_parts.append("‚Ä¢ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º** - –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫ —Å–ª–æ–∂–Ω–æ–º—É")
        response_parts.append("‚Ä¢ **–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ** - –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π")
        response_parts.append("‚Ä¢ **–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞** - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if relevant_info:
            response_parts.append(f"\n**–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**")
            for info in relevant_info[:3]:
                useful_sentences = [s for s in info['sentences'][:2] if len(s.strip()) > 20 and not s.strip().startswith(';') and not s.strip().startswith('üìÑ')]
                if useful_sentences:
                    response_parts.append(f"‚Ä¢ {useful_sentences[0]}")
                else:
                    response_parts.append("‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –∏ –æ—Ç–ª–∞–¥–∫–µ")
        
        
        return "\n".join(response_parts)
    
    def _generate_advanced_functions_response(self, relevant_info: List[Dict], thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö"""
        thinking_process.append("üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö...")
        
        response_parts = ["**–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"]
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        response_parts.append("**–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏:**")
        response_parts.append("‚Ä¢ **–†–µ–∫—É—Ä—Å–∏—è** - —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞—é—â–∞—è —Å–∞–º–∞ —Å–µ–±—è")
        response_parts.append("‚Ä¢ **–ó–∞–º—ã–∫–∞–Ω–∏—è** - —Ñ—É–Ω–∫—Ü–∏–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –≤–Ω–µ—à–Ω–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º")
        response_parts.append("‚Ä¢ **–õ—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–∏** - –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        response_parts.append("‚Ä¢ **–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã** - –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π")
        response_parts.append("‚Ä¢ **–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã** - –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º")
        response_parts.append("")
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ü–õ–ö
        response_parts.append("**–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ü–õ–ö:**")
        response_parts.append("‚Ä¢ **PID —Ä–µ–≥—É–ª—è—Ç–æ—Ä—ã** - –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ-–∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ-–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ")
        response_parts.append("‚Ä¢ **–¢–∞–π–º–µ—Ä—ã –∏ —Å—á–µ—Ç—á–∏–∫–∏** - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        response_parts.append("‚Ä¢ **–ë–ª–æ–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è** - –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        response_parts.append("‚Ä¢ **–ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏** - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        response_parts.append("‚Ä¢ **–§—É–Ω–∫—Ü–∏–∏ —Å–≤—è–∑–∏** - –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã")
        response_parts.append("")
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        response_parts.append("**–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**")
        response_parts.append("‚Ä¢ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é** - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤")
        response_parts.append("‚Ä¢ **–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å** - –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á")
        response_parts.append("‚Ä¢ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∞–º–∏")
        response_parts.append("‚Ä¢ **–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã API** - –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏")
        response_parts.append("")
        
        # –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        response_parts.append("**–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**")
        response_parts.append("‚Ä¢ **–ê–ª–≥–æ—Ä–∏—Ç–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è** - —Å–ª–æ–∂–Ω—ã–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã")
        response_parts.append("‚Ä¢ **–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è** - —É–ª—É—á—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏")
        response_parts.append("‚Ä¢ **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥** - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        response_parts.append("‚Ä¢ **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ERP** - —Å–≤—è–∑—å —Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if relevant_info:
            response_parts.append(f"\n**–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**")
            for info in relevant_info[:3]:
                useful_sentences = [s for s in info['sentences'][:2] if len(s.strip()) > 20 and not s.strip().startswith(';') and not s.strip().startswith('üìÑ')]
                if useful_sentences:
                    response_parts.append(f"‚Ä¢ {useful_sentences[0]}")
                else:
                    response_parts.append("‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö")
        
        
        return "\n".join(response_parts)
    
    def _generate_fallback_response(self, message: str, thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç fallback –æ—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        thinking_process.append("üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        
        message_lower = message.lower()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
        if any(phrase in message_lower for phrase in [
            "–∫–∞–∫–æ–π —Ö–æ—Ä–æ—à–∏–π –¥–µ–Ω—å", "—Ö–æ—Ä–æ—à–∏–π –¥–µ–Ω—å", "–∫–∞–∫ –¥–µ–ª–∞", "–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å",
            "—á—Ç–æ –Ω–æ–≤–æ–≥–æ", "–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "–∫–∞–∫ –∂–∏–∑–Ω—å"
        ]):
            return """üòä **–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å!**

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –£ –º–µ–Ω—è –≤—Å–µ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ:

**–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
‚Ä¢ ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ
‚Ä¢ üß† –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∞ (103 –¥–æ–∫—É–º–µ–Ω—Ç–∞)
‚Ä¢ üîç –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
‚Ä¢ üí¨ –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏

**–ß—Ç–æ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:**
‚Ä¢ üè≠ –ü–æ–º–æ—â—å —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π
‚Ä¢ üíª –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é
‚Ä¢ ‚ö° –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ
‚Ä¢ üì° –í–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–µ

**–ö–∞–∫ –¥–µ–ª–∞ —É –≤–∞—Å?** –ï—Å—Ç—å –ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–≥—É –ø–æ–º–æ—á—å?"""

        if any(phrase in message_lower for phrase in [
            "–ø—Ä–∏–≤–µ—Ç", "hello", "hi", "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"
        ]):
            return """üëã **–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rubin AI!**

–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º:

**–ú–æ–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:**
‚Ä¢ üè≠ **–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è** - PLC, –ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä—ã, SCADA
‚Ä¢ üíª **–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ** - Python, C++, –∞–ª–≥–æ—Ä–∏—Ç–º—ã
‚Ä¢ ‚ö° **–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞** - —Å—Ö–µ–º—ã, —Ä–∞—Å—á–µ—Ç—ã, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
‚Ä¢ üì° **–†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞** - –∞–Ω—Ç–µ–Ω–Ω—ã, —Å–∏–≥–Ω–∞–ª—ã, –ø—Ä–æ—Ç–æ–∫–æ–ª—ã

**–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?**
–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –ª—é–±–æ–π –∏–∑ —ç—Ç–∏—Ö —Ç–µ–º, –∏ —è –¥–∞–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏!

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä?"
‚Ä¢ "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –¥–∏–æ–¥–∞"
‚Ä¢ "–ß—Ç–æ —Ç–∞–∫–æ–µ Modbus RTU?"

–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?"""

        # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        if any(word in message_lower for word in ['—ç–Ω–∫–æ–¥–µ—Ä', 'encoder', '–¥–∞—Ç—á–∏–∫', 'sensor']):
            return """**–≠–Ω–∫–æ–¥–µ—Ä—ã –∏ –¥–∞—Ç—á–∏–∫–∏:**

–≠–Ω–∫–æ–¥–µ—Ä - —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —É–≥–ª–æ–≤–æ–≥–æ –∏–ª–∏ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã:

‚Ä¢ **–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —ç–Ω–∫–æ–¥–µ—Ä—ã** - –≤—ã–¥–∞—é—Ç –∏–º–ø—É–ª—å—Å—ã –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏
‚Ä¢ **–ê–±—Å–æ–ª—é—Ç–Ω—ã–µ —ç–Ω–∫–æ–¥–µ—Ä—ã** - –≤—ã–¥–∞—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ **–û–ø—Ç–∏—á–µ—Å–∫–∏–µ —ç–Ω–∫–æ–¥–µ—Ä—ã** - –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–≤–µ—Ç–æ–¥–∏–æ–¥—ã –∏ —Ñ–æ—Ç–æ—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã
‚Ä¢ **–ú–∞–≥–Ω–∏—Ç–Ω—ã–µ —ç–Ω–∫–æ–¥–µ—Ä—ã** - —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞–≥–Ω–∏—Ç–Ω–æ–≥–æ –ø–æ–ª—è
‚Ä¢ **–†–µ–∑–æ–ª—å–≤–µ—Ä—ã** - –∏—Å–ø–æ–ª—å–∑—É—é—Ç —ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω—É—é –∏–Ω–¥—É–∫—Ü–∏—é

*–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–∏—Å–∫ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.*"""

        elif any(word in message_lower for word in ['–ø–∏–¥', 'pid', '—Ä–µ–≥—É–ª—è—Ç–æ—Ä', 'controller']):
            return """**–ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä:**

–ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä (Proportional-Integral-Derivative) - —ç—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é.

**–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**
‚Ä¢ **P (–ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è)** - —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ç–µ–∫—É—â—É—é –æ—à–∏–±–∫—É
‚Ä¢ **I (–ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–∞—è)** - —É—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É
‚Ä¢ **D (–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è)** - –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –±—É–¥—É—â—É—é –æ—à–∏–±–∫—É

**–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:** –†–µ–≥—É–ª—è—Ç–æ—Ä —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏.

*–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å–∏—Å—Ç–µ–º—ã.*"""

        elif any(word in message_lower for word in ['–¥–∏–æ–¥', 'diode', '–ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫', 'semiconductor']):
            return """**–î–∏–æ–¥—ã:**

–î–∏–æ–¥ - —ç—Ç–æ –ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤—ã–π –ø—Ä–∏–±–æ—Ä, –ø—Ä–æ–ø—É—Å–∫–∞—é—â–∏–π —Ç–æ–∫ —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã:**
‚Ä¢ **–í—ã–ø—Ä—è–º–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏–æ–¥—ã** - –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–∞ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π
‚Ä¢ **–°—Ç–∞–±–∏–ª–∏—Ç—Ä–æ–Ω—ã** - –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
‚Ä¢ **–°–≤–µ—Ç–æ–¥–∏–æ–¥—ã (LED)** - –¥–ª—è –∏–∑–ª—É—á–µ–Ω–∏—è —Å–≤–µ—Ç–∞
‚Ä¢ **–§–æ—Ç–æ–¥–∏–æ–¥—ã** - –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–≤–µ—Ç–∞ –≤ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å–∏–≥–Ω–∞–ª

**–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:** –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ p-n –ø–µ—Ä–µ—Ö–æ–¥–µ, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –±–∞—Ä—å–µ—Ä –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–æ–≤ –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.

*–ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.*"""

        elif any(word in message_lower for word in ['–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', 'controller', '–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π', 'industrial']):
            return """**–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã:**

–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä - —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã:**
‚Ä¢ **PLC (–ü–õ–ö)** - –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º—ã–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
‚Ä¢ **PAC** - –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
‚Ä¢ **DCS** - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ **SCADA** - —Å–∏—Å—Ç–µ–º—ã –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

**–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:** –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º.

*–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –∏ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.*"""

        elif any(word in message_lower for word in ['modbus', 'rtu', 'tcp', '–ø—Ä–æ—Ç–æ–∫–æ–ª', 'protocol', '—Å–≤—è–∑—å', 'communication']):
            return """**–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–≤—è–∑–∏:**

**Modbus RTU** - —ç—Ç–æ –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
‚Ä¢ **–§–∏–∑–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å:** RS-485, RS-232
‚Ä¢ **–°–∫–æ—Ä–æ—Å—Ç—å:** 1200-115200 –±–æ–¥
‚Ä¢ **–¢–æ–ø–æ–ª–æ–≥–∏—è:** –ú–∞—Å—Ç–µ—Ä-–°–ª–µ–π–≤ (Master-Slave)
‚Ä¢ **–ê–¥—Ä–µ—Å–∞—Ü–∏—è:** 1-247 —É—Å—Ç—Ä–æ–π—Å—Ç–≤

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ 03h - –ß—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
‚Ä¢ 06h - –ó–∞–ø–∏—Å—å –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
‚Ä¢ 10h - –ó–∞–ø–∏—Å—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤

*–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.*"""

        elif any(word in message_lower for word in ['–∫–∏—Ä—Ö–≥–æ—Ñ', 'kirchhoff', '–∑–∞–∫–æ–Ω', 'law', '–æ–º', 'ohm', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫', 'electrical']):
            return """**–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–∫–æ–Ω—ã —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∏:**

**1. –ó–∞–∫–æ–Ω –û–º–∞:**
U = I √ó R (–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ = —Ç–æ–∫ √ó —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ)

**2. –ó–∞–∫–æ–Ω—ã –ö–∏—Ä—Ö–≥–æ—Ñ–∞:**
‚Ä¢ **–ü–µ—Ä–≤—ã–π –∑–∞–∫–æ–Ω (–ó–ö–¢):** Œ£I–≤—Ö = Œ£I–≤—ã—Ö
‚Ä¢ **–í—Ç–æ—Ä–æ–π –∑–∞–∫–æ–Ω (–ó–ö–ù):** Œ£E = Œ£IR

**3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–∫–æ–Ω—ã:**
‚Ä¢ **–ó–∞–∫–æ–Ω –î–∂–æ—É–ª—è-–õ–µ–Ω—Ü–∞:** Q = I¬≤Rt
‚Ä¢ **–ó–∞–∫–æ–Ω –§–∞—Ä–∞–¥–µ—è:** –≠–î–° –∏–Ω–¥—É–∫—Ü–∏–∏

*–î–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ö–µ–º—ã.*"""

        elif any(word in message_lower for word in ['–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'safety', '–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å', 'reliability', '—ç–º—Å', 'emc']):
            return """**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:**

**–ü—Ä–∏–Ω—Ü–∏–ø—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:**
‚Ä¢ **–≠–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å** - –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–∫–æ–º
‚Ä¢ **–≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–≠–ú–°)** - –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–º–µ—Ö
‚Ä¢ **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å** - SIL —É—Ä–æ–≤–Ω–∏
‚Ä¢ **–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å** - –∑–∞—â–∏—Ç–Ω—ã–µ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è

**–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã:**
‚Ä¢ **IEC 61508** - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
‚Ä¢ **IEC 61000** - –≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
‚Ä¢ **–ì–û–°–¢ –†** - –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã

*–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–ª–∞—Å—Å–∞ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.*"""

        elif any(word in message_lower for word in ['—Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö', 'data gathering', '–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', 'monitoring']):
            return """**–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ (Data Gathering):**

**–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã:**
‚Ä¢ **SCADA —Å–∏—Å—Ç–µ–º—ã** - Supervisory Control and Data Acquisition
‚Ä¢ **HMI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã** - Human Machine Interface
‚Ä¢ **–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–µ—Ç–∏** - Ethernet, Profinet, Modbus
‚Ä¢ **–î–∞—Ç—á–∏–∫–∏ –∏ –∏–∑–º–µ—Ä–∏—Ç–µ–ª–∏** - –∞–Ω–∞–ª–æ–≥–æ–≤—ã–µ –∏ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã

**–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ **–ü—Ä–æ—Ü–µ—Å—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ** - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –¥–∞–≤–ª–µ–Ω–∏–µ, —Ä–∞—Å—Ö–æ–¥
‚Ä¢ **–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è** - –≤–∫–ª—é—á–µ–Ω–æ/–≤—ã–∫–ª—é—á–µ–Ω–æ, –∞–≤–∞—Ä–∏–∏
‚Ä¢ **–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏** - –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∫–∞—á–µ—Å—Ç–≤–æ

*–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–∞—Å—à—Ç–∞–±–∞ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.*"""

        elif any(word in message_lower for word in ['—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ', '–∑–∞–≥—Ä—É–∑–∫–∞', 'downloading', 'uploading', '–ø—Ä–æ–≥—Ä–∞–º–º', 'programs']):
            return """**–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º:**

**–û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:**
‚Ä¢ **–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π** - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ **–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ** - –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
‚Ä¢ **–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ** - –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
‚Ä¢ **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ** - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏

**–ú–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏:**
‚Ä¢ **USB/Flash** - —á–µ—Ä–µ–∑ —Å—ä–µ–º–Ω—ã–µ –Ω–æ—Å–∏—Ç–µ–ª–∏
‚Ä¢ **Ethernet** - –ø–æ —Å–µ—Ç–µ–≤–æ–º—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é
‚Ä¢ **RS-232/RS-485** - —á–µ—Ä–µ–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—ã

*–í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.*"""

        elif any(word in message_lower for word in ['—Å–∏–º–∏—Å—Ç—Ä', '—Ç–∏—Ä–∏—Å—Ç–æ—Ä', 'thyristor', 'semiconductor', '–ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫']):
            return """**–ü–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∏ –∏ —Ç–∏—Ä–∏—Å—Ç–æ—Ä—ã:**

**–ü–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∏** - –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç—å—é –º–µ–∂–¥—É –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞–º–∏ –∏ –¥–∏—ç–ª–µ–∫—Ç—Ä–∏–∫–∞–º–∏.

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã:**
‚Ä¢ **–î–∏–æ–¥—ã** - –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç—å
‚Ä¢ **–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã** - —É—Å–∏–ª–∏—Ç–µ–ª–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
‚Ä¢ **–¢–∏—Ä–∏—Å—Ç–æ—Ä—ã (—Å–∏–º–∏—Å—Ç–æ—Ä—ã)** - —É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –≤—ã–ø—Ä—è–º–∏—Ç–µ–ª–∏
‚Ä¢ **–û–ø—Ç–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã** - —Å–≤–µ—Ç–æ–¥–∏–æ–¥—ã, —Ñ–æ—Ç–æ—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã

**–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:**
‚Ä¢ **–°–∏–ª–æ–≤–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–≥–∞—Ç–µ–ª—è–º–∏
‚Ä¢ **–†–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è** - –¥–∏–º–º–µ—Ä—ã
‚Ä¢ **–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è** - –∫–æ–º–º—É—Ç–∞—Ü–∏—è —Ü–µ–ø–µ–π

*–¢–∏—Ä–∏—Å—Ç–æ—Ä—ã —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ—â–Ω–æ—Å—Ç—å—é.*"""

        elif any(word in message_lower for word in ['–∞–ª–≥–æ—Ä–∏—Ç–º', 'algorithm', 'python', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–Ω–≤–µ–π–µ—Ä', 'conveyor']):
            return """**–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**

**–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:**
‚Ä¢ **–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏** - –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
‚Ä¢ **–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏** - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
‚Ä¢ **–†–µ–∞–ª–∏–∑–∞—Ü–∏—è** - –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞
‚Ä¢ **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ** - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏

**Python –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ **–ü—Ä–æ—Å—Ç–æ—Ç–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞** - –±—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ **–ë–æ–≥–∞—Ç—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏** - NumPy, SciPy, Pandas
‚Ä¢ **–°–µ—Ç–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏** - TCP/IP, Modbus, OPC

**–ê–ª–≥–æ—Ä–∏—Ç–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ–π–µ—Ä–æ–º:**
‚Ä¢ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å—é** - —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ —á–∞—Å—Ç–æ—Ç—ã
‚Ä¢ **–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è** - –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥
‚Ä¢ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è** - –¥–∞—Ç—á–∏–∫–∏ –∏ —Å–∏–≥–Ω–∞–ª—ã
‚Ä¢ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫** - –∞–≤–∞—Ä–∏–π–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏

*Python –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤.*"""

        elif any(word in message_lower for word in ['–æ–æ–ø', 'oop', '–æ–±—ä–µ–∫—Ç–Ω–æ', '–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ', '–∫–ª–∞—Å—Å', 'class', '–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', 'inheritance', '–∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è', 'encapsulation']):
            return """**–ü—Ä–∏–Ω—Ü–∏–ø—ã –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–û–û–ü):**

**1. –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è (Encapsulation):**
‚Ä¢ –°–æ–∫—Ä—ã—Ç–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã
‚Ä¢ –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è

**2. –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (Inheritance):**
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
‚Ä¢ –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –ò–µ—Ä–∞—Ä—Ö–∏—è –∫–ª–∞—Å—Å–æ–≤ (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∏ –¥–æ—á–µ—Ä–Ω–∏–µ)

**3. –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º (Polymorphism):**
‚Ä¢ –û–¥–∏–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å - –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
‚Ä¢ –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞—Ö
‚Ä¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤

**4. –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è (Abstraction):**
‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
‚Ä¢ –§–æ–∫—É—Å –Ω–∞ –≤–∞–∂–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö
‚Ä¢ –°–æ–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏

*–û–û–ü —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.*"""

        elif any(word in message_lower for word in ['–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏', 'power factor', 'cos œÜ', 'cos phi', '—Ä–µ–∞–∫—Ç–∏–≤–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å', 'reactive power']):
            return """**–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏ –∏ –µ–≥–æ —É–ª—É—á—à–µ–Ω–∏–µ:**

**–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏:**
‚Ä¢ **–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:** cos œÜ = P/S (–∞–∫—Ç–∏–≤–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å / –ø–æ–ª–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å)
‚Ä¢ **–î–∏–∞–ø–∞–∑–æ–Ω:** –æ—Ç 0 –¥–æ 1 (–∏–¥–µ–∞–ª—å–Ω—ã–π = 1)
‚Ä¢ **–§–∏–∑–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª:** –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏

**–¢–∏–ø—ã —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π –º–æ—â–Ω–æ—Å—Ç–∏:**
‚Ä¢ **–ê–∫—Ç–∏–≤–Ω–∞—è (P)** - –ø–æ–ª–µ–∑–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –≤ –í—Ç
‚Ä¢ **–†–µ–∞–∫—Ç–∏–≤–Ω–∞—è (Q)** - —ç–Ω–µ—Ä–≥–∏—è –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –ø–æ–ª–µ–π, –í–ê—Ä
‚Ä¢ **–ü–æ–ª–Ω–∞—è (S)** - –æ–±—â–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –í–ê
‚Ä¢ **–§–æ—Ä–º—É–ª–∞:** S¬≤ = P¬≤ + Q¬≤

**–ú–µ—Ç–æ–¥—ã —É–ª—É—á—à–µ–Ω–∏—è:**
‚Ä¢ **–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä–Ω—ã–µ –±–∞—Ç–∞—Ä–µ–∏** - –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏
‚Ä¢ **–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ç–æ—Ä—ã** - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏
‚Ä¢ **–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ç–æ—Ä—ã (SVC)** - –±—ã—Å—Ç—Ä–∞—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞
‚Ä¢ **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏** - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è

*–ù–∏–∑–∫–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–æ—Ç–µ—Ä—è–º –∏ —à—Ç—Ä–∞—Ñ–∞–º.*"""

        elif any(word in message_lower for word in ['—Å–∏–Ω—Ç–∞–∫—Å–∏—Å', 'syntax', '–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ', 'variables', '—Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö', 'data types']):
            return """**–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏:**

**–û—Å–Ω–æ–≤—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞:**
‚Ä¢ **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã** - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
‚Ä¢ **–ü—Ä–∞–≤–∏–ª–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è** - –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
‚Ä¢ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏** - –ø–æ—è—Å–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
‚Ä¢ **–ë–ª–æ–∫–∏ –∫–æ–¥–∞** - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π

**–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ **–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è** - –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –ø–∞–º—è—Ç–∏
‚Ä¢ **–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è** - –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
‚Ä¢ **–û–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏** - –≥–¥–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞
‚Ä¢ **–¢–∏–ø–∏–∑–∞—Ü–∏—è** - —Å—Ç—Ä–æ–≥–∞—è –∏–ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ **–¶–µ–ª—ã–µ —á–∏—Å–ª–∞** - int, integer (1, 100, -5)
‚Ä¢ **–î—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞** - float, double (3.14, 2.5)
‚Ä¢ **–°—Ç—Ä–æ–∫–∏** - string, char ('Hello', 'A')
‚Ä¢ **–õ–æ–≥–∏—á–µ—Å–∫–∏–µ** - boolean (true/false)
‚Ä¢ **–ú–∞—Å—Å–∏–≤—ã** - –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤

**–í –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏:**
‚Ä¢ **PLC —è–∑—ã–∫–∏** - Ladder Logic, Function Block Diagram
‚Ä¢ **–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞** - I/O mapping
‚Ä¢ **–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –ü–õ–ö** - BOOL, INT, REAL, DINT

*–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã.*"""

        elif any(word in message_lower for word in ['–æ—Ç–ª–∞–¥–∫–∞', 'debugging', '–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏', 'troubleshooting', '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', 'diagnostics']):
            return """**–û—Ç–ª–∞–¥–∫–∞ –∏ –ø–æ–∏—Å–∫ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π:**

**–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ª–∞–¥–∫–∏:**
‚Ä¢ **–ü–æ—à–∞–≥–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ** - —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∫–æ–¥–∞
‚Ä¢ **–¢–æ—á–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∞** - breakpoints –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
‚Ä¢ **–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ** - –∑–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
‚Ä¢ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö** - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π

**–ü–æ–∏—Å–∫ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è** - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤
‚Ä¢ **–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤** - —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∂—É—Ä–Ω–∞–ª—ã –∏ —Å–æ–±—ã—Ç–∏—è
‚Ä¢ **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —Å–≤—è–∑–∏** - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
‚Ä¢ **–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤** - HMI –∏ SCADA –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

**–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:**
‚Ä¢ **–ú—É–ª—å—Ç–∏–º–µ—Ç—Ä—ã** - –∏–∑–º–µ—Ä–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –∏ —Ç–æ–∫–∞
‚Ä¢ **–û—Å—Ü–∏–ª–ª–æ–≥—Ä–∞—Ñ—ã** - –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
‚Ä¢ **–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤** - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
‚Ä¢ **–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ –æ—Ç–ª–∞–¥—á–∏–∫–∏** - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã IDE

**–°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥:**
‚Ä¢ **–ò–∑–æ–ª—è—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã** - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏
‚Ä¢ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º** - –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫ —Å–ª–æ–∂–Ω–æ–º—É
‚Ä¢ **–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ** - –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π

*–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ —É—Å–∫–æ—Ä—è–µ—Ç –ø–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º.*"""

        elif any(word in message_lower for word in ['–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ', 'advanced', '—Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ', 'specific', '—Ñ—É–Ω–∫—Ü–∏–∏', 'functions']):
            return """**–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**

**–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏:**
‚Ä¢ **–†–µ–∫—É—Ä—Å–∏—è** - —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞—é—â–∞—è —Å–∞–º–∞ —Å–µ–±—è
‚Ä¢ **–ó–∞–º—ã–∫–∞–Ω–∏—è** - —Ñ—É–Ω–∫—Ü–∏–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –≤–Ω–µ—à–Ω–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
‚Ä¢ **–õ—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–∏** - –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚Ä¢ **–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã** - –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
‚Ä¢ **–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã** - –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º

**–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ü–õ–ö:**
‚Ä¢ **PID —Ä–µ–≥—É–ª—è—Ç–æ—Ä—ã** - –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ-–∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ-–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ
‚Ä¢ **–¢–∞–π–º–µ—Ä—ã –∏ —Å—á–µ—Ç—á–∏–∫–∏** - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚Ä¢ **–ë–ª–æ–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è** - –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
‚Ä¢ **–ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏** - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
‚Ä¢ **–§—É–Ω–∫—Ü–∏–∏ —Å–≤—è–∑–∏** - –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã

**–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é** - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
‚Ä¢ **–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å** - –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
‚Ä¢ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∞–º–∏
‚Ä¢ **–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã API** - –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

**–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ **–ê–ª–≥–æ—Ä–∏—Ç–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è** - —Å–ª–æ–∂–Ω—ã–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã
‚Ä¢ **–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è** - —É–ª—É—á—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏
‚Ä¢ **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥** - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
‚Ä¢ **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ERP** - —Å–≤—è–∑—å —Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

*–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–≤—ã—à–∞—é—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º.*"""

        elif any(word in message_lower for word in ['–∑–∞—â–∏—Ç', 'protection', '–∫–æ—Ä–æ—Ç–∫', 'short', '–∑–∞–º—ã–∫–∞–Ω–∏–µ', 'circuit', '–ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å', 'fuse', '–∞–≤—Ç–æ–º–∞—Ç', 'breaker', '–≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å', 'switch']):
            return """**–ó–∞—â–∏—Ç–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ø–µ–π –æ—Ç –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–º—ã–∫–∞–Ω–∏—è:**

**–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞—â–∏—Ç—ã:**

**1. –ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏ (Fuses):**
‚Ä¢ –ü–ª–∞–≤–∫–∏–µ –≤—Å—Ç–∞–≤–∫–∏ - –ø–µ—Ä–µ–≥–æ—Ä–∞—é—Ç –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —Ç–æ–∫–∞
‚Ä¢ –ë—ã—Å—Ç—Ä–æ–¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏ - –¥–ª—è –∑–∞—â–∏—Ç—ã –ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤
‚Ä¢ –ó–∞–º–µ–¥–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏ - –¥–ª—è –∑–∞—â–∏—Ç—ã –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π

**2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–∏:**
‚Ä¢ –¢–µ–ø–ª–æ–≤—ã–µ —Ä–∞—Å—Ü–µ–ø–∏—Ç–µ–ª–∏ - —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –ø—Ä–∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–µ
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ —Ä–∞—Å—Ü–µ–ø–∏—Ç–µ–ª–∏ - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ö–ó
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ü–µ–ø–∏—Ç–µ–ª–∏ - –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º–∞—è –∑–∞—â–∏—Ç–∞

**3. –°—É–ø—Ä–µ—Å—Å–æ—Ä—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª–∏:**
‚Ä¢ –í–∞—Ä–∏—Å—Ç–æ—Ä—ã - –∑–∞—â–∏—Ç–∞ –æ—Ç –∏–º–ø—É–ª—å—Å–Ω—ã—Ö –ø–µ—Ä–µ–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–π
‚Ä¢ –ì–∞–∑–æ—Ä–∞–∑—Ä—è–¥–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã - –∑–∞—â–∏—Ç–∞ –æ—Ç –≥—Ä–æ–∑–æ–≤—ã—Ö —Ä–∞–∑—Ä—è–¥–æ–≤
‚Ä¢ TVS-–¥–∏–æ–¥—ã - –±—ã—Å—Ç—Ä–∞—è –∑–∞—â–∏—Ç–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Å—Ö–µ–º

**4. –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ö–µ–º—ã –∑–∞—â–∏—Ç—ã:**
‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–ª—é—Å–æ–≤–∫–∏
‚Ä¢ –¢–æ–∫–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º

*–î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å–∏—Å—Ç–µ–º—ã.*"""

        else:
            # –û–±—â–∏–π –æ—Ç–≤–µ—Ç
            return f"""–Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å: "{message}"

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –º–Ω–µ –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏. 

**–ß—Ç–æ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:**
‚Ä¢ –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π Rubin AI
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
‚Ä¢ –ü–æ–º–æ—â—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –æ–±–ª–∞—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."""

    def _generate_protection_response(self, relevant_info: List[Dict], thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ –∑–∞—â–∏—Ç–µ –æ—Ç –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–º—ã–∫–∞–Ω–∏—è"""
        thinking_process.append("üõ°Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –æ –∑–∞—â–∏—Ç–µ –æ—Ç –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–º—ã–∫–∞–Ω–∏—è...")
        
        response_parts = ["**–ó–∞—â–∏—Ç–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ø–µ–π –æ—Ç –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–º—ã–∫–∞–Ω–∏—è:**\n"]
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞—â–∏—Ç—ã
        response_parts.append("**1. –ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏ (Fuses):**")
        response_parts.append("‚Ä¢ –ü–ª–∞–≤–∫–∏–µ –≤—Å—Ç–∞–≤–∫–∏ - –ø–µ—Ä–µ–≥–æ—Ä–∞—é—Ç –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —Ç–æ–∫–∞")
        response_parts.append("‚Ä¢ –ë—ã—Å—Ç—Ä–æ–¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏ - –¥–ª—è –∑–∞—â–∏—Ç—ã –ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤")
        response_parts.append("‚Ä¢ –ó–∞–º–µ–¥–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏ - –¥–ª—è –∑–∞—â–∏—Ç—ã –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π")
        response_parts.append("")
        
        response_parts.append("**2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–∏ (Circuit Breakers):**")
        response_parts.append("‚Ä¢ –¢–µ–ø–ª–æ–≤—ã–µ —Ä–∞—Å—Ü–µ–ø–∏—Ç–µ–ª–∏ - —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –ø—Ä–∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–µ")
        response_parts.append("‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ —Ä–∞—Å—Ü–µ–ø–∏—Ç–µ–ª–∏ - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ö–ó")
        response_parts.append("‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ü–µ–ø–∏—Ç–µ–ª–∏ - –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º–∞—è –∑–∞—â–∏—Ç–∞")
        response_parts.append("")
        
        response_parts.append("**3. –°—É–ø—Ä–µ—Å—Å–æ—Ä—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–π:**")
        response_parts.append("‚Ä¢ –í–∞—Ä–∏—Å—Ç–æ—Ä—ã - –∑–∞—â–∏—Ç–∞ –æ—Ç –∏–º–ø—É–ª—å—Å–Ω—ã—Ö –ø–µ—Ä–µ–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–π")
        response_parts.append("‚Ä¢ –ì–∞–∑–æ—Ä–∞–∑—Ä—è–¥–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã - –∑–∞—â–∏—Ç–∞ –æ—Ç –≥—Ä–æ–∑–æ–≤—ã—Ö —Ä–∞–∑—Ä—è–¥–æ–≤")
        response_parts.append("‚Ä¢ TVS-–¥–∏–æ–¥—ã - –±—ã—Å—Ç—Ä–∞—è –∑–∞—â–∏—Ç–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Å—Ö–µ–º")
        response_parts.append("")
        
        response_parts.append("**4. –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ö–µ–º—ã –∑–∞—â–∏—Ç—ã:**")
        response_parts.append("‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è")
        response_parts.append("‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–ª—é—Å–æ–≤–∫–∏")
        response_parts.append("‚Ä¢ –¢–æ–∫–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º")
        response_parts.append("")
        
        response_parts.append("**–ü—Ä–∏–Ω—Ü–∏–ø—ã –∑–∞—â–∏—Ç—ã:**")
        response_parts.append("‚Ä¢ –°–µ–ª–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞")
        response_parts.append("‚Ä¢ –ë—ã—Å—Ç—Ä–æ–¥–µ–π—Å—Ç–≤–∏–µ - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è")
        response_parts.append("‚Ä¢ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å - –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏ –ö–ó")
        response_parts.append("‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ—Å—Ç—å - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if relevant_info:
            response_parts.append(f"\n**–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**")
            for info in relevant_info[:3]:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—â–∏—Ç–µ
                protection_sentences = []
                for sentence in info['sentences']:
                    if any(word in sentence.lower() for word in ['–∑–∞—â–∏—Ç', '–∫–æ—Ä–æ—Ç–∫', '–ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å', '–∞–≤—Ç–æ–º–∞—Ç', '—Å—É–ø—Ä–µ—Å—Å–æ—Ä', '–∑–∞–º—ã–∫–∞–Ω–∏–µ']):
                        protection_sentences.append(sentence)
                
                if protection_sentences:
                    response_parts.append(f"\nüìÑ **{info['title']}:**")
                    for sentence in protection_sentences[:2]:
                        response_parts.append(f"‚Ä¢ {sentence}")
                else:
                    response_parts.append(f"\nüìÑ **{info['title']}:**")
                    response_parts.append("‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–∞—Ö –∑–∞—â–∏—Ç—ã")
        
        
        return "\n".join(response_parts)
    
    def _generate_understanding_process_response(self, thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–Ω–∏–º–∞–Ω–∏—è"""
        thinking_process.append("üß† –û–±—ä—è—Å–Ω—è—é –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–Ω–∏–º–∞–Ω–∏—è...")
        
        return """üß† **–ö–∞–∫ —è –ø–æ–Ω–∏–º–∞—é –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:**

**1. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:**
‚Ä¢ –ù–æ—Ä–º–∞–ª–∏–∑—É—é —Ç–µ–∫—Å—Ç (–ø—Ä–∏–≤–æ–∂—É –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
‚Ä¢ –û—á–∏—â–∞—é –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
‚Ä¢ –†–∞–∑–±–∏–≤–∞—é –Ω–∞ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—é –¥–ª–∏–Ω—É –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è

**2. –õ–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:**
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—é —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–æ–ø—Ä–æ—Å, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∫–æ–º–∞–Ω–¥–∞)
‚Ä¢ –ò–∑–≤–ª–µ–∫–∞—é –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Ç–µ—Ä–º–∏–Ω—ã
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É

**3. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ:**
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—é –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –í—ã—è–≤–ª—è—é –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–æ–¥—Ç–µ–∫—Å—Ç
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—é —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞

**4. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ:**
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
‚Ä¢ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É—é –ø–æ –æ–±–ª–∞—Å—Ç—è–º –∑–Ω–∞–Ω–∏–π
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
‚Ä¢ –í—ã—è–≤–ª—è—é –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏

**5. –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ:**
‚Ä¢ –£—á–∏—Ç—ã–≤–∞—é –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—é —Ç–µ–∫—É—â—É—é —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–µ—è–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä—É—é –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

**6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞:**
‚Ä¢ –§–æ—Ä–º–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –ª–æ–≥–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç
‚Ä¢ –í–∫–ª—é—á–∞—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã
‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä—É—é —Å—Ç–∏–ª—å –ø–æ–¥ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–ª–Ω–æ—Ç—É –∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞

**–í–∞—à –≤–æ–ø—Ä–æ—Å —è –ø–æ–Ω—è–ª –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–æ–∏—Ö –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ–Ω–∏–º–∞–Ω–∏—è —è–∑—ã–∫–∞ –∏ —Å–º—ã—Å–ª–∞.**"""
    
    def _generate_thinking_process_response(self, thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –º—ã—à–ª–µ–Ω–∏—è"""
        thinking_process.append("ü§î –û–±—ä—è—Å–Ω—è—é –ø—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è...")
        
        return """ü§î **–ú–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è:**

**1. –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥—è—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:**
‚Ä¢ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?
‚Ä¢ –ö–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω—É–∂–Ω–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞?
‚Ä¢ –ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è?
‚Ä¢ –ï—Å—Ç—å –ª–∏ –ø–æ–¥–≤–æ–¥–Ω—ã–µ –∫–∞–º–Ω–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ?

**2. –ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –ò—â—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—é –∫–∞—á–µ—Å—Ç–≤–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
‚Ä¢ –í—ã—è–≤–ª—è—é –ø—Ä–æ–±–µ–ª—ã –≤ –∑–Ω–∞–Ω–∏—è—Ö

**3. –°–∏–Ω—Ç–µ–∑ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ –û–±—ä–µ–¥–∏–Ω—è—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
‚Ä¢ –§–æ—Ä–º–∏—Ä—É—é –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

**4. –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è:**
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—é —É—Ä–æ–≤–µ–Ω—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –í—ã–±–∏—Ä–∞—é –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –î–æ–±–∞–≤–ª—è—é –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –∞–Ω–∞–ª–æ–≥–∏–∏
‚Ä¢ –£—á–∏—Ç—ã–≤–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

**5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è:**
‚Ä¢ –£–±–µ–∂–¥–∞—é—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–ª–Ω–æ—Ç—É –∏ –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
‚Ä¢ –û—Ü–µ–Ω–∏–≤–∞—é –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

**6. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:**
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
‚Ä¢ –î–æ–±–∞–≤–ª—è—é –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (—ç–º–æ–¥–∑–∏, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
‚Ä¢ –í–∫–ª—é—á–∞—é –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞—é –¥–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏

**–í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —è —Ä–∞–∑–º—ã—à–ª—è—é –æ —Ç–æ–º, –∫–∞–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–≤–æ–π –º—ã—Å–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å.**"""
    
    def _generate_decision_process_response(self, thinking_process: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π"""
        thinking_process.append("üéØ –û–±—ä—è—Å–Ω—è—é –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π...")
        
        return """üéØ **–ö–∞–∫ —è –ø—Ä–∏–Ω–∏–º–∞—é —Ä–µ—à–µ–Ω–∏—è –∏ –≤—ã–±–∏—Ä–∞—é –æ—Ç–≤–µ—Ç—ã:**

**1. –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏:**
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—é —Ç–∏–ø –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞
‚Ä¢ –í—ã—è–≤–ª—è—é –∫–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
‚Ä¢ –û—Ü–µ–Ω–∏–≤–∞—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã
‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–µ—à–µ–Ω–∏—è

**2. –í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥–∞:**
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å ‚Üí —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è
‚Ä¢ –ú–µ—Ç–∞-–≤–æ–ø—Ä–æ—Å ‚Üí –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å ‚Üí –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
‚Ä¢ –ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚Üí —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ

**3. –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
‚Ä¢ –ò—â—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—é –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –û—Ü–µ–Ω–∏–≤–∞—é –∫–∞—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

**4. –°–∏–Ω—Ç–µ–∑ —Ä–µ—à–µ–Ω–∏—è:**
‚Ä¢ –û–±—ä–µ–¥–∏–Ω—è—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É—é –ª–æ–≥–∏—á–µ—Å–∫–∏
‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä—É—é –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –î–æ–±–∞–≤–ª—è—é –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã

**5. –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞:**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
‚Ä¢ –£–±–µ–∂–¥–∞—é—Å—å –≤ –ø–æ–ª–Ω–æ—Ç–µ
‚Ä¢ –û—Ü–µ–Ω–∏–≤–∞—é –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å
‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

**6. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:**
‚Ä¢ –í—ã–±–∏—Ä–∞—é –ª—É—á—à–∏–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ –î–æ–±–∞–≤–ª—è—é –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
‚Ä¢ –í–∫–ª—é—á–∞—é –ø—Ä–∏–º–µ—Ä—ã –∏ –∞–Ω–∞–ª–æ–≥–∏–∏
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞—é –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è

**–ú–æ–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ, —Å–∏–Ω—Ç–µ–∑–µ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞.**"""

    def get_capabilities(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        return [
            TaskType.GENERAL_CHAT,
            TaskType.TECHNICAL_DOCUMENTATION,
            TaskType.PLC_ANALYSIS,
            TaskType.PMAC_ANALYSIS,
            TaskType.CNC_ANALYSIS
        ]
