#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï - –ó–∞–ø—É—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
"""

import subprocess
import sys
import time
import os
import signal

def kill_all_python():
    """–£–±–∏–≤–∞–µ—Ç –≤—Å–µ Python –ø—Ä–æ—Ü–µ—Å—Å—ã"""
    try:
        print("üî™ –£–±–∏–≤–∞—é –í–°–ï Python –ø—Ä–æ—Ü–µ—Å—Å—ã...")
        if os.name == 'nt':  # Windows
            subprocess.run(["taskkill", "/f", "/im", "python.exe"], capture_output=True)
            subprocess.run(["taskkill", "/f", "/im", "pythonw.exe"], capture_output=True)
        else:  # Linux/Mac
            subprocess.run(["pkill", "-f", "python"], capture_output=True)
        time.sleep(3)
        print("‚úÖ –í—Å–µ Python –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")

def test_components():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...")
    
    components = [
        ("–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å", "neural_rubin", "get_neural_rubin"),
        ("–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ç–æ—Ä", "enhanced_request_categorizer", "get_enhanced_categorizer"),
        ("–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫", "programming_knowledge_handler", "get_programming_handler"),
        ("–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫", "electrical_knowledge_handler", "get_electrical_handler"),
        ("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä", "intelligent_dispatcher", "get_intelligent_dispatcher")
    ]
    
    all_ok = True
    for name, module, function in components:
        try:
            mod = __import__(module)
            func = getattr(mod, function)
            instance = func()
            print(f"‚úÖ {name}")
        except Exception as e:
            print(f"‚ùå {name}: {e}")
            all_ok = False
    
    return all_ok

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï RUBIN AI")
    print("=" * 50)
    
    # –®–∞–≥ 1: –£–±–∏–≤–∞–µ–º –≤—Å–µ Python –ø—Ä–æ—Ü–µ—Å—Å—ã
    kill_all_python()
    
    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    if not test_components():
        print("‚ùå –ù–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã!")
        print("–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        return
    
    # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    print("\nüß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    try:
        from neural_rubin import get_neural_rubin
        neural_ai = get_neural_rubin()
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        test_response = neural_ai.generate_response("–°—Ä–∞–≤–Ω–∏ C++ –∏ Python")
        if "Programming Knowledge Handler" in test_response.get('provider', ''):
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            print("‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {test_response.get('provider', 'N/A')}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    # –®–∞–≥ 4: –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    print(f"\nüöÄ –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –°–ï–†–í–ï–†–ê –ù–ê –ü–û–†–¢–£ 8084")
    print("üìç RubinDeveloper: file:///C:/Users/elekt/OneDrive/Desktop/Rubin_AI_v2/matrix/RubinDeveloper.html")
    print("\nüß™ –¢–ï–°–¢–û–í–´–ï –ó–ê–ü–†–û–°–´:")
    print("‚Ä¢ –ø—Ä–∏–≤–µ—Ç")
    print("‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä? –û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.")
    print("‚Ä¢ –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ü–õ–ö?")
    print("‚Ä¢ —á—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä?")
    print("‚Ä¢ –°—Ä–∞–≤–Ω–∏ C++ –∏ Python")
    print("\n" + "=" * 50)
    print("üîÑ –û–ë–ù–û–í–ò–¢–ï –°–¢–†–ê–ù–ò–¶–£ RUBINDEVELOPER (F5)!")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        from rubin_server import app
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ –ø–æ—Ä—Ç—É 8084
        print("üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8084")
        app.run(host='0.0.0.0', port=8084, debug=False, threaded=True)
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"\n‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()