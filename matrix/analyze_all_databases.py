#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –±–∞–∑ –∑–Ω–∞–Ω–∏–π Smart Rubin AI
"""

import sqlite3
import os
from datetime import datetime

def analyze_database(db_path):
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print(f"\nüìÅ –ê–ù–ê–õ–ò–ó: {os.path.basename(db_path)}")
    print("=" * 60)
    
    if not os.path.exists(db_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {db_path}")
        return
    
    file_size = os.path.getsize(db_path)
    print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:,} –±–∞–π—Ç")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        
        if not tables:
            print("‚ùå –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            conn.close()
            return
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        
        total_records = 0
        for table in tables:
            table_name = table[0]
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            if table_name.startswith('sqlite_'):
                continue
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏
            cursor.execute(f"SELECT COUNT(*) FROM {table_name};")
            count = cursor.fetchone()[0]
            total_records += count
            
            print(f"   üìÑ {table_name}: {count:,} –∑–∞–ø–∏—Å–µ–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute(f"PRAGMA table_info({table_name});")
            columns = cursor.fetchall()
            
            if columns:
                print(f"      –°—Ç—Ä—É–∫—Ç—É—Ä–∞:")
                for col in columns:
                    col_id, col_name, col_type, not_null, default_val, pk = col
                    pk_mark = " (PK)" if pk else ""
                    print(f"         ‚Ä¢ {col_name}: {col_type}{pk_mark}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü —Å –Ω–µ–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø–∏—Å–µ–π
            if count > 0 and count <= 5:
                cursor.execute(f"SELECT * FROM {table_name} LIMIT 3;")
                examples = cursor.fetchall()
                print(f"      –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
                for i, example in enumerate(examples, 1):
                    print(f"         {i}. {example}")
            elif count > 5:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                cursor.execute(f"SELECT * FROM {table_name} ORDER BY rowid DESC LIMIT 2;")
                recent = cursor.fetchall()
                print(f"      –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:")
                for i, record in enumerate(recent, 1):
                    print(f"         {i}. {record}")
        
        print(f"\nüìä –ò–¢–û–ì–û –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {total_records:,}")
        
        conn.close()
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß† –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ë–ê–ó –ó–ù–ê–ù–ò–ô SMART RUBIN AI")
    print("=" * 80)
    print(f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –°–ø–∏—Å–æ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    databases = [
        "rubin_ai.db",           # –¢–µ–∫—É—â–∞—è –±–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        "rubin_knowledge.db",    # –û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
        "rubin_knowledge_base.db", # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è)
        "rubin_documents.db",    # –ë–∞–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        "rubin_learning.db"      # –ë–∞–∑–∞ –æ–±—É—á–µ–Ω–∏—è
    ]
    
    total_size = 0
    total_records = 0
    
    for db_name in databases:
        if os.path.exists(db_name):
            analyze_database(db_name)
            total_size += os.path.getsize(db_name)
        else:
            print(f"\n‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_name}")
    
    print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 60)
    print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö –±–∞–∑: {total_size:,} –±–∞–π—Ç ({total_size/1024/1024:.2f} –ú–ë)")
    print(f"üìÅ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –±–∞–∑: {len([db for db in databases if os.path.exists(db)])}")
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()
