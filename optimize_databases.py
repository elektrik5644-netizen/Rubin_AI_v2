#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–ª–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö Rubin AI v2
–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—é, —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –æ—á–∏—Å—Ç–∫—É
"""

import os
import sys
from datetime import datetime

def print_header(title):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print("\n" + "=" * 60)
    print(f"üöÄ {title}")
    print("=" * 60)

def print_step(step_num, title, description=""):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —à–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    print(f"\nüìã –®–ê–ì {step_num}: {title}")
    if description:
        print(f"   {description}")
    print("-" * 40)

def check_prerequisites():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"""
    print_header("–ü–†–û–í–ï–†–ö–ê –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–• –£–°–õ–û–í–ò–ô")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
    required_scripts = [
        'consolidate_documents.py',
        'unify_knowledge.py', 
        'cleanup_databases.py'
    ]
    
    missing_scripts = []
    for script in required_scripts:
        if not os.path.exists(script):
            missing_scripts.append(script)
    
    if missing_scripts:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–∫—Ä–∏–ø—Ç—ã: {', '.join(missing_scripts)}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    db_files = [f for f in os.listdir('.') if f.endswith('.db')]
    if not db_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–∫—Ä–∏–ø—Ç–æ–≤: {len(required_scripts)}")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: {len(db_files)}")
    print("‚úÖ –í—Å–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    
    return True

def create_backup_folder():
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
    backup_folder = f"database_backups_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    if not os.path.exists(backup_folder):
        os.makedirs(backup_folder)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {backup_folder}")
    
    return backup_folder

def run_script(script_name, description):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print(f"\nüîÑ –ó–∞–ø—É—Å–∫: {script_name}")
    print(f"   {description}")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
        if script_name == 'consolidate_documents.py':
            from consolidate_documents import consolidate_documents
            result = consolidate_documents()
            return result is not None
            
        elif script_name == 'unify_knowledge.py':
            from unify_knowledge import unify_knowledge_bases
            result = unify_knowledge_bases()
            return result is not None
            
        elif script_name == 'cleanup_databases.py':
            from cleanup_databases import cleanup_databases
            cleanup_databases()
            return True
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return False

def generate_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print_header("–û–¢–ß–ï–¢ –û–ë –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    db_files = [f for f in os.listdir('.') if f.endswith('.db')]
    total_size = sum(os.path.getsize(f) for f in db_files)
    
    print(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   –í—Å–µ–≥–æ –±–∞–∑: {len(db_files)}")
    print(f"   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size / 1024 / 1024:.1f} MB")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–∑—ã
    optimized_dbs = [
        'rubin_documents_consolidated.db',
        'rubin_knowledge_unified.db'
    ]
    
    print(f"\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–∑—ã:")
    for db in optimized_dbs:
        if os.path.exists(db):
            size = os.path.getsize(db)
            print(f"   - {db}: {size / 1024 / 1024:.1f} MB")
        else:
            print(f"   - {db}: –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    backup_files = [f for f in os.listdir('.') if 'backup' in f and f.endswith('.db')]
    print(f"\nüì¶ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏: {len(backup_files)}")
    
    print(f"\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print(f"   1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print(f"   2. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print(f"   3. –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –±–∞–∑—ã –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print(f"   4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print_header("–ü–û–õ–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ë–ê–ó –î–ê–ù–ù–´–• RUBIN AI V2")
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç –ø–æ–ª–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
    print("–í–ù–ò–ú–ê–ù–ò–ï: –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    if not check_prerequisites():
        print("\n‚ùå –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    backup_folder = create_backup_folder()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–æ —à–∞–≥–∞–º
    steps = [
        {
            'script': 'consolidate_documents.py',
            'title': '–ö–û–ù–°–û–õ–ò–î–ê–¶–ò–Ø –î–û–ö–£–ú–ï–ù–¢–û–í',
            'description': '–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –±–∞–∑—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—ç–∫–æ–Ω–æ–º–∏—è ~35 MB)'
        },
        {
            'script': 'unify_knowledge.py', 
            'title': '–£–ù–ò–§–ò–ö–ê–¶–ò–Ø –ë–ê–ó –ó–ù–ê–ù–ò–ô',
            'description': '–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π'
        },
        {
            'script': 'cleanup_databases.py',
            'title': '–û–ß–ò–°–¢–ö–ê –ë–ê–ó –î–ê–ù–ù–´–•', 
            'description': '–£–¥–∞–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ –∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
        }
    ]
    
    success_count = 0
    
    for i, step in enumerate(steps, 1):
        print_step(i, step['title'], step['description'])
        
        if run_script(step['script'], step['description']):
            print(f"‚úÖ –®–∞–≥ {i} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            success_count += 1
        else:
            print(f"‚ùå –®–∞–≥ {i} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    generate_report()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print_header("–ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    
    if success_count == len(steps):
        print("üéâ –í–°–ï –®–ê–ì–ò –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        print("‚úÖ –ú–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ")
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∞")
    else:
        print(f"‚ö†Ô∏è –í–´–ü–û–õ–ù–ï–ù–û {success_count} –ò–ó {len(steps)} –®–ê–ì–û–í")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º")
        print("üì¶ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    print(f"\nüìÅ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {backup_folder}")
    print("üîß –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    
    return success_count == len(steps)

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("üì¶ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üì¶ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        sys.exit(1)










