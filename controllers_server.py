#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üéõÔ∏è CONTROLLERS SERVER
=====================
–°–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö –∏ PLC —Ñ–∞–π–ª–∞—Ö
"""

from flask import Flask, request, jsonify
import logging
import os
import re
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

class PLCFileAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä PLC —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self):
        self.errors_found = []
        self.warnings = []
    
    def analyze_plc_file(self, file_path):
        """–ê–Ω–∞–ª–∏–∑ PLC —Ñ–∞–π–ª–∞ –Ω–∞ –æ—à–∏–±–∫–∏"""
        try:
            if not os.path.exists(file_path):
                return {
                    'success': False,
                    'error': f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}',
                    'errors': [],
                    'warnings': []
                }
            
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
            
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            errors = self._find_syntax_errors(content)
            warnings = self._find_warnings(content)
            
            return {
                'success': True,
                'file_path': file_path,
                'file_size': len(content),
                'lines_count': len(content.split('\n')),
                'errors': errors,
                'warnings': warnings,
                'analysis_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {e}")
            return {
                'success': False,
                'error': str(e),
                'errors': [],
                'warnings': []
            }
    
    def _find_syntax_errors(self, content):
        """–ü–æ–∏—Å–∫ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"""
        errors = []
        lines = content.split('\n')
        
        for i, line in enumerate(lines, 1):
            line = line.strip()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            if 'AXIS_DISCONNECTEP_TP_P' in line:
                errors.append({
                    'line': i,
                    'type': 'syntax',
                    'severity': 'error',
                    'message': '–û–ø–µ—á–∞—Ç–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π',
                    'details': 'AXIS_DISCONNECTEP_TP_P –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å AXIS_DISCONNECTED_TP_P',
                    'code': line
                })
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
            if 'TIMER_SIMPLE77_P' in line and 'SOJ_PUMP_PISTOL_STAGE_P = 2' in content:
                errors.append({
                    'line': i,
                    'type': 'logic',
                    'severity': 'error',
                    'message': '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä',
                    'details': 'TIMER_SIMPLE77_P –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å TIMER_SIMPLE78_P –≤ –±–ª–æ–∫–µ SOJ_PUMP_PISTOL_STAGE_P = 2',
                    'code': line
                })
        
        return errors
    
    def _find_warnings(self, content):
        """–ü–æ–∏—Å–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
        warnings = []
        lines = content.split('\n')
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        if_count = content.count('IF')
        endif_count = content.count('ENDIF')
        while_count = content.count('WHILE')
        endwhile_count = content.count('ENDWHILE')
        
        if if_count != endif_count:
            warnings.append({
                'type': 'balance',
                'severity': 'warning',
                'message': f'–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IF/ENDIF: {if_count} IF, {endif_count} ENDIF'
            })
        
        if while_count != endwhile_count:
            warnings.append({
                'type': 'balance',
                'severity': 'warning',
                'message': f'–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ WHILE/ENDWHILE: {while_count} WHILE, {endwhile_count} ENDWHILE'
            })
        
        return warnings

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
plc_analyzer = PLCFileAnalyzer()

@app.route('/api/controllers/topic/general', methods=['GET', 'POST'])
def handle_controllers_request():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö"""
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∏ POST –∑–∞–ø—Ä–æ—Å–æ–≤
        if request.method == 'GET':
            message = request.args.get('message', '')
        else:
            data = request.get_json()
            message = data.get('message', '')
        
        logger.info(f"üéõÔ∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤: {message[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ PLC —Ñ–∞–π–ª–∞
        if '.plc' in message.lower() or '–ø—Ä–æ—á—Ç–∏' in message.lower() or '–Ω–∞–π–¥–∏ –æ—à–∏–±–∫—É' in message.lower():
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
            file_path = None
            if 'C:\\' in message:
                # –ü–æ–∏—Å–∫ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                path_match = re.search(r'C:\\[^"]+\.plc', message)
                if path_match:
                    file_path = path_match.group(0)
            
            if file_path:
                # –ê–Ω–∞–ª–∏–∑ PLC —Ñ–∞–π–ª–∞
                result = plc_analyzer.analyze_plc_file(file_path)
                
                if result['success']:
                    response_text = f"""üîç **–ê–ù–ê–õ–ò–ó PLC –§–ê–ô–õ–ê –ó–ê–í–ï–†–®–ï–ù**

**üìÅ –§–∞–π–ª:** `{result['file_path']}`
**üìä –†–∞–∑–º–µ—Ä:** {result['file_size']} —Å–∏–º–≤–æ–ª–æ–≤
**üìù –°—Ç—Ä–æ–∫:** {result['lines_count']}
**‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:** {result['analysis_time']}

**‚ùå –ù–ê–ô–î–ï–ù–ù–´–ï –û–®–ò–ë–ö–ò ({len(result['errors'])}):**
"""
                    
                    for error in result['errors']:
                        response_text += f"""
‚Ä¢ **–°—Ç—Ä–æ–∫–∞ {error['line']}:** {error['message']}
  - **–î–µ—Ç–∞–ª–∏:** {error['details']}
  - **–ö–æ–¥:** `{error['code']}`
"""
                    
                    if result['warnings']:
                        response_text += f"""
**‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(result['warnings'])}):**
"""
                        for warning in result['warnings']:
                            response_text += f"‚Ä¢ {warning['message']}\n"
                    
                    response_text += f"""
**üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**
1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Å—Ç–∞–¥–∏—è–º–∏
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤
4. –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–ª–æ–∂–Ω—ã–º –±–ª–æ–∫–∞–º

**–≠—Ç–∏ –æ—à–∏–±–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ñ—Ä–µ–∑–µ—Ä–Ω–æ–≥–æ —Å—Ç–∞–Ω–∫–∞ VMB630!** üè≠‚ö†Ô∏è"""
                    
                    return jsonify({
                        'success': True,
                        'response': {
                            'explanation': response_text,
                            'category': 'controllers',
                            'analysis_result': result
                        }
                    })
                else:
                    return jsonify({
                        'success': False,
                        'error': result['error']
                    })
            else:
                return jsonify({
                    'success': True,
                    'response': {
                        'explanation': '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—É—Ç—å –∫ PLC —Ñ–∞–π–ª—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.',
                        'category': 'controllers'
                    }
                })
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ —Å–æ–±—ã—Ç–∏—è—Ö –∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è—Ö
        if any(keyword in message.lower() for keyword in ['—Å–æ–±—ã—Ç–∏—è', '–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è', 'events', 'interrupts', 'interrupt']):
            return jsonify({
                'success': True,
                'response': {
                    'explanation': """üéõÔ∏è **–°–û–ë–´–¢–ò–Ø –ò –ü–†–ï–†–´–í–ê–ù–ò–Ø –í –ö–û–ù–¢–†–û–õ–õ–ï–†–ê–•**

**–°–æ–±—ã—Ç–∏—è (Events):**
‚Ä¢ –í–Ω–µ—à–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è - —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –¥–∞—Ç—á–∏–∫–æ–≤, –∫–Ω–æ–ø–æ–∫
‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è - —Ç–∞–π–º–µ—Ä—ã, —Å—á–µ—Ç—á–∏–∫–∏, —Ñ–ª–∞–≥–∏
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è - –æ—à–∏–±–∫–∏, —Å–±–æ–∏ –ø–∏—Ç–∞–Ω–∏—è

**–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Interrupts):**
‚Ä¢ –ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è - –≤–Ω–µ—à–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è - –≤—ã–∑–æ–≤—ã –ø–æ–¥–ø—Ä–æ–≥—Ä–∞–º–º
‚Ä¢ –¢–∞–π–º–µ—Ä–Ω—ã–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è - –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏

**–¢–∏–ø—ã –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π:**
‚Ä¢ –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ (Immediate) - –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
‚Ä¢ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ (Delayed) - –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
‚Ä¢ –£—Å–ª–æ–≤–Ω—ã–µ (Conditional) - –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏—è

**–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ PLC:**
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (User Interrupts)
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (System Interrupts)
‚Ä¢ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø–æ —Ç–∞–π–º–µ—Ä—É (Timer Interrupts)
‚Ä¢ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø–æ —Å—á–µ—Ç—á–∏–∫—É (Counter Interrupts)

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–≤–µ–π–µ—Ä–∞
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –¥–∞—Ç—á–∏–∫–æ–≤
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –†–µ–∞–∫—Ü–∏—è –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã""",
                    'category': 'controllers'
                }
            })
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ SCADA
        if any(keyword in message.lower() for keyword in ['scada', '—Å–∫–∞–¥–∞', '–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', '–¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏—è']):
            return jsonify({
                'success': True,
                'response': {
                    'explanation': """üéõÔ∏è **SCADA –°–ò–°–¢–ï–ú–´**

**SCADA (Supervisory Control and Data Acquisition):**
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
‚Ä¢ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**
‚Ä¢ HMI (Human Machine Interface) - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ PLC/RTU - –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
‚Ä¢ –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏
‚Ä¢ –°–µ—Ä–≤–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è

**–§—É–Ω–∫—Ü–∏–∏ SCADA:**
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
‚Ä¢ –ê–≤–∞—Ä–∏–π–Ω–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è
‚Ä¢ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤

**–ü—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–≤—è–∑–∏:**
‚Ä¢ Modbus RTU/TCP
‚Ä¢ Profinet
‚Ä¢ Ethernet/IP
‚Ä¢ OPC UA
‚Ä¢ DNP3

**–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:**
‚Ä¢ –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞
‚Ä¢ –ù–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤–∞—è –æ—Ç—Ä–∞—Å–ª—å
‚Ä¢ –í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ
‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
‚Ä¢ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç""",
                    'category': 'controllers'
                }
            })
        
        # –û–±—â–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        m = (message or "").lower()

        # –¢–æ—á–µ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤
        if 'pmac' in m:
            return jsonify({
                'success': True,
                'response': {
                    'explanation': (
                        "PMAC ‚Äî –º–Ω–æ–≥–æ–æ—Å–µ–≤–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–≤–∏–∂–µ–Ω–∏—è (Delta Tau/Omron).\n"
                        "–ö–ª—é—á–µ–≤–æ–µ: –æ—Å–∏/—ç–Ω–∫–æ–¥–µ—Ä—ã, –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ (counts‚Üîunits), –ª–∏–º–∏—Ç—ã/–¥–æ–º, —Å–µ—Ä–≤–æ–∫–æ–Ω—Ç—É—Ä—ã (P/I/D/FF),\n"
                        "—Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ (–ª–∏–Ω–µ–π–Ω—ã–µ/–¥—É–≥–∏/—Å–ø–ª–∞–π–Ω—ã), —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (CAM/GEAR), –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã (EtherCAT/RS-232/TCP).\n\n"
                        "–ë—ã—Å—Ç—Ä—ã–π —á–µ–∫-–ª–∏—Å—Ç –≤–≤–æ–¥–∞ –≤ —Ä–∞–±–æ—Ç—É:\n"
                        "1) –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å (—Ç–∏–ø —ç–Ω–∫–æ–¥–µ—Ä–∞, –ø–æ–ª—è—Ä–Ω–æ—Å—Ç—å, –º–∞—Å—à—Ç–∞–±).\n"
                        "2) –ü—Ä–µ–¥–µ–ª—ã: soft/hard limits, homing.\n"
                        "3) –ö–æ–Ω—Ç—É—Ä—ã: –ø–æ–¥–Ω—è—Ç—å P –¥–æ –∫–æ–ª–µ–±–∞–Ω–∏–π, –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–∏—Ç—å D; I ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç. –æ—à–∏–±–∫–∏.\n"
                        "4) –ü—Ä–æ—Ñ–∏–ª–∏ —É—Å–∫–æ—Ä–µ–Ω–∏—è/—Å–∫–æ—Ä–æ—Å—Ç–∏ (S-curve).\n"
                        "5) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–≥—Ä—É–∑–∫–∏; —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ NVRAM."
                    ),
                    'category': 'controllers'
                }
            })

        if 'pid' in m or '–ø–∏–¥' in m:
            return jsonify({
                'success': True,
                'response': {
                    'explanation': (
                        "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PID (–ø—Ä–∞–∫—Ç–∏–∫–∞):\n"
                        "1) I=D=0. –ü–æ–¥–Ω–∏–º–∞–π—Ç–µ P –¥–æ –ø—Ä–µ–¥–∫–æ–ª–µ–±–∞–Ω–∏–π (Ku), –∏–∑–º–µ—Ä—å—Ç–µ –ø–µ—Ä–∏–æ–¥ Tu.\n"
                        "2) Ziegler‚ÄìNichols (–º—è–≥–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç): P=0.45¬∑Ku, I=1.2¬∑P/Tu, D=P¬∑Tu/12.\n"
                        "3) –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä (anti-windup), —Ñ–∏–ª—å—Ç—Ä—É–π—Ç–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ (low-pass).\n"
                        "4) –î–ª—è –∫–æ–Ω–≤–µ–π–µ—Ä–∞: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞, –ø–ª–∞–≤–Ω—ã–π —Ä–∞–∑–≥–æ–Ω (S-curve), D —á—É—Ç—å –≤—ã—à–µ –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è —Ä—ã–≤–∫–æ–≤.\n"
                        "5) –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥ —Ä–∞–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π, –Ω–∞ –∫—Ä–∞—è—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –¥–æ–±–∞–≤—å—Ç–µ –∑–∞—â–∏—Ç—É –ø–æ —Ç–æ–∫—É."
                    ),
                    'category': 'controllers'
                }
            })

        return jsonify({
            'success': True,
            'response': {
                'explanation': f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω: '{message}'. –£—Ç–æ—á–Ω–∏—Ç–µ —Ç–µ–º—É (PMAC, PID, SCADA, —Å–æ–±—ã—Ç–∏—è/–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –ø—É—Ç—å –∫ .plc –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞).",
                'category': 'controllers'
            }
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        'status': 'healthy',
        'service': 'controllers',
        'version': '1.0.0',
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/controllers/status', methods=['GET'])
def controllers_status():
    """–°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤"""
    return jsonify({
        'status': 'active',
        'module': 'controllers',
        'capabilities': [
            'PLC file analysis',
            'Syntax error detection',
            'Logic error detection',
            'Timer analysis'
        ],
        'uptime': 'running'
    })

if __name__ == '__main__':
    print("üéõÔ∏è Controllers Server –∑–∞–ø—É—â–µ–Ω")
    print("URL: http://localhost:9000")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    print("  - POST /api/controllers/topic/general - –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤")
    print("  - GET /api/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    print("  - GET /api/controllers/status - —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è")
    app.run(host='0.0.0.0', port=9000, debug=True)



