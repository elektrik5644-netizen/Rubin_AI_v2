#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä PDF –≤ —Ç–µ–∫—Å—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import sqlite3
import os
import hashlib
from datetime import datetime
import PyPDF2
import re

def extract_text_with_structure(pdf_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    try:
        with open(pdf_path, 'rb') as file:
            pdf_reader = PyPDF2.PdfReader(file)
            text = ""
            
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(pdf_reader.pages)}")
            
            for page_num in range(len(pdf_reader.pages)):
                page = pdf_reader.pages[page_num]
                page_text = page.extract_text()
                
                if page_text:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    text += f"\n--- –°–¢–†–ê–ù–ò–¶–ê {page_num + 1} ---\n"
                    text += page_text + "\n"
                
                print(f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}: {len(page_text) if page_text else 0} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return text.strip()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
        return None

def improve_text_structure(text):
    """–£–ª—É—á—à–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞"""
    if not text:
        return ""
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = text.split('\n')
    improved_lines = []
    
    for line in lines:
        line = line.strip()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if not line:
            continue
        
        # –£–ª—É—á—à–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if re.match(r'^\d+\.', line):  # –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
            improved_lines.append(f"\n{line}")
        elif re.match(r'^\d+\.\d+', line):  # –ü–æ–¥–ø—É–Ω–∫—Ç—ã
            improved_lines.append(f"  {line}")
        elif line.isupper() and len(line) > 10:  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏
            improved_lines.append(f"\n{line}")
        else:
            improved_lines.append(line)
    
    return '\n'.join(improved_lines)

def create_structured_text(text):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ PDF"""
    if not text:
        return ""
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'\s+', ' ', text)
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã
    paragraphs = text.split('. ')
    
    structured_text = ""
    current_section = ""
    
    for paragraph in paragraphs:
        paragraph = paragraph.strip()
        if not paragraph:
            continue
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if re.match(r'^\d+\.', paragraph):  # –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
            if current_section:
                structured_text += f"\n{current_section}\n"
            current_section = paragraph
        elif paragraph.isupper() and len(paragraph) > 10:  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            if current_section:
                structured_text += f"\n{current_section}\n"
            structured_text += f"\n{paragraph}\n"
            current_section = ""
        else:
            if current_section:
                current_section += f". {paragraph}"
            else:
                structured_text += f"{paragraph}. "
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–¥–µ–ª
    if current_section:
        structured_text += f"\n{current_section}\n"
    
    return structured_text.strip()

def update_pdf_with_improved_text(db_path="rubin_ai_documents.db"):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç PDF —Ñ–∞–π–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ù–∞—Ö–æ–¥–∏–º PDF —Ñ–∞–π–ª
        cursor.execute("""
            SELECT id, file_name, content, LENGTH(content) as content_length
            FROM documents 
            WHERE file_name LIKE '%05.–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞–ª–∞–¥–∫–µ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ%'
        """)
        
        result = cursor.fetchone()
        if not result:
            print("‚ùå PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            conn.close()
            return False
        
        doc_id, file_name, old_content, old_length = result
        print(f"üìã –ù–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç:")
        print(f"   ID: {doc_id}")
        print(f"   –§–∞–π–ª: {file_name}")
        print(f"   –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {old_length} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –£–ª—É—á—à–∞–µ–º —Ç–µ–∫—Å—Ç
        print("üîÑ –£–ª—É—á—à–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞...")
        improved_content = improve_text_structure(old_content)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        print("üîÑ –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...")
        structured_content = create_structured_text(improved_content)
        
        new_length = len(structured_content)
        print(f"   –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {new_length} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {old_length - new_length} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
        preview = structured_content[:800].replace('\n', ' ')
        print(f"   –ü—Ä–µ–≤—å—é: {preview}...")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Ö–µ—à
        new_hash = hashlib.md5(structured_content.encode('utf-8')).hexdigest()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        cursor.execute("""
            UPDATE documents 
            SET content = ?, 
                file_hash = ?,
                updated_at = ?
            WHERE id = ?
        """, (structured_content, new_hash, datetime.now().isoformat(), doc_id))
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π")
        print(f"   –†–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω —Å {old_length} –Ω–∞ {new_length} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÑ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä PDF –≤ —Ç–µ–∫—Å—Ç")
    print("=" * 50)
    
    success = update_pdf_with_improved_text()
    
    if success:
        print("\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ AI –ß–∞—Ç —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    else:
        print("\n‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")

if __name__ == "__main__":
    main()






















