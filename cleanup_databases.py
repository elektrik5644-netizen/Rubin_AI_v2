#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û—á–∏—Å—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö Rubin AI v2
–£–¥–∞–ª—è–µ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞
"""

import sqlite3
import os
import shutil
from datetime import datetime

def backup_db(db_path):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if os.path.exists(db_path):
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = f"{db_path}.backup_{timestamp}"
        shutil.copy2(db_path, backup_path)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        return backup_path
    return None

def delete_db(db_path):
    """–£–¥–∞–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if os.path.exists(db_path):
        os.remove(db_path)
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
        return True
    print(f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {db_path}")
    return False

def check_and_vacuum_db(db_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
        cursor.execute("PRAGMA integrity_check;")
        result = cursor.fetchone()[0]
        
        if result == 'ok':
            print(f"‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å {db_path} –≤ –Ω–æ—Ä–º–µ")
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É
            cursor.execute("VACUUM;")
            print(f"‚ú® –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è {db_path} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            conn.close()
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ {db_path}: {result}")
            conn.close()
            return False
            
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å {db_path}: {e}")
        return False

def cleanup_databases():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
    print("üßπ –û–ß–ò–°–¢–ö–ê –ë–ê–ó –î–ê–ù–ù–´–• RUBIN AI V2")
    print("=" * 50)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –±–∞–∑—ã
    empty_databases = [
        'rubin_documents.db',      # 0 –∑–∞–ø–∏—Å–µ–π
        'rubin_errors.db',         # 0 –∑–∞–ø–∏—Å–µ–π  
        'rubin_knowledge.db'       # 0 –±–∞–π—Ç
    ]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –±–∞–∑—ã (–ø–æ—Å–ª–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏)
    duplicate_databases = [
        'rubin_ai_documents.db',   # –î—É–±–ª–∏–∫–∞—Ç –ø–æ—Å–ª–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
        'rubin_ai_v2.db'           # –î—É–±–ª–∏–∫–∞—Ç –ø–æ—Å–ª–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–∞
    consolidated_exists = os.path.exists('rubin_documents_consolidated.db')
    
    total_freed_space = 0
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –±–∞–∑—ã
    print("\nüìä –û–ë–†–ê–ë–û–¢–ö–ê –ü–£–°–¢–´–• –ë–ê–ó –î–ê–ù–ù–´–•")
    print("-" * 40)
    
    for db_name in empty_databases:
        if os.path.exists(db_name):
            file_size = os.path.getsize(db_name)
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è—é: {db_name} ({file_size} –±–∞–π—Ç)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞
            try:
                conn = sqlite3.connect(db_name)
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
                tables = cursor.fetchall()
                
                total_records = 0
                for table in tables:
                    table_name = table[0]
                    cursor.execute(f"SELECT COUNT(*) FROM {table_name};")
                    count = cursor.fetchone()[0]
                    total_records += count
                
                conn.close()
                
                if total_records == 0 or file_size == 0:
                    print(f"   ‚úÖ –ë–∞–∑–∞ –ø—É—Å—Ç–∞ ({total_records} –∑–∞–ø–∏—Å–µ–π)")
                    backup_db(db_name)
                    if delete_db(db_name):
                        total_freed_space += file_size
                else:
                    print(f"   ‚ö†Ô∏è –ë–∞–∑–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {total_records} –∑–∞–ø–∏—Å–µ–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {db_name}: {e}")
        else:
            print(f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_name}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –±–∞–∑—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
    if consolidated_exists:
        print("\nüìä –û–ë–†–ê–ë–û–¢–ö–ê –î–£–ë–õ–ò–†–£–Æ–©–ò–• –ë–ê–ó –î–ê–ù–ù–´–•")
        print("-" * 40)
        
        for db_name in duplicate_databases:
            if os.path.exists(db_name):
                file_size = os.path.getsize(db_name)
                print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –¥—É–±–ª–∏–∫–∞—Ç: {db_name} ({file_size / 1024 / 1024:.1f} MB)")
                
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∏ —É–¥–∞–ª—è–µ–º
                backup_db(db_name)
                if delete_db(db_name):
                    total_freed_space += file_size
                    print(f"   ‚úÖ –î—É–±–ª–∏–∫–∞—Ç —É–¥–∞–ª–µ–Ω")
            else:
                print(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {db_name}")
    else:
        print(f"\n‚ö†Ô∏è –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ consolidate_documents.py")
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –±–∞–∑—ã
    print("\n‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –û–°–¢–ê–í–®–ò–•–°–Ø –ë–ê–ó –î–ê–ù–ù–´–•")
    print("-" * 40)
    
    remaining_dbs = [f for f in os.listdir('.') if f.endswith('.db') and not f.startswith('rubin_documents_consolidated.db.backup')]
    
    for db_file in remaining_dbs:
        if db_file not in empty_databases and db_file not in duplicate_databases:
            print(f"\nüîß –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é: {db_file}")
            check_and_vacuum_db(db_file)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ß–ò–°–¢–ö–ò")
    print("=" * 50)
    print(f"‚úÖ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {total_freed_space / 1024 / 1024:.1f} MB")
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: {len(empty_databases) + len(duplicate_databases)}")
    
    if consolidated_exists:
        print(f"‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã: {len(duplicate_databases)}")
    else:
        print(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (–Ω–µ—Ç –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑—ã)")
    
    print(f"‚úÖ –ü—É—Å—Ç—ã–µ –±–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã: {len(empty_databases)}")
    print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è –≤—Å–µ—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –±–∞–∑")
    
    print("\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    try:
        cleanup_databases()
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        print("üì¶ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")