#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Arduino Nano Integration –¥–ª—è Rubin AI v2
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Arduino Nano —Å —Å–∏—Å—Ç–µ–º–æ–π Rubin AI
"""

import sqlite3
import json
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple
import os
from rubin_arduino_nano_database import ArduinoNanoDatabase

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ArduinoNanoIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Arduino Nano —Å Rubin AI"""
    
    def __init__(self):
        self.arduino_db = ArduinoNanoDatabase()
        logger.info("üîß Arduino Nano Integration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def process_arduino_query(self, query: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ Arduino Nano"""
        query_lower = query.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        if any(keyword in query_lower for keyword in ['—Ñ—É–Ω–∫—Ü–∏—è', 'function', '–∫–æ–º–∞–Ω–¥–∞']):
            return self._handle_function_query(query)
        elif any(keyword in query_lower for keyword in ['–±–∏–±–ª–∏–æ—Ç–µ–∫–∞', 'library', 'servo', '—Å–µ—Ä–≤–æ']):
            return self._handle_library_query(query)
        elif any(keyword in query_lower for keyword in ['–ø—Ä–æ–µ–∫—Ç', '–ø—Ä–∏–º–µ—Ä', '–∫–æ–¥', '–º–∏–≥–∞—é—â–∏–π', '—Å–≤–µ—Ç–æ–¥–∏–æ–¥']):
            return self._handle_project_query(query)
        elif any(keyword in query_lower for keyword in ['–ø–∏–Ω', 'pin', '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', '–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π', 'builtin']):
            return self._handle_pin_query(query)
        elif any(keyword in query_lower for keyword in ['–æ—à–∏–±–∫–∞', '–ø—Ä–æ–±–ª–µ–º–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è']):
            return self._handle_troubleshooting_query(query)
        elif any(keyword in query_lower for keyword in ['pwm', '—à–∏–º', '–∞–Ω–∞–ª–æ–≥–æ–≤—ã–π', 'analog']):
            return self._handle_general_query(query)
        else:
            return self._handle_general_query(query)
    
    def _handle_function_query(self, query: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        function_name = None
        common_functions = [
            'pinMode', 'digitalWrite', 'digitalRead', 'analogRead', 'analogWrite',
            'delay', 'millis', 'Serial.begin', 'Serial.print', 'Serial.println'
        ]
        
        for func in common_functions:
            if func.lower() in query.lower():
                function_name = func
                break
        
        if function_name:
            func_info = self.arduino_db.get_function_info(function_name)
            if func_info:
                return {
                    "type": "function_info",
                    "function_name": func_info['function_name'],
                    "description": func_info['description'],
                    "syntax": func_info['syntax'],
                    "parameters": func_info['parameters'],
                    "return_value": func_info['return_value'],
                    "example_code": func_info['example_code'],
                    "category": func_info['category']
                }
        
        # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –≤ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö
        results = self.arduino_db.search_knowledge(query, "basics")
        if results:
            return {
                "type": "general_info",
                "title": results[0]['title'],
                "content": results[0]['content'],
                "code_example": results[0]['code_example'],
                "category": results[0]['category_name']
            }
        
        return {"type": "not_found", "message": "–§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
    
    def _handle_library_query(self, query: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ö"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        library_name = None
        common_libraries = ['Servo', 'Wire', 'EEPROM', 'SPI', 'LiquidCrystal', 'DHT']
        
        for lib in common_libraries:
            if lib.lower() in query.lower():
                library_name = lib
                break
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Servo
        if 'servo' in query.lower() or '—Å–µ—Ä–≤–æ' in query.lower():
            library_name = 'Servo'
        
        if library_name:
            lib_info = self.arduino_db.get_library_info(library_name)
            if lib_info:
                return {
                    "type": "library_info",
                    "library_name": lib_info['library_name'],
                    "description": lib_info['description'],
                    "installation": lib_info['installation'],
                    "usage_example": lib_info['usage_example'],
                    "functions_list": lib_info['functions_list'],
                    "category": lib_info['category']
                }
        
        return {"type": "not_found", "message": "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
    
    def _handle_project_query(self, query: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö"""
        # –ò—â–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        keywords = ['—Å–≤–µ—Ç–æ–¥–∏–æ–¥', '–º–æ—Ç–æ—Ä', '—Å–µ—Ä–≤–æ', '–¥–∞—Ç—á–∏–∫', '–∫–Ω–æ–ø–∫–∞', '–∑–≤—É–∫', '–º–∏–≥–∞—é—â–∏–π', '—è—Ä–∫–æ—Å—Ç—å']
        for keyword in keywords:
            if keyword in query.lower():
                project_info = self.arduino_db.get_project_info(keyword)
                if project_info:
                    return {
                        "type": "project_info",
                        "project_name": project_info['project_name'],
                        "description": project_info['description'],
                        "components": project_info['components'],
                        "code": project_info['code'],
                        "circuit_diagram": project_info['circuit_diagram'],
                        "difficulty_level": project_info['difficulty_level'],
                        "category": project_info['category']
                    }
        
        return {"type": "not_found", "message": "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    
    def _handle_pin_query(self, query: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –ø–∏–Ω–∞—Ö"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –ø–∏–Ω–∞
        import re
        pin_match = re.search(r'\b(\d+)\b', query)
        if pin_match:
            pin_number = int(pin_match.group(1))
            pin_info = self.arduino_db.get_pin_info(pin_number)
            if pin_info:
                return {
                    "type": "pin_info",
                    "pin_number": pin_info['pin_number'],
                    "pin_type": pin_info['pin_type'],
                    "description": pin_info['description'],
                    "voltage_level": pin_info['voltage_level'],
                    "max_current": pin_info['max_current'],
                    "special_functions": pin_info['special_functions'],
                    "usage_examples": pin_info['usage_examples']
                }
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞
        if '–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π' in query.lower() or 'builtin' in query.lower() or 'led_builtin' in query.lower():
            pin_info = self.arduino_db.get_pin_info(13)
            if pin_info:
                return {
                    "type": "pin_info",
                    "pin_number": pin_info['pin_number'],
                    "pin_type": pin_info['pin_type'],
                    "description": pin_info['description'],
                    "voltage_level": pin_info['voltage_level'],
                    "max_current": pin_info['max_current'],
                    "special_functions": pin_info['special_functions'],
                    "usage_examples": pin_info['usage_examples']
                }
        
        return {"type": "not_found", "message": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
    
    def _handle_troubleshooting_query(self, query: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ —Ä–µ—à–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º"""
        # –†–∞—Å—à–∏—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        search_terms = []
        if '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç' in query.lower():
            search_terms.extend(['–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞'])
        if '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è' in query.lower():
            search_terms.extend(['–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è', '–¥—Ä–∞–π–≤–µ—Ä', 'USB'])
        if '–Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è' in query.lower():
            search_terms.extend(['–Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è', '—Å–∫–µ—Ç—á', '–ø–æ—Ä—Ç'])
        
        for term in search_terms:
            troubleshooting = self.arduino_db.get_troubleshooting(term)
            if troubleshooting:
                return {
                    "type": "troubleshooting",
                    "solutions": troubleshooting
                }
        
        return {"type": "not_found", "message": "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}
    
    def _handle_general_query(self, query: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        # –†–∞—Å—à–∏—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        search_terms = [query]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        if 'pwm' in query.lower() or '—à–∏–º' in query.lower():
            search_terms.extend(['PWM', '–®–ò–ú', 'analogWrite', '–º–æ–¥—É–ª—è—Ü–∏—è'])
        if '–∞–Ω–∞–ª–æ–≥–æ–≤—ã–π' in query.lower() or 'analog' in query.lower():
            search_terms.extend(['–∞–Ω–∞–ª–æ–≥–æ–≤—ã–π', 'analog', 'analogRead', '–¥–∞—Ç—á–∏–∫'])
        if '—Ü–∏—Ñ—Ä–æ–≤–æ–π' in query.lower() or 'digital' in query.lower():
            search_terms.extend(['—Ü–∏—Ñ—Ä–æ–≤–æ–π', 'digital', 'digitalWrite', 'digitalRead'])
        
        for term in search_terms:
            results = self.arduino_db.search_knowledge(term)
            if results:
                return {
                    "type": "general_info",
                    "results": results
                }
        
        return {"type": "not_found", "message": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
    
    def get_arduino_response(self, query: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ Arduino Nano"""
        result = self.process_arduino_query(query)
        
        if result["type"] == "function_info":
            return f"""**–§—É–Ω–∫—Ü–∏—è {result['function_name']}:**

**–û–ø–∏—Å–∞–Ω–∏–µ:** {result['description']}
**–°–∏–Ω—Ç–∞–∫—Å–∏—Å:** `{result['syntax']}`
**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:** {result['parameters']}
**–í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:** {result['return_value']}

**–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
```cpp
{result['example_code']}
```"""

        elif result["type"] == "library_info":
            return f"""**–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ {result['library_name']}:**

**–û–ø–∏—Å–∞–Ω–∏–µ:** {result['description']}
**–£—Å—Ç–∞–Ω–æ–≤–∫–∞:** {result['installation']}
**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:** {result['functions_list']}

**–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
```cpp
{result['usage_example']}
```"""

        elif result["type"] == "project_info":
            return f"""**–ü—Ä–æ–µ–∫—Ç: {result['project_name']}**

**–û–ø–∏—Å–∞–Ω–∏–µ:** {result['description']}
**–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:** {result['components']}
**–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:** {result['difficulty_level']}/5

**–°—Ö–µ–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**
{result['circuit_diagram']}

**–ö–æ–¥:**
```cpp
{result['code']}
```"""

        elif result["type"] == "pin_info":
            return f"""**–ü–∏–Ω {result['pin_number']} ({result['pin_type']}):**

**–û–ø–∏—Å–∞–Ω–∏–µ:** {result['description']}
**–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è:** {result['voltage_level']}
**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–æ–∫:** {result['max_current']}
**–û—Å–æ–±—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:** {result['special_functions']}

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
{result['usage_examples']}"""

        elif result["type"] == "troubleshooting":
            solutions = result["solutions"]
            response = "**–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º Arduino Nano:**\n\n"
            for i, solution in enumerate(solutions[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ—à–µ–Ω–∏—è
                response += f"**{i}. {solution['error_description']}**\n"
                response += f"**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:** {solution['possible_causes']}\n"
                response += f"**–†–µ—à–µ–Ω–∏—è:**\n{solution['solutions']}\n"
                response += f"**–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞:** {solution['prevention_tips']}\n\n"
            return response

        elif result["type"] == "general_info":
            if "results" in result:
                results = result["results"]
                response = "**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ Arduino Nano:**\n\n"
                for i, item in enumerate(results[:2], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    response += f"**{i}. {item['title']}**\n"
                    response += f"{item['content']}\n"
                    if item['code_example']:
                        response += f"\n**–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞:**\n```cpp\n{item['code_example']}\n```\n"
                    response += f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {item['category_name']}\n\n"
                return response
            else:
                return f"""**{result['title']}**

{result['content']}

**–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞:**
```cpp
{result['code_example']}
```

**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {result['category']}"""

        else:
            return f"‚ùå {result['message']}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –æ–±–ª–∞—Å—Ç—å (—Ñ—É–Ω–∫—Ü–∏–∏, –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –ø—Ä–æ–µ–∫—Ç—ã, –ø–∏–Ω—ã, —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º)."

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Arduino Nano Integration")
    print("=" * 50)
    
    integration = ArduinoNanoIntegration()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è digitalWrite?",
        "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –±–∏–±–ª–∏–æ—Ç–µ–∫—É Servo",
        "–ü—Ä–æ–µ–∫—Ç —Å –º–∏–≥–∞—é—â–∏–º —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏–Ω–µ 13",
        "Arduino –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å?",
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PWM?"
    ]
    
    for query in test_queries:
        print(f"\n‚ùì –í–æ–ø—Ä–æ—Å: {query}")
        print("=" * 40)
        response = integration.get_arduino_response(query)
        print(response)
        print("\n" + "-" * 40)
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
