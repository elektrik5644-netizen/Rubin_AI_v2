#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Rubin AI —Å –ø–æ–ª–Ω–æ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
"""

import sqlite3
import json
import re
import os
from datetime import datetime
from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

class RubinEnhancedDatabase:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Rubin AI —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ø–æ–ª–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
    
    def __init__(self):
        self.databases = {
            'main': 'rubin_ai_v2.db',
            'documents': 'rubin_ai_documents.db',
            'knowledge': 'rubin_knowledge_base.db',
            'learning': 'rubin_learning.db'
        }
        self.conversation_history = []
        self.load_test_documents()
        self.load_database_content()
    
    def load_test_documents(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ test_documents"""
        self.test_documents = {}
        test_docs_dir = 'test_documents'
        
        if os.path.exists(test_docs_dir):
            for filename in os.listdir(test_docs_dir):
                if filename.endswith('.txt') or filename.endswith('.py'):
                    file_path = os.path.join(test_docs_dir, filename)
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                            self.test_documents[filename] = {
                                'content': content,
                                'size': len(content),
                                'category': self.detect_category(filename)
                            }
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
    
    def load_database_content(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        self.database_content = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if os.path.exists('rubin_ai_v2.db'):
            try:
                conn = sqlite3.connect('rubin_ai_v2.db')
                cursor = conn.cursor()
                cursor.execute("SELECT filename, content FROM documents LIMIT 20")
                results = cursor.fetchall()
                for filename, content in results:
                    if content and len(content) > 50:  # –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                        self.database_content.append({
                            'filename': filename,
                            'content': content,
                            'category': self.detect_category(filename),
                            'source': 'database'
                        })
                conn.close()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def detect_category(self, filename):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        filename_lower = filename.lower()
        if 'python' in filename_lower or 'programming' in filename_lower:
            return 'programming'
        elif 'electrical' in filename_lower or 'circuit' in filename_lower:
            return 'electronics'
        elif 'controller' in filename_lower or 'automation' in filename_lower or 'pid' in filename_lower:
            return 'automation'
        elif 'radio' in filename_lower:
            return 'radiomechanics'
        elif 'math' in filename_lower or 'mathematical' in filename_lower:
            return 'mathematics'
        else:
            return 'general'
    
    def search_content(self, query):
        """–ü–æ–∏—Å–∫ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        results = []
        query_lower = query.lower()
        
        # –ü–æ–∏—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
        for filename, doc_data in self.test_documents.items():
            content_lower = doc_data['content'].lower()
            if query_lower in content_lower:
                # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
                lines = doc_data['content'].split('\n')
                relevant_lines = []
                for i, line in enumerate(lines):
                    if query_lower in line.lower():
                        start = max(0, i-2)
                        end = min(len(lines), i+3)
                        relevant_lines.extend(lines[start:end])
                
                if relevant_lines:
                    results.append({
                        'filename': filename,
                        'content': '\n'.join(relevant_lines),
                        'category': doc_data['category'],
                        'source': 'test_documents',
                        'relevance': self.calculate_relevance(query_lower, content_lower)
                    })
        
        # –ü–æ–∏—Å–∫ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        for item in self.database_content:
            content_lower = item['content'].lower()
            if query_lower in content_lower:
                # –û–±—Ä–µ–∑–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π —á–∞—Å—Ç–∏
                content = item['content']
                if len(content) > 500:
                    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –∑–∞–ø—Ä–æ—Å–∞
                    pos = content_lower.find(query_lower)
                    start = max(0, pos - 250)
                    end = min(len(content), pos + 250)
                    content = content[start:end]
                
                results.append({
                    'filename': item['filename'],
                    'content': content,
                    'category': item['category'],
                    'source': 'database',
                    'relevance': self.calculate_relevance(query_lower, content_lower)
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        results.sort(key=lambda x: x['relevance'], reverse=True)
        return results[:5]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    def calculate_relevance(self, query, content):
        """–†–∞—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏"""
        query_words = query.split()
        relevance = 0
        
        for word in query_words:
            if len(word) > 2:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                count = content.count(word)
                relevance += count * len(word)  # –î–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤–∞–∂–Ω–µ–µ
        
        return relevance
    
    def solve_math(self, message):
        """–†–µ—à–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å
            from rubin_math_solver import solve_math_problem
            result = solve_math_problem(message)
            return result
        except ImportError:
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ä–µ—à–∞—Ç–µ–ª—é
            pattern = r'(\d+)\s*([+\-*/])\s*(\d+)'
            match = re.search(pattern, message)
            
            if match:
                num1 = int(match.group(1))
                op = match.group(2)
                num2 = int(match.group(3))
                
                if op == '+':
                    result = num1 + num2
                elif op == '-':
                    result = num1 - num2
                elif op == '*':
                    result = num1 * num2
                elif op == '/':
                    result = num1 / num2 if num2 != 0 else "–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!"
                
                return f"üßÆ **–†–µ—à–µ–Ω–∏–µ:** {num1} {op} {num2} = {result}"
            
            return None
    
    def generate_smart_response(self, message, search_results):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not search_results:
            return self.generate_fallback_response(message)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for result in search_results:
            category = result['category']
            if category not in categories:
                categories[category] = []
            categories[category].append(result)
        
        response_parts = []
        sources = []
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category, results in categories.items():
            if category == 'programming':
                response_parts.append("üêç **–ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–ï:**")
            elif category == 'electronics':
                response_parts.append("‚ö° **–≠–õ–ï–ö–¢–†–û–¢–ï–•–ù–ò–ö–ê:**")
            elif category == 'automation':
                response_parts.append("ü§ñ **–ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø:**")
            elif category == 'radiomechanics':
                response_parts.append("üì° **–†–ê–î–ò–û–ú–ï–•–ê–ù–ò–ö–ê:**")
            elif category == 'mathematics':
                response_parts.append("üßÆ **–ú–ê–¢–ï–ú–ê–¢–ò–ö–ê:**")
            else:
                response_parts.append(f"üìö **{category.upper()}:**")
            
            for result in results[:2]:  # –ú–∞–∫—Å–∏–º—É–º 2 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                filename = result['filename']
                content = result['content']
                
                # –û–±—Ä–µ–∑–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                if len(content) > 300:
                    content = content[:300] + "..."
                
                response_parts.append(f"üìÑ **{filename}:**\n{content}")
                sources.append(filename)
        
        response = "\n\n".join(response_parts)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
        if sources:
            response += f"\n\nüìö **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** {', '.join(set(sources))}"
        
        return response
    
    def generate_fallback_response(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è fallback –æ—Ç–≤–µ—Ç–∞"""
        message_lower = message.lower()
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        if any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi']):
            return "–ü—Ä–∏–≤–µ—Ç! –Ø Rubin AI - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º. –Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏, —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        
        elif any(word in message_lower for word in ['—á—Ç–æ —É–º–µ–µ—à—å', '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', 'help']):
            return """ü§ñ **–ú–û–ò –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:**

üêç **–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ Python, C++, JavaScript
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
‚Ä¢ –†–µ—à–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á

‚ö° **–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞:**
‚Ä¢ –°—Ö–µ–º—ã –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
‚Ä¢ –¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã, –¥–∏–æ–¥—ã, —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã
‚Ä¢ –ó–∞–∫–æ–Ω—ã –û–º–∞ –∏ –ö–∏—Ä—Ö–≥–æ—Ñ–∞

ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:**
‚Ä¢ PLC –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ PMAC –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
‚Ä¢ –ü–ò–î —Ä–µ–≥—É–ª—è—Ç–æ—Ä—ã

üßÆ **–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞:**
‚Ä¢ –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
‚Ä¢ –ê–ª–≥–µ–±—Ä–∞ –∏ –≥–µ–æ–º–µ—Ç—Ä–∏—è
‚Ä¢ –†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–π

üì° **–†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞:**
‚Ä¢ –ê–Ω—Ç–µ–Ω–Ω—ã –∏ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∏
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –≤–æ–ª–Ω—ã
‚Ä¢ –†–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

–ó–∞–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π!"""
        
        elif any(word in message_lower for word in ['python', '–ø–∏—Ç–æ–Ω']):
            return """üêç **PYTHON –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–ï:**

Python - –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–æ—Å—Ç—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º.

**–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (if, for, while)
‚Ä¢ –§—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã
‚Ä¢ –ú–æ–¥—É–ª–∏ –∏ –ø–∞–∫–µ—Ç—ã

**–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:**
‚Ä¢ NumPy - —á–∏—Å–ª–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
‚Ä¢ Pandas - –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ Matplotlib - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
‚Ä¢ Django/Flask - –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞

**–ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:**
```python
def greet(name):
    return f"–ü—Ä–∏–≤–µ—Ç, {name}!"

print(greet("–ú–∏—Ä"))
```

–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ Python?"""
        
        elif any(word in message_lower for word in ['—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä', 'transistor']):
            return """‚ö° **–¢–†–ê–ù–ó–ò–°–¢–û–†:**

–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä - –ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤—ã–π –ø—Ä–∏–±–æ—Ä –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.

**–¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä–æ–≤:**
‚Ä¢ **–ë–∏–ø–æ–ª—è—Ä–Ω—ã–µ (BJT)** - —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–∫–æ–º
‚Ä¢ **–ü–æ–ª–µ–≤—ã–µ (FET)** - —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ–º
‚Ä¢ **MOSFET** - –º–µ—Ç–∞–ª–ª-–æ–∫—Å–∏–¥-–ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫

**–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:**
‚Ä¢ –ë–∞–∑–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–∫–æ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–∏–ª–µ–Ω–∏—è h21—ç
‚Ä¢ –†–µ–∂–∏–º—ã: –æ—Ç—Å–µ—á–∫–∞, –∞–∫—Ç–∏–≤–Ω—ã–π, –Ω–∞—Å—ã—â–µ–Ω–∏–µ

**–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:**
‚Ä¢ –£—Å–∏–ª–∏—Ç–µ–ª–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
‚Ä¢ –¶–∏—Ñ—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∫–æ–ª–µ–±–∞–Ω–∏–π
‚Ä¢ –†–µ–≥—É–ª—è—Ç–æ—Ä—ã –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è

–ù—É–∂–Ω–∞ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–∏–ø–µ —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä–∞?"""
        
        else:
            return f"""–Ø –Ω–µ –Ω–∞—à–µ–ª —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É '{message}' –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.

**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**
‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: Python, —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä, PLC, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞
‚Ä¢ –ó–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:**
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (Python, C++)
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ (—Å—Ö–µ–º—ã, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã)
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è (PLC, PMAC)
‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–≤—ã—á–∏—Å–ª–µ–Ω–∏—è, —É—Ä–∞–≤–Ω–µ–Ω–∏—è)
‚Ä¢ –†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞ (–∞–Ω—Ç–µ–Ω–Ω—ã, –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∏)"""
    
    def generate_response(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.conversation_history.append({
            'timestamp': datetime.now().isoformat(),
            'user_message': message,
            'category': None
        })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
        math_result = self.solve_math(message)
        if math_result:
            return {
                'response': math_result,
                'category': 'mathematics',
                'confidence': 0.9,
                'source': 'math_solver',
                'database_used': False
            }
        
        # –ü–æ–∏—Å–∫ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
        search_results = self.search_content(message)
        
        if search_results:
            response = self.generate_smart_response(message, search_results)
            return {
                'response': response,
                'category': 'knowledge_search',
                'confidence': 0.8,
                'source': 'database_search',
                'database_used': True,
                'sources_found': len(search_results)
            }
        else:
            response = self.generate_fallback_response(message)
            return {
                'response': response,
                'category': 'fallback',
                'confidence': 0.6,
                'source': 'fallback',
                'database_used': True,
                'sources_found': 0
            }

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä AI
rubin_ai = RubinEnhancedDatabase()

@app.route('/api/chat', methods=['POST', 'OPTIONS'])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —á–∞—Ç–∞"""
    if request.method == 'OPTIONS':
        return '', 200
    
    try:
        data = request.get_json()
        message = data.get('message', '')
        
        if not message:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = rubin_ai.generate_response(message)
        response['timestamp'] = datetime.now().isoformat()
        
        return jsonify(response)
        
    except Exception as e:
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}',
            'response': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/api/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'system': 'Rubin AI Enhanced Database',
        'databases': list(rubin_ai.databases.keys()),
        'test_documents': len(rubin_ai.test_documents),
        'database_content': len(rubin_ai.database_content),
        'conversations': len(rubin_ai.conversation_history)
    })

@app.route('/api/stats')
def stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    return jsonify({
        'conversations': len(rubin_ai.conversation_history),
        'databases': {name: os.path.exists(path) for name, path in rubin_ai.databases.items()},
        'test_documents': {name: doc['size'] for name, doc in rubin_ai.test_documents.items()},
        'database_content_items': len(rubin_ai.database_content),
        'system': 'Rubin AI Enhanced Database',
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/search')
def search():
    """–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
    query = request.args.get('q', '')
    if not query:
        return jsonify({'error': '–ü–∞—Ä–∞–º–µ—Ç—Ä q –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
    
    # –ü–æ–∏—Å–∫ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
    results = rubin_ai.search_content(query)
    
    return jsonify({
        'query': query,
        'results': results,
        'total_found': len(results),
        'timestamp': datetime.now().isoformat()
    })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ Rubin AI Enhanced Database...")
    print("üì° API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:8087")
    print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: http://localhost:8087/api/health")
    print("üîç –ü–æ–∏—Å–∫: http://localhost:8087/api/search?q=python")
    print(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(rubin_ai.test_documents)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print(f"üóÑÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(rubin_ai.database_content)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    app.run(host='0.0.0.0', port=8087, debug=True)
