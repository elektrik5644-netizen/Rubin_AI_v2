#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Rubin AI
"""

import sqlite3
import json
import time
import threading
import schedule
import requests
from datetime import datetime, timedelta
from typing import Dict, List, Any
import logging
import os
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('system_monitor.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class SystemMonitor:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã Rubin AI"""
    
    def __init__(self, db_path: str = "rubin_ai_v2.db"):
        self.db_path = db_path
        self.monitoring_active = False
        self.stats = {
            'last_check': None,
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0,
            'average_response_time': 0,
            'database_size': 0,
            'document_count': 0,
            'synonym_count': 0,
            'system_health': 'unknown'
        }
    
    def check_database_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_size = os.path.getsize(self.db_path)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
            cursor.execute("SELECT COUNT(*) FROM documents")
            doc_count = cursor.fetchone()[0]
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
            cursor.execute("SELECT COUNT(*) FROM technical_synonyms")
            synonym_count = cursor.fetchone()[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
            cursor.execute("PRAGMA integrity_check")
            integrity = cursor.fetchone()[0]
            
            conn.close()
            
            health_status = {
                'database_size_mb': round(db_size / (1024 * 1024), 2),
                'document_count': doc_count,
                'synonym_count': synonym_count,
                'integrity_check': integrity,
                'status': 'healthy' if integrity == 'ok' else 'warning',
                'timestamp': datetime.now().isoformat()
            }
            
            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î: {doc_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, {synonym_count} —Å–∏–Ω–æ–Ω–∏–º–æ–≤")
            return health_status
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
            return {'status': 'error', 'error': str(e)}
    
    def check_api_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API
            response = requests.get('http://localhost:8084/health', timeout=5)
            main_api_status = response.status_code == 200
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            try:
                response = requests.get('http://localhost:8088/health', timeout=5)
                docs_api_status = response.status_code == 200
            except:
                docs_api_status = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Å–ª–æ–≤–∞—Ä—è
            try:
                response = requests.get('http://localhost:8085/api/vocabulary/stats', timeout=5)
                vocab_api_status = response.status_code == 200
            except:
                vocab_api_status = False
            
            api_health = {
                'main_api': main_api_status,
                'docs_api': docs_api_status,
                'vocab_api': vocab_api_status,
                'overall_status': 'healthy' if main_api_status else 'degraded',
                'timestamp': datetime.now().isoformat()
            }
            
            logger.info(f"üîç API —Å—Ç–∞—Ç—É—Å: –û—Å–Ω–æ–≤–Ω–æ–π={main_api_status}, –î–æ–∫—É–º–µ–Ω—Ç—ã={docs_api_status}, –°–ª–æ–≤–∞—Ä—å={vocab_api_status}")
            return api_health
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}")
            return {'status': 'error', 'error': str(e)}
    
    def check_search_performance(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞"""
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
            test_queries = [
                "–ü–ò–î —Ä–µ–≥—É–ª—è—Ç–æ—Ä",
                "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
                "—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞",
                "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
            ]
            
            performance_data = []
            
            for query in test_queries:
                start_time = time.time()
                try:
                    response = requests.post(
                        'http://localhost:8084/api/chat',
                        json={'message': query},
                        timeout=10
                    )
                    response_time = time.time() - start_time
                    
                    performance_data.append({
                        'query': query,
                        'response_time': round(response_time, 3),
                        'status': 'success' if response.status_code == 200 else 'failed',
                        'status_code': response.status_code
                    })
                    
                except Exception as e:
                    performance_data.append({
                        'query': query,
                        'response_time': -1,
                        'status': 'error',
                        'error': str(e)
                    })
            
            avg_response_time = sum([p['response_time'] for p in performance_data if p['response_time'] > 0]) / len([p for p in performance_data if p['response_time'] > 0])
            
            performance = {
                'test_queries': performance_data,
                'average_response_time': round(avg_response_time, 3),
                'success_rate': len([p for p in performance_data if p['status'] == 'success']) / len(performance_data),
                'timestamp': datetime.now().isoformat()
            }
            
            logger.info(f"‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è {avg_response_time:.3f}—Å")
            return performance
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return {'status': 'error', 'error': str(e)}
    
    def update_system_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            db_health = self.check_database_health()
            api_health = self.check_api_health()
            performance = self.check_search_performance()
            
            self.stats.update({
                'last_check': datetime.now().isoformat(),
                'database_health': db_health,
                'api_health': api_health,
                'performance': performance,
                'system_health': self.calculate_overall_health(db_health, api_health, performance)
            })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª
            with open('system_stats.json', 'w', encoding='utf-8') as f:
                json.dump(self.stats, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {self.stats['system_health']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def calculate_overall_health(self, db_health: Dict, api_health: Dict, performance: Dict) -> str:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            health_score = 0
            
            # –û—Ü–µ–Ω–∫–∞ –ë–î (40%)
            if db_health.get('status') == 'healthy':
                health_score += 40
            elif db_health.get('status') == 'warning':
                health_score += 20
            
            # –û—Ü–µ–Ω–∫–∞ API (40%)
            if api_health.get('overall_status') == 'healthy':
                health_score += 40
            elif api_health.get('overall_status') == 'degraded':
                health_score += 20
            
            # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (20%)
            if performance.get('success_rate', 0) > 0.8:
                health_score += 20
            elif performance.get('success_rate', 0) > 0.5:
                health_score += 10
            
            if health_score >= 80:
                return 'excellent'
            elif health_score >= 60:
                return 'good'
            elif health_score >= 40:
                return 'fair'
            else:
                return 'poor'
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            return 'unknown'

class AutoUpdater:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    
    def __init__(self, db_path: str = "rubin_ai_v2.db"):
        self.db_path = db_path
        self.update_log = []
    
    def update_synonym_database(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã —Å–∏–Ω–æ–Ω–∏–º–æ–≤"""
        try:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã —Å–∏–Ω–æ–Ω–∏–º–æ–≤...")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            cursor.execute("SELECT COUNT(*) FROM technical_synonyms")
            current_count = cursor.fetchone()[0]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            new_synonyms = [
                ("—Å–∏–º–∏—Å—Ç—Ä", "—Ç–∏—Ä–∏—Å—Ç–æ—Ä", "—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞"),
                ("–∏–Ω–≤–µ—Ä—Ç–æ—Ä", "–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å —á–∞—Å—Ç–æ—Ç—ã", "—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞"),
                ("—ç–Ω–∫–æ–¥–µ—Ä", "–¥–∞—Ç—á–∏–∫ –ø–æ–ª–æ–∂–µ–Ω–∏—è", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"),
                ("—Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥", "—Å–µ—Ä–≤–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"),
                ("—á–∞—Å—Ç–æ—Ç–Ω–∏–∫", "—á–∞—Å—Ç–æ—Ç–Ω—ã–π –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å", "—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞")
            ]
            
            added_count = 0
            for main_term, synonym, category in new_synonyms:
                try:
                    cursor.execute("""
                        INSERT OR IGNORE INTO technical_synonyms 
                        (main_term, synonym, category, confidence)
                        VALUES (?, ?, ?, ?)
                    """, (main_term, synonym, category, 1.0))
                    added_count += 1
                except:
                    pass
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö")
            
            self.update_log.append({
                'type': 'synonym_update',
                'timestamp': datetime.now().isoformat(),
                'added_count': added_count,
                'status': 'success'
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤: {e}")
            self.update_log.append({
                'type': 'synonym_update',
                'timestamp': datetime.now().isoformat(),
                'error': str(e),
                'status': 'failed'
            })
    
    def optimize_database(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("ANALYZE")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞
            cursor.execute("DELETE FROM vocabulary_search_cache WHERE last_accessed < datetime('now', '-7 days')")
            deleted_cache = cursor.rowcount
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor.execute("UPDATE sqlite_stat1 SET stat = (SELECT COUNT(*) FROM documents)")
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—á–∏—â–µ–Ω–æ {deleted_cache} –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞")
            
            self.update_log.append({
                'type': 'database_optimization',
                'timestamp': datetime.now().isoformat(),
                'deleted_cache_entries': deleted_cache,
                'status': 'success'
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            self.update_log.append({
                'type': 'database_optimization',
                'timestamp': datetime.now().isoformat(),
                'error': str(e),
                'status': 'failed'
            })
    
    def backup_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üíæ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = f"backups/rubin_ai_backup_{timestamp}.db"
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs("backups", exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            import shutil
            shutil.copy2(self.db_path, backup_path)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7)
            backup_files = [f for f in os.listdir("backups") if f.startswith("rubin_ai_backup_")]
            backup_files.sort(reverse=True)
            
            for old_backup in backup_files[7:]:
                os.remove(f"backups/{old_backup}")
            
            logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
            
            self.update_log.append({
                'type': 'database_backup',
                'timestamp': datetime.now().isoformat(),
                'backup_path': backup_path,
                'status': 'success'
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
            self.update_log.append({
                'type': 'database_backup',
                'timestamp': datetime.now().isoformat(),
                'error': str(e),
                'status': 'failed'
            })

class SystemScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.monitor = SystemMonitor()
        self.updater = AutoUpdater()
        self.running = False
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
        schedule.every(5).minutes.do(self.monitor.update_system_stats)
        schedule.every(1).hours.do(self.updater.update_synonym_database)
        schedule.every(6).hours.do(self.updater.optimize_database)
        schedule.every(24).hours.do(self.updater.backup_database)
        
        self.running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        monitor_thread = threading.Thread(target=self._monitoring_loop, daemon=True)
        monitor_thread.start()
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
        logger.info("üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")
        logger.info("  - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç")
        logger.info("  - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤: –∫–∞–∂–¥—ã–π —á–∞—Å")
        logger.info("  - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ë–î: –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤")
        logger.info("  - –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å")
        
        return monitor_thread
    
    def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.running:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(60)
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.running = False
        logger.info("üõë –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def get_status_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if os.path.exists('system_stats.json'):
                with open('system_stats.json', 'r', encoding='utf-8') as f:
                    stats = json.load(f)
            else:
                stats = self.monitor.stats
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
            report = {
                'system_status': stats,
                'scheduler_status': {
                    'running': self.running,
                    'next_jobs': [str(job) for job in schedule.jobs],
                    'update_log': self.updater.update_log[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                },
                'timestamp': datetime.now().isoformat()
            }
            
            return report
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return {'error': str(e)}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ò –û–ë–ù–û–í–õ–ï–ù–ò–ô RUBIN AI")
    print("=" * 60)
    
    scheduler = SystemScheduler()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        monitor_thread = scheduler.start_monitoring()
        
        # –í—ã–≤–æ–¥–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print("\nüìä –ù–ê–ß–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –°–ò–°–¢–ï–ú–´:")
        initial_report = scheduler.get_status_report()
        print(f"  - –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: {initial_report['system_status'].get('system_health', 'unknown')}")
        print(f"  - –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ë–î: {initial_report['system_status'].get('database_health', {}).get('document_count', 0)}")
        print(f"  - –°–∏–Ω–æ–Ω–∏–º–æ–≤ –≤ –ë–î: {initial_report['system_status'].get('database_health', {}).get('synonym_count', 0)}")
        
        print("\nüîÑ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
        print("üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ system_monitor.log")
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ system_stats.json")
        print("üíæ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –ø–∞–ø–∫–µ backups/")
        print("\n–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        monitor_thread.join()
        
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        scheduler.stop_monitoring()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        scheduler.stop_monitoring()

if __name__ == "__main__":
    main()






















