#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è Rubin AI –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import random
from datetime import datetime

def analyze_existing_questions():
    """–ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Rubin AI")
    print("=" * 60)
    
    try:
        conn = sqlite3.connect('rubin_learning.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        cursor.execute("SELECT message, intent FROM interactions WHERE message IS NOT NULL")
        existing_questions = cursor.fetchall()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(existing_questions)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:")
        for i, (question, intent) in enumerate(existing_questions, 1):
            print(f"  {i}. [{intent}] {question}")
        
        conn.close()
        return existing_questions
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return []

def generate_new_questions():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
    print(f"\nüéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è Rubin AI")
    print("=" * 50)
    
    # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ —Ç–µ–º–∞–º Rubin AI
    question_templates = {
        'controllers': [
            "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ —ç–Ω–∫–æ–¥–µ—Ä –∏ –∫–∞–∫–∏–µ —Ç–∏–ø—ã —ç–Ω–∫–æ–¥–µ—Ä–æ–≤ –±—ã–≤–∞—é—Ç?",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ—Ä–≤–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é?",
            "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã PMAC –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞",
            "–ö–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å PLC –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ HMI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –∫–∞–∫ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ SCADA –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏?",
            "–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª Modbus RTU –∏ Modbus TCP",
            "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å —Å —á–∞—Å—Ç–æ—Ç–Ω—ã–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª–µ–º?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ —ç–Ω–∫–æ–¥–µ—Ä –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π?"
        ],
        'programming': [
            "–°—Ä–∞–≤–Ω–∏ C++ –∏ Python –¥–ª—è –∑–∞–¥–∞—á –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏",
            "–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ–π–µ—Ä–æ–º –Ω–∞ Python?",
            "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
            "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å REST API –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏?",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö?",
            "–û–±—ä—è—Å–Ω–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏",
            "–ö–∞–∫ –æ—Ç–ª–∞–∂–∏–≤–∞—Ç—å –∫–æ–¥ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ?",
            "–ö–∞–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞?"
        ],
        'electrical': [
            "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∑–∞–∫–æ–Ω –û–º–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ü–µ–ø–∏",
            "–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–æ—â–Ω–æ—Å—Ç—å –≤ —Ç—Ä–µ—Ö—Ñ–∞–∑–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏ –∏ –∫–∞–∫ –µ–≥–æ —É–ª—É—á—à–∏—Ç—å?",
            "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞",
            "–ö–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ü–µ–ø–∏ –æ—Ç –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–º—ã–∫–∞–Ω–∏—è?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–∫—Ç–∏–≤–Ω–∞—è –∏ —Ä–µ–∞–∫—Ç–∏–≤–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å?",
            "–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ–∫ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–º—ã–∫–∞–Ω–∏—è?",
            "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —ç–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—è",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –≥–∞—Ä–º–æ–Ω–∏–∫–∏ –≤ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ç—è—Ö?",
            "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –∫–∞–±–µ–ª—å –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è?"
        ],
        'radiomechanics': [
            "–ö–∞–∫–∏–µ –±—ã–≤–∞—é—Ç —Ç–∏–ø—ã –∞–Ω—Ç–µ–Ω–Ω –∏ –≤ —á–µ–º –∏—Ö —Ä–∞–∑–Ω–∏—Ü–∞?",
            "–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–ª–∏–Ω—É –≤–æ–ª–Ω—ã –¥–ª—è —Ä–∞–¥–∏–æ—Å–∏–≥–Ω–∞–ª–∞?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–æ–¥—É–ª—è—Ü–∏—è –∏ –¥–µ–º–æ–¥—É–ª—è—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞?",
            "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —Ä–∞–¥–∏–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏",
            "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–¥–∏–æ–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫ –¥–ª—è —Å–≤—è–∑–∏?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–æ–ª–æ—Å–∞ –ø—Ä–æ–ø—É—Å–∫–∞–Ω–∏—è –∞–Ω—Ç–µ–Ω–Ω—ã?",
            "–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–¥–∏–æ—Å–≤—è–∑–∏?",
            "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ —à—É–º –≤ —Ä–∞–¥–∏–æ—Å–∏—Å—Ç–µ–º–∞—Ö?",
            "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å —á–∞—Å—Ç–æ—Ç—É –¥–ª—è —Ä–∞–¥–∏–æ—Å–≤—è–∑–∏?"
        ],
        'general': [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è?",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏?",
            "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏?",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ü–∏—Ñ—Ä–æ–≤–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞?",
            "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã IoT –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏?",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è?"
        ]
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 10 –≤–æ–ø—Ä–æ—Å–æ–≤
    generated_questions = []
    categories = list(question_templates.keys())
    
    for i in range(10):
        category = random.choice(categories)
        question = random.choice(question_templates[category])
        generated_questions.append({
            'question': question,
            'category': category,
            'number': i + 1
        })
    
    return generated_questions

def save_questions_to_database(questions):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 40)
    
    try:
        conn = sqlite3.connect('rubin_learning.db')
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS generated_questions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                question TEXT NOT NULL,
                category TEXT NOT NULL,
                generated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                used BOOLEAN DEFAULT FALSE
            )
        ''')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
        for q in questions:
            cursor.execute('''
                INSERT INTO generated_questions (question, category)
                VALUES (?, ?)
            ''', (q['question'], q['category']))
        
        conn.commit()
        conn.close()
        
        print("‚úÖ –í–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def display_questions(questions):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    print(f"\nüìù 10 –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è Rubin AI:")
    print("=" * 50)
    
    for q in questions:
        print(f"\n{q['number']}. [{q['category'].upper()}]")
        print(f"   {q['question']}")
    
    print(f"\nüéØ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:")
    categories = {}
    for q in questions:
        categories[q['category']] = categories.get(q['category'], 0) + 1
    
    for category, count in categories.items():
        print(f"   ‚Ä¢ {category}: {count} –≤–æ–ø—Ä–æ—Å–æ–≤")

def create_question_file(questions):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
    print(f"\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏")
    print("=" * 35)
    
    try:
        with open('RUBIN_QUESTIONS_DATABASE.md', 'w', encoding='utf-8') as f:
            f.write("# üéØ –ë–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ Rubin AI\n\n")
            f.write(f"**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"**–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤:** {len(questions)}\n\n")
            
            f.write("## üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤\n\n")
            
            for q in questions:
                f.write(f"### {q['number']}. [{q['category'].upper()}]\n")
                f.write(f"{q['question']}\n\n")
            
            f.write("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n\n")
            categories = {}
            for q in questions:
                categories[q['category']] = categories.get(q['category'], 0) + 1
            
            for category, count in categories.items():
                f.write(f"- **{category}**: {count} –≤–æ–ø—Ä–æ—Å–æ–≤\n")
            
            f.write(f"\n## üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ\n\n")
            f.write("–≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è:\n")
            f.write("- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã Rubin AI\n")
            f.write("- –û–±—É—á–µ–Ω–∏—è –∞–≤—Ç–æ-—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞\n")
            f.write("- –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤\n")
            f.write("- –ê–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª–µ–π\n")
        
        print("‚úÖ –§–∞–π–ª RUBIN_QUESTIONS_DATABASE.md —Å–æ–∑–¥–∞–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è Rubin AI")
    print("=" * 40)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    existing_questions = analyze_existing_questions()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    new_questions = generate_new_questions()
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
    display_questions(new_questions)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_questions_to_database(new_questions)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    create_question_file(new_questions)
    
    print(f"\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(new_questions)} –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    print(f"üíæ –í–æ–ø—Ä–æ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–∞–π–ª")

if __name__ == '__main__':
    main()























