#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–∏—Ä–µ–∫—Ç–∏–≤ Rubin AI
"""

import requests
import json

SMART_DISPATCHER_URL = "http://localhost:8080/api/chat"

def test_directive_command(command: str, user_id: str = "test_user"):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–∏—Ä–µ–∫—Ç–∏–≤"""
    payload = {"message": command, "user_id": user_id}
    try:
        response = requests.post(SMART_DISPATCHER_URL, json=payload, timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞: {command}")
            print(f"–û—Ç–≤–µ—Ç: {json.dumps(data, ensure_ascii=False, indent=2)}")
            print("-" * 50)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_regular_message(message: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    payload = {"message": message}
    try:
        response = requests.post(SMART_DISPATCHER_URL, json=payload, timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            print(f"–û—Ç–≤–µ—Ç: {data.get('response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}")
            if 'directives_applied' in data:
                print(f"üìã –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–∏—Ä–µ–∫—Ç–∏–≤—ã: {data['directives_applied']}")
            print("-" * 50)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–∏—Ä–µ–∫—Ç–∏–≤ Rubin AI")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥ –¥–∏—Ä–µ–∫—Ç–∏–≤
    print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–∏—Ä–µ–∫—Ç–∏–≤:")
    test_directive_command("–ø–æ–º–æ—â—å –ø–æ –¥–∏—Ä–µ–∫—Ç–∏–≤–∞–º")
    test_directive_command("–ø—Ä–∏–º–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤—É –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–∏–º–µ—Ä—ã –∫ –æ—Ç–≤–µ—Ç–∞–º")
    test_directive_command("–ø—Ä–∏–º–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤—É –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–π —Ç—Ä–µ–Ω–¥")
    test_directive_command("–ø—Ä–∏–º–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤—É –≤ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ –æ–±—ä—è—Å–Ω—è–π —Ñ–æ—Ä–º—É–ª—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ")
    test_directive_command("—Å–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–∏–≤")
    test_directive_command("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏—Ä–µ–∫—Ç–∏–≤")
    
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –¥–∏—Ä–µ–∫—Ç–∏–≤:")
    test_regular_message("—á—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä")
    test_regular_message("–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä")
    test_regular_message("–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≥—Ä–∞—Ñ–∏–∫")
    test_regular_message("—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∑–∞–∫–æ–Ω –û–º–∞")
    
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–∏–≤:")
    test_directive_command("—É–¥–∞–ª–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤—É dir_20250923_233000")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID

if __name__ == "__main__":
    main()






