#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°—Ç–∞–±–∏–ª—å–Ω—ã–π –ª–∞—É–Ω—á–µ—Ä –¥–ª—è Rubin AI v2
–ü–æ—ç—Ç–∞–ø–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞–º—è—Ç–∏
"""

import subprocess
import time
import psutil
import gc
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã (–º–∏–Ω–∏–º—É–º –¥–ª—è —Ä–∞–±–æ—Ç—ã)
CRITICAL_SERVERS = [
    "optimized_dispatcher.py",  # –ù–æ–≤—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    "api/general_api.py",
    "api/mathematics_api.py", 
    "api/electrical_api.py",
    "api/programming_api.py"
]

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã (–∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö)
ADDITIONAL_SERVERS = [
    "simple_neuro_api_server.py",
    "simple_controllers_api_server.py",
    "lightweight_gai_server.py",
    "unified_system_manager.py",
    "ethical_core_api_server.py"
]

def get_memory_usage():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"""
    mem = psutil.virtual_memory()
    return {
        'total': round(mem.total / (1024**3), 1),
        'used': round(mem.used / (1024**3), 1),
        'available': round(mem.available / (1024**3), 1),
        'percent': mem.percent
    }

def cleanup_memory():
    """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...")
    gc.collect()
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—è–∂–µ–ª—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python
    for proc in psutil.process_iter(['pid', 'name', 'memory_info']):
        try:
            if proc.info['name'] == 'python.exe':
                mem_usage_mb = proc.info['memory_info'].rss / (1024 * 1024)
                if mem_usage_mb > 200:  # –ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ–ª—å—à–µ 200MB
                    logger.warning(f"–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç—è–∂–µ–ª—ã–π –ø—Ä–æ—Ü–µ—Å—Å Python (PID: {proc.info['pid']}, –ü–∞–º—è—Ç—å: {mem_usage_mb:.1f}MB)")
                    proc.terminate()
                    time.sleep(0.5)
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            pass

def launch_server(script_name):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é {script_name}...")
    try:
        if script_name == "optimized_dispatcher.py":
            # –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ
            subprocess.Popen(['python', script_name], 
                           creationflags=subprocess.CREATE_NEW_CONSOLE if os.name == 'nt' else 0)
        else:
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –≤ —Ñ–æ–Ω–µ
            subprocess.Popen(['python', script_name], 
                           stdout=subprocess.DEVNULL, 
                           stderr=subprocess.DEVNULL)
        
        logger.info(f"‚úÖ {script_name} –∑–∞–ø—É—â–µ–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {script_name}: {e}")
        return False

def check_memory_before_launch():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    mem = get_memory_usage()
    logger.info(f"üìä –ü–∞–º—è—Ç—å: {mem['used']:.1f}GB / {mem['total']:.1f}GB ({mem['percent']:.1f}%)")
    
    if mem['percent'] > 80:
        logger.warning("‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏! –í—ã–ø–æ–ª–Ω—è—é –æ—á–∏—Å—Ç–∫—É...")
        cleanup_memory()
        time.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
        mem = get_memory_usage()
        logger.info(f"üìä –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {mem['used']:.1f}GB / {mem['total']:.1f}GB ({mem['percent']:.1f}%)")
        
        if mem['percent'] > 85:
            logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ –ø–∞–º—è—Ç–∏! –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
            return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import os
    logger.info("üöÄ –°—Ç–∞–±–∏–ª—å–Ω—ã–π –ª–∞—É–Ω—á–µ—Ä Rubin AI v2")
    logger.info("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
    if not check_memory_before_launch():
        return
    
    # 2. –ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    logger.info("üìã –≠—Ç–∞–ø 1: –ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...")
    critical_success = 0
    for server in CRITICAL_SERVERS:
        if launch_server(server):
            critical_success += 1
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
    
    logger.info(f"‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–µ—Ä—ã: {critical_success}/{len(CRITICAL_SERVERS)}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏
    time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    if not check_memory_before_launch():
        logger.warning("‚ö†Ô∏è –ü–∞–º—è—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã")
        return
    
    # 4. –ó–∞–ø—É—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    logger.info("üìã –≠—Ç–∞–ø 2: –ó–∞–ø—É—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...")
    additional_success = 0
    for server in ADDITIONAL_SERVERS:
        if launch_server(server):
            additional_success += 1
        time.sleep(1)
    
    logger.info(f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã: {additional_success}/{len(ADDITIONAL_SERVERS)}")
    
    # 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    time.sleep(2)
    mem = get_memory_usage()
    total_success = critical_success + additional_success
    
    logger.info("=" * 50)
    logger.info(f"üéâ –ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    logger.info(f"üìä –°–µ—Ä–≤–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ: {total_success}/{len(CRITICAL_SERVERS) + len(ADDITIONAL_SERVERS)}")
    logger.info(f"üíæ –ü–∞–º—è—Ç—å: {mem['used']:.1f}GB / {mem['total']:.1f}GB ({mem['percent']:.1f}%)")
    logger.info(f"üåê Smart Dispatcher: http://localhost:8080")
    logger.info(f"üì± RubinDeveloper: http://localhost:8080/matrix/RubinDeveloper.html")

if __name__ == '__main__':
    main()
