#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á Rubin AI v2
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö LogiEval
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import logging
from logic_tasks_module import get_logic_task, solve_logic_task, get_logic_statistics

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

@app.route('/api/logic/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á."""
    return jsonify({
        'status': 'healthy',
        'message': 'Logic Tasks API —Ä–∞–±–æ—Ç–∞–µ—Ç',
        'module': 'Logic Tasks Server'
    }), 200

@app.route('/api/logic/task', methods=['GET'])
def get_task():
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É."""
    try:
        task_type = request.args.get('type', None)
        task = get_logic_task(task_type)
        
        if not task or "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in task:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É'
            }), 404
        
        return jsonify({
            'success': True,
            'task': task,
            'task_type': task_type or 'random'
        }), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

@app.route('/api/logic/solve', methods=['POST'])
def solve_task():
    """–†–µ—à–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É."""
    try:
        data = request.get_json()
        task_type = data.get('task_type', None)
        user_answer = data.get('answer', None)
        
        if not user_answer:
            return jsonify({
                'success': False,
                'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç'
            }), 400
        
        result = solve_logic_task(task_type, user_answer)
        
        return jsonify({
            'success': True,
            'result': result
        }), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

@app.route('/api/logic/answer', methods=['POST'])
def get_answer():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É."""
    try:
        data = request.get_json()
        task_type = data.get('task_type', None)
        
        result = solve_logic_task(task_type, None)  # –ë–µ–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        return jsonify({
            'success': True,
            'answer': result.get('correct_answer', '–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'),
            'explanation': result.get('message', '')
        }), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

@app.route('/api/logic/stats', methods=['GET'])
def get_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á."""
    try:
        stats = get_logic_statistics()
        
        return jsonify({
            'success': True,
            'statistics': stats
        }), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

@app.route('/api/logic/types', methods=['GET'])
def get_task_types():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á."""
    try:
        stats = get_logic_statistics()
        task_types = []
        
        for name, info in stats.get('dataset_stats', {}).items():
            task_types.append({
                'name': name,
                'count': info['count'],
                'description': info['description']
            })
        
        return jsonify({
            'success': True,
            'task_types': task_types
        }), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á: {e}")
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

@app.route('/api/logic/chat', methods=['POST'])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —á–∞—Ç–∞ —Å –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏."""
    try:
        data = request.get_json()
        message = data.get('message', '').lower()
        
        if not message:
            return jsonify({
                'success': False,
                'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
            }), 400
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        if any(word in message for word in ['–∑–∞–¥–∞—á–∞', '–ª–æ–≥–∏–∫–∞', '–ª–æ–≥–∏—á–µ—Å–∫–∞—è', '—Ä–µ—à–∏—Ç—å']):
            # –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É
            task_type = None
            if '–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ' in message:
                task_type = '–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞'
            elif '–ø—Ä–∞–≤–∏–ª–æ' in message:
                task_type = '–ø—Ä–∞–≤–∏–ª–∞'
            elif '–º–µ–¥–∏—Ü–∏–Ω' in message:
                task_type = '–º–µ–¥–∏—Ü–∏–Ω–∞'
            elif '–º–∞—Ç–µ–º–∞—Ç–∏–∫' in message:
                task_type = '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞'
            elif '–∞—Ä–≥—É–º–µ–Ω—Ç' in message:
                task_type = '–∞—Ä–≥—É–º–µ–Ω—Ç—ã'
            
            task = get_logic_task(task_type)
            
            return jsonify({
                'success': True,
                'response': task,
                'task_type': task_type or 'random'
            }), 200
            
        elif any(word in message for word in ['–æ—Ç–≤–µ—Ç', '–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π', '—Ä–µ—à–µ–Ω–∏–µ']):
            # –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
            result = solve_logic_task(None, None)
            
            return jsonify({
                'success': True,
                'response': f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {result.get('correct_answer', '–ù–µ –Ω–∞–π–¥–µ–Ω')}"
            }), 200
            
        elif any(word in message for word in ['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç']):
            # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = get_logic_statistics()
            
            response = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á**

üéØ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {stats['total_attempts']}
‚úÖ –†–µ—à–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {stats['solved_tasks']}
‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {stats['failed_tasks']}
üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']}

üìö **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á:**
"""
            for name, info in stats['dataset_stats'].items():
                response += f"üîπ {name}: {info['count']} –∑–∞–¥–∞—á - {info['description']}\n"
            
            return jsonify({
                'success': True,
                'response': response.strip()
            }), 200
            
        else:
            # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            response = """
üß† **–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ Rubin AI**

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ "–¥–∞–π –∑–∞–¥–∞—á—É" - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –ª–æ–≥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É
‚Ä¢ "–∑–∞–¥–∞—á–∞ –Ω–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞" - –∑–∞–¥–∞—á–∞ –Ω–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
‚Ä¢ "–∑–∞–¥–∞—á–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞" - –∑–∞–¥–∞—á–∞ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
‚Ä¢ "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∑–∞–¥–∞—á–∞" - –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ª–æ–≥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞
‚Ä¢ "–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞" - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞
‚Ä¢ "–∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞" - –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ LSAT
‚Ä¢ "–ø–æ–∫–∞–∂–∏ –æ—Ç–≤–µ—Ç" - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
‚Ä¢ "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á

–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ –±–æ–ª–µ–µ 15,000 –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤!
"""
            
            return jsonify({
                'success': True,
                'response': response.strip()
            }), 200
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {e}")
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

if __name__ == '__main__':
    print("üß† Logic Tasks API Server –∑–∞–ø—É—â–µ–Ω")
    print("=" * 50)
    print("üåê URL: http://localhost:8106")
    print("üìö –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: LogiEval")
    print("Endpoints:")
    print("  - GET /api/logic/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    print("  - GET /api/logic/task - –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É")
    print("  - POST /api/logic/solve - –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É")
    print("  - POST /api/logic/answer - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç")
    print("  - GET /api/logic/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("  - GET /api/logic/types - –¢–∏–ø—ã –∑–∞–¥–∞—á")
    print("  - POST /api/logic/chat - –ß–∞—Ç —Å –∑–∞–¥–∞—á–∞–º–∏")
    print("=" * 50)
    
    app.run(port=8106, debug=False, use_reloader=False)



