#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üåê API –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è Rubin
=========================================

REST API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è —Å —Å–∏—Å—Ç–µ–º–æ–π Rubin AI.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç endpoints –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.

–ê–≤—Ç–æ—Ä: Rubin AI System
–í–µ—Ä—Å–∏—è: 2.0
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import logging
import time
from typing import Dict, Any
import traceback

from mathematical_problem_solver import MathematicalProblemSolver, ProblemType

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
CORS(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—à–∞—Ç–µ–ª—è
solver = MathematicalProblemSolver()

@app.route('/api/mathematics/status', methods=['GET'])
def get_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–¥—É–ª—è"""
    try:
        return jsonify({
            "success": True,
            "module": "Mathematical Problem Solver",
            "version": "2.0",
            "status": "active",
            "capabilities": [
                "arithmetic",
                "linear_equations", 
                "quadratic_equations",
                "system_equations",
                "geometry",
                "trigonometry",
                "calculus",
                "statistics",
                "percentage"
            ],
            "timestamp": time.time()
        })
    except Exception as e:
        logger.error(f"Status error: {e}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/api/mathematics/solve', methods=['POST'])
def solve_problem():
    """–†–µ—à–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                "success": False,
                "error": "No data provided"
            }), 400
        
        problem_text = data.get('problem', '')
        if not problem_text:
            return jsonify({
                "success": False,
                "error": "Problem text is required"
            }), 400
        
        logger.info(f"Solving problem: {problem_text}")
        
        # –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        start_time = time.time()
        solution = solver.solve_problem(problem_text)
        processing_time = time.time() - start_time
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = {
            "success": True,
            "data": {
                "problem": problem_text,
                "problem_type": solution.problem_type.value,
                "solution_steps": solution.solution_steps,
                "final_answer": solution.final_answer,
                "verification": solution.verification,
                "confidence": solution.confidence,
                "explanation": solution.explanation,
                "processing_time": processing_time
            },
            "timestamp": time.time()
        }
        
        logger.info(f"Problem solved in {processing_time:.3f}s with confidence {solution.confidence:.2f}")
        return jsonify(response)
        
    except Exception as e:
        logger.error(f"Solve error: {e}")
        logger.error(traceback.format_exc())
        return jsonify({
            "success": False,
            "error": str(e),
            "traceback": traceback.format_exc()
        }), 500

@app.route('/api/mathematics/calculate', methods=['POST'])
def calculate_expression():
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                "success": False,
                "error": "No data provided"
            }), 400
        
        expression = data.get('expression', '')
        if not expression:
            return jsonify({
                "success": False,
                "error": "Expression is required"
            }), 400
        
        logger.info(f"Calculating expression: {expression}")
        
        # –†–µ—à–µ–Ω–∏–µ –∫–∞–∫ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏
        start_time = time.time()
        solution = solver.solve_problem(f"–í—ã—á–∏—Å–ª–∏ {expression}")
        processing_time = time.time() - start_time
        
        response = {
            "success": True,
            "data": {
                "expression": expression,
                "result": solution.final_answer,
                "steps": solution.solution_steps,
                "processing_time": processing_time
            },
            "timestamp": time.time()
        }
        
        return jsonify(response)
        
    except Exception as e:
        logger.error(f"Calculate error: {e}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/api/mathematics/equation', methods=['POST'])
def solve_equation():
    """–†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                "success": False,
                "error": "No data provided"
            }), 400
        
        equation = data.get('equation', '')
        if not equation:
            return jsonify({
                "success": False,
                "error": "Equation is required"
            }), 400
        
        logger.info(f"Solving equation: {equation}")
        
        # –†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è
        start_time = time.time()
        solution = solver.solve_problem(f"–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ {equation}")
        processing_time = time.time() - start_time
        
        response = {
            "success": True,
            "data": {
                "equation": equation,
                "solution": solution.final_answer,
                "steps": solution.solution_steps,
                "equation_type": solution.problem_type.value,
                "verification": solution.verification,
                "processing_time": processing_time
            },
            "timestamp": time.time()
        }
        
        return jsonify(response)
        
    except Exception as e:
        logger.error(f"Equation error: {e}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/api/mathematics/geometry', methods=['POST'])
def solve_geometry():
    """–†–µ—à–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                "success": False,
                "error": "No data provided"
            }), 400
        
        problem = data.get('problem', '')
        shape = data.get('shape', '')
        dimensions = data.get('dimensions', {})
        
        if not problem and not shape:
            return jsonify({
                "success": False,
                "error": "Problem description or shape is required"
            }), 400
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
        if not problem:
            problem = f"–ù–∞–π–¥–∏ –ø–ª–æ—â–∞–¥—å {shape}"
            if dimensions:
                dim_str = ", ".join([f"{k} {v}" for k, v in dimensions.items()])
                problem += f" —Å {dim_str}"
        
        logger.info(f"Solving geometry problem: {problem}")
        
        # –†–µ—à–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏
        start_time = time.time()
        solution = solver.solve_problem(problem)
        processing_time = time.time() - start_time
        
        response = {
            "success": True,
            "data": {
                "problem": problem,
                "shape": shape,
                "dimensions": dimensions,
                "result": solution.final_answer,
                "steps": solution.solution_steps,
                "verification": solution.verification,
                "processing_time": processing_time
            },
            "timestamp": time.time()
        }
        
        return jsonify(response)
        
    except Exception as e:
        logger.error(f"Geometry error: {e}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/api/mathematics/trigonometry', methods=['POST'])
def solve_trigonometry():
    """–†–µ—à–µ–Ω–∏–µ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                "success": False,
                "error": "No data provided"
            }), 400
        
        problem = data.get('problem', '')
        angle = data.get('angle', 0)
        unit = data.get('unit', 'degrees')
        function = data.get('function', '')
        
        if not problem and not function:
            return jsonify({
                "success": False,
                "error": "Problem description or function is required"
            }), 400
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
        if not problem:
            problem = f"–í—ã—á–∏—Å–ª–∏ {function}({angle}¬∞)"
        
        logger.info(f"Solving trigonometry problem: {problem}")
        
        # –†–µ—à–µ–Ω–∏–µ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏
        start_time = time.time()
        solution = solver.solve_problem(problem)
        processing_time = time.time() - start_time
        
        response = {
            "success": True,
            "data": {
                "problem": problem,
                "angle": angle,
                "unit": unit,
                "function": function,
                "result": solution.final_answer,
                "steps": solution.solution_steps,
                "processing_time": processing_time
            },
            "timestamp": time.time()
        }
        
        return jsonify(response)
        
    except Exception as e:
        logger.error(f"Trigonometry error: {e}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/api/mathematics/statistics', methods=['POST'])
def solve_statistics():
    """–†–µ—à–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                "success": False,
                "error": "No data provided"
            }), 400
        
        problem = data.get('problem', '')
        numbers = data.get('data', [])
        
        if not problem and not numbers:
            return jsonify({
                "success": False,
                "error": "Problem description or data is required"
            }), 400
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
        if not problem:
            problem = f"–ù–∞–π–¥–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —á–∏—Å–µ–ª {numbers}"
        
        logger.info(f"Solving statistics problem: {problem}")
        
        # –†–µ—à–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏
        start_time = time.time()
        solution = solver.solve_problem(problem)
        processing_time = time.time() - start_time
        
        response = {
            "success": True,
            "data": {
                "problem": problem,
                "input_data": numbers,
                "result": solution.final_answer,
                "steps": solution.solution_steps,
                "processing_time": processing_time
            },
            "timestamp": time.time()
        }
        
        return jsonify(response)
        
    except Exception as e:
        logger.error(f"Statistics error: {e}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/api/mathematics/percentage', methods=['POST'])
def solve_percentage():
    """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç—ã"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                "success": False,
                "error": "No data provided"
            }), 400
        
        problem = data.get('problem', '')
        number = data.get('number', 0)
        percent = data.get('percent', 0)
        
        if not problem and (not number or not percent):
            return jsonify({
                "success": False,
                "error": "Problem description or number and percent are required"
            }), 400
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
        if not problem:
            problem = f"–ù–∞–π–¥–∏ {percent}% –æ—Ç {number}"
        
        logger.info(f"Solving percentage problem: {problem}")
        
        # –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        start_time = time.time()
        solution = solver.solve_problem(problem)
        processing_time = time.time() - start_time
        
        response = {
            "success": True,
            "data": {
                "problem": problem,
                "number": number,
                "percent": percent,
                "result": solution.final_answer,
                "steps": solution.solution_steps,
                "processing_time": processing_time
            },
            "timestamp": time.time()
        }
        
        return jsonify(response)
        
    except Exception as e:
        logger.error(f"Percentage error: {e}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/api/mathematics/help', methods=['GET'])
def get_help():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ API"""
    help_info = {
        "success": True,
        "data": {
            "title": "Mathematical Problem Solver API",
            "version": "2.0",
            "description": "API –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á",
            "endpoints": {
                "GET /api/mathematics/status": "–°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è",
                "GET /api/mathematics/help": "–°–ø—Ä–∞–≤–∫–∞ –ø–æ API",
                "POST /api/mathematics/solve": "–†–µ—à–µ–Ω–∏–µ –ª—é–±–æ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏",
                "POST /api/mathematics/calculate": "–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è",
                "POST /api/mathematics/equation": "–†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–π",
                "POST /api/mathematics/geometry": "–†–µ—à–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á",
                "POST /api/mathematics/trigonometry": "–†–µ—à–µ–Ω–∏–µ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á",
                "POST /api/mathematics/statistics": "–†–µ—à–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á",
                "POST /api/mathematics/percentage": "–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç—ã"
            },
            "supported_problem_types": [
                "arithmetic",
                "linear_equations",
                "quadratic_equations", 
                "system_equations",
                "geometry",
                "trigonometry",
                "calculus",
                "statistics",
                "percentage"
            ],
            "examples": {
                "solve": {
                    "url": "/api/mathematics/solve",
                    "method": "POST",
                    "body": {"problem": "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ 2x + 5 = 13"}
                },
                "calculate": {
                    "url": "/api/mathematics/calculate", 
                    "method": "POST",
                    "body": {"expression": "2 + 3 * 4"}
                },
                "geometry": {
                    "url": "/api/mathematics/geometry",
                    "method": "POST", 
                    "body": {
                        "shape": "—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫",
                        "dimensions": {"base": 5, "height": 3}
                    }
                }
            }
        },
        "timestamp": time.time()
    }
    
    return jsonify(help_info)

@app.route('/api/mathematics/test', methods=['POST'])
def run_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è"""
    try:
        test_problems = [
            "–í—ã—á–∏—Å–ª–∏ 2 + 3 * 4",
            "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ 2x + 5 = 13", 
            "–ù–∞–π–¥–∏ –ø–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º 5 –∏ –≤—ã—Å–æ—Ç–æ–π 3",
            "–†–µ—à–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x¬≤ - 5x + 6 = 0",
            "–ù–∞–π–¥–∏ 15% –æ—Ç 200",
            "–í—ã—á–∏—Å–ª–∏ sin(30¬∞)",
            "–ù–∞–π–¥–∏ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–µ–ª 1, 2, 3, 4, 5"
        ]
        
        results = []
        total_time = 0
        
        for i, problem in enumerate(test_problems):
            start_time = time.time()
            solution = solver.solve_problem(problem)
            processing_time = time.time() - start_time
            total_time += processing_time
            
            results.append({
                "test_number": i + 1,
                "problem": problem,
                "problem_type": solution.problem_type.value,
                "answer": solution.final_answer,
                "confidence": solution.confidence,
                "verification": solution.verification,
                "processing_time": processing_time
            })
        
        response = {
            "success": True,
            "data": {
                "total_tests": len(test_problems),
                "total_time": total_time,
                "average_time": total_time / len(test_problems),
                "results": results
            },
            "timestamp": time.time()
        }
        
        return jsonify(response)
        
    except Exception as e:
        logger.error(f"Test error: {e}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.errorhandler(404)
def not_found(error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫"""
    return jsonify({
        "success": False,
        "error": "Endpoint not found",
        "available_endpoints": [
            "/api/mathematics/status",
            "/api/mathematics/help",
            "/api/mathematics/solve",
            "/api/mathematics/calculate",
            "/api/mathematics/equation",
            "/api/mathematics/geometry",
            "/api/mathematics/trigonometry",
            "/api/mathematics/statistics",
            "/api/mathematics/percentage",
            "/api/mathematics/test"
        ]
    }), 404

@app.errorhandler(500)
def internal_error(error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 500 –æ—à–∏–±–æ–∫"""
    return jsonify({
        "success": False,
        "error": "Internal server error",
        "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
    }), 500

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Mathematical Problem Solver API")
    logger.info("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
    logger.info("   GET  /api/mathematics/status - –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è")
    logger.info("   GET  /api/mathematics/help - –°–ø—Ä–∞–≤–∫–∞")
    logger.info("   POST /api/mathematics/solve - –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á")
    logger.info("   POST /api/mathematics/calculate - –í—ã—á–∏—Å–ª–µ–Ω–∏—è")
    logger.info("   POST /api/mathematics/equation - –£—Ä–∞–≤–Ω–µ–Ω–∏—è")
    logger.info("   POST /api/mathematics/geometry - –ì–µ–æ–º–µ—Ç—Ä–∏—è")
    logger.info("   POST /api/mathematics/trigonometry - –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è")
    logger.info("   POST /api/mathematics/statistics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    logger.info("   POST /api/mathematics/percentage - –ü—Ä–æ—Ü–µ–Ω—Ç—ã")
    logger.info("   POST /api/mathematics/test - –¢–µ—Å—Ç—ã")
    
    app.run(
        host='0.0.0.0',
        port=8089,
        debug=True
    )

