#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ Rubin AI v2
"""

import psutil
import subprocess
import time
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
SERVERS = {
    'Smart Dispatcher': {
        'script': 'simple_dispatcher.py',
        'port': 8080,
        'description': '–û—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤'
    },
    'General API': {
        'script': 'api/general_api.py',
        'port': 8085,
        'description': '–û–±—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è'
    },
    'Mathematics': {
        'script': 'api/mathematics_api.py',
        'port': 8086,
        'description': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è'
    },
    'Electrical': {
        'script': 'api/electrical_api.py',
        'port': 8087,
        'description': '–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ –∏ —Å—Ö–µ–º—ã'
    },
    'Programming': {
        'script': 'api/programming_api.py',
        'port': 8088,
        'description': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'
    },
    'Neuro': {
        'script': 'simple_neuro_api_server.py',
        'port': 8090,
        'description': '–ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã'
    },
    'Controllers': {
        'script': 'simple_controllers_api_server.py',
        'port': 9000,
        'description': '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã'
    },
    'PLC Analysis': {
        'script': 'simple_plc_analysis_api_server.py',
        'port': 8099,
        'description': '–ê–Ω–∞–ª–∏–∑ PLC –ø—Ä–æ–≥—Ä–∞–º–º'
    },
    'Advanced Math': {
        'script': 'simple_advanced_math_api_server.py',
        'port': 8100,
        'description': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞'
    },
    'Data Processing': {
        'script': 'simple_data_processing_api_server.py',
        'port': 8101,
        'description': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö'
    },
    'Search Engine': {
        'script': 'search_engine_api_server.py',
        'port': 8102,
        'description': '–ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞'
    },
    'System Utils': {
        'script': 'system_utils_api_server.py',
        'port': 8103,
        'description': '–°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã'
    },
    'GAI Server': {
        'script': 'lightweight_gai_server.py',
        'port': 8104,
        'description': '–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ò–ò (–æ–±–ª–µ–≥—á–µ–Ω–Ω—ã–π)'
    },
    'Unified Manager': {
        'script': 'unified_system_manager.py',
        'port': 8084,
        'description': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π'
    },
    'Ethical Core': {
        'script': 'ethical_core_api_server.py',
        'port': 8105,
        'description': '–≠—Ç–∏—á–µ—Å–∫–æ–µ —è–¥—Ä–æ'
    }
}

def get_system_memory():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    mem = psutil.virtual_memory()
    return {
        'total_gb': round(mem.total / (1024**3), 1),
        'available_gb': round(mem.available / (1024**3), 1),
        'used_gb': round(mem.used / (1024**3), 1),
        'percent': mem.percent
    }

def get_python_processes():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–º—è—Ç–∏"""
    python_processes = []
    
    for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'memory_info', 'create_time']):
        try:
            if proc.info['name'] == 'python.exe':
                cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else 'Unknown'
                memory_mb = proc.info['memory_info'].rss / (1024 * 1024)
                
                python_processes.append({
                    'pid': proc.info['pid'],
                    'cmdline': cmdline,
                    'memory_mb': round(memory_mb, 1),
                    'create_time': proc.info['create_time']
                })
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    
    return python_processes

def identify_server_processes():
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –∫–∞–∫–∏–º —Å–µ—Ä–≤–µ—Ä–∞–º"""
    python_procs = get_python_processes()
    server_processes = {}
    
    for server_name, server_info in SERVERS.items():
        server_processes[server_name] = []
        
        for proc in python_procs:
            cmdline = proc['cmdline'].lower()
            script_name = server_info['script'].lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–º—è —Å–∫—Ä–∏–ø—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
            if script_name in cmdline:
                server_processes[server_name].append(proc)
    
    return server_processes

def analyze_memory_usage():
    """–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏"""
    print("üîç –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ Rubin AI v2")
    print("=" * 80)
    
    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    system_mem = get_system_memory()
    print(f"üíæ –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–º—è—Ç—å: {system_mem['used_gb']:.1f}GB / {system_mem['total_gb']:.1f}GB ({system_mem['percent']:.1f}%)")
    print(f"üü¢ –î–æ—Å—Ç—É–ø–Ω–æ: {system_mem['available_gb']:.1f}GB")
    print()
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä–æ–≤
    server_processes = identify_server_processes()
    
    total_server_memory = 0
    active_servers = 0
    
    print("üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ï–†–í–ï–†–û–í:")
    print("-" * 80)
    print(f"{'–°–µ—Ä–≤–µ—Ä':<20} {'–°—Ç–∞—Ç—É—Å':<10} {'–ü–∞–º—è—Ç—å (MB)':<12} {'–ü—Ä–æ—Ü–µ—Å—Å—ã':<8} {'–û–ø–∏—Å–∞–Ω–∏–µ'}")
    print("-" * 80)
    
    for server_name, server_info in SERVERS.items():
        processes = server_processes[server_name]
        
        if processes:
            total_memory = sum(proc['memory_mb'] for proc in processes)
            process_count = len(processes)
            status = "üü¢ –û–ù–õ–ê–ô–ù"
            active_servers += 1
        else:
            total_memory = 0
            process_count = 0
            status = "üî¥ –û–§–§–õ–ê–ô–ù"
        
        total_server_memory += total_memory
        
        print(f"{server_name:<20} {status:<10} {total_memory:<12.1f} {process_count:<8} {server_info['description']}")
    
    print("-" * 80)
    print(f"{'–ò–¢–û–ì–û':<20} {'':<10} {total_server_memory:<12.1f} {'':<8} {active_servers} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
    print()
    
    # –ê–Ω–∞–ª–∏–∑ –¥—Ä—É–≥–∏—Ö Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    all_python_procs = get_python_processes()
    other_python_memory = 0
    other_processes = []
    
    for proc in all_python_procs:
        is_server_process = False
        for server_name, processes in server_processes.items():
            if any(p['pid'] == proc['pid'] for p in processes):
                is_server_process = True
                break
        
        if not is_server_process:
            other_python_memory += proc['memory_mb']
            other_processes.append(proc)
    
    if other_processes:
        print("üêç –î–†–£–ì–ò–ï PYTHON –ü–†–û–¶–ï–°–°–´:")
        print("-" * 80)
        for proc in other_processes:
            print(f"PID {proc['pid']:<8} {proc['memory_mb']:<8.1f}MB - {proc['cmdline'][:60]}...")
        print(f"–û–±—â–∞—è –ø–∞–º—è—Ç—å –¥—Ä—É–≥–∏—Ö Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {other_python_memory:.1f}MB")
        print()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("-" * 80)
    
    if system_mem['percent'] > 85:
        print("üö® –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 85%!")
        print("   - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É")
        print("   - –ó–∞–∫—Ä–æ–π—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        print("   - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ RAM")
    elif system_mem['percent'] > 70:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")
        print("   - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ—Ä–≤–µ—Ä—ã")
        print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ lightweight_gai_server.py –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ GAI")
    else:
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –Ω–æ—Ä–º–µ")
    
    if total_server_memory > 1000:  # –ë–æ–ª—å—à–µ 1GB
        print(f"üìä –°–µ—Ä–≤–µ—Ä—ã Rubin AI –∏—Å–ø–æ–ª—å–∑—É—é—Ç {total_server_memory:.1f}MB –ø–∞–º—è—Ç–∏")
        print("   - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
        print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ optimized_dispatcher.py –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏")
    
    print()
    print("üéØ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø:")
    print("-" * 80)
    print("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ lightweight_gai_server.py (—ç–∫–æ–Ω–æ–º–∏—è ~500MB)")
    print("‚Ä¢ –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–µ—Ä—ã")
    print("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ optimized_dispatcher.py –≤–º–µ—Å—Ç–æ simple_dispatcher.py")
    print("‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É")

if __name__ == '__main__':
    analyze_memory_usage()








