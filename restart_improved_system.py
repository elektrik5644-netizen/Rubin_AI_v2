#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã Rubin AI —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —É–ª—É—á—à–µ–Ω–∏–π
"""

import subprocess
import time
import requests
import sys
import os

class SystemRestarter:
    def __init__(self):
        self.main_api_port = 8084
        self.documents_api_port = 8088
        
    def stop_existing_processes(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã Python
            subprocess.run(["taskkill", "/f", "/im", "python.exe"], 
                         capture_output=True, text=True)
            print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã Python –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã
        time.sleep(2)
        self.check_ports_free()
    
    def check_ports_free(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç 8084
            response = requests.get(f"http://localhost:{self.main_api_port}/health", 
                                  timeout=2)
            print(f"‚ö†Ô∏è –ü–æ—Ä—Ç {self.main_api_port} –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç")
        except:
            print(f"‚úÖ –ü–æ—Ä—Ç {self.main_api_port} —Å–≤–æ–±–æ–¥–µ–Ω")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç 8088
            response = requests.get(f"http://localhost:{self.documents_api_port}/health", 
                                  timeout=2)
            print(f"‚ö†Ô∏è –ü–æ—Ä—Ç {self.documents_api_port} –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç")
        except:
            print(f"‚úÖ –ü–æ—Ä—Ç {self.documents_api_port} —Å–≤–æ–±–æ–¥–µ–Ω")
    
    def start_main_api(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API Rubin AI...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            process = subprocess.Popen([
                sys.executable, "api/rubin_ai_v2_simple.py"
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π API –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            return process
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API: {e}")
            return None
    
    def start_documents_api(self):
        """–ó–∞–ø—É—Å–∫ API –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        print("üìö –ó–∞–ø—É—Å–∫ API –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º API –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            process = subprocess.Popen([
                sys.executable, "api/documents_api.py"
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            print(f"‚úÖ API –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            return process
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            return None
    
    def wait_for_services(self, timeout=60):
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API
            try:
                response = requests.get(f"http://localhost:{self.main_api_port}/health", 
                                      timeout=5)
                if response.status_code == 200:
                    print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π API –≥–æ—Ç–æ–≤")
                    break
            except:
                pass
            
            time.sleep(2)
            print(".", end="", flush=True)
        
        print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        start_time = time.time()
        while time.time() - start_time < timeout:
            try:
                response = requests.get(f"http://localhost:{self.documents_api_port}/health", 
                                      timeout=5)
                if response.status_code == 200:
                    print("‚úÖ API –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤")
                    break
            except:
                pass
            
            time.sleep(2)
            print(".", end="", flush=True)
        
        print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    
    def test_system_health(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        print("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API
        try:
            response = requests.get(f"http://localhost:{self.main_api_port}/health", 
                                  timeout=10)
            if response.status_code == 200:
                print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        try:
            response = requests.get(f"http://localhost:{self.documents_api_port}/health", 
                                  timeout=10)
            if response.status_code == 200:
                print("‚úÖ API –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"‚ö†Ô∏è API –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        try:
            response = requests.post(
                f"http://localhost:{self.main_api_port}/api/chat",
                json={"message": "–ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä"},
                headers={"Content-Type": "application/json"},
                timeout=15
            )
            if response.status_code == 200:
                print("‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"‚ö†Ô∏è –ü–æ–∏—Å–∫ –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    def restart_system(self):
        """–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        print("üîÑ –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã Rubin AI —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏...\n")
        
        # 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        self.stop_existing_processes()
        
        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API
        main_process = self.start_main_api()
        if not main_process:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π API")
            return False
        
        # 3. –ó–∞–ø—É—Å–∫–∞–µ–º API –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        docs_process = self.start_documents_api()
        if not docs_process:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            return False
        
        # 4. –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
        self.wait_for_services()
        
        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        self.test_system_health()
        
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π!")
        print(f"üåê –û—Å–Ω–æ–≤–Ω–æ–π API: http://localhost:{self.main_api_port}")
        print(f"üìö API –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: http://localhost:{self.documents_api_port}")
        print(f"üñ•Ô∏è –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:{self.main_api_port}/RubinIDE.html")
        
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    restarter = SystemRestarter()
    success = restarter.restart_system()
    
    if success:
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üß™ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: python test_improved_system.py")
    else:
        print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã")
        sys.exit(1)

if __name__ == "__main__":
    main()

















