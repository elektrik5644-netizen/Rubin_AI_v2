#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß† Enhanced Smart Dispatcher —Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç—å—é
–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—à–∏–±–æ–∫
"""

from flask import Flask, jsonify, request
from flask_cors import CORS
import requests
import logging
import json
import time
import os
from datetime import datetime
import threading
import queue

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ—à–∏–±–æ–∫
error_queue = queue.Queue()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
SERVERS = {
    "general": {
        "port": 8085,
        "endpoint": "/api/health",
        "method": "GET",
        "keywords": ["–ø—Ä–∏–≤–µ—Ç", "–∫–∞–∫ –¥–µ–ª–∞", "—á—Ç–æ –Ω–æ–≤–æ–≥–æ", "–æ–±—â–µ–µ", "–ø–æ–º–æ—â—å", "—Å–ø—Ä–∞–≤–∫–∞"],
        "priority": 1
    },
    "mathematics": {
        "port": 8086,
        "endpoint": "/health",
        "method": "GET",
        "keywords": ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π", "–≤—ã—á–∏—Å–ª–µ–Ω–∏–µ", "—Ñ–æ—Ä–º—É–ª–∞", "—É—Ä–∞–≤–Ω–µ–Ω–∏–µ", "–∏–Ω—Ç–µ–≥—Ä–∞–ª", "–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è"],
        "priority": 2
    },
    "electrical": {
        "port": 8087,
        "endpoint": "/api/electrical/status",
        "method": "GET",
        "keywords": ["—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞", "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "—Ç–æ–∫", "–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ", "–º–æ—â–Ω–æ—Å—Ç—å", "—Å—Ö–µ–º–∞", "–¥–∏–æ–¥"],
        "priority": 2
    },
    "programming": {
        "port": 8088,
        "endpoint": "/api/programming/explain",
        "method": "GET",
        "keywords": ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∫–æ–¥", "–∞–ª–≥–æ—Ä–∏—Ç–º", "python", "javascript", "java", "c++"],
        "priority": 2
    },
    "radiomechanics": {
        "port": 8089,
        "endpoint": "/api/chat",
        "method": "POST",
        "keywords": ["—Ä–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞", "—Ä–∞–¥–∏–æ", "–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫", "–ø—Ä–∏–µ–º–Ω–∏–∫", "–∞–Ω—Ç–µ–Ω–Ω–∞", "—á–∞—Å—Ç–æ—Ç–∞"],
        "priority": 2
    },
    "neuro": {
        "port": 8090,
        "endpoint": "/api/neuro/health",
        "method": "GET",
        "keywords": ["–Ω–µ–π—Ä–æ—Å–µ—Ç—å", "–Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "ai"],
        "priority": 3
    },
    "controllers": {
        "port": 9000,
        "endpoint": "/api/controllers/topic/general",
        "method": "GET",
        "keywords": ["–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä", "pmac", "plc", "—Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥", "—Å–µ—Ä–≤–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å", "–ø—Ä–∏–≤–æ–¥", "–¥–≤–∏–≥–∞—Ç–µ–ª—å"],
        "priority": 2
    },
    "plc_analysis": {
        "port": 8099,
        "endpoint": "/api/plc/health",
        "method": "GET",
        "keywords": ["plc –∞–Ω–∞–ª–∏–∑", "ladder logic", "–ø—Ä–æ–≥—Ä–∞–º–º–∞ plc", "–æ—Ç–ª–∞–¥–∫–∞ plc"],
        "priority": 2
    },
    "advanced_math": {
        "port": 8100,
        "endpoint": "/api/advanced_math/health",
        "method": "GET",
        "keywords": ["–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Å–ª–æ–∂–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è", "–≤—ã—Å—à–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"],
        "priority": 2
    },
    "data_processing": {
        "port": 8101,
        "endpoint": "/api/data_processing/health",
        "method": "GET",
        "keywords": ["–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è"],
        "priority": 2
    },
    "search_engine": {
        "port": 8102,
        "endpoint": "/api/search/health",
        "method": "GET",
        "keywords": ["–ø–æ–∏—Å–∫", "–≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫", "—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫"],
        "priority": 2
    },
    "system_utils": {
        "port": 8103,
        "endpoint": "/api/system/health",
        "method": "GET",
        "keywords": ["—Å–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã", "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "–ø—Ä–æ–±–ª–µ–º—ã", "–æ—à–∏–±–∫–∏", "–∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã"],
        "priority": 1
    },
    "gai_server": {
        "port": 8104,
        "endpoint": "/api/gai/health",
        "method": "GET",
        "keywords": ["–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π ai", "—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞", "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞"],
        "priority": 2
    },
    "unified_manager": {
        "port": 8084,
        "endpoint": "/api/system/health",
        "method": "GET",
        "keywords": ["—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π", "–º–µ–Ω–µ–¥–∂–µ—Ä", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"],
        "priority": 1
    },
    "ethical_core": {
        "port": 8105,
        "endpoint": "/api/ethical/health",
        "method": "GET",
        "keywords": ["—ç—Ç–∏–∫–∞", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "—ç—Ç–∏—á–µ—Å–∫–æ–µ —è–¥—Ä–æ"],
        "priority": 1
    }
}

class NeuralRouter:
    """üß† –ù–µ–π—Ä–æ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.knowledge_base = {
            "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ": ["pmac", "plc", "—Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥", "—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞", "—Ä–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞", "–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä"],
            "–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ": ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–≤—ã—á–∏—Å–ª–µ–Ω–∏–µ", "—Ñ–æ—Ä–º—É–ª–∞", "—É—Ä–∞–≤–Ω–µ–Ω–∏–µ", "–∏–Ω—Ç–µ–≥—Ä–∞–ª", "–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è"],
            "–ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ": ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∫–æ–¥", "–∞–ª–≥–æ—Ä–∏—Ç–º", "python", "javascript", "java"],
            "—Å–∏—Å—Ç–µ–º–Ω—ã–µ": ["–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "–ø—Ä–æ–±–ª–µ–º—ã", "–æ—à–∏–±–∫–∏"],
            "ai_—Å–≤—è–∑–∞–Ω–Ω—ã–µ": ["–Ω–µ–π—Ä–æ—Å–µ—Ç—å", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "ai"],
            "–æ–±—â–∏–µ": ["–ø—Ä–∏–≤–µ—Ç", "–∫–∞–∫ –¥–µ–ª–∞", "—á—Ç–æ –Ω–æ–≤–æ–≥–æ", "–ø–æ–º–æ—â—å", "—Å–ø—Ä–∞–≤–∫–∞"]
        }
    
    def analyze_message(self, message):
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏"""
        message_lower = message.lower()
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_scores = {}
        for category, keywords in self.knowledge_base.items():
            score = sum(1 for keyword in keywords if keyword in message_lower)
            if score > 0:
                category_scores[category] = score
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category_scores:
            best_category = max(category_scores, key=category_scores.get)
            confidence = category_scores[best_category] / len(message_lower.split())
            return best_category, confidence
        
        return "–æ–±—â–∏–µ", 0.1
    
    def suggest_route(self, message):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        category, confidence = self.analyze_message(message)
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã
        category_mapping = {
            "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ": ["controllers", "electrical", "radiomechanics", "plc_analysis"],
            "–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ": ["mathematics", "advanced_math"],
            "–ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ": ["programming"],
            "—Å–∏—Å—Ç–µ–º–Ω—ã–µ": ["system_utils", "unified_manager"],
            "ai_—Å–≤—è–∑–∞–Ω–Ω—ã–µ": ["neuro", "gai_server"],
            "–æ–±—â–∏–µ": ["general"]
        }
        
        suggested_servers = category_mapping.get(category, ["general"])
        return suggested_servers[0], confidence

class ErrorTracker:
    """üìä –¢—Ä–µ–∫–µ—Ä –æ—à–∏–±–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.errors = []
        self.server_status = {}
    
    def log_error(self, server_name, error_type, message, details=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        error = {
            "timestamp": datetime.now().isoformat(),
            "server": server_name,
            "type": error_type,
            "message": message,
            "details": details
        }
        self.errors.append(error)
        error_queue.put(error)
        logger.error(f"‚ùå {server_name}: {error_type} - {message}")
    
    def update_server_status(self, server_name, status, response_time=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.server_status[server_name] = {
            "status": status,
            "last_check": datetime.now().isoformat(),
            "response_time": response_time
        }
    
    def get_errors(self, limit=50):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫"""
        return self.errors[-limit:]
    
    def get_system_health(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        total_servers = len(SERVERS)
        healthy_servers = sum(1 for status in self.server_status.values() if status["status"] == "healthy")
        
        return {
            "total_servers": total_servers,
            "healthy_servers": healthy_servers,
            "unhealthy_servers": total_servers - healthy_servers,
            "health_percentage": (healthy_servers / total_servers * 100) if total_servers > 0 else 0,
            "last_check": datetime.now().isoformat()
        }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
neural_router = NeuralRouter()
error_tracker = ErrorTracker()

def check_server_health(server_name, config):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        url = f"http://localhost:{config['port']}{config['endpoint']}"
        start_time = time.time()
        
        if config['method'] == 'GET':
            response = requests.get(url, timeout=3)
        else:
            response = requests.post(url, json={}, timeout=3)
        
        response_time = (time.time() - start_time) * 1000
        
        if response.status_code == 200:
            error_tracker.update_server_status(server_name, "healthy", response_time)
            return True
        else:
            error_tracker.log_error(server_name, "HTTP_ERROR", f"Status {response.status_code}")
            error_tracker.update_server_status(server_name, "unhealthy")
            return False
            
    except requests.exceptions.ConnectionError:
        error_tracker.log_error(server_name, "CONNECTION_ERROR", "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        error_tracker.update_server_status(server_name, "offline")
        return False
    except requests.exceptions.Timeout:
        error_tracker.log_error(server_name, "TIMEOUT_ERROR", "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        error_tracker.update_server_status(server_name, "timeout")
        return False
    except Exception as e:
        error_tracker.log_error(server_name, "UNKNOWN_ERROR", str(e))
        error_tracker.update_server_status(server_name, "error")
        return False

def categorize_message(message):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
    message_lower = message.lower()
    
    # –ù–µ–π—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    suggested_server, confidence = neural_router.suggest_route(message)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    if suggested_server in SERVERS:
        config = SERVERS[suggested_server]
        if check_server_health(suggested_server, config):
            return suggested_server, confidence
    
    # Fallback: –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    best_match = None
    best_score = 0
    
    for server_name, config in SERVERS.items():
        score = 0
        for keyword in config['keywords']:
            if keyword in message_lower:
                score += 1
        
        if score > best_score:
            best_score = score
            best_match = server_name
    
    if best_match and best_score > 0:
        return best_match, best_score / len(message_lower.split())
    
    return "general", 0.1

def forward_request(server_name, message):
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–µ—Ä"""
    if server_name not in SERVERS:
        error_tracker.log_error(server_name, "CONFIG_ERROR", "–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return {"error": "–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"}
    
    config = SERVERS[server_name]
    
    try:
        url = f"http://localhost:{config['port']}{config['endpoint']}"
        
        if config['method'] == 'GET':
            # –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params = {}
            if server_name == 'controllers':
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
                message_lower = message.lower()
                if 'pmac' in message_lower:
                    params['topic'] = 'pmac'
                elif 'plc' in message_lower:
                    params['topic'] = 'plc'
                elif '—Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥' in message_lower or '—Å–µ—Ä–≤–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å' in message_lower:
                    params['topic'] = '—Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥'
                else:
                    params['topic'] = 'general'
            
            response = requests.get(url, params=params, timeout=5)
        else:
            # –î–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
            payload = {'message': message}
            response = requests.post(url, json=payload, timeout=5)
        
        if response.status_code == 200:
            return response.json()
        else:
            error_tracker.log_error(server_name, "HTTP_ERROR", f"Status {response.status_code}")
            return {"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}"}
            
    except requests.exceptions.ConnectionError:
        error_tracker.log_error(server_name, "CONNECTION_ERROR", "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return {"error": "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
    except requests.exceptions.Timeout:
        error_tracker.log_error(server_name, "TIMEOUT_ERROR", "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        return {"error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"}
    except Exception as e:
        error_tracker.log_error(server_name, "UNKNOWN_ERROR", str(e))
        return {"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}

# API Endpoints
@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞"""
    return jsonify({
        "status": "healthy",
        "message": "Enhanced Smart Dispatcher —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "timestamp": datetime.now().isoformat(),
        "neural_router": "active",
        "error_tracker": "active"
    }), 200

@app.route('/api/chat', methods=['POST'])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —á–∞—Ç–∞"""
    try:
        data = request.get_json()
        message = data.get('message', '')
        
        if not message:
            return jsonify({"error": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"}), 400
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç—å—é
        server_name, confidence = categorize_message(message)
        
        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        result = forward_request(server_name, message)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        result.update({
            "routed_to": server_name,
            "confidence": confidence,
            "timestamp": datetime.now().isoformat(),
            "neural_analysis": True
        })
        
        return jsonify(result), 200
        
    except Exception as e:
        error_tracker.log_error("dispatcher", "CHAT_ERROR", str(e))
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"}), 500

@app.route('/api/servers', methods=['GET'])
def list_servers():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    return jsonify({
        "servers": SERVERS,
        "total_count": len(SERVERS),
        "timestamp": datetime.now().isoformat()
    }), 200

@app.route('/api/errors', methods=['GET'])
def get_errors():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    limit = request.args.get('limit', 50, type=int)
    errors = error_tracker.get_errors(limit)
    
    return jsonify({
        "errors": errors,
        "total_count": len(errors),
        "timestamp": datetime.now().isoformat()
    }), 200

@app.route('/api/system/health', methods=['GET'])
def system_health():
    """–û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã"""
    health = error_tracker.get_system_health()
    health.update({
        "server_status": error_tracker.server_status,
        "timestamp": datetime.now().isoformat()
    })
    
    return jsonify(health), 200

@app.route('/api/neural/analyze', methods=['POST'])
def neural_analyze():
    """–ù–µ–π—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        data = request.get_json()
        message = data.get('message', '')
        
        if not message:
            return jsonify({"error": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"}), 400
        
        category, confidence = neural_router.analyze_message(message)
        suggested_server, route_confidence = neural_router.suggest_route(message)
        
        return jsonify({
            "message": message,
            "category": category,
            "confidence": confidence,
            "suggested_server": suggested_server,
            "route_confidence": route_confidence,
            "timestamp": datetime.now().isoformat()
        }), 200
        
    except Exception as e:
        error_tracker.log_error("neural_analyzer", "ANALYSIS_ERROR", str(e))
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"}), 500

@app.route('/api/status', methods=['GET'])
def status():
    """–°—Ç–∞—Ç—É—Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞"""
    return jsonify({
        "status": "running",
        "neural_router": "active",
        "error_tracker": "active",
        "servers_configured": len(SERVERS),
        "uptime": "active",
        "timestamp": datetime.now().isoformat()
    }), 200

if __name__ == "__main__":
    logger.info("üß† Enhanced Smart Dispatcher —Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç—å—é –∑–∞–ø—É—â–µ–Ω")
    logger.info("üîó URL: http://localhost:8080")
    logger.info("üìä Endpoints:")
    logger.info("  - POST /api/chat - –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç")
    logger.info("  - GET /api/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    logger.info("  - GET /api/servers - –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤")
    logger.info("  - GET /api/errors - –û—à–∏–±–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    logger.info("  - GET /api/system/health - –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã")
    logger.info("  - POST /api/neural/analyze - –ù–µ–π—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    logger.info("  - GET /api/status - –°—Ç–∞—Ç—É—Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞")
    
    app.run(port=8080, debug=True, use_reloader=False)
