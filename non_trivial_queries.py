#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º—ã—à–ª–µ–Ω–∏—è Rubin AI
–ü–æ–±—É–∂–¥–∞–µ—Ç –ò–ò –∏—Å–∫–∞—Ç—å –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ —Å–≤—è–∑–∏ –∏ –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ —Ä–∞–º–∫–∏ –ø—Ä–∏–≤—ã—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
"""

import random
import logging
from typing import List, Dict, Any, Tuple
from datetime import datetime
import json

logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)

class NonTrivialQueryGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º—ã—à–ª–µ–Ω–∏—è –ò–ò"""
    
    def __init__(self):
        self.query_templates = {
            "paradox_queries": [],
            "cross_domain_connections": [],
            "counterintuitive_scenarios": [],
            "abductive_reasoning": [],
            "creative_problem_solving": []
        }
        self._initialize_query_templates()
        logger.info("üéØ –°–∏—Å—Ç–µ–º–∞ –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _initialize_query_templates(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        
        # –ü–∞—Ä–∞–¥–æ–∫—Å–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã - —Å—Ç–∏–º—É–ª–∏—Ä—É—é—Ç –ø–æ–∏—Å–∫ –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
        self.query_templates["paradox_queries"] = [
            {
                "template": "–ö–∞–∫ {concept1} –º–æ–∂–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ {action1} –∏ {action2}?",
                "examples": [
                    "–ö–∞–∫ —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —É—Å–∏–ª–∏–≤–∞—Ç—å –∏ –æ—Å–ª–∞–±–ª—è—Ç—å —Å–∏–≥–Ω–∞–ª?",
                    "–ö–∞–∫ –∞–ª–≥–æ—Ä–∏—Ç–º –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ –±—ã—Å—Ç—Ä—ã–º, –∏ –º–µ–¥–ª–µ–Ω–Ω—ã–º?",
                    "–ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π, –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π?"
                ],
                "stimulus_type": "paradox_resolution",
                "thinking_level": 4
            },
            {
                "template": "–ü–æ—á–µ–º—É {concept1} —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ö–æ—Ç—è –ø–æ –ª–æ–≥–∏–∫–µ {reason}?",
                "examples": [
                    "–ü–æ—á–µ–º—É –®–ò–ú —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ö–æ—Ç—è –ø–æ –ª–æ–≥–∏–∫–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º?",
                    "–ü–æ—á–µ–º—É –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É, —Ö–æ—Ç—è –ø–æ –ª–æ–≥–∏–∫–µ –¥–æ–ª–∂–Ω–∞ –µ—ë –¥–µ—Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å?",
                    "–ü–æ—á–µ–º—É —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–µ—Ä–µ–¥–∞—é—Ç –∞–Ω–∞–ª–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?"
                ],
                "stimulus_type": "counterintuitive_explanation",
                "thinking_level": 5
            }
        ]
        
        # –ú–µ–∂–¥–æ–º–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏ - –ø–æ–∏—Å–∫ –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã—Ö –∞–Ω–∞–ª–æ–≥–∏–π
        self.query_templates["cross_domain_connections"] = [
            {
                "template": "–ö–∞–∫ {domain1} {concept1} —Å–≤—è–∑–∞–Ω —Å {domain2} {concept2}?",
                "examples": [
                    "–ö–∞–∫ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä —Å–≤—è–∑–∞–Ω —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏?",
                    "–ö–∞–∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Å–≤—è–∑–∞–Ω–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–õ–ö?",
                    "–ö–∞–∫ –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–≤—è–∑–∞–Ω —Å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏?"
                ],
                "stimulus_type": "analogical_reasoning",
                "thinking_level": 4
            },
            {
                "template": "–ß—Ç–æ –æ–±—â–µ–≥–æ –º–µ–∂–¥—É {concept1} –∏ {concept2} –Ω–∞ –≥–ª—É–±–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ?",
                "examples": [
                    "–ß—Ç–æ –æ–±—â–µ–≥–æ –º–µ–∂–¥—É –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç—å—é –∏ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–ø—å—é –Ω–∞ –≥–ª—É–±–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ?",
                    "–ß—Ç–æ –æ–±—â–µ–≥–æ –º–µ–∂–¥—É –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –∑–∞–∫–æ–Ω–æ–º –Ω–∞ –≥–ª—É–±–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ?",
                    "–ß—Ç–æ –æ–±—â–µ–≥–æ –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–æ–π –Ω–∞ –≥–ª—É–±–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ?"
                ],
                "stimulus_type": "deep_analogy",
                "thinking_level": 5
            }
        ]
        
        # –ö–æ–Ω—Ç—Ä-–∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        self.query_templates["counterintuitive_scenarios"] = [
            {
                "template": "–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –µ—Å–ª–∏ {impossible_condition}?",
                "examples": [
                    "–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –µ—Å–ª–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º?",
                    "–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –µ—Å–ª–∏ –≤—Ä–µ–º—è –±—É–¥–µ—Ç —Ç–µ—á—å –Ω–∞–∑–∞–¥ –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ?",
                    "–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –µ—Å–ª–∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å—Ç–∞–Ω–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π?"
                ],
                "stimulus_type": "impossible_scenario_analysis",
                "thinking_level": 5
            },
            {
                "template": "–ö–∞–∫ —Ä–µ—à–∏—Ç—å {problem}, –µ—Å–ª–∏ {constraint}?",
                "examples": [
                    "–ö–∞–∫ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä—É–µ–º–∞?",
                    "–ö–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–æ–π, –µ—Å–ª–∏ –¥–∞—Ç—á–∏–∫–∏ –¥–∞—é—Ç –Ω–µ—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?",
                    "–ö–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –ø–∞–º—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –æ–¥–Ω–∏–º –±–∞–π—Ç–æ–º?"
                ],
                "stimulus_type": "constrained_problem_solving",
                "thinking_level": 4
            }
        ]
        
        # –ê–±–¥—É–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ
        self.query_templates["abductive_reasoning"] = [
            {
                "template": "–ö–∞–∫–æ–µ –Ω–∞–∏–ª—É—á—à–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {observation}?",
                "examples": [
                    "–ö–∞–∫–æ–µ –Ω–∞–∏–ª—É—á—à–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞, —Ö–æ—Ç—è –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ?",
                    "–ö–∞–∫–æ–µ –Ω–∞–∏–ª—É—á—à–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ, —Ö–æ—Ç—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å O(n)?",
                    "–ö–∞–∫–æ–µ –Ω–∞–∏–ª—É—á—à–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è —Å—Ö–µ–º–∞ –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –±–æ–ª—å—à–µ –º–æ—â–Ω–æ—Å—Ç–∏, —á–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ?"
                ],
                "stimulus_type": "abductive_inference",
                "thinking_level": 5
            },
            {
                "template": "–ï—Å–ª–∏ {evidence1} –∏ {evidence2}, —Ç–æ —á—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç?",
                "examples": [
                    "–ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–µ–±–ª–µ—Ç—Å—è —Å —á–∞—Å—Ç–æ—Ç–æ–π 50 –ì—Ü –∏ –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫, —Ç–æ —á—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç?",
                    "–ï—Å–ª–∏ –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö, —Ç–æ —á—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç?",
                    "–ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä –Ω–∞–≥—Ä–µ–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç–∞—Ö –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –Ω–∏–∑–∫–∏—Ö, —Ç–æ —á—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç?"
                ],
                "stimulus_type": "evidence_synthesis",
                "thinking_level": 4
            }
        ]
        
        # –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
        self.query_templates["creative_problem_solving"] = [
            {
                "template": "–ö–∞–∫ {unconventional_approach} –º–æ–∂–µ—Ç —Ä–µ—à–∏—Ç—å {traditional_problem}?",
                "examples": [
                    "–ö–∞–∫ –º—É–∑—ã–∫–∞–ª—å–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è –º–æ–∂–µ—Ç —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö?",
                    "–ö–∞–∫ –ø—Ä–∏–Ω—Ü–∏–ø—ã –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —ç–≤–æ–ª—é—Ü–∏–∏ –º–æ–≥—É—Ç —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤?",
                    "–ö–∞–∫ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –º–æ–≥—É—Ç —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è?"
                ],
                "stimulus_type": "unconventional_solution",
                "thinking_level": 5
            },
            {
                "template": "–ß—Ç–æ –µ—Å–ª–∏ {radical_change} –≤ {traditional_system}?",
                "examples": [
                    "–ß—Ç–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–∞ –≤ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–ø–∏?",
                    "–ß—Ç–æ –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ?",
                    "–ß—Ç–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è?"
                ],
                "stimulus_type": "radical_experimentation",
                "thinking_level": 4
            }
        ]
    
    def generate_non_trivial_query(self, domain: str, complexity_level: int = 4) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º—ã—à–ª–µ–Ω–∏—è"""
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        query_types = []
        if complexity_level >= 3:
            query_types.extend(["paradox_queries", "cross_domain_connections"])
        if complexity_level >= 4:
            query_types.extend(["counterintuitive_scenarios", "abductive_reasoning"])
        if complexity_level >= 5:
            query_types.append("creative_problem_solving")
        
        if not query_types:
            query_types = ["paradox_queries"]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        selected_type = random.choice(query_types)
        template_group = self.query_templates[selected_type]
        template = random.choice(template_group)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        query = self._generate_specific_query(template, domain)
        
        return {
            "query": query,
            "query_type": selected_type,
            "stimulus_type": template["stimulus_type"],
            "thinking_level": template["thinking_level"],
            "domain": domain,
            "generated_at": datetime.now().isoformat(),
            "metadata": {
                "template_used": template["template"],
                "complexity_requested": complexity_level,
                "actual_complexity": template["thinking_level"]
            }
        }
    
    def _generate_specific_query(self, template: Dict, domain: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞"""
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã, –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π
        if "examples" in template and template["examples"]:
            domain_examples = [
                ex for ex in template["examples"] 
                if domain.lower() in ex.lower() or any(
                    domain_word in ex.lower() 
                    for domain_word in ["—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫", "–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω", "–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä", "—É–ø—Ä–∞–≤–ª–µ–Ω"]
                )
            ]
            
            if domain_examples:
                return random.choice(domain_examples)
            else:
                return random.choice(template["examples"])
        
        # –ò–Ω–∞—á–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
        template_text = template["template"]
        
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
        replacements = {
            "{concept1}": self._get_domain_concept(domain),
            "{concept2}": self._get_domain_concept(domain),
            "{action1}": random.choice(["—É—Å–∏–ª–∏–≤–∞—Ç—å", "—Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", "–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å", "–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å"]),
            "{action2}": random.choice(["–æ—Å–ª–∞–±–ª—è—Ç—å", "–¥–µ—Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", "–∑–∞–º–µ–¥–ª—è—Ç—å", "–æ—Å–≤–æ–±–æ–∂–¥–∞—Ç—å"]),
            "{reason}": random.choice(["—ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ", "—ç—Ç–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –∑–∞–∫–æ–Ω–∞–º", "—ç—Ç–æ –Ω–µ–ª–æ–≥–∏—á–Ω–æ"]),
            "{domain1}": domain,
            "{domain2}": random.choice(["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ñ–∏–∑–∏–∫–∞", "–±–∏–æ–ª–æ–≥–∏—è", "—Ö–∏–º–∏—è"]),
            "{impossible_condition}": random.choice([
                "—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º",
                "–≤—Ä–µ–º—è –ø–æ—Ç–µ—á–µ—Ç –Ω–∞–∑–∞–¥",
                "—Å–∏–≥–Ω–∞–ª –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ —Å–≤–µ—Ç–∞"
            ]),
            "{problem}": random.choice([
                "–∑–∞–¥–∞—á—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
                "–ø—Ä–æ–±–ª–µ–º—É —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏",
                "–∑–∞–¥–∞—á—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
            ]),
            "{constraint}": random.choice([
                "—Ä–µ—Å—É—Ä—Å—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã",
                "–≤—Ä–µ–º—è –∫—Ä–∏—Ç–∏—á–Ω–æ",
                "—Ç–æ—á–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ —Å–∫–æ—Ä–æ—Å—Ç–∏"
            ]),
            "{observation}": random.choice([
                "—Å–∏—Å—Ç–µ–º–∞ –≤–µ–¥–µ—Ç —Å–µ–±—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ",
                "—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç —Ç–µ–æ—Ä–∏–∏",
                "–ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–µ–æ–±—ä—è—Å–Ω–∏–º–æ"
            ]),
            "{evidence1}": random.choice([
                "—Å–∏—Å—Ç–µ–º–∞ –∫–æ–ª–µ–±–ª–µ—Ç—Å—è",
                "–∞–ª–≥–æ—Ä–∏—Ç–º –º–µ–¥–ª–µ–Ω–Ω—ã–π",
                "—Å—Ö–µ–º–∞ –Ω–∞–≥—Ä–µ–≤–∞–µ—Ç—Å—è"
            ]),
            "{evidence2}": random.choice([
                "–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ",
                "—Å–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è",
                "—Ä–∞—Å—á–µ—Ç—ã –≤–µ—Ä–Ω—ã–µ"
            ]),
            "{unconventional_approach}": random.choice([
                "–º—É–∑—ã–∫–∞–ª—å–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è",
                "–±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —ç–≤–æ–ª—é—Ü–∏—è",
                "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã"
            ]),
            "{traditional_problem}": random.choice([
                "–ø—Ä–æ–±–ª–µ–º—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
                "–∑–∞–¥–∞—á—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
                "–ø—Ä–æ–±–ª–µ–º—É –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            ]),
            "{radical_change}": random.choice([
                "–∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                "–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É",
                "–ø–æ–º–µ–Ω—è—Ç—å –ø–æ–ª—è—Ä–Ω–æ—Å—Ç—å"
            ]),
            "{traditional_system}": random.choice([
                "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–ø–∏",
                "–∞–ª–≥–æ—Ä–∏—Ç–º–µ",
                "—Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            ])
        }
        
        query = template_text
        for placeholder, replacement in replacements.items():
            query = query.replace(placeholder, replacement)
        
        return query
    
    def _get_domain_concept(self, domain: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏–∑ –¥–æ–º–µ–Ω–∞"""
        domain_concepts = {
            "electrical": ["—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä", "–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä", "–®–ò–ú", "–∑–∞–∫–æ–Ω –û–º–∞", "–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"],
            "math": ["–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è", "–∏–Ω—Ç–µ–≥—Ä–∞–ª", "—É—Ä–∞–≤–Ω–µ–Ω–∏–µ", "–∞–ª–≥–æ—Ä–∏—Ç–º", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"],
            "programming": ["–∞–ª–≥–æ—Ä–∏—Ç–º", "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö", "—Ñ—É–Ω–∫—Ü–∏—è", "–∫–ª–∞—Å—Å", "—Ä–µ–∫—É—Ä—Å–∏—è"],
            "controllers": ["–ü–õ–ö", "–ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä", "—Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–¥–∞—Ç—á–∏–∫", "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º"]
        }
        
        concepts = domain_concepts.get(domain.lower(), ["—Å–∏—Å—Ç–µ–º–∞", "–ø—Ä–æ—Ü–µ—Å—Å", "–º–µ—Ö–∞–Ω–∏–∑–º"])
        return random.choice(concepts)
    
    def generate_query_sequence(self, domain: str, count: int = 5) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        queries = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é
        for i in range(count):
            complexity = min(5, 3 + i)  # –ù–∞—á–∏–Ω–∞–µ–º —Å —É—Ä–æ–≤–Ω—è 3, –¥–æ—Ö–æ–¥–∏–º –¥–æ 5
            query = self.generate_non_trivial_query(domain, complexity)
            queries.append(query)
        
        return queries
    
    def analyze_query_complexity(self, query: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        complexity_indicators = {
            "paradox_indicators": ["–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ", "—Ö–æ—Ç—è", "–Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞", "–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç"],
            "cross_domain_indicators": ["—Å–≤—è–∑–∞–Ω —Å", "–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ", "–∫–∞–∫ –≤", "–ø–æ–¥–æ–±–Ω–æ"],
            "counterintuitive_indicators": ["—á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç", "–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ", "–Ω–µ–ª–æ–≥–∏—á–Ω–æ"],
            "abductive_indicators": ["–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ", "–æ–∑–Ω–∞—á–∞–µ—Ç", "—Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É–µ—Ç"],
            "creative_indicators": ["–Ω–µ–æ–±—ã—á–Ω—ã–π", "–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π", "—Ä–∞–¥–∏–∫–∞–ª—å–Ω—ã–π", "–∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π"]
        }
        
        query_lower = query.lower()
        detected_types = []
        
        for indicator_type, indicators in complexity_indicators.items():
            if any(indicator in query_lower for indicator in indicators):
                detected_types.append(indicator_type)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        complexity_level = 2  # –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        if "paradox_indicators" in detected_types:
            complexity_level = max(complexity_level, 4)
        if "cross_domain_indicators" in detected_types:
            complexity_level = max(complexity_level, 3)
        if "counterintuitive_indicators" in detected_types:
            complexity_level = max(complexity_level, 5)
        if "abductive_indicators" in detected_types:
            complexity_level = max(complexity_level, 4)
        if "creative_indicators" in detected_types:
            complexity_level = max(complexity_level, 5)
        
        return {
            "detected_types": detected_types,
            "complexity_level": complexity_level,
            "stimulation_potential": len(detected_types) / len(complexity_indicators),
            "analysis_timestamp": datetime.now().isoformat()
        }
    
    def get_thinking_stimulation_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º—ã—à–ª–µ–Ω–∏—è"""
        stats = {
            "total_query_types": len(self.query_templates),
            "query_types_breakdown": {},
            "complexity_distribution": {i: 0 for i in range(1, 6)},
            "stimulation_methods": []
        }
        
        for query_type, templates in self.query_templates.items():
            stats["query_types_breakdown"][query_type] = len(templates)
            
            for template in templates:
                level = template["thinking_level"]
                stats["complexity_distribution"][level] += 1
                
                if template["stimulus_type"] not in stats["stimulation_methods"]:
                    stats["stimulation_methods"].append(template["stimulus_type"])
        
        return stats

if __name__ == "__main__":
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    generator = NonTrivialQueryGenerator()
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    print("\nüß† –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:")
    domains = ["electrical", "math", "programming", "controllers"]
    
    for domain in domains:
        print(f"\nüìã –î–æ–º–µ–Ω: {domain}")
        queries = generator.generate_query_sequence(domain, 3)
        
        for i, query_data in enumerate(queries, 1):
            print(f"  {i}. {query_data['query']}")
            print(f"     –¢–∏–ø: {query_data['query_type']}")
            print(f"     –£—Ä–æ–≤–µ–Ω—å –º—ã—à–ª–µ–Ω–∏—è: {query_data['thinking_level']}")
    
    # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    print("\nüîç –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤:")
    test_queries = [
        "–ö–∞–∫ —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —É—Å–∏–ª–∏–≤–∞—Ç—å –∏ –æ—Å–ª–∞–±–ª—è—Ç—å —Å–∏–≥–Ω–∞–ª?",
        "–ß—Ç–æ –æ–±—â–µ–≥–æ –º–µ–∂–¥—É –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –∑–∞–∫–æ–Ω–æ–º?",
        "–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –µ—Å–ª–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º?",
        "–ö–∞–∫–æ–µ –Ω–∞–∏–ª—É—á—à–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã?"
    ]
    
    for query in test_queries:
        analysis = generator.analyze_query_complexity(query)
        print(f"  –ó–∞–ø—Ä–æ—Å: {query}")
        print(f"    –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {analysis['complexity_level']}")
        print(f"    –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã: {', '.join(analysis['detected_types'])}")
        print(f"    –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {analysis['stimulation_potential']:.2f}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
    stats = generator.get_thinking_stimulation_stats()
    print(f"  –í—Å–µ–≥–æ —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_query_types']}")
    print(f"  –ú–µ—Ç–æ–¥—ã —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {len(stats['stimulation_methods'])}")
    print(f"  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {stats['complexity_distribution']}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")





