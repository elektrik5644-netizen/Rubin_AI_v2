#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Database Integration System –¥–ª—è Rubin AI
–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–º–µ–Ω—ã –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π
"""

import sqlite3
import json
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class RubinAIDatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Rubin AI"""
    
    def __init__(self, db_path: str = "rubin_ai_knowledge.db"):
        self.db_path = db_path
        self.connection = None
        self._initialize_database()
        
        logger.info(f"üóÑÔ∏è Database Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {db_path}")
    
    def _initialize_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.connection = sqlite3.connect(self.db_path)
            self.connection.row_factory = sqlite3.Row  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–æ–Ω–∫–∞–º –ø–æ –∏–º–µ–Ω–∏
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            self._create_tables()
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            self._populate_initial_data()
            
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def _create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        cursor = self.connection.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS categories (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE NOT NULL,
                description TEXT,
                keywords TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–Ω–∞–Ω–∏–π
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS knowledge_base (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                category_id INTEGER,
                title TEXT NOT NULL,
                content TEXT NOT NULL,
                keywords TEXT,
                formula TEXT,
                example TEXT,
                difficulty_level INTEGER DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (category_id) REFERENCES categories (id)
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–≤–µ—Ç–æ–≤
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS response_templates (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                category_id INTEGER,
                template TEXT NOT NULL,
                variables TEXT,
                usage_count INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (category_id) REFERENCES categories (id)
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS user_queries (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                question TEXT NOT NULL,
                category TEXT,
                confidence REAL,
                response TEXT,
                user_feedback INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ–±—É—á–µ–Ω–∏—è
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS training_data (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                question TEXT NOT NULL,
                category TEXT NOT NULL,
                confidence REAL,
                is_correct BOOLEAN,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS metrics (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                metric_name TEXT NOT NULL,
                metric_value REAL NOT NULL,
                category TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        self.connection.commit()
        logger.info("üìä –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã")
    
    def _populate_initial_data(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        cursor = self.connection.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute("SELECT COUNT(*) FROM categories")
        if cursor.fetchone()[0] > 0:
            logger.info("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ")
            return
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = [
            ("mathematics", "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è", "—Ä–µ—à–∏—Ç—å,—É—Ä–∞–≤–Ω–µ–Ω–∏–µ,—Ñ–æ—Ä–º—É–ª–∞,–≤—ã—á–∏—Å–ª–∏—Ç—å,–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞,—á–∏—Å–ª–æ,—Ñ—É–Ω–∫—Ü–∏—è"),
            ("programming", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û", "–∫–æ–¥,–ø—Ä–æ–≥—Ä–∞–º–º–∞,–∞–ª–≥–æ—Ä–∏—Ç–º,—Ñ—É–Ω–∫—Ü–∏—è,–∫–ª–∞—Å—Å,–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è,–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"),
            ("electrical", "–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ –∏ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã", "—Å—Ö–µ–º–∞,—Ç–æ–∫,–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ,—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ,—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ,–∫–æ–Ω—Ç—É—Ä,—ç–ª–µ–º–µ–Ω—Ç"),
            ("controllers", "–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", "–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä,plc,–ª–æ–≥–∏–∫–∞,—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ,–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è,–¥–∞—Ç—á–∏–∫,–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"),
            ("radiomechanics", "–†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞ –∏ —Ä–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞", "–∞–Ω—Ç–µ–Ω–Ω–∞,—Ä–∞–¥–∏–æ,—Å–∏–≥–Ω–∞–ª,—á–∞—Å—Ç–æ—Ç–∞,–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫,–ø—Ä–∏–µ–º–Ω–∏–∫,–≤–æ–ª–Ω–∞"),
            ("general", "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä", "–ø—Ä–∏–≤–µ—Ç,—Å–ø–∞—Å–∏–±–æ,–∫–∞–∫ –¥–µ–ª–∞,—á—Ç–æ —É–º–µ–µ—à—å,—Ä–∞—Å—Å–∫–∞–∂–∏")
        ]
        
        for name, description, keywords in categories:
            cursor.execute("""
                INSERT INTO categories (name, description, keywords)
                VALUES (?, ?, ?)
            """, (name, description, keywords))
        
        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
        knowledge_items = [
            (1, "–ó–∞–∫–æ–Ω –û–º–∞", "U = I √ó R", "–∑–∞–∫–æ–Ω –æ–º–∞,–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ,—Ç–æ–∫,—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ", "U = I √ó R", "–ù–∞–π—Ç–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø—Ä–∏ —Ç–æ–∫–µ 2 –ê –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–∏ 5 –û–º: U = 2 √ó 5 = 10 –í"),
            (1, "–ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è", "E = 0.5 √ó m √ó v¬≤", "–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è,–º–∞—Å—Å–∞,—Å–∫–æ—Ä–æ—Å—Ç—å", "E = 0.5 √ó m √ó v¬≤", "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫—É—é —ç–Ω–µ—Ä–≥–∏—é —Ç–µ–ª–∞ –º–∞—Å—Å–æ–π 10 –∫–≥ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 5 –º/—Å"),
            (1, "–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ", "ax¬≤ + bx + c = 0", "–∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ,–∫–æ—Ä–Ω–∏", "x = (-b ¬± ‚àö(b¬≤-4ac)) / 2a", "–†–µ—à–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x¬≤ + 5x + 6 = 0"),
            (2, "–ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", "–ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é O(n log n)", "–±—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞,–∞–ª–≥–æ—Ä–∏—Ç–º,—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", "", "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ Python"),
            (2, "Singleton Pattern", "–ü–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞", "singleton,–ø–∞—Ç—Ç–µ—Ä–Ω,–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "", "–ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Singleton"),
            (3, "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", "R = R1 + R2 + R3", "–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ,—Ä–µ–∑–∏—Å—Ç–æ—Ä", "R = R1 + R2 + R3", "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â–µ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏"),
            (3, "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", "1/R = 1/R1 + 1/R2 + 1/R3", "–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ,—Ä–µ–∑–∏—Å—Ç–æ—Ä", "1/R = 1/R1 + 1/R2 + 1/R3", "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â–µ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏"),
            (4, "Ladder Logic", "–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è PLC", "ladder logic,plc,–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "", "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º –Ω–∞ Ladder Logic"),
            (4, "PID —Ä–µ–≥—É–ª—è—Ç–æ—Ä", "–ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ-–∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ-–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–≥—É–ª—è—Ç–æ—Ä", "pid,—Ä–µ–≥—É–ª—è—Ç–æ—Ä,—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PID —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"),
            (5, "–î–∏–ø–æ–ª—å–Ω–∞—è –∞–Ω—Ç–µ–Ω–Ω–∞", "–ü—Ä–æ—Å—Ç–∞—è –∞–Ω—Ç–µ–Ω–Ω–∞ –∏–∑ –¥–≤—É—Ö –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤", "–¥–∏–ø–æ–ª—å–Ω–∞—è –∞–Ω—Ç–µ–Ω–Ω–∞,–∞–Ω—Ç–µ–Ω–Ω–∞", "", "–†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–∏–ø–æ–ª—å–Ω–æ–π –∞–Ω—Ç–µ–Ω–Ω—ã –¥–ª—è —á–∞—Å—Ç–æ—Ç—ã 2.4 –ì–ì—Ü"),
            (5, "–ú–æ–¥—É–ª—è—Ü–∏—è AM/FM", "–ê–º–ø–ª–∏—Ç—É–¥–Ω–∞—è –∏ —á–∞—Å—Ç–æ—Ç–Ω–∞—è –º–æ–¥—É–ª—è—Ü–∏—è", "–º–æ–¥—É–ª—è—Ü–∏—è,am,fm,—Ä–∞–¥–∏–æ", "", "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –º–æ–¥—É–ª—è—Ü–∏–∏ AM –∏ FM")
        ]
        
        for category_id, title, content, keywords, formula, example in knowledge_items:
            cursor.execute("""
                INSERT INTO knowledge_base (category_id, title, content, keywords, formula, example)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (category_id, title, content, keywords, formula, example))
        
        # –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤
        response_templates = [
            (1, "–†–µ—à–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏: {solution}", "solution"),
            (1, "–ü—Ä–∏–º–µ–Ω—è—è —Ñ–æ—Ä–º—É–ª—É {formula}, –ø–æ–ª—É—á–∞–µ–º: {answer}", "formula,answer"),
            (2, "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {solution}", "solution"),
            (2, "–ö–æ–¥ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {code}", "code"),
            (3, "–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {solution}", "solution"),
            (3, "–ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º—ã: {analysis}", "analysis"),
            (4, "–†–µ—à–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞: {solution}", "solution"),
            (4, "–ü—Ä–æ–≥—Ä–∞–º–º–∞ PLC: {program}", "program"),
            (5, "–†–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {solution}", "solution"),
            (5, "–†–∞—Å—á–µ—Ç –∞–Ω—Ç–µ–Ω–Ω—ã: {calculation}", "calculation"),
            (6, "–û–±—â–∏–π –æ—Ç–≤–µ—Ç: {response}", "response"),
            (6, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {information}", "information")
        ]
        
        for category_id, template, variables in response_templates:
            cursor.execute("""
                INSERT INTO response_templates (category_id, template, variables)
                VALUES (?, ?, ?)
            """, (category_id, template, variables))
        
        self.connection.commit()
        logger.info("üìö –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    
    def get_category_by_name(self, name: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∏–º–µ–Ω–∏"""
        cursor = self.connection.cursor()
        cursor.execute("SELECT * FROM categories WHERE name = ?", (name,))
        row = cursor.fetchone()
        
        if row:
            return dict(row)
        return None
    
    def get_knowledge_by_category(self, category_name: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        cursor = self.connection.cursor()
        cursor.execute("""
            SELECT kb.*, c.name as category_name
            FROM knowledge_base kb
            JOIN categories c ON kb.category_id = c.id
            WHERE c.name = ?
        """, (category_name,))
        
        return [dict(row) for row in cursor.fetchall()]
    
    def get_response_template(self, category_name: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        cursor = self.connection.cursor()
        cursor.execute("""
            SELECT rt.*, c.name as category_name
            FROM response_templates rt
            JOIN categories c ON rt.category_id = c.id
            WHERE c.name = ?
            ORDER BY rt.usage_count ASC
            LIMIT 1
        """, (category_name,))
        
        row = cursor.fetchone()
        if row:
            return dict(row)
        return None
    
    def add_user_query(self, question: str, category: str, confidence: float, response: str, feedback: Optional[int] = None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        cursor = self.connection.cursor()
        cursor.execute("""
            INSERT INTO user_queries (question, category, confidence, response, user_feedback)
            VALUES (?, ?, ?, ?, ?)
        """, (question, category, confidence, response, feedback))
        
        self.connection.commit()
        logger.info(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω: {category}")
    
    def add_training_data(self, question: str, category: str, confidence: float, is_correct: bool):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        cursor = self.connection.cursor()
        cursor.execute("""
            INSERT INTO training_data (question, category, confidence, is_correct)
            VALUES (?, ?, ?, ?)
        """, (question, category, confidence, is_correct))
        
        self.connection.commit()
    
    def update_template_usage(self, template_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
        cursor = self.connection.cursor()
        cursor.execute("""
            UPDATE response_templates 
            SET usage_count = usage_count + 1
            WHERE id = ?
        """, (template_id,))
        
        self.connection.commit()
    
    def add_metric(self, metric_name: str, metric_value: float, category: Optional[str] = None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏"""
        cursor = self.connection.cursor()
        cursor.execute("""
            INSERT INTO metrics (metric_name, metric_value, category)
            VALUES (?, ?, ?)
        """, (metric_name, metric_value, category))
        
        self.connection.commit()
    
    def get_metrics(self, metric_name: Optional[str] = None, category: Optional[str] = None, limit: int = 100) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫"""
        cursor = self.connection.cursor()
        
        query = "SELECT * FROM metrics WHERE 1=1"
        params = []
        
        if metric_name:
            query += " AND metric_name = ?"
            params.append(metric_name)
        
        if category:
            query += " AND category = ?"
            params.append(category)
        
        query += " ORDER BY timestamp DESC LIMIT ?"
        params.append(limit)
        
        cursor.execute(query, params)
        return [dict(row) for row in cursor.fetchall()]
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        cursor = self.connection.cursor()
        
        stats = {}
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        cursor.execute("SELECT COUNT(*) FROM categories")
        stats['total_categories'] = cursor.fetchone()[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–Ω–∏–π
        cursor.execute("SELECT COUNT(*) FROM knowledge_base")
        stats['total_knowledge'] = cursor.fetchone()[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        cursor.execute("SELECT COUNT(*) FROM response_templates")
        stats['total_templates'] = cursor.fetchone()[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        cursor.execute("SELECT COUNT(*) FROM user_queries")
        stats['total_queries'] = cursor.fetchone()[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        cursor.execute("SELECT COUNT(*) FROM training_data")
        stats['total_training_data'] = cursor.fetchone()[0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        cursor.execute("""
            SELECT c.name, COUNT(kb.id) as knowledge_count
            FROM categories c
            LEFT JOIN knowledge_base kb ON c.id = kb.category_id
            GROUP BY c.id, c.name
        """)
        stats['category_stats'] = [dict(row) for row in cursor.fetchall()]
        
        return stats
    
    def search_knowledge(self, query: str, category: Optional[str] = None) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
        cursor = self.connection.cursor()
        
        if category:
            cursor.execute("""
                SELECT kb.*, c.name as category_name
                FROM knowledge_base kb
                JOIN categories c ON kb.category_id = c.id
                WHERE c.name = ? AND (
                    kb.title LIKE ? OR 
                    kb.content LIKE ? OR 
                    kb.keywords LIKE ? OR
                    kb.example LIKE ?
                )
            """, (category, f"%{query}%", f"%{query}%", f"%{query}%", f"%{query}%"))
        else:
            cursor.execute("""
                SELECT kb.*, c.name as category_name
                FROM knowledge_base kb
                JOIN categories c ON kb.category_id = c.id
                WHERE kb.title LIKE ? OR 
                      kb.content LIKE ? OR 
                      kb.keywords LIKE ? OR
                      kb.example LIKE ?
            """, (f"%{query}%", f"%{query}%", f"%{query}%", f"%{query}%"))
        
        return [dict(row) for row in cursor.fetchall()]
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.connection:
            self.connection.close()
            logger.info("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

class DatabaseIntegratedRubinAI:
    """Rubin AI —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.db_manager = RubinAIDatabaseManager()
        logger.info("üß† Database Integrated Rubin AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def categorize_question(self, question: str) -> Tuple[str, float]:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        question_lower = question.lower()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor = self.db_manager.connection.cursor()
        cursor.execute("SELECT name, keywords FROM categories")
        categories = cursor.fetchall()
        
        scores = {}
        for name, keywords in categories:
            keyword_list = keywords.split(',')
            score = sum(1 for keyword in keyword_list if keyword in question_lower)
            scores[name] = score
        
        if max(scores.values()) > 0:
            best_category = max(scores, key=scores.get)
            category_data = self.db_manager.get_category_by_name(best_category)
            if category_data:
                keyword_count = len(category_data['keywords'].split(','))
                confidence = min(0.9, scores[best_category] / keyword_count)
            else:
                confidence = 0.5
            return best_category, confidence
        else:
            return 'general', 0.5
    
    def generate_response(self, question: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info(f"üß† Database Integrated Rubin AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: {question[:50]}...")
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
            category, confidence = self.categorize_question(question)
            
            # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π
            knowledge_items = self.db_manager.search_knowledge(question, category)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∞
            template_data = self.db_manager.get_response_template(category)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            if knowledge_items:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ
                knowledge = knowledge_items[0]
                response = self._format_response(knowledge, template_data)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
                response = self._get_general_response(category, template_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.db_manager.add_user_query(question, category, confidence, response)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
            if template_data:
                self.db_manager.update_template_usage(template_data['id'])
            
            result = {
                'response': response,
                'category': category,
                'confidence': confidence,
                'method': 'database_integrated',
                'timestamp': datetime.now().isoformat(),
                'knowledge_used': len(knowledge_items),
                'template_id': template_data['id'] if template_data else None
            }
            
            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {category} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return {
                'response': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞',
                'category': 'error',
                'confidence': 0.0,
                'method': 'error_handler',
                'timestamp': datetime.now().isoformat(),
                'knowledge_used': 0,
                'template_id': None,
                'error': str(e)
            }
    
    def _format_response(self, knowledge: Dict[str, Any], template_data: Optional[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞–Ω–∏–π –∏ —à–∞–±–ª–æ–Ω–∞"""
        if template_data:
            template = template_data['template']
            variables = template_data['variables'].split(',') if template_data['variables'] else []
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            response = template
            if 'solution' in variables:
                response = response.replace('{solution}', knowledge['content'])
            if 'formula' in variables and knowledge['formula']:
                response = response.replace('{formula}', knowledge['formula'])
            if 'answer' in variables and knowledge['example']:
                response = response.replace('{answer}', knowledge['example'])
            
            return response
        else:
            return f"{knowledge['title']}: {knowledge['content']}"
    
    def _get_general_response(self, category: str, template_data: Optional[Dict[str, Any]]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        if template_data:
            template = template_data['template']
            if '{response}' in template:
                return template.replace('{response}', f"–û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
            elif '{information}' in template:
                return template.replace('{information}', f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–º–µ {category}")
        
        return f"–≠—Ç–æ –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ {category}. –ú–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
    
    def get_database_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return self.db_manager.get_statistics()
    
    def add_knowledge(self, category_name: str, title: str, content: str, keywords: str = "", formula: str = "", example: str = ""):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        category = self.db_manager.get_category_by_name(category_name)
        if not category:
            logger.error(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        cursor = self.db_manager.connection.cursor()
        cursor.execute("""
            INSERT INTO knowledge_base (category_id, title, content, keywords, formula, example)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (category['id'], title, content, keywords, formula, example))
        
        self.db_manager.connection.commit()
        logger.info(f"üìö –ù–æ–≤–æ–µ –∑–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {title}")
        return True
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        self.db_manager.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º Rubin AI —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    rubin_ai = DatabaseIntegratedRubinAI()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    test_questions = [
        "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x^2 + 5x + 6 = 0",
        "–ù–∞–ø–∏—à–∏ –∫–æ–¥ –Ω–∞ Python –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞",
        "–†–∞—Å—Å—á–∏—Ç–∞–π —Ç–æ–∫ –≤ —Ü–µ–ø–∏ —Å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ–º 10 –û–º –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ–º 220 –í",
        "–°–æ–∑–¥–∞–π –ø—Ä–æ–≥—Ä–∞–º–º—É PLC –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º",
        "–†–∞—Å—Å—á–∏—Ç–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω—Ç–µ–Ω–Ω—ã –¥–ª—è —á–∞—Å—Ç–æ—Ç—ã 2.4 –ì–ì—Ü",
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
    ]
    
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–í–ï–¢–û–í:")
    print("-" * 30)
    
    for question in test_questions:
        print(f"\nüìù –í–æ–ø—Ä–æ—Å: {question}")
        response = rubin_ai.generate_response(question)
        print(f"üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {response['category']}")
        print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response['confidence']:.3f}")
        print(f"üí° –û—Ç–≤–µ—Ç: {response['response']}")
        print(f"üìö –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞–Ω–∏–π: {response['knowledge_used']}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
    print("-" * 30)
    stats = rubin_ai.get_database_statistics()
    
    print(f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {stats['total_categories']}")
    print(f"üìö –ó–Ω–∞–Ω–∏–π: {stats['total_knowledge']}")
    print(f"üìù –®–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤: {stats['total_templates']}")
    print(f"‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_queries']}")
    print(f"üéì –î–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {stats['total_training_data']}")
    
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for cat_stat in stats['category_stats']:
        print(f"  - {cat_stat['name']}: {cat_stat['knowledge_count']} –∑–Ω–∞–Ω–∏–π")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê:")
    print("-" * 25)
    
    search_results = rubin_ai.db_manager.search_knowledge("–∑–∞–∫–æ–Ω –æ–º–∞")
    print(f"üîç –ü–æ–∏—Å–∫ '–∑–∞–∫–æ–Ω –æ–º–∞': –Ω–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    for result in search_results[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
        print(f"  - {result['title']}: {result['content'][:50]}...")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    rubin_ai.close()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
