"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä Rubin AI –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
"""

import json
import time
import sqlite3
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs
import threading

class RubinAIHandler(BaseHTTPRequestHandler):
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect('rubin_ai.db')
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS messages (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    message TEXT NOT NULL,
                    response TEXT NOT NULL,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            return False
    
    def save_message_to_db(self, message, response):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect('rubin_ai.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO messages (message, response) 
                VALUES (?, ?)
            ''', (message, response))
            
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
            return False
    
    def do_GET(self):
        parsed_path = urlparse(self.path)
        
        if parsed_path.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            response = {
                "status": "healthy",
                "message": "Rubin AI Matrix Simple is running!",
                "timestamp": time.strftime("%Y-%m-%dT%H:%M:%SZ"),
                "version": "2.0.0"
            }
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
            
        elif parsed_path.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            response = {
                "message": "Rubin AI Matrix Simple v2.0",
                "status": "running",
                "endpoints": ["/health", "/api/chat", "/api/code/analyze"]
            }
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
            
        else:
            self.send_response(404)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            response = {"error": "Endpoint not found"}
            self.wfile.write(json.dumps(response).encode('utf-8'))
    
    def do_POST(self):
        parsed_path = urlparse(self.path)
        
        if parsed_path.path == '/api/chat':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            
            try:
                data = json.loads(post_data.decode('utf-8'))
                message = data.get('message', '')
                
                # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
                response_text = self.generate_chat_response(message)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                self.save_message_to_db(message, response_text)
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                response = {
                    "response": response_text,
                    "session_id": "default",
                    "timestamp": time.strftime("%Y-%m-%dT%H:%M:%SZ"),
                    "processing_time": 0.1
                }
                self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
                
            except Exception as e:
                self.send_response(500)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                response = {"error": f"Chat processing failed: {str(e)}"}
                self.wfile.write(json.dumps(response).encode('utf-8'))
        
        elif parsed_path.path == '/api/code/analyze':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            
            try:
                data = json.loads(post_data.decode('utf-8'))
                code = data.get('code', '')
                language = data.get('language', 'python')
                
                # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
                analysis_result = self.analyze_code(code, language)
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                response = {
                    "language": language,
                    "analysis_type": "full",
                    "issues": analysis_result.get("issues", []),
                    "recommendations": analysis_result.get("recommendations", []),
                    "quality_score": analysis_result.get("quality_score", 0),
                    "results": analysis_result,
                    "processing_time": 0.2,
                    "timestamp": time.strftime("%Y-%m-%dT%H:%M:%SZ")
                }
                self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
                
            except Exception as e:
                self.send_response(500)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                response = {"error": f"Code analysis failed: {str(e)}"}
                self.wfile.write(json.dumps(response).encode('utf-8'))
        
        else:
            self.send_response(404)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            response = {"error": "Endpoint not found"}
            self.wfile.write(json.dumps(response).encode('utf-8'))
    
    def do_OPTIONS(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, Authorization')
        self.send_header('Access-Control-Max-Age', '86400')
        self.end_headers()
    
    def generate_chat_response(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–∞—Ç–∞"""
        message_lower = message.lower()
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if "–ø—Ä–∏–≤–µ—Ç" in message_lower or "hello" in message_lower:
            return "–ü—Ä–∏–≤–µ—Ç! –Ø Rubin AI. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π!"
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        elif "–∫–∞–∫ –¥–µ–ª–∞" in message_lower:
            return "–û—Ç–ª–∏—á–Ω–æ! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        
        # –¢–µ—Ä–º–æ–ø–∞—Ä—ã
        elif "—Ç–µ—Ä–º–æ–ø–∞—Ä" in message_lower:
            if "—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏" in message_lower:
                return """‚ùå –ù–µ—Ç–æ—á–Ω–æ—Å—Ç—å –≤ –≤–æ–ø—Ä–æ—Å–µ! 

–¢–µ—Ä–º–æ–ø–∞—Ä—ã –ù–ï —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è. 

üî¨ **–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —Ç–µ—Ä–º–æ–ø–∞—Ä:**
‚Ä¢ –¢–µ—Ä–º–æ–ø–∞—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–µ **—Ç–µ—Ä–º–æ—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞** (—ç—Ñ—Ñ–µ–∫—Ç –ó–µ–µ–±–µ–∫–∞)
‚Ä¢ –ü—Ä–∏ –Ω–∞–≥—Ä–µ–≤–µ –º–µ—Å—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–≤—É—Ö —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–∞–ª–ª–æ–≤ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –≠–î–°
‚Ä¢ –ò–∑–º–µ—Ä—è–µ—Ç—Å—è –Ω–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ, –∞ **–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ** (–º–∏–ª–ª–∏–≤–æ–ª—å—Ç—ã)
‚Ä¢ –ß–µ–º –±–æ–ª—å—à–µ —Ä–∞–∑–Ω–æ—Å—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ

üå°Ô∏è **–¢–∏–ø—ã —Ç–µ—Ä–º–æ–ø–∞—Ä:**
‚Ä¢ –¢–∏–ø K (—Ö—Ä–æ–º–µ–ª—å-–∞–ª—é–º–µ–ª—å): -200¬∞C –¥–æ +1200¬∞C
‚Ä¢ –¢–∏–ø J (–∂–µ–ª–µ–∑–æ-–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–Ω): -200¬∞C –¥–æ +750¬∞C
‚Ä¢ –¢–∏–ø T (–º–µ–¥—å-–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–Ω): -200¬∞C –¥–æ +350¬∞C

üí° **–î–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è:**
‚Ä¢ RTD (Resistance Temperature Detectors) - –ø–ª–∞—Ç–∏–Ω–æ–≤—ã–µ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä—ã
‚Ä¢ –¢–µ—Ä–º–∏—Å—Ç–æ—Ä—ã - –ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤—ã–µ –¥–∞—Ç—á–∏–∫–∏

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Ç–µ—Ä–º–æ–ø–∞—Ä –≤ —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏?"""
        
        # Python –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        elif "python" in message_lower and ("–ø–µ—Ä–µ–º–µ–Ω–Ω" in message_lower or "–æ–±—ä—è–≤–ª" in message_lower):
            return """‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω–æ!** –í Python –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –æ–±—ä—è–≤–ª—è—Ç—å –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.

üêç **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ Python:**
‚Ä¢ Python - —è–∑—ã–∫ —Å **–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π**
‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–∏
‚Ä¢ –¢–∏–ø –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üìù **–ü—Ä–∏–º–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è:**
```python
# –ü—Ä–∞–≤–∏–ª—å–Ω–æ - –æ–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
name = "Rubin AI"
age = 25
temperature = 23.5
is_active = True

# –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
print(undefined_var)  # NameError: name 'undefined_var' is not defined
```

üîß **–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞: `sensor_temperature` –≤–º–µ—Å—Ç–æ `t`
‚Ä¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: `counter = 0`
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ: `if 'var' in locals():`

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–æ–¥–æ–º Python?"""
        
        # Python –æ–±—â–∏–π
        elif "python" in message_lower:
            return """üêç **Python - –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏!**

üöÄ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Python:**
‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
‚Ä¢ –ë–æ–≥–∞—Ç—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏
‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ PLC –∏ PMAC
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞

üìö **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:**
‚Ä¢ `pymodbus` - —Ä–∞–±–æ—Ç–∞ —Å Modbus
‚Ä¢ `opcua` - OPC UA –∫–ª–∏–µ–Ω—Ç—ã
‚Ä¢ `numpy` - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
‚Ä¢ `pandas` - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö

üîß **–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:** /api/code/analyze

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ–π?"""
        
        # PLC –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
        elif "plc" in message_lower or "–ø–ª—Ü" in message_lower:
            return """üè≠ **PLC –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - –º–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è!**

‚ö° **–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è PLC:**
‚Ä¢ **Ladder Logic (LD)** - —Ä–µ–ª–µ–π–Ω–∞—è –ª–æ–≥–∏–∫–∞
‚Ä¢ **Structured Text (ST)** - —Ç–µ–∫—Å—Ç–æ–≤—ã–π —è–∑—ã–∫
‚Ä¢ **Function Block Diagram (FBD)** - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏
‚Ä¢ **Instruction List (IL)** - —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π

üîß **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏:**
‚Ä¢ Siemens (S7-1200, S7-1500)
‚Ä¢ Allen-Bradley (CompactLogix, ControlLogix)
‚Ä¢ Schneider Electric (Modicon)
‚Ä¢ Omron (CP1, CJ2)

üí° **–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:**
‚Ä¢ –ù–∞–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–∞–º–º
‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –æ—à–∏–±–æ–∫
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∫–æ–¥–∞
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å PMAC

–ï—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞?"""
        
        # PMAC –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
        elif "pmac" in message_lower:
            return """üéØ **PMAC –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã - —ç—Ç–æ –º–æ—è –æ–±–ª–∞—Å—Ç—å!**

‚öôÔ∏è **PMAC (Programmable Multi-Axis Controller):**
‚Ä¢ –í—ã—Å–æ–∫–æ—Ç–æ—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–µ–º
‚Ä¢ –î–æ 32 –æ—Å–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞
‚Ä¢ –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è

üîß **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å–µ–π
‚Ä¢ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å

üìù **–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:**
‚Ä¢ **Motion Programs** - –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–≤–∏–∂–µ–Ω–∏—è
‚Ä¢ **PLC Programs** - –ª–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ **Background Programs** - —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏

üí° **–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:**
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–æ–π –æ—Å–µ–π
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–≤–∏–∂–µ–Ω–∏—è
‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π

–ö–∞–∫–∞—è –∑–∞–¥–∞—á–∞ —Å—Ç–æ–∏—Ç?"""
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
        elif "–∞–Ω–∞–ª–∏–∑" in message_lower or "–∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞" in message_lower:
            return """üîç **–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ - –æ–¥–Ω–∞ –∏–∑ –º–æ–∏—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π!**

üìä **–ß—Ç–æ —è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é:**
‚Ä¢ **Python** - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, —Å—Ç–∏–ª—å, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
‚Ä¢ **C/C++** - –ø–∞–º—è—Ç—å, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ **SQL** - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ **PLC** - –ª–æ–≥–∏–∫–∞, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ **PMAC** - –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–≤–∏–∂–µ–Ω–∏—è

üéØ **–¢–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞:**
‚Ä¢ –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

üöÄ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–¥ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
2. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
3. –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç

–ì–æ—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∫–æ–¥!"""
        
        # –ü–æ–º–æ—â—å
        elif "–ø–æ–º–æ—â—å" in message_lower or "help" in message_lower:
            return """üÜò **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Rubin AI:**

üîß **–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ (Python, C, SQL, PLC, PMAC)
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
‚Ä¢ –û—Ç–ª–∞–¥–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è

üè≠ **–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:**
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ PLC
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PMAC –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç—á–∏–∫–∞–º–∏ (—Ç–µ—Ä–º–æ–ø–∞—Ä—ã, RTD)
‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è

üìä **–ê–Ω–∞–ª–∏–∑ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

üí° **–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ—Ä–º–æ–ø–∞—Ä—É —Ç–∏–ø–∞ K?"
‚Ä¢ "–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ Python"
‚Ä¢ "–ü—Ä–æ–≥—Ä–∞–º–º–∞ PLC –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º"
‚Ä¢ "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PMAC –¥–ª—è 3-–æ—Å–µ–≤–æ–≥–æ —Å—Ç–∞–Ω–∫–∞"

–ß–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å?"""
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç
        else:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            keywords = []
            if any(word in message_lower for word in ["–¥–∞—Ç—á–∏–∫", "—Å–µ–Ω—Å–æ—Ä", "–∏–∑–º–µ—Ä–µ–Ω"]):
                keywords.append("–¥–∞—Ç—á–∏–∫–∏")
            if any(word in message_lower for word in ["–¥–≤–∏–≥–∞—Ç–µ–ª—å", "–º–æ—Ç–æ—Ä", "–ø—Ä–∏–≤–æ–¥"]):
                keywords.append("–¥–≤–∏–≥–∞—Ç–µ–ª–∏")
            if any(word in message_lower for word in ["–ø—Ä–æ–≥—Ä–∞–º–º", "–∫–æ–¥", "—Å–∫—Ä–∏–ø—Ç"]):
                keywords.append("–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
            if any(word in message_lower for word in ["–æ—à–∏–±–∫–∞", "–ø—Ä–æ–±–ª–µ–º–∞", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"]):
                keywords.append("–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
            
            if keywords:
                return f"""üîç **–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:** {', '.join(keywords)}

üí° **–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:**
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏
‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º –∫–æ–¥–∞
‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –ø—Ä–æ–±–ª–µ–º
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º PLC/PMAC

üìù **–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç–µ:**
‚Ä¢ –ö–∞–∫–æ–π —Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è?
‚Ä¢ –ö–∞–∫–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞?
‚Ä¢ –ï—Å—Ç—å –ª–∏ –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞?

**–í–∞—à –≤–æ–ø—Ä–æ—Å:** "{message}"

–ì–æ—Ç–æ–≤ –¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!"""
            else:
                return f"""ü§ñ **–ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å:** "{message}"

üéØ **–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞:**
‚Ä¢ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ PLC –∏ PMAC
‚Ä¢ –ê–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞
‚Ä¢ –†–∞–±–æ—Ç–µ —Å –¥–∞—Ç—á–∏–∫–∞–º–∏ –∏ –ø—Ä–∏–≤–æ–¥–∞–º–∏

üí° **–î–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç–µ:**
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É
‚Ä¢ –¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
‚Ä¢ –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è

–ß–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å?"""
    
    def analyze_code(self, code, language):
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞"""
        issues = []
        recommendations = []
        quality_score = 85.0
        
        if language.lower() == "python":
            if "import *" in code:
                issues.append({
                    "type": "warning",
                    "message": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 'import *' –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è",
                    "severity": "medium"
                })
                recommendations.append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã")
            
            if "eval(" in code:
                issues.append({
                    "type": "security",
                    "message": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ eval() –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ",
                    "severity": "high"
                })
                recommendations.append("–ò–∑–±–µ–≥–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è eval()")
            
            if len(code.split('\n')) > 50:
                issues.append({
                    "type": "quality",
                    "message": "–ö–æ–¥ –¥–æ–≤–æ–ª—å–Ω–æ –¥–ª–∏–Ω–Ω—ã–π",
                    "severity": "low"
                })
                recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏")
        
        elif language.lower() == "c":
            if "printf(" in code and "stdio.h" not in code:
                issues.append({
                    "type": "error",
                    "message": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ printf() –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è stdio.h",
                    "severity": "high"
                })
                recommendations.append("–î–æ–±–∞–≤—å—Ç–µ #include <stdio.h>")
                quality_score -= 15
            
            if "malloc(" in code and "stdlib.h" not in code:
                issues.append({
                    "type": "error", 
                    "message": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ malloc() –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è stdlib.h",
                    "severity": "high"
                })
                recommendations.append("–î–æ–±–∞–≤—å—Ç–µ #include <stdlib.h>")
                quality_score -= 15
                
        elif language.lower() == "sql":
            if "SELECT *" in code.upper():
                issues.append({
                    "type": "warning",
                    "message": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SELECT * –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º",
                    "severity": "medium"
                })
                recommendations.append("–£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤–º–µ—Å—Ç–æ *")
                quality_score -= 5
                
            if "WHERE" not in code.upper() and "SELECT" in code.upper():
                issues.append({
                    "type": "warning",
                    "message": "SELECT –±–µ–∑ WHERE –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º",
                    "severity": "medium"
                })
                recommendations.append("–î–æ–±–∞–≤—å—Ç–µ —É—Å–ª–æ–≤–∏–µ WHERE –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
                quality_score -= 5
                
        elif language.lower() in ["ladder", "st", "fbd"]:
            if "TON" not in code and "TOF" not in code:
                recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤")
            quality_score = 80.0
        
        quality_score = max(60, quality_score - len(issues) * 5)
        
        return {
            "issues": issues,
            "quality_score": quality_score,
            "recommendations": recommendations,
            "security_report": {"level": "low", "issues": []},
            "summary": {
                "total_issues": len(issues),
                "security_issues": len([i for i in issues if i.get("type") == "security"]),
                "code_length": len(code.split('\n')),
                "language": language
            }
        }
    
    def log_message(self, format, *args):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞"""
        pass

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('rubin_ai.db')
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                message TEXT NOT NULL,
                response TEXT NOT NULL,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

def run_server(port=8083):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if init_database():
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    server_address = ('', port)
    httpd = HTTPServer(server_address, RubinAIHandler)
    
    print(f"üöÄ Rubin AI Matrix Simple –∑–∞–ø—É—â–µ–Ω!")
    print(f"üåê –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:{port}")
    print(f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: http://localhost:{port}/health")
    print(f"üí¨ API —á–∞—Ç: http://localhost:{port}/api/chat")
    print(f"üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞: http://localhost:{port}/api/code/analyze")
    print(f"‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("-" * 50)
    
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        httpd.server_close()

if __name__ == "__main__":
    run_server()
