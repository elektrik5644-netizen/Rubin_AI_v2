#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
NeuroRepository API Server –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
–ì–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ GitHub
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import logging
import os
import json
import requests
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–µ–ø–ª–æ—è
NEURO_REPO_PATH = os.getenv('NEURO_REPO_PATH', '/app/NeuroRepository')
PORT = int(os.getenv('PORT', 8090))

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
NEURO_PROJECTS = {
    "neuro_project_1": {
        "path": os.path.join(NEURO_REPO_PATH, "NeuroProject-1"),
        "description": "–ë–∞–∑–æ–≤—ã–π –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        "capabilities": ["—Ç–æ—Ä–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", "–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω", "–∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤"]
    },
    "neuro_project_2": {
        "path": os.path.join(NEURO_REPO_PATH, "NeuroProject-2"),
        "description": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å –∫—Ä–µ–¥–∏—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏",
        "capabilities": ["–∫—Ä–µ–¥–∏—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤", "–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"]
    },
    "trade_emulator": {
        "path": os.path.join(NEURO_REPO_PATH, "TradeEmulator"),
        "description": "–¢–æ—Ä–≥–æ–≤—ã–π —ç–º—É–ª—è—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
        "capabilities": ["—Å–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏", "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", "–∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"]
    }
}

# –ó–Ω–∞–Ω–∏—è –æ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö
NEURAL_KNOWLEDGE = {
    "–Ω–µ–π—Ä–æ—Å–µ—Ç—å": {
        "keywords": ["–Ω–µ–π—Ä–æ—Å–µ—Ç—å", "–Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å", "neural network", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"],
        "explanation": """
**–ù–µ–π—Ä–æ—Å–µ—Ç—å (Neural Network)** - —ç—Ç–æ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å, –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏.

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**
- **–ù–µ–π—Ä–æ–Ω—ã** - –±–∞–∑–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
- **–°–ª–æ–∏** - –≥—Ä—É–ø–ø—ã –Ω–µ–π—Ä–æ–Ω–æ–≤
- **–í–µ—Å–∞** - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
- **–§—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏** - –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –≤—ã—Ö–æ–¥ –Ω–µ–π—Ä–æ–Ω–∞

**–¢–∏–ø—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π:**
1. **–ü–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ** - –∫–∞–∂–¥—ã–π –Ω–µ–π—Ä–æ–Ω —Å–≤—è–∑–∞–Ω —Å–æ –≤—Å–µ–º–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–ª–æ–µ
2. **–°–≤–µ—Ä—Ç–æ—á–Ω—ã–µ (CNN)** - –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
3. **–†–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ (RNN)** - –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
4. **–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã** - –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞

**–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö:**
- –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω
- –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
- –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
- –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥
        """
    },
    "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ": {
        "keywords": ["–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "machine learning", "ML", "–æ–±—É—á–µ–Ω–∏–µ"],
        "explanation": """
**–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (Machine Learning)** - —Ä–∞–∑–¥–µ–ª –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∏–∑—É—á–∞—é—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ–±—É—á–∞—Ç—å—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã—Ö.

**–¢–∏–ø—ã –æ–±—É—á–µ–Ω–∏—è:**
1. **–û–±—É—á–µ–Ω–∏–µ —Å —É—á–∏—Ç–µ–ª–µ–º** - –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
2. **–û–±—É—á–µ–Ω–∏–µ –±–µ–∑ —É—á–∏—Ç–µ–ª—è** - –ø–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö
3. **–û–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º** - –æ–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ

**–ê–ª–≥–æ—Ä–∏—Ç–º—ã:**
- –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
- –î–µ—Ä–µ–≤—å—è —Ä–µ—à–µ–Ω–∏–π
- –°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å
- –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥
- –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏

**–í —Ñ–∏–Ω–∞–Ω—Å–∞—Ö:**
- –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
- –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        """
    },
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑": {
        "keywords": ["—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", "financial analysis", "–∞–Ω–∞–ª–∏–∑", "—Ñ–∏–Ω–∞–Ω—Å—ã"],
        "explanation": """
**–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑** - –ø—Ä–æ—Ü–µ—Å—Å –æ—Ü–µ–Ω–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏.

**–ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞:**
1. **–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑** - –∞–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
2. **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑** - –∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
3. **–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑** - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏

**–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
- **–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å** - —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ–≥–∞—à–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
- **–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å** - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
- **–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å** - —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è
- **–î–µ–ª–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å** - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞–º–∏

**–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –∞–Ω–∞–ª–∏–∑–µ:**
- –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
- –ê–Ω–∞–ª–∏–∑ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
        """
    }
}

@app.route('/api/neuro/analyze', methods=['POST'])
def analyze_financial_data():
    """–ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π"""
    try:
        data = request.get_json()
        query = data.get('query', '')
        data_type = data.get('type', 'general')
        
        logger.info(f"üß† –ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {query}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
        if any(keyword in query.lower() for keyword in ['—Ü–µ–Ω–∞', 'price', '—Å—Ç–æ–∏–º–æ—Å—Ç—å']):
            analysis_type = 'price_prediction'
        elif any(keyword in query.lower() for keyword in ['—Ä–∏—Å–∫', 'risk', '–æ–ø–∞—Å–Ω–æ—Å—Ç—å']):
            analysis_type = 'risk_assessment'
        elif any(keyword in query.lower() for keyword in ['—Ç—Ä–µ–Ω–¥', 'trend', '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']):
            analysis_type = 'trend_analysis'
        else:
            analysis_type = 'general_analysis'
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
        result = {
            "analysis_type": analysis_type,
            "query": query,
            "timestamp": datetime.now().isoformat(),
            "neural_insights": generate_neural_insights(analysis_type, query),
            "recommendations": generate_recommendations(analysis_type),
            "confidence": 0.85
        }
        
        return jsonify({
            "module": "neuro_repository",
            "task": "financial_analysis",
            "result": result
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}'}), 500

@app.route('/api/neuro/trade', methods=['POST'])
def trade_analysis():
    """–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    try:
        data = request.get_json()
        strategy = data.get('strategy', '')
        market = data.get('market', 'general')
        
        logger.info(f"üìà –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy}")
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        analysis = {
            "strategy": strategy,
            "market": market,
            "timestamp": datetime.now().isoformat(),
            "risk_level": assess_risk_level(strategy),
            "expected_return": calculate_expected_return(strategy),
            "neural_prediction": generate_trading_prediction(strategy, market),
            "recommendations": generate_trading_recommendations(strategy)
        }
        
        return jsonify({
            "module": "neuro_repository",
            "task": "trade_analysis",
            "result": analysis
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: {str(e)}'}), 500

@app.route('/api/neuro/models', methods=['GET'])
def get_models():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    try:
        models = []
        for project_id, project in NEURO_PROJECTS.items():
            models.append({
                "id": project_id,
                "name": project["description"],
                "capabilities": project["capabilities"],
                "status": "available" if os.path.exists(project["path"]) else "unavailable"
            })
        
        return jsonify({
            "module": "neuro_repository",
            "task": "list_models",
            "result": {
                "models": models,
                "total": len(models),
                "timestamp": datetime.now().isoformat()
            }
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {str(e)}'}), 500

@app.route('/api/neuro/knowledge', methods=['POST'])
def get_knowledge():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –æ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö"""
    try:
        data = request.get_json()
        topic = data.get('topic', '')
        
        # –ü–æ–∏—Å–∫ –∑–Ω–∞–Ω–∏–π –ø–æ —Ç–µ–º–µ
        knowledge = None
        for key, value in NEURAL_KNOWLEDGE.items():
            if any(keyword in topic.lower() for keyword in value['keywords']):
                knowledge = value
                break
        
        if not knowledge:
            knowledge = {
                "keywords": ["–æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"],
                "explanation": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–π —Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
            }
        
        return jsonify({
            "module": "neuro_repository",
            "task": "knowledge_query",
            "result": {
                "topic": topic,
                "knowledge": knowledge,
                "timestamp": datetime.now().isoformat()
            }
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–Ω–∞–Ω–∏–π: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π: {str(e)}'}), 500

@app.route('/api/neuro/status', methods=['GET'])
def neuro_status():
    """–°—Ç–∞—Ç—É—Å NeuroRepository"""
    try:
        status = {
            "service": "NeuroRepository API",
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "projects": len(NEURO_PROJECTS),
            "available_models": sum(1 for p in NEURO_PROJECTS.values() if os.path.exists(p["path"])),
            "knowledge_base": len(NEURAL_KNOWLEDGE),
            "port": PORT
        }
        
        return jsonify(status)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}'}), 500

@app.route('/api/health', methods=['GET'])
def health():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'service': 'NeuroRepository API',
        'timestamp': datetime.now().isoformat(),
        'port': PORT
    })

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def generate_neural_insights(analysis_type, query):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤"""
    insights = {
        'price_prediction': [
            "–ù–µ–π—Ä–æ—Å–µ—Ç—å –≤—ã—è–≤–∏–ª–∞ –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 78%",
            "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–∞—Ç—Ç–µ—Ä–Ω—ã, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ü–∏—é",
            "–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ—Å—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏"
        ],
        'risk_assessment': [
            "–ê–ª–≥–æ—Ä–∏—Ç–º –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∏—Å–∫ –∫–∞–∫ —É–º–µ—Ä–µ–Ω–Ω—ã–π (3.2/10)",
            "–í—ã—è–≤–ª–µ–Ω—ã —Ñ–∞–∫—Ç–æ—Ä—ã, —Å–Ω–∏–∂–∞—é—â–∏–µ –æ–±—â–∏–π —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è",
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º"
        ],
        'trend_analysis': [
            "–ù–µ–π—Ä–æ—Å–µ—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥",
            "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –≤ —Ä–∞–º–∫–∞—Ö —Ç—Ä–µ–Ω–¥–∞",
            "–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 82%"
        ],
        'general_analysis': [
            "–ù–µ–π—Ä–æ—Å–µ—Ç—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞ –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã—è–≤–∏–ª–∞ –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã",
            "–ú–æ–¥–µ–ª—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è",
            "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö"
        ]
    }
    
    return insights.get(analysis_type, insights['general_analysis'])

def generate_recommendations(analysis_type):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    recommendations = {
        'price_prediction': [
            "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏",
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
            "–ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –æ–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞"
        ],
        'risk_assessment': [
            "–°–Ω–∏–∑—å—Ç–µ –¥–æ–ª—é —Ä–∏—Å–∫–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ",
            "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π",
            "–†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å"
        ],
        'trend_analysis': [
            "–°–ª–µ–¥—É–π—Ç–µ —Ç—Ä–µ–Ω–¥—É, –Ω–æ –±—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è–º",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
            "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ —Ç—Ä–µ–Ω–¥–æ–º"
        ],
        'general_analysis': [
            "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö",
            "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã",
            "–†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –º–æ–¥–µ–ª–∏"
        ]
    }
    
    return recommendations.get(analysis_type, recommendations['general_analysis'])

def assess_risk_level(strategy):
    """–û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    risk_keywords = ['–≤—ã—Å–æ–∫–∏–π', '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π', '—Å–ø–µ–∫—É–ª—è—Ç–∏–≤–Ω—ã–π', 'high', 'aggressive']
    if any(keyword in strategy.lower() for keyword in risk_keywords):
        return "–≤—ã—Å–æ–∫–∏–π"
    elif '—É–º–µ—Ä–µ–Ω–Ω—ã–π' in strategy.lower() or 'moderate' in strategy.lower():
        return "—É–º–µ—Ä–µ–Ω–Ω—ã–π"
    else:
        return "–Ω–∏–∑–∫–∏–π"

def calculate_expected_return(strategy):
    """–†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"""
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Ä–∞—Å—á–µ—Ç–∞
    base_return = 0.05  # 5% –±–∞–∑–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
    
    if '–≤—ã—Å–æ–∫–∏–π' in strategy.lower() or 'high' in strategy.lower():
        return base_return * 2
    elif '—É–º–µ—Ä–µ–Ω–Ω—ã–π' in strategy.lower() or 'moderate' in strategy.lower():
        return base_return * 1.5
    else:
        return base_return

def generate_trading_prediction(strategy, market):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    return {
        "direction": "–≤–æ—Å—Ö–æ–¥—è—â–∏–π" if '–ø–æ–∫—É–ø–∫–∞' in strategy.lower() else "–Ω–∏—Å—Ö–æ–¥—è—â–∏–π",
        "confidence": 0.75,
        "timeframe": "—Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–π",
        "market_conditions": "–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ" if market == 'bull' else "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ"
    }

def generate_trading_recommendations(strategy):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    return [
        "–°–ª–µ–¥—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏",
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –∫–∞–ø–∏—Ç–∞–ª–∞",
        "–†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é",
        "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏"
    ]

if __name__ == '__main__':
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ NeuroRepository API —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}...")
    logger.info(f"üìÅ –ü—É—Ç—å –∫ NeuroRepository: {NEURO_REPO_PATH}")
    logger.info(f"üîó URL: http://localhost:{PORT}")
    logger.info("üìã Endpoints:")
    logger.info("  - POST /api/neuro/analyze - –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
    logger.info("  - POST /api/neuro/trade - –¢–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    logger.info("  - GET /api/neuro/models - –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏")
    logger.info("  - POST /api/neuro/knowledge - –ó–Ω–∞–Ω–∏—è –æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö")
    logger.info("  - GET /api/neuro/status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞")
    logger.info("  - GET /api/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    logger.info("==================================================")
    
    app.run(host='0.0.0.0', port=PORT, debug=False)





