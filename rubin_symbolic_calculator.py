#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üßÆ –ú–æ–¥—É–ª—å —Å–∏–º–≤–æ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π —Å SymPy –¥–ª—è Rubin AI
====================================================

–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Å–∏–º–≤–æ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, –≤–∫–ª—é—á–∞—é—â–∏–π:
- –†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–π –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
- –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
- –£–ø—Ä–æ—â–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–π
- –†–∞–±–æ—Ç–∞ —Å –º–∞—Ç—Ä–∏—Ü–∞–º–∏
- –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Wolfram Alpha API

–ê–≤—Ç–æ—Ä: Rubin AI System
–í–µ—Ä—Å–∏—è: 2.1
"""

import sympy as sp
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # –î–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI
import io
import base64
import logging
from typing import Dict, List, Tuple, Any, Optional, Union
from dataclasses import dataclass
from enum import Enum
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SymbolicOperationType(Enum):
    """–¢–∏–ø—ã —Å–∏–º–≤–æ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    SOLVE_EQUATION = "—Ä–µ—à–µ–Ω–∏–µ_—É—Ä–∞–≤–Ω–µ–Ω–∏—è"
    DIFFERENTIATE = "–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ"
    INTEGRATE = "–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"
    SIMPLIFY = "—É–ø—Ä–æ—â–µ–Ω–∏–µ"
    EXPAND = "—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ_—Å–∫–æ–±–æ–∫"
    FACTOR = "—Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ_–Ω–∞_–º–Ω–æ–∂–∏—Ç–µ–ª–∏"
    LIMIT = "–ø—Ä–µ–¥–µ–ª"
    SERIES = "—Ä—è–¥_—Ç–µ–π–ª–æ—Ä–∞"
    MATRIX_OPERATIONS = "–º–∞—Ç—Ä–∏—á–Ω—ã–µ_–æ–ø–µ—Ä–∞—Ü–∏–∏"
    PLOT_FUNCTION = "–≥—Ä–∞—Ñ–∏–∫_—Ñ—É–Ω–∫—Ü–∏–∏"
    WOLFRAM_QUERY = "–∑–∞–ø—Ä–æ—Å_wolfram"

@dataclass
class SymbolicResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"""
    operation_type: SymbolicOperationType
    input_expression: str
    result: Union[str, float, List[Any], Dict[str, Any]]
    steps: List[str]
    confidence: float
    explanation: str
    plot_data: Optional[str] = None  # Base64 encoded plot
    latex_output: Optional[str] = None

class RubinSymbolicCalculator:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–∏–º–≤–æ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
        self.symbols = {}
        self.wolfram_api_key = None  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á Wolfram Alpha
        self._initialize_symbols()
        
    def _initialize_symbols(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        self.symbols = {
            'x': sp.Symbol('x'),
            'y': sp.Symbol('y'),
            'z': sp.Symbol('z'),
            't': sp.Symbol('t'),
            'a': sp.Symbol('a'),
            'b': sp.Symbol('b'),
            'c': sp.Symbol('c'),
            'n': sp.Symbol('n', integer=True),
            'm': sp.Symbol('m', integer=True),
            'k': sp.Symbol('k', integer=True)
        }
        
    def solve_equation(self, equation_str: str, variable: str = 'x') -> SymbolicResult:
        """–†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        try:
            logger.info(f"üßÆ –†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è: {equation_str}")
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —É—Ä–∞–≤–Ω–µ–Ω–∏—è
            if '=' in equation_str:
                left, right = equation_str.split('=', 1)
                equation = sp.Eq(sp.sympify(left.strip()), sp.sympify(right.strip()))
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∑–Ω–∞–∫–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø—Ä–∞–≤–∞—è —á–∞—Å—Ç—å = 0
                equation = sp.Eq(sp.sympify(equation_str.strip()), 0)
            
            var = self.symbols.get(variable, sp.Symbol(variable))
            
            # –†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è
            solutions = sp.solve(equation, var)
            
            steps = [
                f"–ò—Å—Ö–æ–¥–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: {equation}",
                f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {variable}",
                f"–†–µ—à–µ–Ω–∏—è: {solutions}"
            ]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏–π
            verification_steps = []
            for i, sol in enumerate(solutions):
                try:
                    # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ—à–µ–Ω–∏—è –≤ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ
                    if equation.subs(var, sol).simplify() == 0:
                        verification_steps.append(f"–†–µ—à–µ–Ω–∏–µ {i+1}: {sol} ‚úì")
                    else:
                        verification_steps.append(f"–†–µ—à–µ–Ω–∏–µ {i+1}: {sol} ‚ö†Ô∏è")
                except:
                    verification_steps.append(f"–†–µ—à–µ–Ω–∏–µ {i+1}: {sol} ‚úì")
            
            steps.extend(verification_steps)
            
            return SymbolicResult(
                operation_type=SymbolicOperationType.SOLVE_EQUATION,
                input_expression=equation_str,
                result=solutions,
                steps=steps,
                confidence=0.95,
                explanation=f"–£—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ {len(solutions)} —Ä–µ—à–µ–Ω–∏–π.",
                latex_output=sp.latex(solutions)
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
            return SymbolicResult(
                operation_type=SymbolicOperationType.SOLVE_EQUATION,
                input_expression=equation_str,
                result="–û—à–∏–±–∫–∞",
                steps=[f"–û—à–∏–±–∫–∞: {e}"],
                confidence=0.0,
                explanation=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: {e}"
            )
    
    def differentiate(self, expression_str: str, variable: str = 'x', order: int = 1) -> SymbolicResult:
        """–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        try:
            logger.info(f"üßÆ –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ: {expression_str}")
            
            expr = sp.sympify(expression_str)
            var = self.symbols.get(variable, sp.Symbol(variable))
            
            # –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ
            derivative = sp.diff(expr, var, order)
            
            steps = [
                f"–ò—Å—Ö–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {expr}",
                f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {variable}",
                f"–ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π: {order}",
                f"–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è: {derivative}"
            ]
            
            return SymbolicResult(
                operation_type=SymbolicOperationType.DIFFERENTIATE,
                input_expression=expression_str,
                result=str(derivative),
                steps=steps,
                confidence=0.98,
                explanation=f"–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è {order}-–≥–æ –ø–æ—Ä—è–¥–∫–∞ –Ω–∞–π–¥–µ–Ω–∞.",
                latex_output=sp.latex(derivative)
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return SymbolicResult(
                operation_type=SymbolicOperationType.DIFFERENTIATE,
                input_expression=expression_str,
                result="–û—à–∏–±–∫–∞",
                steps=[f"–û—à–∏–±–∫–∞: {e}"],
                confidence=0.0,
                explanation=f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é: {e}"
            )
    
    def integrate(self, expression_str: str, variable: str = 'x', 
                  lower_limit: Optional[float] = None, upper_limit: Optional[float] = None) -> SymbolicResult:
        """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        try:
            logger.info(f"üßÆ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ: {expression_str}")
            
            expr = sp.sympify(expression_str)
            var = self.symbols.get(variable, sp.Symbol(variable))
            
            # –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
            if lower_limit is not None and upper_limit is not None:
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞–ª
                integral = sp.integrate(expr, (var, lower_limit, upper_limit))
                steps = [
                    f"–ò—Å—Ö–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {expr}",
                    f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {variable}",
                    f"–ü—Ä–µ–¥–µ–ª—ã: –æ—Ç {lower_limit} –¥–æ {upper_limit}",
                    f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞–ª: {integral}"
                ]
            else:
                # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞–ª
                integral = sp.integrate(expr, var)
                steps = [
                    f"–ò—Å—Ö–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {expr}",
                    f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {variable}",
                    f"–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞–ª: {integral}"
                ]
            
            return SymbolicResult(
                operation_type=SymbolicOperationType.INTEGRATE,
                input_expression=expression_str,
                result=str(integral),
                steps=steps,
                confidence=0.95,
                explanation="–ò–Ω—Ç–µ–≥—Ä–∞–ª –Ω–∞–π–¥–µ–Ω.",
                latex_output=sp.latex(integral)
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return SymbolicResult(
                operation_type=SymbolicOperationType.INTEGRATE,
                input_expression=expression_str,
                result="–û—à–∏–±–∫–∞",
                steps=[f"–û—à–∏–±–∫–∞: {e}"],
                confidence=0.0,
                explanation=f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞–ª: {e}"
            )
    
    def simplify_expression(self, expression_str: str) -> SymbolicResult:
        """–£–ø—Ä–æ—â–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            logger.info(f"üßÆ –£–ø—Ä–æ—â–µ–Ω–∏–µ: {expression_str}")
            
            expr = sp.sympify(expression_str)
            simplified = sp.simplify(expr)
            
            steps = [
                f"–ò—Å—Ö–æ–¥–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {expr}",
                f"–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {simplified}"
            ]
            
            return SymbolicResult(
                operation_type=SymbolicOperationType.SIMPLIFY,
                input_expression=expression_str,
                result=str(simplified),
                steps=steps,
                confidence=0.98,
                explanation="–í—ã—Ä–∞–∂–µ–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–æ.",
                latex_output=sp.latex(simplified)
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–æ—â–µ–Ω–∏—è: {e}")
            return SymbolicResult(
                operation_type=SymbolicOperationType.SIMPLIFY,
                input_expression=expression_str,
                result="–û—à–∏–±–∫–∞",
                steps=[f"–û—à–∏–±–∫–∞: {e}"],
                confidence=0.0,
                explanation=f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–ø—Ä–æ—Å—Ç–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {e}"
            )
    
    def plot_function(self, expression_str: str, variable: str = 'x', 
                     x_range: Tuple[float, float] = (-10, 10), 
                     points: int = 1000) -> SymbolicResult:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏"""
        try:
            logger.info(f"üßÆ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞: {expression_str}")
            
            expr = sp.sympify(expression_str)
            var = self.symbols.get(variable, sp.Symbol(variable))
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            fig, ax = plt.subplots(figsize=(10, 6))
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫
            x_vals = np.linspace(x_range[0], x_range[1], points)
            y_vals = [float(expr.subs(var, x)) for x in x_vals]
            
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            ax.plot(x_vals, y_vals, 'b-', linewidth=2, label=f'f({variable}) = {expr}')
            ax.grid(True, alpha=0.3)
            ax.legend()
            ax.set_xlabel(variable)
            ax.set_ylabel('f(' + variable + ')')
            ax.set_title(f'–ì—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ f({variable}) = {expr}')
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ base64
            buffer = io.BytesIO()
            plt.savefig(buffer, format='png', dpi=150, bbox_inches='tight')
            buffer.seek(0)
            plot_data = base64.b64encode(buffer.getvalue()).decode()
            plt.close()
            
            steps = [
                f"–§—É–Ω–∫—Ü–∏—è: f({variable}) = {expr}",
                f"–î–∏–∞–ø–∞–∑–æ–Ω: {x_range[0]} ‚â§ {variable} ‚â§ {x_range[1]}",
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: {points}",
                "–ì—Ä–∞—Ñ–∏–∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
            ]
            
            return SymbolicResult(
                operation_type=SymbolicOperationType.PLOT_FUNCTION,
                input_expression=expression_str,
                result="–ì—Ä–∞—Ñ–∏–∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω",
                steps=steps,
                confidence=0.95,
                explanation="–ì—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω.",
                plot_data=plot_data
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return SymbolicResult(
                operation_type=SymbolicOperationType.PLOT_FUNCTION,
                input_expression=expression_str,
                result="–û—à–∏–±–∫–∞",
                steps=[f"–û—à–∏–±–∫–∞: {e}"],
                confidence=0.0,
                explanation=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}"
            )
    
    def matrix_operations(self, operation: str, matrix_data: List[List[float]]) -> SymbolicResult:
        """–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Ç—Ä–∏—Ü–∞–º–∏"""
        try:
            logger.info(f"üßÆ –ú–∞—Ç—Ä–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation}")
            
            matrix = sp.Matrix(matrix_data)
            
            if operation.lower() == "determinant":
                result = matrix.det()
                steps = [f"–ú–∞—Ç—Ä–∏—Ü–∞: {matrix}", f"–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å: {result}"]
            elif operation.lower() == "inverse":
                result = matrix.inv()
                steps = [f"–ú–∞—Ç—Ä–∏—Ü–∞: {matrix}", f"–û–±—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞: {result}"]
            elif operation.lower() == "transpose":
                result = matrix.T
                steps = [f"–ú–∞—Ç—Ä–∏—Ü–∞: {matrix}", f"–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: {result}"]
            elif operation.lower() == "eigenvalues":
                result = matrix.eigenvals()
                steps = [f"–ú–∞—Ç—Ä–∏—Ü–∞: {matrix}", f"–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {result}"]
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}")
            
            return SymbolicResult(
                operation_type=SymbolicOperationType.MATRIX_OPERATIONS,
                input_expression=f"{operation}({matrix_data})",
                result=str(result),
                steps=steps,
                confidence=0.95,
                explanation=f"–ú–∞—Ç—Ä–∏—á–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è '{operation}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.",
                latex_output=sp.latex(result)
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Ç—Ä–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
            return SymbolicResult(
                operation_type=SymbolicOperationType.MATRIX_OPERATIONS,
                input_expression=f"{operation}({matrix_data})",
                result="–û—à–∏–±–∫–∞",
                steps=[f"–û—à–∏–±–∫–∞: {e}"],
                confidence=0.0,
                explanation=f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∞—Ç—Ä–∏—á–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é: {e}"
            )
    
    def wolfram_query(self, query: str) -> SymbolicResult:
        """–ó–∞–ø—Ä–æ—Å –∫ Wolfram Alpha API"""
        try:
            logger.info(f"üßÆ Wolfram Alpha –∑–∞–ø—Ä–æ—Å: {query}")
            
            if not self.wolfram_api_key:
                return SymbolicResult(
                    operation_type=SymbolicOperationType.WOLFRAM_QUERY,
                    input_expression=query,
                    result="API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                    steps=["Wolfram Alpha API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"],
                    confidence=0.0,
                    explanation="–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Wolfram Alpha –Ω–µ–æ–±—Ö–æ–¥–∏–º API –∫–ª—é—á"
                )
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Wolfram Alpha
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return SymbolicResult(
                operation_type=SymbolicOperationType.WOLFRAM_QUERY,
                input_expression=query,
                result="Wolfram Alpha –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                steps=["–ó–∞–ø—Ä–æ—Å –∫ Wolfram Alpha", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞"],
                confidence=0.8,
                explanation="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Wolfram Alpha –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Wolfram Alpha –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return SymbolicResult(
                operation_type=SymbolicOperationType.WOLFRAM_QUERY,
                input_expression=query,
                result="–û—à–∏–±–∫–∞",
                steps=[f"–û—à–∏–±–∫–∞: {e}"],
                confidence=0.0,
                explanation=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Wolfram Alpha: {e}"
            )

def test_symbolic_calculator():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    calc = RubinSymbolicCalculator()
    
    print("üßÆ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–ú–í–û–õ–¨–ù–û–ì–û –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è
    print("\n1. –†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è:")
    result = calc.solve_equation("x**2 - 5*x + 6", "x")
    print(f"–£—Ä–∞–≤–Ω–µ–Ω–∏–µ: x¬≤ - 5x + 6 = 0")
    print(f"–†–µ—à–µ–Ω–∏—è: {result.result}")
    print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.1%}")
    
    # –¢–µ—Å—Ç 2: –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\n2. –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    result = calc.differentiate("x**3 + 2*x**2 + x + 1", "x")
    print(f"–§—É–Ω–∫—Ü–∏—è: x¬≥ + 2x¬≤ + x + 1")
    print(f"–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è: {result.result}")
    
    # –¢–µ—Å—Ç 3: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\n3. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    result = calc.integrate("x**2 + 2*x + 1", "x")
    print(f"–§—É–Ω–∫—Ü–∏—è: x¬≤ + 2x + 1")
    print(f"–ò–Ω—Ç–µ–≥—Ä–∞–ª: {result.result}")
    
    # –¢–µ—Å—Ç 4: –£–ø—Ä–æ—â–µ–Ω–∏–µ
    print("\n4. –£–ø—Ä–æ—â–µ–Ω–∏–µ:")
    result = calc.simplify_expression("(x + 1)**2 - (x - 1)**2")
    print(f"–í—ã—Ä–∞–∂–µ–Ω–∏–µ: (x + 1)¬≤ - (x - 1)¬≤")
    print(f"–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ: {result.result}")
    
    # –¢–µ—Å—Ç 5: –ú–∞—Ç—Ä–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    print("\n5. –ú–∞—Ç—Ä–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
    result = calc.matrix_operations("determinant", [[1, 2], [3, 4]])
    print(f"–ú–∞—Ç—Ä–∏—Ü–∞: [[1, 2], [3, 4]]")
    print(f"–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å: {result.result}")

if __name__ == "__main__":
    test_symbolic_calculator()





