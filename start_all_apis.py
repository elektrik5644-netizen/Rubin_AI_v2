import subprocess
import os
import sys
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É Python
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ sys.executable –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞ Python
PYTHON_EXECUTABLE = sys.executable

# –ü—É—Ç–∏ –∫ API —Ñ–∞–π–ª–∞–º
API_FILES = {
    "controllers_api": {"path": "api/controllers_api.py", "port": 8090},
    "electrical_api": {"path": "api/electrical_api.py", "port": 8087},
    "radiomechanics_api": {"path": "api/radiomechanics_api.py", "port": 8089},
    "documents_api": {"path": "api/documents_api.py", "port": 8088},
    "rubin_ai_v2_server": {"path": "api/rubin_ai_v2_server.py", "port": 8084} # –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
}

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –∏—Ö –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∂–µ
running_processes = {}

def start_api(name, file_path, port):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω API-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."""
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        full_path = os.path.join(os.getcwd(), file_path)
        
        command = [PYTHON_EXECUTABLE, full_path]
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {name} –Ω–∞ –ø–æ—Ä—Ç—É {port} –∫–æ–º–∞–Ω–¥–æ–π: {' '.join(command)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        process = subprocess.Popen(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            creationflags=subprocess.CREATE_NEW_PROCESS_GROUP if sys.platform == "win32" else 0 # –î–ª—è Windows
        )
        running_processes[name] = process
        logger.info(f"‚úÖ {name} –∑–∞–ø—É—â–µ–Ω —Å PID: {process.pid}")
        return process
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {name}: {e}")
        return None

def stop_all_apis():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ API-—Å–µ—Ä–≤–µ—Ä—ã."""
    logger.info("‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö API-—Å–µ—Ä–≤–µ—Ä–æ–≤...")
    for name, process in running_processes.items():
        try:
            if process.poll() is None:  # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ –∑–∞–ø—É—â–µ–Ω
                if sys.platform == "win32":
                    subprocess.run(f"TASKKILL /F /PID {process.pid} /T", shell=True) # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–ª—è Windows
                else:
                    process.terminate()
                    process.wait(timeout=5)
                    if process.poll() is None:
                        process.kill()
                logger.info(f"‚úÖ {name} (PID: {process.pid}) –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            else:
                logger.info(f"‚ÑπÔ∏è {name} (PID: {process.pid}) —É–∂–µ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ {name} (PID: {process.pid}): {e}")
    running_processes.clear()
    logger.info("–í—Å–µ API-—Å–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

if __name__ == "__main__":
    logger.info("üõ†Ô∏è –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö API-—Å–µ—Ä–≤–µ—Ä–æ–≤ Rubin AI v2.0...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π API
    for name, config in API_FILES.items():
        start_api(name, config["path"], config["port"])
        time.sleep(1) # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    
    logger.info("‚úÖ –í—Å–µ API-—Å–µ—Ä–≤–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...")
    logger.info("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–∂–∞—Ç–∏–π).")
    logger.info(f"–ï—Å–ª–∏ Python-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Microsoft Store, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å: {PYTHON_EXECUTABLE}")

    try:
        # –î–µ—Ä–∂–∏–º –≥–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–º, —á—Ç–æ–±—ã —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
        # –∏ —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö –ø–æ Ctrl+C
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logger.info("\nReceived KeyboardInterrupt. Stopping all APIs...")
        stop_all_apis()
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        stop_all_apis()









