#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ Lightweight GAI Server - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Ç—è–∂–µ–ª—ã—Ö –º–æ–¥–µ–ª–µ–π
–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–ª–∞–±—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
"""

from flask import Flask, request, jsonify
import logging
import json
import random
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

class LightweightGAI:
    """–õ–µ–≥–∫–æ–≤–µ—Å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ò–ò –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    def __init__(self):
        self.templates = {
            'text': [
                "–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ, —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ:",
                "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—è –¥–∞–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ò–ò, –º–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å:",
                "–î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:",
                "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤–∏–∂—É —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:"
            ],
            'code': [
                "# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:",
                "# –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏:",
                "# –ü—Ä–æ—Å—Ç–æ–µ –∏ –Ω–∞–¥–µ–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:",
                "# –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é:"
            ],
            'diagram': [
                "–î–∏–∞–≥—Ä–∞–º–º–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º—ã:",
                "–°—Ö–µ–º–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:",
                "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞:",
                "–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–µ—à–µ–Ω–∏—è:"
            ]
        }
    
    def generate_text(self, prompt, max_length=5000):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—è–∂–µ–ª—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        try:
            template = random.choice(self.templates['text'])
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            keywords = prompt.lower().split()
            response = template
            
            if any(word in keywords for word in ['–∞–ª–≥–æ—Ä–∏—Ç–º', '–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ']):
                response += "\n\n1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ"
                response += "\n2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º"
                response += "\n3. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
            elif any(word in keywords for word in ['–∞–Ω–∞–ª–∏–∑', '–¥–∞–Ω–Ω—ã–µ', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']):
                response += "\n\n1. –°–æ–±–µ—Ä–∏—Ç–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
                response += "\n2. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
                response += "\n3. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã"
            else:
                response += "\n\n1. –ò–∑—É—á–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –¥–µ—Ç–∞–ª—å–Ω–æ"
                response += "\n2. –ù–∞–π–¥–∏—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è"
                response += "\n3. –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à–∏ —É—Å–ª–æ–≤–∏—è"
            
            return response[:max_length]
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}"
    
    def generate_code(self, language, task, max_lines=50):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—è–∂–µ–ª—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        try:
            template = random.choice(self.templates['code'])
            
            # –ü—Ä–æ—Å—Ç—ã–µ —à–∞–±–ª–æ–Ω—ã –∫–æ–¥–∞
            code_templates = {
                'python': f"""# {task}
def solve_problem():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    result = []
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
    for i in range(10):
        result.append(i * 2)
    
    return result

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    solution = solve_problem()
    print(solution)""",
                
                'javascript': f"""// {task}
function solveProblem() {{
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    const result = [];
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
    for (let i = 0; i < 10; i++) {{
        result.push(i * 2);
    }}
    
    return result;
}}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
const solution = solveProblem();
console.log(solution);""",
                
                'java': f"""// {task}
public class Solution {{
    public static int[] solveProblem() {{
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        int[] result = new int[10];
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
        for (int i = 0; i < 10; i++) {{
            result[i] = i * 2;
        }}
        
        return result;
    }}
    
    public static void main(String[] args) {{
        int[] solution = solveProblem();
        System.out.println(Arrays.toString(solution));
    }}
}}"""
            }
            
            return code_templates.get(language.lower(), code_templates['python'])[:max_lines*50]
        except Exception as e:
            return f"# –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {str(e)}"
    
    def generate_diagram(self, description):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã"""
        try:
            template = random.choice(self.templates['diagram'])
            
            # –ü—Ä–æ—Å—Ç—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–∏–∞–≥—Ä–∞–º–º
            diagram_templates = [
                f"{template}\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ   Input     ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ  Process    ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n                           ‚îÇ\n                           ‚ñº\n                   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n                   ‚îÇ   Output    ‚îÇ\n                   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```",
                
                f"{template}\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ   Start     ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n       ‚îÇ\n       ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ   Process   ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n       ‚îÇ\n       ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ    End      ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```"
            ]
            
            return random.choice(diagram_templates)
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {str(e)}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GAI
gai = LightweightGAI()

@app.route('/api/gai/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "status": "healthy",
        "service": "Lightweight GAI Server",
        "memory_usage": "optimized",
        "timestamp": datetime.now().isoformat()
    })

@app.route('/api/gai/status', methods=['GET'])
def status():
    """–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "service": "Lightweight GAI Server",
        "version": "1.0.0",
        "memory_optimized": True,
        "models_loaded": False,
        "capabilities": [
            "text_generation",
            "code_generation", 
            "diagram_description"
        ]
    })

@app.route('/api/gai/generate_text', methods=['POST'])
def generate_text():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞"""
    try:
        data = request.get_json()
        prompt = data.get('prompt', '')
        max_length = data.get('max_length', 5000)
        
        if not prompt:
            return jsonify({"error": "–ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}), 400
        
        result = gai.generate_text(prompt, max_length)
        
        return jsonify({
            "generated_text": result,
            "prompt": prompt,
            "length": len(result),
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route('/api/gai/generate_code', methods=['POST'])
def generate_code():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞"""
    try:
        data = request.get_json()
        language = data.get('language', 'python')
        task = data.get('task', '')
        max_lines = data.get('max_lines', 50)
        
        if not task:
            return jsonify({"error": "–ó–∞–¥–∞—á–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π"}), 400
        
        result = gai.generate_code(language, task, max_lines)
        
        return jsonify({
            "generated_code": result,
            "language": language,
            "task": task,
            "lines": len(result.split('\n')),
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route('/api/gai/generate_diagram', methods=['POST'])
def generate_diagram():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã"""
    try:
        data = request.get_json()
        description = data.get('description', '')
        
        if not description:
            return jsonify({"error": "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}), 400
        
        result = gai.generate_diagram(description)
        
        return jsonify({
            "generated_diagram": result,
            "description": description,
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {str(e)}")
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    logger.info("üöÄ Lightweight GAI Server –∑–∞–ø—É—â–µ–Ω")
    logger.info("URL: http://localhost:8104")
    logger.info("üíæ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏")
    logger.info("Endpoints:")
    logger.info("  - POST /api/gai/generate_text - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞")
    logger.info("  - POST /api/gai/generate_code - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞")
    logger.info("  - POST /api/gai/generate_diagram - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º")
    logger.info("  - GET /api/gai/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    logger.info("  - GET /api/gai/status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞")
    
    app.run(host='0.0.0.0', port=8104, debug=False, threaded=True)

