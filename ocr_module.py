#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
OCR Module –¥–ª—è Rubin AI
–ú–æ–¥—É–ª—å –æ–ø—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import logging
import json
import re
import math
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple
import base64
import io

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ OCR –±–∏–±–ª–∏–æ—Ç–µ–∫ —Å fallback
try:
    import cv2
    import numpy as np
    from PIL import Image
    import pytesseract
    OCR_AVAILABLE = True
except ImportError:
    OCR_AVAILABLE = False
    # Mock –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ OCR –±–∏–±–ª–∏–æ—Ç–µ–∫
    class cv2:
        @staticmethod
        def imread(path):
            return None
        
        @staticmethod
        def cvtColor(img, code):
            return img
        
        @staticmethod
        def threshold(img, thresh, maxval, type):
            return None, img
        
        @staticmethod
        def imwrite(path, img):
            return True
    
    class np:
        @staticmethod
        def array(data):
            return data
    
    class Image:
        @staticmethod
        def open(path):
            return None
    
    class pytesseract:
        @staticmethod
        def image_to_string(img, lang='rus'):
            return "Mock OCR text"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class RubinOCRModule:
    """–ú–æ–¥—É–ª—å OCR –¥–ª—è Rubin AI"""
    
    def __init__(self):
        self.ocr_available = OCR_AVAILABLE
        self.supported_formats = ['png', 'jpg', 'jpeg', 'bmp', 'tiff']
        self.languages = ['rus', 'eng']
        
        logger.info(f"üîç OCR Module –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üîß OCR –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã: {self.ocr_available}")
    
    def extract_text_from_image(self, image_path: str, language: str = 'rus') -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            if not self.ocr_available:
                return self._mock_text_extraction(image_path)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = cv2.imread(image_path)
            if image is None:
                return {
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                    'image_path': image_path
                }
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            _, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            text = pytesseract.image_to_string(thresh, lang=language)
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
            cleaned_text = self._clean_extracted_text(text)
            
            return {
                'success': True,
                'text': cleaned_text,
                'original_text': text,
                'image_path': image_path,
                'language': language,
                'confidence': self._calculate_confidence(cleaned_text)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
            return {
                'success': False,
                'error': str(e),
                'image_path': image_path
            }
    
    def _mock_text_extraction(self, image_path: str) -> Dict[str, Any]:
        """Mock –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        mock_texts = {
            'graph': "–ì—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ y = x^2\n–¢–æ—á–∫–∏: (0,0), (1,1), (2,4), (3,9)",
            'chart': "–î–∏–∞–≥—Ä–∞–º–º–∞ –ø—Ä–æ–¥–∞–∂\n–Ø–Ω–≤–∞—Ä—å: 100\n–§–µ–≤—Ä–∞–ª—å: 150\n–ú–∞—Ä—Ç: 200",
            'formula': "E = mc^2\nF = ma\nU = IR",
            'circuit': "–°—Ö–µ–º–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–ø–∏\nR1 = 10 –û–º\nR2 = 20 –û–º\nU = 220 –í"
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        filename = image_path.lower()
        for key, text in mock_texts.items():
            if key in filename:
                return {
                    'success': True,
                    'text': text,
                    'original_text': text,
                    'image_path': image_path,
                    'language': 'rus',
                    'confidence': 0.8,
                    'mock': True
                }
        
        return {
            'success': True,
            'text': "–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            'original_text': "Extracted text from image",
            'image_path': image_path,
            'language': 'rus',
            'confidence': 0.5,
            'mock': True
        }
    
    def _clean_extracted_text(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        cleaned = re.sub(r'\s+', ' ', text.strip())
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ OCR –æ—à–∏–±–∫–∏
        corrections = {
            '0': 'O',  # –ù–æ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –±—É–∫–≤–∞ O
            '1': 'I',  # –ï–¥–∏–Ω–∏—Ü–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–∞–∫ –±—É–∫–≤–∞ I
            '5': 'S',  # –ü—è—Ç–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–∞–∫ –±—É–∫–≤–∞ S
            '8': 'B',  # –í–æ—Å—å–º–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–∞–∫ –±—É–∫–≤–∞ B
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ñ–æ—Ä–º—É–ª
        if any(char in cleaned for char in ['=', '+', '-', '*', '/', '^']):
            for wrong, correct in corrections.items():
                cleaned = cleaned.replace(wrong, correct)
        
        return cleaned
    
    def _calculate_confidence(self, text: str) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ"""
        if not text:
            return 0.0
        
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence = 0.5
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        if re.search(r'[0-9]', text):
            confidence += 0.2
        
        if re.search(r'[+\-*/=]', text):
            confidence += 0.2
        
        if re.search(r'[a-zA-Z]', text):
            confidence += 0.1
        
        return min(confidence, 1.0)
    
    def analyze_graph(self, image_path: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            text_result = self.extract_text_from_image(image_path)
            
            if not text_result['success']:
                return text_result
            
            text = text_result['text']
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
            analysis = {
                'graph_type': self._detect_graph_type(text),
                'function': self._extract_function(text),
                'data_points': self._extract_data_points(text),
                'axes_labels': self._extract_axes_labels(text),
                'title': self._extract_title(text),
                'mathematical_content': self._extract_mathematical_content(text)
            }
            
            return {
                'success': True,
                'image_path': image_path,
                'extracted_text': text,
                'analysis': analysis,
                'confidence': text_result['confidence']
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return {
                'success': False,
                'error': str(e),
                'image_path': image_path
            }
    
    def _detect_graph_type(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞"""
        text_lower = text.lower()
        
        if 'sin' in text_lower or 'cos' in text_lower or 'tan' in text_lower:
            return 'trigonometric'
        elif '^' in text or '**' in text or '—Å—Ç–µ–ø–µ–Ω—å' in text_lower:
            return 'polynomial'
        elif 'log' in text_lower or 'ln' in text_lower:
            return 'logarithmic'
        elif 'exp' in text_lower or 'e^' in text:
            return 'exponential'
        elif '–¥–∏–∞–≥—Ä–∞–º–º–∞' in text_lower or 'chart' in text_lower:
            return 'chart'
        elif '—Å—Ö–µ–º–∞' in text_lower or 'circuit' in text_lower:
            return 'circuit'
        else:
            return 'unknown'
    
    def _extract_function(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π –≤–∏–¥–∞ y = f(x)
        function_patterns = [
            r'y\s*=\s*([^,\n]+)',
            r'f\(x\)\s*=\s*([^,\n]+)',
            r'—Ñ—É–Ω–∫—Ü–∏—è\s*:\s*([^,\n]+)',
            r'function\s*:\s*([^,\n]+)'
        ]
        
        for pattern in function_patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return match.group(1).strip()
        
        return None
    
    def _extract_data_points(self, text: str) -> List[Tuple[float, float]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö"""
        points = []
        
        # –ü–æ–∏—Å–∫ —Ç–æ—á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (x, y)
        point_pattern = r'\(([0-9.-]+),\s*([0-9.-]+)\)'
        matches = re.findall(point_pattern, text)
        
        for x_str, y_str in matches:
            try:
                x = float(x_str)
                y = float(y_str)
                points.append((x, y))
            except ValueError:
                continue
        
        return points
    
    def _extract_axes_labels(self, text: str) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–µ–π"""
        labels = {}
        
        # –ü–æ–∏—Å–∫ –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–µ–π
        x_pattern = r'x\s*[=:]\s*([^,\n]+)'
        y_pattern = r'y\s*[=:]\s*([^,\n]+)'
        
        x_match = re.search(x_pattern, text, re.IGNORECASE)
        y_match = re.search(y_pattern, text, re.IGNORECASE)
        
        if x_match:
            labels['x'] = x_match.group(1).strip()
        if y_match:
            labels['y'] = y_match.group(1).strip()
        
        return labels
    
    def _extract_title(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        # –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        lines = text.split('\n')
        if lines:
            first_line = lines[0].strip()
            if len(first_line) > 3 and not re.match(r'^[0-9\s\-=]+$', first_line):
                return first_line
        
        return None
    
    def _extract_mathematical_content(self, text: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
        content = {
            'formulas': [],
            'equations': [],
            'numbers': [],
            'variables': []
        }
        
        # –ü–æ–∏—Å–∫ —Ñ–æ—Ä–º—É–ª
        formula_pattern = r'([A-Za-z]\s*[=]\s*[^,\n]+)'
        formulas = re.findall(formula_pattern, text)
        content['formulas'] = formulas
        
        # –ü–æ–∏—Å–∫ —É—Ä–∞–≤–Ω–µ–Ω–∏–π
        equation_pattern = r'([^,\n]*[=][^,\n]*)'
        equations = re.findall(equation_pattern, text)
        content['equations'] = equations
        
        # –ü–æ–∏—Å–∫ —á–∏—Å–µ–ª
        number_pattern = r'\b\d+(?:\.\d+)?\b'
        numbers = re.findall(number_pattern, text)
        content['numbers'] = [float(n) for n in numbers]
        
        # –ü–æ–∏—Å–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        variable_pattern = r'\b[A-Za-z]\b'
        variables = re.findall(variable_pattern, text)
        content['variables'] = list(set(variables))
        
        return content
    
    def analyze_circuit_diagram(self, image_path: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º—ã —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–ø–∏"""
        try:
            text_result = self.extract_text_from_image(image_path)
            
            if not text_result['success']:
                return text_result
            
            text = text_result['text']
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º—ã
            analysis = {
                'components': self._extract_circuit_components(text),
                'connections': self._extract_circuit_connections(text),
                'values': self._extract_circuit_values(text),
                'circuit_type': self._detect_circuit_type(text)
            }
            
            return {
                'success': True,
                'image_path': image_path,
                'extracted_text': text,
                'analysis': analysis,
                'confidence': text_result['confidence']
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ö–µ–º—ã: {e}")
            return {
                'success': False,
                'error': str(e),
                'image_path': image_path
            }
    
    def _extract_circuit_components(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å—Ö–µ–º—ã"""
        components = []
        
        component_patterns = [
            r'R\d+\s*=\s*([0-9.]+)\s*–û–º',
            r'C\d+\s*=\s*([0-9.]+)\s*–§',
            r'L\d+\s*=\s*([0-9.]+)\s*–ì–Ω',
            r'U\d+\s*=\s*([0-9.]+)\s*–í',
            r'I\d+\s*=\s*([0-9.]+)\s*–ê'
        ]
        
        for pattern in component_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            components.extend(matches)
        
        return components
    
    def _extract_circuit_connections(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å—Ö–µ–º—ã"""
        connections = []
        
        connection_patterns = [
            r'–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ',
            r'–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ',
            r'series',
            r'parallel'
        ]
        
        for pattern in connection_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                connections.append(pattern)
        
        return connections
    
    def _extract_circuit_values(self, text: str) -> Dict[str, float]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ö–µ–º—ã"""
        values = {}
        
        value_patterns = {
            'resistance': r'R\s*=\s*([0-9.]+)\s*–û–º',
            'voltage': r'U\s*=\s*([0-9.]+)\s*–í',
            'current': r'I\s*=\s*([0-9.]+)\s*–ê',
            'power': r'P\s*=\s*([0-9.]+)\s*–í—Ç'
        }
        
        for key, pattern in value_patterns.items():
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                values[key] = float(match.group(1))
        
        return values
    
    def _detect_circuit_type(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å—Ö–µ–º—ã"""
        text_lower = text.lower()
        
        if '–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ' in text_lower or 'series' in text_lower:
            return 'series'
        elif '–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ' in text_lower or 'parallel' in text_lower:
            return 'parallel'
        elif '–º–æ—Å—Ç' in text_lower or 'bridge' in text_lower:
            return 'bridge'
        else:
            return 'unknown'
    
    def get_module_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ"""
        return {
            'name': 'Rubin OCR Module',
            'version': '1.0',
            'ocr_available': self.ocr_available,
            'supported_formats': self.supported_formats,
            'languages': self.languages,
            'features': [
                'text_extraction',
                'graph_analysis',
                'circuit_analysis',
                'mathematical_content_extraction'
            ]
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OCR –º–æ–¥—É–ª—è"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OCR MODULE")
    print("=" * 40)
    
    ocr = RubinOCRModule()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ
    info = ocr.get_module_info()
    print(f"üìä –ú–æ–¥—É–ª—å: {info['name']} v{info['version']}")
    print(f"üîß OCR –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ' if info['ocr_available'] else '‚ùå'}")
    print(f"üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(info['supported_formats'])}")
    print(f"üåê –Ø–∑—ã–∫–∏: {', '.join(info['languages'])}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –¢–ï–ö–°–¢–ê:")
    print("-" * 35)
    
    test_images = [
        "test_graph.png",
        "test_chart.jpg",
        "test_formula.png",
        "test_circuit.bmp"
    ]
    
    for image_path in test_images:
        print(f"\nüì∑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {image_path}")
        result = ocr.extract_text_from_image(image_path)
        
        if result['success']:
            print(f"‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f})")
            print(f"üìù –¢–µ–∫—Å—Ç: {result['text'][:100]}...")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    print("\nüìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ê–õ–ò–ó–ê –ì–†–ê–§–ò–ö–û–í:")
    print("-" * 35)
    
    for image_path in test_images:
        print(f"\nüìà –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞: {image_path}")
        result = ocr.analyze_graph(image_path)
        
        if result['success']:
            analysis = result['analysis']
            print(f"‚úÖ –¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞: {analysis['graph_type']}")
            if analysis['function']:
                print(f"üìê –§—É–Ω–∫—Ü–∏—è: {analysis['function']}")
            if analysis['data_points']:
                print(f"üìç –¢–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {len(analysis['data_points'])}")
            if analysis['title']:
                print(f"üè∑Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫: {analysis['title']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ö–µ–º
    print("\n‚ö° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ê–õ–ò–ó–ê –°–•–ï–ú:")
    print("-" * 30)
    
    circuit_image = "test_circuit.bmp"
    print(f"\nüîå –ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º—ã: {circuit_image}")
    result = ocr.analyze_circuit_diagram(circuit_image)
    
    if result['success']:
        analysis = result['analysis']
        print(f"‚úÖ –¢–∏–ø —Å—Ö–µ–º—ã: {analysis['circuit_type']}")
        print(f"üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {len(analysis['components'])}")
        print(f"üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {len(analysis['connections'])}")
        print(f"üìä –ó–Ω–∞—á–µ–Ω–∏—è: {analysis['values']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    
    print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OCR MODULE –ó–ê–í–ï–†–®–ï–ù–û!")

if __name__ == "__main__":
    main()





