#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
API —Å–µ—Ä–≤–µ—Ä —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —á–∞—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º –∏ —É–ª—É—á—à–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤
"""

from flask import Flask, request, jsonify
import logging
import json
from datetime import datetime
from intelligent_chat_analytics import get_intelligent_chat
from response_analytics import get_quality_controller

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
intelligent_chat = get_intelligent_chat()
quality_controller = get_quality_controller()

@app.route('/api/intelligent/chat', methods=['POST'])
def intelligent_chat_endpoint():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
    try:
        data = request.get_json()
        message = data.get('message', '')
        user_id = data.get('user_id', 'default')
        enable_analytics = data.get('enable_analytics', True)
        
        if not message:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        logger.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {message[:50]}...")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —á–∞—Ç
        result = intelligent_chat.process_question(message, user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            'response': result['response'],
            'user_id': user_id,
            'timestamp': result['timestamp'],
            'analytics': result['analytics'] if enable_analytics else None,
            'metadata': result['metadata']
        }
        
        return jsonify(response_data)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ intelligent chat endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/intelligent/analyze', methods=['POST'])
def analyze_response_endpoint():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞"""
    try:
        data = request.get_json()
        question = data.get('question', '')
        response = data.get('response', '')
        server_type = data.get('server_type', 'general')
        
        if not question or not response:
            return jsonify({'error': '–í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–≤–µ—Ç: {response[:50]}...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        analysis_result = quality_controller.process_response(question, response, server_type)
        
        return jsonify({
            'question': question,
            'original_response': response,
            'analysis': analysis_result['analysis'],
            'correction_applied': analysis_result['correction_applied'],
            'quality_status': analysis_result['quality_status'],
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ analyze endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/intelligent/history', methods=['GET'])
def get_chat_history():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    try:
        user_id = request.args.get('user_id', 'default')
        limit = int(request.args.get('limit', 10))
        
        history = intelligent_chat.get_chat_history(user_id, limit)
        
        return jsonify({
            'user_id': user_id,
            'history': history,
            'count': len(history)
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ history endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/intelligent/analytics', methods=['GET'])
def get_analytics_summary():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        summary = intelligent_chat.get_analytics_summary()
        
        return jsonify({
            'summary': summary,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ analytics endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/intelligent/configure', methods=['POST'])
def configure_settings():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã"""
    try:
        data = request.get_json()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
        auto_improvement = data.get('auto_improvement')
        quality_threshold = data.get('quality_threshold')
        
        if auto_improvement is not None or quality_threshold is not None:
            intelligent_chat.configure_settings(auto_improvement, quality_threshold)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        auto_correction = data.get('auto_correction')
        threshold = data.get('threshold')
        
        if auto_correction is not None or threshold is not None:
            quality_controller.configure_quality_settings(threshold, auto_correction)
        
        return jsonify({
            'status': 'success',
            'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            'settings': {
                'auto_improvement': intelligent_chat.auto_improvement_enabled,
                'quality_threshold': intelligent_chat.quality_threshold,
                'auto_correction': quality_controller.auto_correction_enabled,
                'correction_threshold': quality_controller.quality_threshold
            }
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ configure endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/intelligent/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        chat_working = intelligent_chat is not None
        controller_working = quality_controller is not None
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        analytics_summary = intelligent_chat.get_analytics_summary()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if chat_working and controller_working:
            status = 'healthy'
            message = '–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ'
        else:
            status = 'degraded'
            message = '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
        
        return jsonify({
            'status': status,
            'message': message,
            'components': {
                'intelligent_chat': 'healthy' if chat_working else 'unavailable',
                'quality_controller': 'healthy' if controller_working else 'unavailable'
            },
            'statistics': analytics_summary,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ health check: {e}")
        return jsonify({
            'status': 'unhealthy',
            'error': str(e)
        }), 500

@app.route('/api/intelligent/demo', methods=['GET'])
def demo_intelligent_chat():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞"""
    try:
        demo_questions = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–∫–æ–Ω –û–º–∞?",
            "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x^2 + 5x + 6 = 0",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä?",
            "–ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ Python –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏",
            "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –ü–õ–ö"
        ]
        
        demo_results = []
        
        for question in demo_questions:
            result = intelligent_chat.process_question(question)
            demo_results.append({
                'question': question,
                'quality_score': result['analytics']['quality_score'],
                'quality_status': result['analytics']['quality_status'],
                'correction_applied': result['analytics']['correction_applied'],
                'issues_found': result['analytics']['issues_found'],
                'response_length': result['metadata']['response_length'],
                'preview': result['response'][:200] + "..." if len(result['response']) > 200 else result['response']
            })
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_questions = len(demo_results)
        avg_quality = sum(r['quality_score'] for r in demo_results) / total_questions
        corrections_count = sum(1 for r in demo_results if r['correction_applied'])
        avg_length = sum(r['response_length'] for r in demo_results) / total_questions
        
        return jsonify({
            'demo_results': demo_results,
            'summary': {
                'total_questions': total_questions,
                'average_quality_score': round(avg_quality, 2),
                'corrections_applied': corrections_count,
                'correction_rate': round(corrections_count / total_questions * 100, 1),
                'average_response_length': round(avg_length),
                'quality_distribution': {
                    'excellent': sum(1 for r in demo_results if r['quality_status'] == 'excellent'),
                    'good': sum(1 for r in demo_results if r['quality_status'] == 'good'),
                    'fair': sum(1 for r in demo_results if r['quality_status'] == 'fair'),
                    'poor': sum(1 for r in demo_results if r['quality_status'] == 'poor')
                }
            },
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ demo endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/intelligent/feedback', methods=['POST'])
def submit_feedback():
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–æ–≤"""
    try:
        data = request.get_json()
        question = data.get('question', '')
        response = data.get('response', '')
        feedback_score = data.get('feedback_score', 0)  # 1-5
        feedback_text = data.get('feedback_text', '')
        user_id = data.get('user_id', 'default')
        
        if not question or not response:
            return jsonify({'error': '–í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ - –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
        feedback_entry = {
            'question': question,
            'response': response,
            'feedback_score': feedback_score,
            'feedback_text': feedback_text,
            'user_id': user_id,
            'timestamp': datetime.now().isoformat()
        }
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {feedback_score}/5 –æ—Ç {user_id}")
        
        return jsonify({
            'status': 'success',
            'message': '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏–Ω—è—Ç–∞',
            'feedback_id': f"fb_{int(datetime.now().timestamp())}",
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ feedback endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.errorhandler(404)
def not_found(error):
    return jsonify({'error': 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤")
    print("üì° –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
    print("  POST /api/intelligent/chat - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —á–∞—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π")
    print("  POST /api/intelligent/analyze - –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞")
    print("  GET  /api/intelligent/history - –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞")
    print("  GET  /api/intelligent/analytics - –°–≤–æ–¥–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
    print("  POST /api/intelligent/configure - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print("  GET  /api/intelligent/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    print("  GET  /api/intelligent/demo - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
    print("  POST /api/intelligent/feedback - –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.run(host='0.0.0.0', port=8095, debug=True)





