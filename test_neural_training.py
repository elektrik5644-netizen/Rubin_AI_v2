#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
"""

import unittest
import json
import os
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TestNeuralTraining(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.training_file = "neural_training_data.jsonl"
        self.test_data = [
            {"question": "–ø—Ä–∏–≤–µ—Ç", "correct_category": "–æ–±—â–∏–µ", "user_rating": 5},
            {"question": "2+2", "correct_category": "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "user_rating": 5},
            {"question": "—á—Ç–æ —Ç–∞–∫–æ–µ —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä", "correct_category": "—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞", "user_rating": 5},
            {"question": "–Ω–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É", "correct_category": "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "user_rating": 5}
        ]
    
    def test_training_data_format(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        if not os.path.exists(self.training_file):
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {self.training_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        with open(self.training_file, 'r', encoding='utf-8') as f:
            for line_num, line in enumerate(f, 1):
                line = line.strip()
                if not line:
                    continue
                
                try:
                    data = json.loads(line)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    self.assertIn("question", data, f"–°—Ç—Ä–æ–∫–∞ {line_num}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'question'")
                    self.assertIn("correct_category", data, f"–°—Ç—Ä–æ–∫–∞ {line_num}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'correct_category'")
                    self.assertIn("user_rating", data, f"–°—Ç—Ä–æ–∫–∞ {line_num}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'user_rating'")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                    self.assertIsInstance(data["question"], str, f"–°—Ç—Ä–æ–∫–∞ {line_num}: 'question' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
                    self.assertIsInstance(data["correct_category"], str, f"–°—Ç—Ä–æ–∫–∞ {line_num}: 'correct_category' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
                    self.assertIsInstance(data["user_rating"], int, f"–°—Ç—Ä–æ–∫–∞ {line_num}: 'user_rating' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–π—Ç–∏–Ω–≥–∞
                    self.assertGreaterEqual(data["user_rating"], 1, f"–°—Ç—Ä–æ–∫–∞ {line_num}: —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 1")
                    self.assertLessEqual(data["user_rating"], 5, f"–°—Ç—Ä–æ–∫–∞ {line_num}: —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <= 5")
                    
                except json.JSONDecodeError as e:
                    self.fail(f"–°—Ç—Ä–æ–∫–∞ {line_num}: –æ—à–∏–±–∫–∞ JSON - {e}")
        
        logger.info("‚úÖ –§–æ—Ä–º–∞—Ç –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    
    def test_training_data_content(self):
        """–¢–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        if not os.path.exists(self.training_file):
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {self.training_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        categories = set()
        questions = []
        
        with open(self.training_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                
                data = json.loads(line)
                categories.add(data["correct_category"])
                questions.append(data["question"])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.assertGreaterEqual(len(categories), 3, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
        self.assertGreaterEqual(len(questions), 10, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 10 –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤
        unique_questions = set(questions)
        self.assertEqual(len(unique_questions), len(questions), "–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏")
        
        logger.info(f"‚úÖ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    def test_neural_rubin_import(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
        logger.info("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏...")
        
        try:
            from neural_rubin import get_neural_rubin
            neural_ai = get_neural_rubin()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            self.assertIsNotNone(neural_ai.categories, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")
            self.assertIsNotNone(neural_ai.analytics, "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            logger.info("‚úÖ –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å: {e}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: {e}")
    
    def test_neural_classification(self):
        """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
        logger.info("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏...")
        
        try:
            from neural_rubin import get_neural_rubin
            neural_ai = get_neural_rubin()
            
            test_cases = [
                ("–ø—Ä–∏–≤–µ—Ç", "–æ–±—â–∏–µ"),
                ("2+2", "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"),
                ("—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä", "—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞"),
                ("python", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
            ]
            
            for question, expected_category in test_cases:
                category, confidence = neural_ai.classify_question(question)
                
                self.assertIsInstance(category, str, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è '{question}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
                self.assertIsInstance(confidence, float, f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è '{question}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                self.assertGreaterEqual(confidence, 0.0, f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è '{question}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å >= 0")
                self.assertLessEqual(confidence, 1.0, f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è '{question}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å <= 1")
                
                logger.info(f"  ‚úÖ '{question}' -> {category} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
            
            logger.info("‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        except ImportError:
            logger.warning("‚ö†Ô∏è –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
    
    def test_analytics(self):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        logger.info("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
        
        try:
            from neural_rubin import get_neural_rubin
            neural_ai = get_neural_rubin()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = neural_ai.get_neural_stats()
            
            self.assertIn("device", stats)
            self.assertIn("neural_network_active", stats)
            self.assertIn("categories", stats)
            self.assertIn("analytics", stats)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            analytics = neural_ai.get_analytics()
            self.assertIn("summary", analytics)
            self.assertIn("categories", analytics)
            self.assertIn("performance", analytics)
            
            logger.info("‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        except ImportError:
            logger.warning("‚ö†Ô∏è –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
    
    def test_training_process(self):
        """–¢–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è"""
        logger.info("üìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è...")
        
        try:
            from neural_rubin import get_neural_rubin
            neural_ai = get_neural_rubin()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è
            self.assertTrue(hasattr(neural_ai, 'train_neural_network'), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ—Ç–æ–¥ train_neural_network")
            self.assertTrue(hasattr(neural_ai, 'learn_from_feedback'), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ—Ç–æ–¥ learn_from_feedback")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            result = neural_ai.learn_from_feedback(
                question="—Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å",
                correct_category="—Ç–µ—Å—Ç",
                user_rating=5
            )
            
            self.assertIsInstance(result, bool, "learn_from_feedback –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å bool")
            
            logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        except ImportError:
            logger.warning("‚ö†Ô∏è –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è: {e}")

def run_neural_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
    logger.info("üß† –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏...")
    
    loader = unittest.TestLoader()
    test_suite = loader.loadTestsFromTestCase(TestNeuralTraining)
    
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    return result.wasSuccessful()

if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏")
    print("=" * 50)
    
    success = run_neural_tests()
    
    if success:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    print("=" * 50)
