#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Generative Rubin AI - –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
"""

import json
import logging
import random
import re
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass
from collections import defaultdict
import hashlib

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class ResponseTemplate:
    """–®–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    base_structure: str
    variables: List[str]
    context_adaptations: Dict[str, str]
    personalization_rules: Dict[str, str]
    quality_score: float

@dataclass
class GenerationContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
    user_message: str
    conversation_history: List[Dict[str, Any]]
    user_profile: Dict[str, Any]
    technical_level: str
    conversation_mood: str
    current_topic: str
    keywords: List[str]
    user_intent: str

class GenerativeRubinAI:
    """–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å Rubin AI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    
    def __init__(self):
        self.response_templates = {}
        self.generation_rules = {}
        self.personalization_patterns = {}
        self.context_adaptations = {}
        self.quality_metrics = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._initialize_templates()
        self._initialize_generation_rules()
        self._initialize_personalization()
        self._initialize_context_adaptations()
        
        logger.info("üé® Generative Rubin AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _initialize_templates(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
        self.response_templates = {
            'greeting': ResponseTemplate(
                base_structure="–ü—Ä–∏–≤–µ—Ç! {greeting_style} {context_reference} {offer_help}",
                variables=['greeting_style', 'context_reference', 'offer_help'],
                context_adaptations={
                    'new_user': '–†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!',
                    'returning_user': '–†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å!',
                    'technical_context': '–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.'
                },
                personalization_rules={
                    'formal': '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ',
                    'casual': '–ü—Ä–∏–≤–µ—Ç',
                    'professional': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å'
                },
                quality_score=0.8
            ),
            
            'technical_explanation': ResponseTemplate(
                base_structure="{introduction} {main_explanation} {examples} {practical_tips} {conclusion}",
                variables=['introduction', 'main_explanation', 'examples', 'practical_tips', 'conclusion'],
                context_adaptations={
                    'beginner': '–ù–∞—á–Ω–µ–º —Å –æ—Å–Ω–æ–≤:',
                    'intermediate': '–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ:',
                    'advanced': '–£–≥–ª—É–±–∏–º—Å—è –≤ –¥–µ—Ç–∞–ª–∏:'
                },
                personalization_rules={
                    'detailed': '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏',
                    'concise': '–ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏',
                    'interactive': '–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è'
                },
                quality_score=0.9
            ),
            
            'problem_solving': ResponseTemplate(
                base_structure="{problem_acknowledgment} {analysis} {solution_approach} {step_by_step} {verification}",
                variables=['problem_acknowledgment', 'analysis', 'solution_approach', 'step_by_step', 'verification'],
                context_adaptations={
                    'urgent': '–ü–æ–Ω–∏–º–∞—é —Å—Ä–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.',
                    'complex': '–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∑–∞–¥–∞—á–∞, —Ç—Ä–µ–±—É—é—â–∞—è –∞–Ω–∞–ª–∏–∑–∞.',
                    'simple': '–≠—Ç–æ –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏.'
                },
                personalization_rules={
                    'methodical': '–ü–æ—à–∞–≥–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é',
                    'creative': '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è',
                    'practical': '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'
                },
                quality_score=0.85
            ),
            
            'meta_question': ResponseTemplate(
                base_structure="{self_reflection} {process_explanation} {current_state} {capabilities} {limitations}",
                variables=['self_reflection', 'process_explanation', 'current_state', 'capabilities', 'limitations'],
                context_adaptations={
                    'curious_user': '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –º–æ–µ–º –º—ã—à–ª–µ–Ω–∏–∏!',
                    'technical_user': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞:',
                    'philosophical_user': '–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∞—Å–ø–µ–∫—Ç –ò–ò:'
                },
                personalization_rules={
                    'transparent': '–û—Ç–∫—Ä—ã—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
                    'educational': '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏',
                    'conversational': '–ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ'
                },
                quality_score=0.9
            )
        }
        
        logger.info(f"üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.response_templates)} —à–∞–±–ª–æ–Ω–æ–≤")

    def _initialize_generation_rules(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        self.generation_rules = {
            'greeting_style': {
                'formal': ['–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é'],
                'casual': ['–ü—Ä–∏–≤–µ—Ç', '–•–∞–π', '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫'],
                'professional': ['–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', '–†–∞–¥ –ø–æ–º–æ—á—å', '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ']
            },
            
            'context_reference': {
                'new_conversation': ['', '–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', '–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?'],
                'continuing': ['–ü—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à –¥–∏–∞–ª–æ–≥', '–ö–∞–∫ –¥–µ–ª–∞ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º?', '–ß—Ç–æ –µ—â–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?'],
                'technical': ['–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏', '–ö–∞–∫–∞—è –∑–∞–¥–∞—á–∞ —Å—Ç–æ–∏—Ç?', '–ß—Ç–æ –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å?']
            },
            
            'offer_help': {
                'general': ['–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', '–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', '–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å?'],
                'technical': ['–ö–∞–∫–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞?', '–ß—Ç–æ –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å?', '–ö–∞–∫–æ–π –∫–æ–¥ –Ω—É–∂–µ–Ω?'],
                'specific': ['–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ', '–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ?', '–ö–∞–∫–∞—è —Ü–µ–ª—å?']
            },
            
            'introduction': {
                'beginner': ['–ù–∞—á–Ω–µ–º —Å –æ—Å–Ω–æ–≤', '–î–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –Ω–∞—á–Ω–µ–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ', '–û–±—ä—è—Å–Ω—é –ø–æ—à–∞–≥–æ–≤–æ'],
                'intermediate': ['–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ', '–£–≥–ª—É–±–∏–º—Å—è –≤ –¥–µ—Ç–∞–ª–∏', '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º'],
                'advanced': ['–ü–µ—Ä–µ–π–¥–µ–º –∫ —Å–ª–æ–∂–Ω—ã–º –∞—Å–ø–µ–∫—Ç–∞–º', '–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏', '–£–≥–ª—É–±–∏–º—Å—è –≤ –Ω—é–∞–Ω—Å—ã']
            },
            
            'main_explanation': {
                'conceptual': ['–û—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ', '–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —Å–ª–µ–¥—É—é—â–∏–π:', '–°—É—Ç—å –≤ —Ç–æ–º, —á—Ç–æ'],
                'practical': ['–ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç', '–í —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö', '–ü—Ä–∏–º–µ–Ω—è—è —ç—Ç–æ'],
                'technical': ['–° —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ —ç—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ', '–í –∫–æ–¥–µ —ç—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç']
            }
        }
        
        logger.info(f"üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.generation_rules)} –ø—Ä–∞–≤–∏–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

    def _initialize_personalization(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
        self.personalization_patterns = {
            'communication_style': {
                'formal': {
                    'greeting': '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ',
                    'transition': '–ü–µ—Ä–µ–π–¥–µ–º –∫',
                    'conclusion': '–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç'
                },
                'casual': {
                    'greeting': '–ü—Ä–∏–≤–µ—Ç',
                    'transition': '–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π',
                    'conclusion': '–£–¥–∞—á–∏!'
                },
                'professional': {
                    'greeting': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
                    'transition': '–†–∞—Å—Å–º–æ—Ç—Ä–∏–º',
                    'conclusion': '–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –¥–∞–ª—å—à–µ'
                }
            },
            
            'technical_depth': {
                'beginner': {
                    'explanation_style': '–ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏',
                    'example_complexity': '–±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã',
                    'terminology': '–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è'
                },
                'intermediate': {
                    'explanation_style': '—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏',
                    'example_complexity': '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã',
                    'terminology': '—É–º–µ—Ä–µ–Ω–Ω–∞—è'
                },
                'advanced': {
                    'explanation_style': '—Å –≥–ª—É–±–æ–∫–∏–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏',
                    'example_complexity': '—Å–ª–æ–∂–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã',
                    'terminology': '–ø–æ–ª–Ω–∞—è'
                }
            },
            
            'response_length': {
                'concise': '–∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã',
                'detailed': '–ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è',
                'comprehensive': '–∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã'
            }
        }
        
        logger.info(f"üë§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.personalization_patterns)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏")

    def _initialize_context_adaptations(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –∞–¥–∞–ø—Ç–∞—Ü–∏–π"""
        self.context_adaptations = {
            'conversation_mood': {
                'positive': {
                    'tone': '—ç–Ω—Ç—É–∑–∏–∞–∑–º',
                    'encouragement': '–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º!',
                    'acknowledgment': '–ü–æ–Ω–∏–º–∞—é –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å'
                },
                'negative': {
                    'tone': '–ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                    'encouragement': '–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –≤–º–µ—Å—Ç–µ',
                    'acknowledgment': '–ü–æ–Ω–∏–º–∞—é –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É'
                },
                'neutral': {
                    'tone': '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º',
                    'encouragement': '–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å',
                    'acknowledgment': '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å'
                }
            },
            
            'user_intent': {
                'question': {
                    'response_style': '–æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–π',
                    'structure': '–≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç',
                    'tone': '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π'
                },
                'request': {
                    'response_style': '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π',
                    'structure': '–∑–∞–¥–∞—á–∞-—Ä–µ—à–µ–Ω–∏–µ',
                    'tone': '–ø–æ–º–æ–≥–∞—é—â–∏–π'
                },
                'complaint': {
                    'response_style': '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π',
                    'structure': '–ø—Ä–æ–±–ª–µ–º–∞-—Ä–µ—à–µ–Ω–∏–µ',
                    'tone': '–ø–æ–Ω–∏–º–∞—é—â–∏–π'
                }
            },
            
            'topic_context': {
                'arduino': {
                    'domain_knowledge': '–º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
                    'examples': '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã',
                    'terminology': '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è'
                },
                'python': {
                    'domain_knowledge': '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
                    'examples': '–∫–æ–¥ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã',
                    'terminology': '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—Å–∫–∞—è'
                },
                'mathematics': {
                    'domain_knowledge': '–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏',
                    'examples': '—Ñ–æ—Ä–º—É–ª—ã –∏ —Ä–∞—Å—á–µ—Ç—ã',
                    'terminology': '–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è'
                }
            }
        }
        
        logger.info(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.context_adaptations)} –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –∞–¥–∞–ø—Ç–∞—Ü–∏–π")

    def generate_response(self, user_message: str, context: GenerationContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
            response_type = self._determine_response_type(user_message, context)
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
            template = self.response_templates.get(response_type)
            if not template:
                template = self.response_templates['technical_explanation']  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            variables = self._generate_template_variables(template, context)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω
            response = self._apply_template(template, variables)
            
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            personalized_response = self._personalize_response(response, context)
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            final_response = self._adapt_to_context(personalized_response, context)
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            quality_score = self._evaluate_response_quality(final_response, context)
            
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç (–∫–∞—á–µ—Å—Ç–≤–æ: {quality_score:.2f})")
            return final_response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."

    def _determine_response_type(self, user_message: str, context: GenerationContext) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞"""
        message_lower = user_message.lower()
        
        # –ú–µ—Ç–∞-–≤–æ–ø—Ä–æ—Å—ã
        if any(phrase in message_lower for phrase in ['–∫–∞–∫ —Ç—ã', '—á—Ç–æ —Ç—ã', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–∫–∞–∫ –¥—É–º–∞–µ—à—å']):
            return 'meta_question'
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        if any(phrase in message_lower for phrase in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä—ã–π', 'hi', 'hello']):
            return 'greeting'
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        if any(keyword in context.keywords for keyword in ['arduino', 'python', '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞']):
            return 'technical_explanation'
        
        # –ü—Ä–æ–±–ª–µ–º—ã –∏ –∂–∞–ª–æ–±—ã
        if any(phrase in message_lower for phrase in ['–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–ø–æ–º–æ–≥–∏']):
            return 'problem_solving'
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        return 'technical_explanation'

    def _generate_template_variables(self, template: ResponseTemplate, context: GenerationContext) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–∞"""
        variables = {}
        
        for variable in template.variables:
            if variable == 'greeting_style':
                variables[variable] = self._generate_greeting_style(context)
            elif variable == 'context_reference':
                variables[variable] = self._generate_context_reference(context)
            elif variable == 'offer_help':
                variables[variable] = self._generate_offer_help(context)
            elif variable == 'introduction':
                variables[variable] = self._generate_introduction(context)
            elif variable == 'main_explanation':
                variables[variable] = self._generate_main_explanation(context)
            elif variable == 'examples':
                variables[variable] = self._generate_examples(context)
            elif variable == 'practical_tips':
                variables[variable] = self._generate_practical_tips(context)
            elif variable == 'conclusion':
                variables[variable] = self._generate_conclusion(context)
            elif variable == 'self_reflection':
                variables[variable] = self._generate_self_reflection(context)
            elif variable == 'process_explanation':
                variables[variable] = self._generate_process_explanation(context)
            elif variable == 'current_state':
                variables[variable] = self._generate_current_state(context)
            elif variable == 'capabilities':
                variables[variable] = self._generate_capabilities(context)
            elif variable == 'limitations':
                variables[variable] = self._generate_limitations(context)
            else:
                variables[variable] = self._generate_generic_variable(variable, context)
        
        return variables

    def _generate_greeting_style(self, context: GenerationContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∏–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        style = context.user_profile.get('communication_style', 'professional')
        styles = self.generation_rules['greeting_style'].get(style, self.generation_rules['greeting_style']['professional'])
        return random.choice(styles)

    def _generate_context_reference(self, context: GenerationContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        if len(context.conversation_history) == 0:
            return random.choice(self.generation_rules['context_reference']['new_conversation'])
        elif any(keyword in context.keywords for keyword in ['arduino', 'python', '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞']):
            return random.choice(self.generation_rules['context_reference']['technical'])
        else:
            return random.choice(self.generation_rules['context_reference']['continuing'])

    def _generate_offer_help(self, context: GenerationContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏"""
        if any(keyword in context.keywords for keyword in ['arduino', 'python', '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞']):
            return random.choice(self.generation_rules['offer_help']['technical'])
        elif context.user_intent == 'question':
            return random.choice(self.generation_rules['offer_help']['specific'])
        else:
            return random.choice(self.generation_rules['offer_help']['general'])

    def _generate_introduction(self, context: GenerationContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–∏—è"""
        level = context.technical_level
        introductions = self.generation_rules['introduction'].get(level, self.generation_rules['introduction']['intermediate'])
        return random.choice(introductions)

    def _generate_main_explanation(self, context: GenerationContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è"""
        if context.technical_level == 'beginner':
            style = 'conceptual'
        elif context.technical_level == 'advanced':
            style = 'technical'
        else:
            style = 'practical'
        
        explanations = self.generation_rules['main_explanation'].get(style, self.generation_rules['main_explanation']['practical'])
        return random.choice(explanations)

    def _generate_examples(self, context: GenerationContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤"""
        if 'arduino' in context.keywords:
            return "–ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º –Ω–∞ Arduino –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å digitalWrite(pin, HIGH)."
        elif 'python' in context.keywords:
            return "–ù–∞–ø—Ä–∏–º–µ—Ä, –≤ Python –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ append()."
        elif '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞' in context.keywords:
            return "–ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–∫–æ–Ω –û–º–∞: R = U/I."
        else:
            return "–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è."

    def _generate_practical_tips(self, context: GenerationContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤"""
        tips = [
            "–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã.",
            "–†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤.",
            "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–µ—Ç–∞–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.",
            "–ü—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ–º–æ–∂–µ—Ç –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∑–Ω–∞–Ω–∏—è."
        ]
        return random.choice(tips)

    def _generate_conclusion(self, context: GenerationContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è"""
        conclusions = [
            "–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤ —Ä–µ—à–µ–Ω–∏–∏ –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏.",
            "–ï—Å–ª–∏ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è, —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ.",
            "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.",
            "–£–¥–∞—á–∏ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏!"
        ]
        return random.choice(conclusions)

    def _generate_self_reflection(self, context: GenerationContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        reflections = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –º–æ–µ–º –º—ã—à–ª–µ–Ω–∏–∏!",
            "–ü–æ–Ω–∏–º–∞—é –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º.",
            "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ò–ò.",
            "–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º, –∫–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é."
        ]
        return random.choice(reflections)

    def _generate_process_explanation(self, context: GenerationContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        return f"""–ú–æ–π –ø—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è –≤–∫–ª—é—á–∞–µ—Ç:
1. **–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è** - –ø–æ–Ω–∏–º–∞—é –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
2. **–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤** - {', '.join(context.keywords[:3])}
3. **–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏** - {context.technical_level}
4. **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞** - —Å–æ–∑–¥–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
5. **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è** - –∞–¥–∞–ø—Ç–∏—Ä—É—é –ø–æ–¥ –≤–∞—à —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è"""

    def _generate_current_state(self, context: GenerationContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        return f"""**–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞:**
- –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(context.conversation_history)}
- –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {context.current_topic}
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞: {context.conversation_mood}
- –í–∞—à–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: {context.user_intent}"""

    def _generate_capabilities(self, context: GenerationContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        return """**–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
- –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
- –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥ –≤–∞—à —Å—Ç–∏–ª—å
- –ü–æ–º–æ—â—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö"""

    def _generate_limitations(self, context: GenerationContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        return """**–ú–æ–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
- –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ—Å—Ç—å –∑–Ω–∞–Ω–∏–π –Ω–∞ –º–æ–º–µ–Ω—Ç –æ–±—É—á–µ–Ω–∏—è
- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
- –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏—è –æ—á–µ–Ω—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""

    def _generate_generic_variable(self, variable: str, context: GenerationContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π"""
        return f"[{variable}]"

    def _apply_template(self, template: ResponseTemplate, variables: Dict[str, str]) -> str:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏"""
        response = template.base_structure
        
        for variable, value in variables.items():
            placeholder = f"{{{variable}}}"
            response = response.replace(placeholder, value)
        
        return response

    def _personalize_response(self, response: str, context: GenerationContext) -> str:
        """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        communication_style = context.user_profile.get('communication_style', 'professional')
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
        if communication_style == 'formal':
            response = response.replace('–ü—Ä–∏–≤–µ—Ç', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ')
            response = response.replace('–¥–∞–≤–∞–π', '–¥–∞–≤–∞–π—Ç–µ')
        elif communication_style == 'casual':
            response = response.replace('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–ü—Ä–∏–≤–µ—Ç')
            response = response.replace('–¥–∞–≤–∞–π—Ç–µ', '–¥–∞–≤–∞–π')
        
        return response

    def _adapt_to_context(self, response: str, context: GenerationContext) -> str:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        if context.conversation_mood == 'positive':
            response = f"üòä {response}"
        elif context.conversation_mood == 'negative':
            response = f"ü§ù {response}"
        
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
        if context.technical_level == 'beginner':
            response = f"üî∞ {response}"
        elif context.technical_level == 'advanced':
            response = f"‚ö° {response}"
        
        return response

    def _evaluate_response_quality(self, response: str, context: GenerationContext) -> float:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞"""
        quality_score = 0.0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞
        if 50 <= len(response) <= 500:
            quality_score += 0.2
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if any(keyword in response.lower() for keyword in context.keywords):
            quality_score += 0.3
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        if context.user_profile.get('communication_style') in response:
            quality_score += 0.2
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        if context.conversation_mood in response or context.technical_level in response:
            quality_score += 0.3
        
        return min(quality_score, 1.0)

    def get_generation_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        return {
            'templates_count': len(self.response_templates),
            'generation_rules_count': len(self.generation_rules),
            'personalization_patterns_count': len(self.personalization_patterns),
            'context_adaptations_count': len(self.context_adaptations),
            'average_quality_score': sum(template.quality_score for template in self.response_templates.values()) / len(self.response_templates)
        }

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Generative Rubin AI
generative_rubin = GenerativeRubinAI()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
    print("üé® Generative Rubin AI - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    test_context = GenerationContext(
        user_message="–ö–∞–∫ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è?",
        conversation_history=[],
        user_profile={'communication_style': 'professional', 'technical_level': 'intermediate'},
        technical_level='intermediate',
        conversation_mood='neutral',
        current_topic='meta_question',
        keywords=['–ø–æ–Ω–∏–º–∞–Ω–∏–µ', '—Å–æ–æ–±—â–µ–Ω–∏—è', '–∞–Ω–∞–ª–∏–∑'],
        user_intent='meta_question'
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = generative_rubin.generate_response(test_context.user_message, test_context)
    print(f"\nü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{response}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = generative_rubin.get_generation_stats()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {json.dumps(stats, indent=2, ensure_ascii=False)}")





