#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π Smart Rubin AI
"""

import sqlite3
import os
from datetime import datetime

def check_knowledge_base():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    print("üß† –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô SMART RUBIN AI")
    print("=" * 60)
    
    db_path = "rubin_ai.db"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ë–î
    if os.path.exists(db_path):
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        file_size = os.path.getsize(db_path)
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
    else:
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
        print(f"\nüìã –°–¢–†–£–ö–¢–£–†–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
        print("-" * 40)
        
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        
        if tables:
            for table in tables:
                table_name = table[0]
                print(f"üìÅ –¢–∞–±–ª–∏—Ü–∞: {table_name}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                cursor.execute(f"PRAGMA table_info({table_name});")
                columns = cursor.fetchall()
                
                for col in columns:
                    col_id, col_name, col_type, not_null, default_val, pk = col
                    pk_mark = " (PRIMARY KEY)" if pk else ""
                    not_null_mark = " NOT NULL" if not_null else ""
                    default_mark = f" DEFAULT {default_val}" if default_val else ""
                    print(f"   üìÑ {col_name}: {col_type}{not_null_mark}{default_mark}{pk_mark}")
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                cursor.execute(f"SELECT COUNT(*) FROM {table_name};")
                count = cursor.fetchone()[0]
                print(f"   üìä –ó–∞–ø–∏—Å–µ–π: {count}")
                
                if count > 0:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                    cursor.execute(f"SELECT * FROM {table_name} ORDER BY rowid DESC LIMIT 3;")
                    recent_records = cursor.fetchall()
                    
                    print(f"   üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:")
                    for i, record in enumerate(recent_records, 1):
                        print(f"      {i}. {record}")
                
                print()
        else:
            print("‚ùå –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç–∞–±–ª–∏—Ü—É messages
        print(f"üí¨ –ê–ù–ê–õ–ò–ó –°–û–û–ë–©–ï–ù–ò–ô:")
        print("-" * 40)
        
        try:
            cursor.execute("SELECT COUNT(*) FROM messages;")
            total_messages = cursor.fetchone()[0]
            print(f"üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}")
            
            if total_messages > 0:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                cursor.execute("""
                    SELECT 
                        DATE(timestamp) as date,
                        COUNT(*) as count
                    FROM messages 
                    GROUP BY DATE(timestamp)
                    ORDER BY date DESC
                    LIMIT 7;
                """)
                daily_stats = cursor.fetchall()
                
                print(f"üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):")
                for date, count in daily_stats:
                    print(f"   {date}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                cursor.execute("""
                    SELECT message, response, timestamp 
                    FROM messages 
                    ORDER BY timestamp DESC 
                    LIMIT 5;
                """)
                recent_messages = cursor.fetchall()
                
                print(f"\nüîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π:")
                for i, (message, response, timestamp) in enumerate(recent_messages, 1):
                    print(f"   {i}. [{timestamp}]")
                    print(f"      –í–æ–ø—Ä–æ—Å: {message[:100]}{'...' if len(message) > 100 else ''}")
                    print(f"      –û—Ç–≤–µ—Ç: {response[:100]}{'...' if len(response) > 100 else ''}")
                    print()
            
        except sqlite3.OperationalError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        
        conn.close()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

def check_server_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    print(f"\nüåê –°–¢–ê–¢–£–° –°–ï–†–í–ï–†–ê:")
    print("-" * 40)
    
    import subprocess
    try:
        result = subprocess.run(['netstat', '-ano'], capture_output=True, text=True)
        if ':8083' in result.stdout:
            print("‚úÖ Smart Rubin AI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8083")
            # –ò–∑–≤–ª–µ–∫–∞–µ–º PID
            lines = result.stdout.split('\n')
            for line in lines:
                if ':8083' in line and 'LISTENING' in line:
                    parts = line.split()
                    if len(parts) >= 5:
                        pid = parts[-1]
                        print(f"   PID: {pid}")
        else:
            print("‚ùå Smart Rubin AI —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

if __name__ == "__main__":
    check_knowledge_base()
    check_server_status()
