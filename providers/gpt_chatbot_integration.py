#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ GPT Chatbot Integration –¥–ª—è Rubin AI
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI GPT API –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∞—Ç-–±–æ—Ç–∞
"""

import os
import json
import requests
import openai
from typing import Dict, List, Optional, Tuple
import time

class GPTChatbotProvider:
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GPT API"""
    
    def __init__(self, api_key: str = None, model: str = "gpt-3.5-turbo"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPT –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            api_key: API –∫–ª—é—á OpenAI
            model: –ú–æ–¥–µ–ª—å GPT –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        self.api_key = api_key or os.getenv('OPENAI_API_KEY') or "localai"
        self.model = model
        self.base_url = "http://localhost:11434/v1"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI –∫–ª–∏–µ–Ω—Ç–∞
        self.client = openai.OpenAI(
            base_url=self.base_url,
            api_key=self.api_key,
        )
        
        # –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        self.conversation_history = []
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Rubin AI
        self.system_prompt = """–¢—ã - Rubin AI, –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞.

–¢–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ê–Ω–∞–ª–∏–∑ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —è–∑—ã–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
- –ü–æ–º–æ—â—å —Å PLC –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º
- –†–∞–±–æ—Ç–∞ —Å PMAC —Å–∏—Å—Ç–µ–º–∞–º–∏
- –ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
- –ü–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏–π –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π

–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º
- –ü—Ä–∏–≤–æ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ
- –û–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º

–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."""

    def add_to_history(self, role: str, content: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        self.conversation_history.append({
            "role": role,
            "content": content
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 20 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if len(self.conversation_history) > 20:
            self.conversation_history = self.conversation_history[-20:]

    def get_response(self, message: str, context: str = None) -> Tuple[str, str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç GPT
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            
        Returns:
            Tuple[–æ—Ç–≤–µ—Ç, –∏—Å—Ç–æ—á–Ω–∏–∫]
        """
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.add_to_history("user", message)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            full_message = message
            if context:
                full_message = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n{context}\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message}"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
            messages = [
                {"role": "system", "content": self.system_prompt}
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            messages.extend(self.conversation_history)
            
            # –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–ª–Ω–æ–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            if messages:
                messages[-1]["content"] = full_message
            
            # –í—ã–∑—ã–≤–∞–µ–º GPT API
            response = self.client.chat.completions.create(
                model=self.model,
                messages=messages,
                max_tokens=1000,
                temperature=0.7,
                timeout=30
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
            gpt_response = response.choices[0].message.content.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.add_to_history("assistant", gpt_response)
            
            return gpt_response, "gpt"
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ GPT API: {e}")
            return self.get_fallback_response(message), "fallback"

    def get_fallback_response(self, message: str) -> str:
        """Fallback –æ—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        fallback_responses = {
            "–ø—Ä–∏–≤–µ—Ç": "–ü—Ä–∏–≤–µ—Ç! –Ø Rubin AI. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º!",
            "–ø–æ–º–æ—â—å": "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ–¥–∞, PLC –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.",
            "—Å—Ç–∞—Ç—É—Å": "GPT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—Ç–æ–≤.",
            "—á—Ç–æ —É–º–µ–µ—à—å": "–Ø —É–º–µ—é –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥, —Ä–∞–±–æ—Ç–∞—Ç—å —Å PLC, –ø–æ–º–æ–≥–∞—Ç—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º."
        }
        
        message_lower = message.lower()
        for key, response in fallback_responses.items():
            if key in message_lower:
                return response
        
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, GPT —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

class GPTKnowledgeIntegrator:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –∏ GPT"""
    
    def __init__(self, gpt_provider: GPTChatbotProvider):
        self.gpt_provider = gpt_provider
    
    def search_knowledge_base(self, query: str, documents: List[Dict]) -> str:
        """
        –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            documents: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            
        Returns:
            –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT
        """
        if not documents:
            return ""
        
        query_lower = query.lower()
        relevant_docs = []
        
        # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        for doc in documents:
            content_lower = doc.get('content', '').lower()
            title_lower = doc.get('title', '').lower()
            name_lower = doc.get('name', '').lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
            if (any(word in title_lower for word in query_lower.split() if len(word) > 3) or
                any(word in name_lower for word in query_lower.split() if len(word) > 3) or
                any(word in content_lower for word in query_lower.split() if len(word) > 3)):
                
                relevant_docs.append(doc)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        relevant_docs = relevant_docs[:3]
        
        if not relevant_docs:
            return ""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context_parts = []
        for doc in relevant_docs:
            title = doc.get('title', doc.get('name', '–î–æ–∫—É–º–µ–Ω—Ç'))
            content = doc.get('content', '')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞—Å—Ç–∏
            relevant_content = self.extract_relevant_content(content, query)
            if relevant_content:
                context_parts.append(f"üìÑ {title}:\n{relevant_content}")
        
        return "\n\n".join(context_parts)
    
    def extract_relevant_content(self, content: str, query: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        query_words = [word for word in query.lower().split() if len(word) > 3]
        
        # –ò—â–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        sentences = content.split('.')
        relevant_sentences = []
        
        for sentence in sentences:
            sentence_lower = sentence.lower()
            if any(word in sentence_lower for word in query_words):
                relevant_sentences.append(sentence.strip())
        
        if relevant_sentences:
            result = '. '.join(relevant_sentences[:3])
            if len(result) > 500:
                result = result[:500] + "..."
            return result
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        return content[:300] + "..." if len(content) > 300 else content

class GPTChatbotManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è GPT —á–∞—Ç-–±–æ—Ç–æ–º"""
    
    def __init__(self, api_key: str = None, model: str = "gpt-3.5-turbo"):
        self.gpt_provider = GPTChatbotProvider(api_key, model)
        self.knowledge_integrator = GPTKnowledgeIntegrator(self.gpt_provider)
    
    def process_message(self, message: str, documents: List[Dict] = None) -> Dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            documents: –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
            context = ""
            if documents:
                context = self.knowledge_integrator.search_knowledge_base(message, documents)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT
            response, source = self.gpt_provider.get_response(message, context)
            
            return {
                "response": response,
                "ai_source": source,
                "context_used": bool(context),
                "model": self.gpt_provider.model,
                "timestamp": time.time()
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {
                "response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
                "ai_source": "error",
                "context_used": False,
                "model": "error",
                "timestamp": time.time()
            }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API
def get_gpt_response(message: str, documents: List[Dict] = None, api_key: str = None) -> Dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç GPT –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        documents: –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
        api_key: API –∫–ª—é—á OpenAI
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–æ–º
    """
    manager = GPTChatbotManager(api_key)
    return manager.process_message(message, documents)

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    # –¢–µ—Å—Ç GPT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    test_documents = [
        {
            "title": "Python –æ—Å–Ω–æ–≤—ã",
            "content": "Python - —ç—Ç–æ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –û–Ω –ø—Ä–æ—Å—Ç –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∏ –∏–º–µ–µ—Ç —á–∏—Å—Ç—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.",
            "name": "python_basics.txt"
        },
        {
            "title": "PLC –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "content": "PLC (Programmable Logic Controller) - —ç—Ç–æ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.",
            "name": "plc_guide.txt"
        }
    ]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ API –∫–ª—é—á–∞ (fallback —Ä–µ–∂–∏–º)
    manager = GPTChatbotManager()
    
    test_messages = [
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?",
        "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ Python",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ PLC?",
        "–ü–æ–º–æ–≥–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º"
    ]
    
    for message in test_messages:
        print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}")
        result = manager.process_message(message, test_documents)
        print(f"ü§ñ Rubin AI ({result['ai_source']}): {result['response']}")
        print(f"üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {result['context_used']}")
