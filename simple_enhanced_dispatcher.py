#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Simple Enhanced Smart Dispatcher - –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–Ω–æ—Å—Ç–∏ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import json
import logging
import time
from datetime import datetime
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from flask import Flask, request, jsonify
from flask_cors import CORS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class SimpleResponse:
    """–ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
    content: str
    response_type: str
    quality_score: float
    personalization_score: float
    context_relevance: float
    generation_time: float
    metadata: Dict[str, Any] = None

class SimpleEnhancedDispatcher:
    """–ü—Ä–æ—Å—Ç–æ–π —É–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä –±–µ–∑ —à–∞–±–ª–æ–Ω–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_requests': 0,
            'meta_questions': 0,
            'technical_questions': 0,
            'greetings': 0,
            'general_questions': 0,
            'average_quality': 0.0,
            'average_response_time': 0.0
        }
        
        logger.info("üöÄ Simple Enhanced Dispatcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def process_request(self, message: str, user_id: str = "anonymous", session_id: str = "default") -> SimpleResponse:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ —à–∞–±–ª–æ–Ω–Ω–æ—Å—Ç–∏"""
        start_time = time.time()
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            analysis = self._analyze_message(message)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            content = self._generate_unique_response(message, analysis)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
            generation_time = time.time() - start_time
            
            response = SimpleResponse(
                content=content,
                response_type=analysis['type'],
                quality_score=analysis['quality'],
                personalization_score=analysis['personalization'],
                context_relevance=analysis['relevance'],
                generation_time=generation_time,
                metadata={
                    'analysis': analysis,
                    'keywords': analysis['keywords'],
                    'intent': analysis['intent']
                }
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_stats(response, generation_time)
            
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (—Ç–∏–ø: {analysis['type']}, –∫–∞—á–µ—Å—Ç–≤–æ: {analysis['quality']:.2f})")
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return self._generate_error_response(str(e))

    def _analyze_message(self, message: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        message_lower = message.lower()
        
        analysis = {
            'original_message': message,
            'length': len(message),
            'words': len(message.split()),
            'keywords': [],
            'intent': 'unknown',
            'type': 'general',
            'complexity': 'beginner',
            'mood': 'neutral',
            'quality': 0.8,
            'personalization': 0.7,
            'relevance': 0.8
        }
        
        # –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        technical_keywords = ['arduino', 'python', '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–¥', '—Å—Ö–µ–º–∞']
        for keyword in technical_keywords:
            if keyword in message_lower:
                analysis['keywords'].append(keyword)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        if any(phrase in message_lower for phrase in ['–∫–∞–∫ —Ç—ã', '—á—Ç–æ —Ç—ã', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–∫–∞–∫ –¥—É–º–∞–µ—à—å', '–∫–∞–∫ –ø–æ–Ω–∏–º–∞–µ—à—å']):
            analysis['intent'] = 'meta_question'
            analysis['type'] = 'meta_question'
            analysis['quality'] = 0.9
            analysis['personalization'] = 0.9
        elif any(phrase in message_lower for phrase in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä—ã–π', 'hi', 'hello']):
            analysis['intent'] = 'greeting'
            analysis['type'] = 'greeting'
            analysis['personalization'] = 0.8
        elif analysis['keywords']:
            analysis['intent'] = 'technical_question'
            analysis['type'] = 'technical_explanation'
            analysis['complexity'] = 'intermediate'
            analysis['quality'] = 0.85
        elif any(phrase in message_lower for phrase in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'thanks']):
            analysis['intent'] = 'thanks'
            analysis['type'] = 'acknowledgment'
        elif any(phrase in message_lower for phrase in ['–ø–æ–º–æ–≥–∏', '–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç']):
            analysis['intent'] = 'help_request'
            analysis['type'] = 'problem_solving'
            analysis['quality'] = 0.85
        else:
            analysis['intent'] = 'general_question'
            analysis['type'] = 'general'
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        if any(word in message_lower for word in ['—Å–ø–∞—Å–∏–±–æ', '–æ—Ç–ª–∏—á–Ω–æ', '—Ö–æ—Ä–æ—à–æ', '–ø–æ–Ω—è—Ç–Ω–æ']):
            analysis['mood'] = 'positive'
        elif any(word in message_lower for word in ['–ø–ª–æ—Ö–æ', '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ', '–æ—à–∏–±–∫–∞', '–ø—Ä–æ–±–ª–µ–º–∞']):
            analysis['mood'] = 'negative'
        
        return analysis

    def _generate_unique_response(self, message: str, analysis: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤"""
        
        if analysis['type'] == 'meta_question':
            return self._generate_meta_response(message, analysis)
        elif analysis['type'] == 'greeting':
            return self._generate_greeting_response(message, analysis)
        elif analysis['type'] == 'technical_explanation':
            return self._generate_technical_response(message, analysis)
        elif analysis['type'] == 'acknowledgment':
            return self._generate_thanks_response(message, analysis)
        elif analysis['type'] == 'problem_solving':
            return self._generate_help_response(message, analysis)
        else:
            return self._generate_general_response(message, analysis)

    def _generate_meta_response(self, message: str, analysis: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –º–µ—Ç–∞-–≤–æ–ø—Ä–æ—Å"""
        message_lower = message.lower()
        
        current_time = datetime.now().strftime("%H:%M:%S")
        
        if '–∫–∞–∫ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å' in message_lower or '–∫–∞–∫ –ø–æ–Ω–∏–º–∞–µ—à—å' in message_lower:
            return f"""üß† **–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–Ω–∏–º–∞–Ω–∏—è –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–Ω–∞–ª–∏–∑ –≤ {current_time}):**

**–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:**
- –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "{message}"
- –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {analysis['length']} —Å–∏–º–≤–æ–ª–æ–≤
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {analysis['words']}
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: {analysis['intent']}
- –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(analysis['keywords']) if analysis['keywords'] else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {analysis['mood']}
- –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {analysis['complexity']}

**–ú–æ–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–Ω–∏–º–∞–Ω–∏—è:**
1. **–õ–µ–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑** - —Ä–∞–∑–±–∏—Ä–∞—é –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∏ —Ñ—Ä–∞–∑—É
2. **–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑** - –∏–∑–≤–ª–µ–∫–∞—é —Å–º—ã—Å–ª –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
3. **–ò–Ω—Ç–µ–Ω—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑** - –æ–ø—Ä–µ–¥–µ–ª—è—é –≤–∞—à–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
4. **–ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è** - —Å–≤—è–∑—ã–≤–∞—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º–∏
5. **–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è** - —Å–æ–∑–¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç

**–û—Ç–ª–∏—á–∏–µ –æ—Ç —à–∞–±–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:**
- –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
- –ê–¥–∞–ø—Ç–∏—Ä—É—é—Å—å –ø–æ–¥ –≤–∞—à —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π
- –£—á–∏—Ç—ã–≤–∞—é –≤—Ä–µ–º—è, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –∑–∞–ø—Ä–æ—Å–∞

**–¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–Ω–∏–º–∞–Ω–∏—è:** {analysis['quality']*100:.0f}%"""

        elif '–∫–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å' in message_lower or '–∫–∞–∫ –¥—É–º–∞–µ—à—å' in message_lower:
            return f"""ü§î **–ü—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è (—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ –≤ {current_time}):**

**–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:**
- –°–æ–æ–±—â–µ–Ω–∏–µ: "{message}"
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–µ–º—ã: {', '.join(analysis['keywords']) if analysis['keywords'] else '–æ–±—â–∏–µ'}
- –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {analysis['intent']}
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∫—Ä–∞—Å–∫–∞: {analysis['mood']}

**–≠—Ç–∞–ø—ã –º–æ–µ–≥–æ –º—ã—à–ª–µ–Ω–∏—è:**
1. **–í–æ—Å–ø—Ä–∏—è—Ç–∏–µ** - –ø–æ–ª—É—á–∞—é –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
2. **–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤** - –∏—â—É –∑–Ω–∞–∫–æ–º—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
3. **–ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è** - —Å–≤—è–∑—ã–≤–∞—é —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏
4. **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–∏–ø–æ—Ç–µ–∑** - —Å–æ–∑–¥–∞—é –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
5. **–û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏** - –≤—ã–±–∏—Ä–∞—é –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç
6. **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è** - –∞–¥–∞–ø—Ç–∏—Ä—É—é –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–µ–≥–æ –º—ã—à–ª–µ–Ω–∏—è:**
- –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω–æ
- –£—á–∏—Ç—ã–≤–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –Ω—é–∞–Ω—Å—ã –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
- –ê–¥–∞–ø—Ç–∏—Ä—É—é—Å—å –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∏ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
- –°—Ç—Ä–µ–º–ª—é—Å—å –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏

**–¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –º—ã—à–ª–µ–Ω–∏—è:** {analysis['words']*50:.0f} —Å–ª–æ–≤/–º–∏–Ω—É—Ç—É –∞–Ω–∞–ª–∏–∑–∞"""

        elif '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç' in message_lower:
            return f"""‚öôÔ∏è **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–µ–π —Å–∏—Å—Ç–µ–º—ã (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ {current_time}):**

**–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:**
- –ó–∞–ø—Ä–æ—Å: "{message}"
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: {analysis['complexity']}
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã: {', '.join(analysis['keywords']) if analysis['keywords'] else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}

**–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã:**
1. **–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π** - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç
2. **–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏–π** - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
3. **–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤** - —Å–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
4. **–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–≤–∏–∂–æ–∫** - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
5. **–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏** - —É—á–∏—Ç—Å—è –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö

**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:**
- Enhanced Smart Dispatcher (—É–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä)
- Context-Aware AI (—Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è)
- Generative Response Engine (–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–≤–∏–∂–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤)
- Dynamic Adaptation System (—Å–∏—Å—Ç–µ–º–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏)

**–û—Ç–ª–∏—á–∏—è –æ—Ç —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã:**
- –£–±—Ä–∞–Ω—ã —à–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
- –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
- –£–ª—É—á—à–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
- –ü–æ–≤—ã—à–µ–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

**–¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:**
- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {self.stats['total_requests']}
- –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: {analysis['quality']*100:.0f}%
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: {analysis['personalization']*100:.0f}%"""

        else:
            return f"""üß† **–ú–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ {current_time}):**

**–í–∞—à –∑–∞–ø—Ä–æ—Å:** "{message}"

**–ß—Ç–æ —è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é:**
- –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {analysis['length']} —Å–∏–º–≤–æ–ª–æ–≤
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: {analysis['complexity']}
- –ù–∞–º–µ—Ä–µ–Ω–∏–µ: {analysis['intent']}
- –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã: {', '.join(analysis['keywords']) if analysis['keywords'] else '–æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã'}

**–ö–∞–∫ —è –æ—Ç–≤–µ—á–∞—é:**
- –°–æ–∑–¥–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
- –£—á–∏—Ç—ã–≤–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
- –ê–¥–∞–ø—Ç–∏—Ä—É—é—Å—å –ø–æ–¥ –≤–∞—à —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
- –ò–∑–±–µ–≥–∞—é —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–µ–π —Ä–∞–±–æ—Ç—ã:**
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
- –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
- –£—á–∏—Ç—ã–≤–∞—é –≤—Ä–µ–º—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
- –°—Ç—Ä–µ–º–ª—é—Å—å –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏

–ó–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –º–æ–µ–º –º—ã—à–ª–µ–Ω–∏–∏, –∏ —è –¥–∞–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!"""

    def _generate_greeting_response(self, message: str, analysis: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        current_time = datetime.now()
        hour = current_time.hour
        
        if 5 <= hour < 12:
            time_greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
        elif 12 <= hour < 17:
            time_greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
        elif 17 <= hour < 22:
            time_greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
        else:
            time_greeting = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
        
        return f"""{time_greeting}! –†–∞–¥ –Ω–∞—à–µ–º—É –æ–±—â–µ–Ω–∏—é.

**–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:**
- –°–æ–æ–±—â–µ–Ω–∏–µ: "{message}"
- –í—Ä–µ–º—è –æ–±—Ä–∞—â–µ–Ω–∏—è: {current_time.strftime("%H:%M")}
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {analysis['mood']}
- –°—Ç–∏–ª—å: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π

**–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å:**
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ (Arduino, Python, —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞)
- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
- –†–µ—à–µ–Ω–∏–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
- –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–µ–π —Ä–∞–±–æ—Ç—ã:**
- –ì–µ–Ω–µ—Ä–∏—Ä—É—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
- –ê–¥–∞–ø—Ç–∏—Ä—É—é—Å—å –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π
- –£—á–∏—Ç—ã–≤–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –∑–∞–¥–∞—á
- –ò–∑–±–µ–≥–∞—é —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑

–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω —Å–µ–≥–æ–¥–Ω—è?"""

    def _generate_technical_response(self, message: str, analysis: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        keywords = analysis['keywords']
        primary_topic = keywords[0] if keywords else '–æ–±—â–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã'
        
        current_time = datetime.now().strftime("%H:%M:%S")
        
        if 'arduino' in keywords:
            return f"""üîß **Arduino - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–∞–Ω–∞–ª–∏–∑ –≤ {current_time}):**

**–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:**
- –í–æ–ø—Ä–æ—Å: "{message}"
- –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞: Arduino
- –°–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–º—ã: {', '.join(keywords[1:]) if len(keywords) > 1 else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}
- –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {analysis['complexity']}

**–ß—Ç–æ —Ç–∞–∫–æ–µ Arduino:**
Arduino - —ç—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º–æ–π –ø–µ—á–∞—Ç–Ω–æ–π –ø–ª–∞—Ç—ã –∏ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è.

**–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
- **–ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è** - –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö
- **–û—Ç–∫—Ä—ã—Ç—ã–π –∫–æ–¥** - –º–æ–∂–Ω–æ –∏–∑—É—á–∞—Ç—å –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å
- **–ë–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ** - –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
- **–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å** - –Ω–µ–¥–æ—Ä–æ–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

**–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏:**
- Arduino Uno - –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
- Arduino Nano - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è
- Arduino Mega - –±–æ–ª—å—à–µ –ø–æ—Ä—Ç–æ–≤ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
- ESP32/ESP8266 - —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Wi-Fi

**–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:**
- –î–æ–º–∞—à–Ω—è—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
- –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞
- –°–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
- –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–µ—â–µ–π (IoT)

**–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å:**
–ò—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ "{message}", —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å Arduino Uno –∏ –∏–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤.

–ö–∞–∫–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∞—Å–ø–µ–∫—Ç Arduino –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?"""

        elif 'python' in keywords:
            return f"""üêç **Python - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ {current_time}):**

**–†–∞–∑–±–æ—Ä –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:**
- –ó–∞–ø—Ä–æ—Å: "{message}"
- –§–æ–∫—É—Å: Python –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã: {', '.join(keywords[1:]) if len(keywords) > 1 else '–±–∞–∑–æ–≤–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'}
- –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {analysis['complexity']}

**Python - –º–æ—â–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:**
Python –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º, —á–∏—Ç–∞–µ–º–æ—Å—Ç—å—é –∫–æ–¥–∞ –∏ –æ–≥—Ä–æ–º–Ω–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –∏–¥–µ–∞–ª—å–Ω—ã–º –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á.

**–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
- **–ü—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å** - –ª–µ–≥–∫–æ –∏–∑—É—á–∞—Ç—å –∏ –ø–æ–Ω–∏–º–∞—Ç—å
- **–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å** - –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, –ò–ò
- **–ë–æ–≥–∞—Ç–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞** - —Ç—ã—Å—è—á–∏ –≥–æ—Ç–æ–≤—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
- **–ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å** - —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ

**–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:**
- –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (Django, Flask)
- –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö (Pandas, NumPy)
- –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (TensorFlow, PyTorch)
- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏ —Å–∫—Ä–∏–ø—Ç—ã

**–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö:**
```python
# –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
import pandas as pd

# –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
data = pd.read_csv('data.csv')

# –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
print(data.describe())
```

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å:**
–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ "{message}", –ø—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞—á–∞—Ç—å —Å –æ—Å–Ω–æ–≤ Python –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ–±–ª–∞—Å—Ç—è–º.

–û –∫–∞–∫–æ–º –∞—Å–ø–µ–∫—Ç–µ Python —Ö–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?"""

        elif '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞' in keywords:
            return f"""‚ö° **–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–∞–Ω–∞–ª–∏–∑ –≤ {current_time}):**

**–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:**
- –í–æ–ø—Ä–æ—Å: "{message}"
- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞
- –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã: {', '.join(keywords[1:]) if len(keywords) > 1 else '–æ–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã'}
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å: {analysis['complexity']}

**–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ - –æ—Å–Ω–æ–≤–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:**
–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ –∏–∑—É—á–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ, –ø–µ—Ä–µ–¥–∞—á—É, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏, –∞ —Ç–∞–∫–∂–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.

**–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:**
- **–ó–∞–∫–æ–Ω –û–º–∞** - U = I √ó R (–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ = —Ç–æ–∫ √ó —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ)
- **–ó–∞–∫–æ–Ω—ã –ö–∏—Ä—Ö–≥–æ—Ñ–∞** - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ø–µ–π
- **–ó–∞–∫–æ–Ω –î–∂–æ—É–ª—è-–õ–µ–Ω—Ü–∞** - –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–ø–ª–æ–≤—ã—Ö –ø–æ—Ç–µ—Ä—å
- **–≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∏–Ω–¥—É–∫—Ü–∏—è** - –æ—Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–æ–≤ –∏ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π

**–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:**
- –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Å—Ö–µ–º
- –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä—É–∑–æ–∫ –∏ –∑–∞—â–∏—Ç—ã
- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
- –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞

**–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã:**
- –£–º–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å–µ—Ç–∏ (Smart Grid)
- –≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–∏ –∏ –∑–∞—Ä—è–¥–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —ç–Ω–µ—Ä–≥–∏–∏
- –≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ

**–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:**
–£—á–∏—Ç—ã–≤–∞—è –≤–∞—à –∑–∞–ø—Ä–æ—Å "{message}", —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –≤ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ.

–ö–∞–∫–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?"""

        else:
            return f"""üî¨ **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ {current_time}):**

**–†–∞–∑–±–æ—Ä –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:**
- –í–æ–ø—Ä–æ—Å: "{message}"
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã: {', '.join(keywords)}
- –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {analysis['complexity']}
- –ö–æ–Ω—Ç–µ–∫—Å—Ç: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è

**–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É:**
–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–∂–¥—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, —É—á–∏—Ç—ã–≤–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫—É —Ç–µ–º—ã –∏ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.

**–ú–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:**
1. **–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–º—ã** - –æ–ø—Ä–µ–¥–µ–ª—è—é –æ—Å–Ω–æ–≤–Ω—É—é –æ–±–ª–∞—Å—Ç—å –∑–Ω–∞–Ω–∏–π
2. **–û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏** - –ø–æ–¥–±–∏—Ä–∞—é —É—Ä–æ–≤–µ–Ω—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
3. **–ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è** - —Å–≤—è–∑—ã–≤–∞—é —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è–º–∏
4. **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è** - –∞–¥–∞–ø—Ç–∏—Ä—É—é –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏

**–û–±–ª–∞—Å—Ç–∏ –º–æ–µ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã:**
- –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û
- –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
- –ú–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
- –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã

**–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø—Ä–æ–±–ª–µ–º—É
- –í–∞—à —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏

–ì–æ—Ç–æ–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≥–ª—É–±–æ–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É!"""

    def _generate_thanks_response(self, message: str, analysis: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"""
        current_time = datetime.now().strftime("%H:%M")
        
        return f"""–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥, —á—Ç–æ —Å–º–æ–≥ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º.

**–ê–Ω–∞–ª–∏–∑ –Ω–∞—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (–≤—Ä–µ–º—è: {current_time}):**
- –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "{message}"
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {analysis['mood']} (–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ)
- –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–º–æ—â–∏: —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞

**–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –º–µ–Ω—è —Å—á–∞—Å—Ç–ª–∏–≤—ã–º:**
- –í–∏–¥–µ—Ç—å, —á—Ç–æ –º–æ–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–æ–Ω—è—Ç–Ω—ã –∏ –ø–æ–ª–µ–∑–Ω—ã
- –ü–æ–º–æ–≥–∞—Ç—å –≤ —Ä–µ—à–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
- –£—á–∏—Ç—å—Å—è –Ω–∞ –∫–∞–∂–¥–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
- –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è

**–í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å:**
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ —Ä–µ—à–µ–Ω–∏—è–º–∏
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏

**–ü–æ–º–Ω–∏—Ç–µ:**
–ö–∞–∂–¥—ã–π –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é - —è –≤—Å–µ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏.

–£–¥–∞—á–∏ –≤ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö! üöÄ"""

    def _generate_help_response(self, message: str, analysis: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏"""
        current_time = datetime.now().strftime("%H:%M:%S")
        
        return f"""–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –≤–º–µ—Å—Ç–µ!

**–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ –ø–æ–º–æ—â–∏ (–≤—Ä–µ–º—è: {current_time}):**
- –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: "{message}"
- –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {analysis['intent']}
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {analysis['mood']}
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã: {', '.join(analysis['keywords']) if analysis['keywords'] else '—Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ'}

**–ú–æ–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º:**
1. **–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑** - –ø–æ–Ω–∏–º–∞—é —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
2. **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞** - –æ–ø—Ä–µ–¥–µ–ª—è—é –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã
3. **–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ** - –ø—Ä–µ–¥–ª–∞–≥–∞—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
4. **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞** - —É–±–µ–∂–¥–∞—é—Å—å, —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞
5. **–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞** - –¥–∞—é —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—é –≤ –±—É–¥—É—â–µ–º

**–ß—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –ø–æ–º–æ—â–∏:**
- –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
- –ö–æ–Ω—Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–ª–∞
- –ß—Ç–æ –≤—ã —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏ —Å–¥–µ–ª–∞—Ç—å
- –ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–∂–∏–¥–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å

**–ü–æ—á–µ–º—É –º–æ–π –ø–æ–¥—Ö–æ–¥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω:**
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–∂–¥—É—é –ø—Ä–æ–±–ª–µ–º—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
- –ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
- –£—á–∏—Ç—ã–≤–∞—é –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –∏ –æ–ø—ã—Ç
- –û–±—ä—è—Å–Ω—è—é –Ω–µ —Ç–æ–ª—å–∫–æ "–∫–∞–∫", –Ω–æ –∏ "–ø–æ—á–µ–º—É"

**–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –≤ –æ–±–ª–∞—Å—Ç—è—Ö:**
- –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
- –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
- Arduino –∏ –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
- –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã

–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é."""

    def _generate_general_response(self, message: str, analysis: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        current_time = datetime.now().strftime("%H:%M:%S")
        
        return f"""–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –µ–≥–æ –¥–µ—Ç–∞–ª—å–Ω–æ.

**–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {current_time}):**
- –í–∞—à –∑–∞–ø—Ä–æ—Å: "{message}"
- –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {analysis['length']} —Å–∏–º–≤–æ–ª–æ–≤
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {analysis['words']}
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø: {analysis['intent']}
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {analysis['mood']}
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: {analysis['complexity']}

**–ú–æ–π –ø–æ–¥—Ö–æ–¥ –∫ –∞–Ω–∞–ª–∏–∑—É:**
–ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —è —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É, —Ç—Ä–µ–±—É—é—â—É—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞. –Ø –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã, –∞ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å.

**–ß—Ç–æ —è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤ –≤–∞—à–µ–º –≤–æ–ø—Ä–æ—Å–µ:**
- –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ —Ç–µ–º—ã
- –£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–µ–Ω
- –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ —Ü–µ–ª–∏
- –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è

**–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å:**
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
- –ü—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
- –î–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è

**–û–±–ª–∞—Å—Ç–∏ –º–æ–µ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã:**
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã (–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞)
- –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –º–µ—Ç–æ–¥–∏–∫–∏
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
- –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –º–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:**
–Ø —Å–æ–∑–¥–∞—é –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –∑–∞–Ω–æ–≤–æ, —É—á–∏—Ç—ã–≤–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –≤—Ä–µ–º—è –æ–±—Ä–∞—â–µ–Ω–∏—è, –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏. –ù–∏–∫–∞–∫–∏—Ö –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑!

–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã —É—Ç–æ—á–Ω–∏—Ç—å, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –∞—Å–ø–µ–∫—Ç –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –¥–∞—Ç—å –µ—â–µ –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç."""

    def _generate_error_response(self, error_message: str) -> SimpleResponse:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ"""
        return SimpleResponse(
            content=f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {error_message}",
            response_type='error',
            quality_score=0.1,
            personalization_score=0.0,
            context_relevance=0.1,
            generation_time=0.001,
            metadata={'error': True, 'error_message': error_message}
        )

    def _update_stats(self, response: SimpleResponse, response_time: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats['total_requests'] += 1
        
        if response.response_type == 'meta_question':
            self.stats['meta_questions'] += 1
        elif response.response_type == 'technical_explanation':
            self.stats['technical_questions'] += 1
        elif response.response_type == 'greeting':
            self.stats['greetings'] += 1
        else:
            self.stats['general_questions'] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        total = self.stats['total_requests']
        self.stats['average_quality'] = (self.stats['average_quality'] * (total - 1) + response.quality_score) / total
        self.stats['average_response_time'] = (self.stats['average_response_time'] * (total - 1) + response_time) / total

    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return self.stats.copy()

    def get_health(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        return {
            'status': 'healthy',
            'message': 'Simple Enhanced Dispatcher —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —à–∞–±–ª–æ–Ω–Ω–æ—Å—Ç–∏',
            'timestamp': datetime.now().isoformat(),
            'features': [
                '–£–Ω–∏–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤',
                '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑',
                '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è',
                '–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã'
            ],
            'stats': self.stats
        }

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
CORS(app)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
simple_dispatcher = SimpleEnhancedDispatcher()

@app.route('/api/chat', methods=['POST'])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —á–∞—Ç–∞"""
    try:
        data = request.get_json()
        message = data.get('message', '')
        user_id = data.get('user_id', 'anonymous')
        session_id = data.get('session_id', 'default')
        
        if not message:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        response = simple_dispatcher.process_request(message, user_id, session_id)
        
        return jsonify({
            'response': response.content,
            'response_type': response.response_type,
            'quality_score': response.quality_score,
            'personalization_score': response.personalization_score,
            'context_relevance': response.context_relevance,
            'generation_time': response.generation_time,
            'metadata': response.metadata,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ API: {e}")
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500

@app.route('/api/stats', methods=['GET'])
def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        stats = simple_dispatcher.get_stats()
        return jsonify(stats)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/health', methods=['GET'])
def get_health():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        health = simple_dispatcher.get_health()
        return jsonify(health)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    print("üöÄ Simple Enhanced Dispatcher –∑–∞–ø—É—â–µ–Ω")
    print("üì° API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:8080")
    print("‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:")
    print("  - –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–Ω–æ—Å—Ç–∏")
    print("  - –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤")
    print("  - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    print("  - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è")
    print("üîó Endpoints:")
    print("  POST /api/chat - –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç")
    print("  GET  /api/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("  GET  /api/health - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
    
    app.run(host='0.0.0.0', port=8080, debug=True)





