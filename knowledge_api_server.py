#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ë–∞–∑—ã –ó–Ω–∞–Ω–∏–π Rubin AI
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç REST API
"""

from flask import Flask, request, jsonify
import logging
import json
from datetime import datetime
from intelligent_knowledge_chat import get_rubin_chat
from central_knowledge_base import get_knowledge_base

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
chat_system = get_rubin_chat()
knowledge_base = get_knowledge_base()

@app.route('/api/knowledge/chat', methods=['POST'])
def chat_with_knowledge():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —á–∞—Ç–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∑–Ω–∞–Ω–∏–π"""
    try:
        data = request.get_json()
        message = data.get('message', '')
        user_id = data.get('user_id', 'default')
        
        if not message:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        logger.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {message[:50]}...")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = chat_system.process_message(message, user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        active_suggestions = chat_system.knowledge_manager.get_active_suggestions(user_id)
        
        return jsonify({
            'response': response,
            'user_id': user_id,
            'timestamp': datetime.now().isoformat(),
            'active_suggestions': len(active_suggestions),
            'suggestions': active_suggestions
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ chat endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/knowledge/search', methods=['GET'])
def search_knowledge():
    """–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
    try:
        query = request.args.get('q', '')
        category = request.args.get('category', None)
        limit = int(request.args.get('limit', 10))
        
        if not query:
            return jsonify({'error': '–ü–∞—Ä–∞–º–µ—Ç—Ä q (–∑–∞–ø—Ä–æ—Å) –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
        
        logger.info(f"üîç –ü–æ–∏—Å–∫ –∑–Ω–∞–Ω–∏–π: {query}")
        
        results = knowledge_base.search_knowledge(query, category, limit)
        
        return jsonify({
            'query': query,
            'category': category,
            'results': results,
            'count': len(results)
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ search endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/knowledge/suggestions', methods=['GET'])
def get_suggestions():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    try:
        user_id = request.args.get('user_id', 'default')
        
        suggestions = knowledge_base.get_pending_suggestions()
        active_suggestions = chat_system.knowledge_manager.get_active_suggestions(user_id)
        
        return jsonify({
            'pending_suggestions': suggestions,
            'active_suggestions': active_suggestions,
            'count': len(suggestions)
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ suggestions endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/knowledge/approve', methods=['POST'])
def approve_suggestion():
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    try:
        data = request.get_json()
        suggestion_id = data.get('suggestion_id')
        user_id = data.get('user_id', 'default')
        feedback = data.get('feedback', '')
        
        if not suggestion_id:
            return jsonify({'error': 'suggestion_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
        
        logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {suggestion_id} –æ—Ç {user_id}")
        
        result = chat_system.knowledge_manager.handle_user_feedback(
            f"approve {suggestion_id}", user_id
        )
        
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ approve endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/knowledge/reject', methods=['POST'])
def reject_suggestion():
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    try:
        data = request.get_json()
        suggestion_id = data.get('suggestion_id')
        user_id = data.get('user_id', 'default')
        feedback = data.get('feedback', '')
        
        if not suggestion_id:
            return jsonify({'error': 'suggestion_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
        
        logger.info(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {suggestion_id} –æ—Ç {user_id}")
        
        result = chat_system.knowledge_manager.handle_user_feedback(
            f"reject {suggestion_id}", user_id
        )
        
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ reject endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/knowledge/add', methods=['POST'])
def add_knowledge():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞–Ω–∏—è"""
    try:
        data = request.get_json()
        
        required_fields = ['category', 'title', 'content']
        for field in required_fields:
            if field not in data:
                return jsonify({'error': f'–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'}), 400
        
        logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏—è: {data['title']}")
        
        success = knowledge_base.add_knowledge(
            category=data['category'],
            title=data['title'],
            content=data['content'],
            keywords=data.get('keywords', ''),
            formulas=data.get('formulas', ''),
            examples=data.get('examples', ''),
            confidence=data.get('confidence', 1.0),
            source=data.get('source', 'manual')
        )
        
        if success:
            return jsonify({
                'status': 'success',
                'message': f'–ó–Ω–∞–Ω–∏–µ "{data["title"]}" –¥–æ–±–∞–≤–ª–µ–Ω–æ'
            })
        else:
            return jsonify({
                'status': 'error',
                'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞–Ω–∏–µ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)'
            }), 400
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ add endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/knowledge/stats', methods=['GET'])
def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    try:
        stats = knowledge_base.get_knowledge_stats()
        
        return jsonify({
            'stats': stats,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ stats endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/health', methods=['GET'])
@app.route('/api/knowledge/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        stats = knowledge_base.get_knowledge_stats()
        
        return jsonify({
            'status': 'healthy',
            'total_facts': stats['total_facts'],
            'pending_suggestions': stats['pending_suggestions'],
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ health check: {e}")
        return jsonify({
            'status': 'unhealthy',
            'error': str(e)
        }), 500

@app.route('/api/knowledge/configure', methods=['POST'])
def configure_preferences():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = request.get_json()
        user_id = data.get('user_id', 'default')
        preferences = data.get('preferences', {})
        
        chat_system.knowledge_manager.configure_preferences(preferences)
        
        return jsonify({
            'status': 'success',
            'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            'preferences': preferences
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ configure endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/knowledge/history', methods=['GET'])
def get_chat_history():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    try:
        user_id = request.args.get('user_id', 'default')
        limit = int(request.args.get('limit', 50))
        
        history = chat_system.get_chat_history(user_id)
        
        return jsonify({
            'user_id': user_id,
            'history': history[-limit:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π
            'count': len(history)
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ history endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.errorhandler(404)
def not_found(error):
    return jsonify({'error': 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ë–∞–∑—ã –ó–Ω–∞–Ω–∏–π Rubin AI")
    print("üì° –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
    print("  POST /api/knowledge/chat - –ß–∞—Ç —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∑–Ω–∞–Ω–∏–π")
    print("  GET  /api/knowledge/search - –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
    print("  GET  /api/knowledge/suggestions - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
    print("  POST /api/knowledge/approve - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    print("  POST /api/knowledge/reject - –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    print("  POST /api/knowledge/add - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏—è")
    print("  GET  /api/knowledge/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("  GET  /api/knowledge/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    print("  POST /api/knowledge/configure - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π")
    print("  GET  /api/knowledge/history - –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞")
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ Knowledge API Server...")
        app.run(host='0.0.0.0', port=8093, debug=False)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()







