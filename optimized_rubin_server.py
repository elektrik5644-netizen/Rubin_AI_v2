#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Rubin AI v2.0 —Å–µ—Ä–≤–µ—Ä
–° —É–ª—É—á—à–µ–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç—å—é –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
"""

import os
import sys
import json
import logging
import gc
from datetime import datetime
from typing import Optional
from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import sqlite3
import threading
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'providers'))

# –ò–º–ø–æ—Ä—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏
try:
    from memory_optimizer import MemoryOptimizer
    MEMORY_OPTIMIZER_AVAILABLE = True
except ImportError:
    MEMORY_OPTIMIZER_AVAILABLE = False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
CORS(app, 
     origins=['http://localhost:8084', 'http://localhost:8085', 'http://127.0.0.1:8084', 'http://127.0.0.1:8085'],
     allow_headers=['Content-Type', 'Authorization'],
     methods=['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
     supports_credentials=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('rubin_optimized.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger("rubin_ai_optimized")

class OptimizedRubinAI:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Rubin AI"""
    
    def __init__(self):
        self.knowledge_base = {}
        self.conversation_history = []
        self.response_cache = {}
        self.cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
        self.max_cache_size = 1000
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏
        if MEMORY_OPTIMIZER_AVAILABLE:
            self.memory_optimizer = MemoryOptimizer(threshold_mb=300, cleanup_interval=180)
            self.memory_optimizer.start_monitoring()
            logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø–∞–º—è—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        else:
            self.memory_optimizer = None
            logger.warning("‚ö†Ô∏è –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø–∞–º—è—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        self.load_knowledge_base()
        logger.info("üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Rubin AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_knowledge_base(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_files = [
                'rubin_knowledge_base.db',
                'rubin_ai_knowledge.db',
                'rubin_knowledge.db'
            ]
            
            for db_file in db_files:
                if os.path.exists(db_file):
                    logger.info(f"üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π: {db_file}")
                    conn = sqlite3.connect(db_file)
                    cursor = conn.cursor()
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
                    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
                    tables = cursor.fetchall()
                    
                    for table in tables:
                        table_name = table[0]
                        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                        count = cursor.fetchone()[0]
                        logger.info(f"  üìã –¢–∞–±–ª–∏—Ü–∞ {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
                    
                    conn.close()
                    break
            else:
                logger.info("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é")
                self.create_default_knowledge_base()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            self.create_default_knowledge_base()
    
    def create_default_knowledge_base(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        self.knowledge_base = {
            'programming': {
                'keywords': ['python', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–¥', '–∞–ª–≥–æ—Ä–∏—Ç–º'],
                'responses': [
                    "Python - –º–æ—â–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è! –ú–æ–≥—É –ø–æ–º–æ—á—å —Å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º, –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.",
                    "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Ñ—É–Ω–∫—Ü–∏–∏, –∫–ª–∞—Å—Å—ã, –º–æ–¥—É–ª–∏, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π."
                ]
            },
            'electronics': {
                'keywords': ['—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞', '—Å—Ö–µ–º–∞', '—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä', '–¥–∏–æ–¥'],
                'responses': [
                    "–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ - –æ—Å–Ω–æ–≤–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏! –ó–∞–∫–æ–Ω –û–º–∞: U = I √ó R",
                    "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã, –∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã, –∫–∞—Ç—É—à–∫–∏, –ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∏."
                ]
            },
            'automation': {
                'keywords': ['–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', 'plc', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', 'scada'],
                'responses': [
                    "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–∞–µ—Ç PLC, SCADA, HMI —Å–∏—Å—Ç–µ–º—ã.",
                    "–ü—Ä–æ—Ç–æ–∫–æ–ª—ã: Modbus, Profinet, Ethernet/IP, OPC UA."
                ]
            }
        }
    
    def get_response(self, message: str, context: Optional[dict] = None) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = hash(message.lower().strip())
            if cache_key in self.response_cache:
                cache_entry = self.response_cache[cache_key]
                if time.time() - cache_entry['timestamp'] < self.cache_ttl:
                    logger.info("üìã –û—Ç–≤–µ—Ç –∏–∑ –∫—ç—à–∞")
                    return cache_entry['response']
                else:
                    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
                    del self.response_cache[cache_key]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            response = self._generate_response(message, context)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞)
            if len(self.response_cache) >= self.max_cache_size:
                # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
                oldest_key = min(self.response_cache.keys(), 
                               key=lambda k: self.response_cache[k]['timestamp'])
                del self.response_cache[oldest_key]
            
            self.response_cache[cache_key] = {
                'response': response,
                'timestamp': time.time()
            }
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return {
                'response': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.',
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
    
    def _generate_response(self, message: str, context: Optional[dict] = None) -> dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""
        message_lower = message.lower()
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for category, data in self.knowledge_base.items():
            for keyword in data['keywords']:
                if keyword in message_lower:
                    import random
                    response_text = random.choice(data['responses'])
                    
                    return {
                        'response': response_text,
                        'category': category,
                        'confidence': 0.8,
                        'timestamp': datetime.now().isoformat(),
                        'memory_usage': self._get_memory_stats()
                    }
        
        # –û–±—â–∏–π –æ—Ç–≤–µ—Ç
        return {
            'response': f'–ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "{message}". –≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º, —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–æ–π –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π.',
            'category': 'general',
            'confidence': 0.5,
            'timestamp': datetime.now().isoformat(),
            'memory_usage': self._get_memory_stats()
        }
    
    def _get_memory_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏"""
        if self.memory_optimizer:
            return self.memory_optimizer.get_memory_usage()
        else:
            return {'status': 'optimizer_unavailable'}
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.memory_optimizer:
            self.memory_optimizer.stop_monitoring()
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        self.response_cache.clear()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        collected = gc.collect()
        logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ–±—Ä–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {collected}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI
rubin_ai = OptimizedRubinAI()

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        'message': 'Rubin AI v2.0 - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è',
        'version': '2.0-optimized',
        'status': 'running',
        'memory_optimizer': MEMORY_OPTIMIZER_AVAILABLE,
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/chat', methods=['POST'])
def chat():
    """API –¥–ª—è —á–∞—Ç–∞"""
    try:
        data = request.get_json()
        message = data.get('message', '')
        context = data.get('context', {})
        
        if not message:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        response = rubin_ai.get_response(message, context)
        return jsonify(response)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ API —á–∞—Ç–∞: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    memory_stats = rubin_ai._get_memory_stats()
    
    return jsonify({
        'status': 'healthy',
        'system': 'Rubin AI v2.0 Optimized',
        'memory_optimizer': MEMORY_OPTIMIZER_AVAILABLE,
        'memory_usage': memory_stats,
        'cache_size': len(rubin_ai.response_cache),
        'conversations': len(rubin_ai.conversation_history),
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/memory/cleanup', methods=['POST'])
def memory_cleanup():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
    try:
        if rubin_ai.memory_optimizer:
            result = rubin_ai.memory_optimizer.cleanup_memory()
            return jsonify({
                'status': 'success',
                'freed_mb': result['freed_mb'],
                'collected_objects': result['collected_objects'],
                'timestamp': datetime.now().isoformat()
            })
        else:
            return jsonify({'error': '–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø–∞–º—è—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}), 400
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/stats')
def stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    if rubin_ai.memory_optimizer:
        system_stats = rubin_ai.memory_optimizer.get_system_stats()
    else:
        system_stats = {'status': 'optimizer_unavailable'}
    
    return jsonify({
        'system_stats': system_stats,
        'cache_size': len(rubin_ai.response_cache),
        'knowledge_categories': len(rubin_ai.knowledge_base),
        'timestamp': datetime.now().isoformat()
    })

@app.route('/RubinIDE.html')
def rubin_ide():
    """–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Rubin IDE"""
    return send_from_directory('.', 'RubinIDE.html')

@app.route('/RubinDeveloper.html')
def rubin_developer():
    """Developer –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    return send_from_directory('.', 'RubinDeveloper.html')

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Rubin AI v2.0 —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        app.run(
            host='0.0.0.0',
            port=8084,
            debug=False,
            threaded=True,
            use_reloader=False
        )
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        rubin_ai.cleanup()
        logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()
