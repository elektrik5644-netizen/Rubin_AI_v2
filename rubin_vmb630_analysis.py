#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ VMB630 —á–µ—Ä–µ–∑ Rubin AI
"""

from rubin_project_integration import RubinProjectIntegration
import os

def analyze_vmb630_with_rubin():
    """–ê–Ω–∞–ª–∏–∑ VMB630 –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ Rubin AI"""
    
    print("üîç RUBIN AI –ê–ù–ê–õ–ò–ó –ü–†–û–ï–ö–¢–ê VMB630")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏
    path = r'C:\Users\elekt\OneDrive\Desktop\VMB630_v_005_019_000'
    
    if not os.path.exists(path):
        print("‚ùå –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Rubin AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    integration = RubinProjectIntegration()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
    projects = integration.project_reader.get_all_projects()
    
    if not projects:
        print("‚ùå –ù–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º VMB630 –ø—Ä–æ–µ–∫—Ç
    vmb_project = None
    for project in projects:
        if 'VMB630' in project[1]:
            vmb_project = project
            break
    
    if not vmb_project:
        print("‚ùå VMB630 –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    project_id = vmb_project[0]
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç VMB630 (ID: {project_id})")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Å–∞–π—Ç—ã
    print("\nüß† –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ù–°–ê–ô–¢–û–í RUBIN AI...")
    insights = integration.generate_project_insights(project_id)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print("-" * 30)
    
    overview = insights['project_overview']
    print(f"üìÅ –ù–∞–∑–≤–∞–Ω–∏–µ: {overview['name']}")
    print(f"üîß –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: {overview['type']}")
    print(f"üìÑ –§–∞–π–ª–æ–≤: {overview['total_files']}")
    print(f"üíæ –†–∞–∑–º–µ—Ä: {overview['total_size_mb']} MB")
    print(f"‚öôÔ∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å: {overview['average_complexity']}")
    
    # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
    arch = insights['architecture_analysis']
    if arch['component_types']:
        print(f"\nüèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:")
        print(f"  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {arch['total_components']}")
        print(f"  –¢–∏–ø—ã: {', '.join(arch['component_types'])}")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã
    patterns = insights['design_patterns']
    if patterns['total_patterns'] > 0:
        print(f"\nüé® –ü–ê–¢–¢–ï–†–ù–´ –ü–†–û–ï–ö–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"  –í—Å–µ–≥–æ: {patterns['total_patterns']}")
        print(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(patterns['pattern_categories'])}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if insights['recommendations']:
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò RUBIN AI:")
        for i, rec in enumerate(insights['recommendations'], 1):
            print(f"  {i}. {rec}")
    
    # –ü–æ–∏—Å–∫ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(f"\nüîç –ü–û–ò–°–ö –°–ü–ï–¶–ò–§–ò–ß–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò:")
    search_terms = ['VMB630', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', 'PLC', 'motor', 'axis', 'spindle']
    
    for term in search_terms:
        results = integration.search_project_knowledge(term, project_id)
        if results:
            print(f"  '{term}': {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            first_result = results[0]
            print(f"    ‚Üí {first_result['file_name']} ({first_result['language']})")
            print(f"    –ü—Ä–µ–≤—å—é: {first_result['content_preview'][:100]}...")
    
    # –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ Rubin AI
    print(f"\nüí¨ –û–¢–í–ï–¢–´ RUBIN AI –ù–ê –í–û–ü–†–û–°–´:")
    questions = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ VMB630?",
        "–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç?",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—è–º–∏?",
        "–ö–∞–∫–∏–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ PLC –≤ —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ?"
    ]
    
    for question in questions:
        print(f"\n‚ùì {question}")
        answer = integration.answer_with_project_context(question, project_id)
        
        if answer['confidence'] > 0:
            print(f"üéØ –û—Ç–≤–µ—Ç (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {answer['confidence']:.1%}):")
            print(f"   {answer['answer'][:300]}...")
            if answer['sources']:
                print(f"   üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(answer['sources'])} —Ñ–∞–π–ª–æ–≤")
        else:
            print("üéØ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    print(f"\nüèóÔ∏è –î–ï–¢–ê–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:")
    architecture = integration.get_project_architecture(project_id)
    
    for comp_type, components in architecture.items():
        if components:
            print(f"\n  {comp_type.upper()}:")
            for comp in components[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"    - {comp['name']}: {comp['description']}")
    
    print(f"\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print("Rubin AI —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–µ–∫—Ç VMB630!")

if __name__ == "__main__":
    analyze_vmb630_with_rubin()





