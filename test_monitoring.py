#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Rubin AI
"""

import requests
import json
import time

def test_health_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç health —ç–Ω–¥–ø–æ–∏–Ω—Ç Smart Dispatcher"""
    try:
        response = requests.get("http://localhost:8080/api/health", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Smart Dispatcher Health Check:")
            print(f"   –°—Ç–∞—Ç—É—Å: {data.get('status', 'unknown')}")
            print(f"   –ó–¥–æ—Ä–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π: {data.get('healthy_modules', 0)}/{data.get('total_modules', 0)}")
            
            print("\nüìä –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª–µ–π:")
            for module, status in data.get('modules', {}).items():
                status_icon = "‚úÖ" if status['status'] == 'healthy' else "‚ùå" if status['status'] == 'unreachable' else "‚ö†Ô∏è"
                print(f"   {status_icon} {module} (–ø–æ—Ä—Ç {status['port']}): {status['status']}")
                if 'error' in status:
                    print(f"      –û—à–∏–±–∫–∞: {status['error']}")
            
            return True
        else:
            print(f"‚ùå HTTP {response.status_code}: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_module_directly(module_name, port):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –Ω–∞–ø—Ä—è–º—É—é"""
    try:
        response = requests.get(f"http://localhost:{port}/api/health", timeout=5)
        if response.status_code == 200:
            print(f"‚úÖ {module_name} (–ø–æ—Ä—Ç {port}): –∑–¥–æ—Ä–æ–≤")
            return True
        else:
            print(f"‚ö†Ô∏è {module_name} (–ø–æ—Ä—Ç {port}): HTTP {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå {module_name} (–ø–æ—Ä—Ç {port}): –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - {e}")
        return False

def test_chat_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —á–∞—Ç–∞"""
    test_messages = [
        "–ø—Ä–∏–≤–µ—Ç",
        "—á—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä",
        "–ø–æ–º–æ—â—å –ø–æ –¥–∏—Ä–µ–∫—Ç–∏–≤–∞–º"
    ]
    
    print("\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞:")
    for message in test_messages:
        try:
            payload = {"message": message}
            response = requests.post("http://localhost:8080/api/chat", json=payload, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ '{message}' ‚Üí {data.get('success', False)}")
                if 'directives_applied' in data:
                    print(f"   üìã –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–∏—Ä–µ–∫—Ç–∏–≤—ã: {len(data['directives_applied'])}")
            else:
                print(f"‚ùå '{message}' ‚Üí HTTP {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå '{message}' ‚Üí –û—à–∏–±–∫–∞: {e}")

def main():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Rubin AI")
    print("=" * 50)
    
    # –¢–µ—Å—Ç health —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Health Check —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞:")
    health_ok = test_health_endpoint()
    
    # –¢–µ—Å—Ç –º–æ–¥—É–ª–µ–π –Ω–∞–ø—Ä—è–º—É—é
    print("\n2. –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π:")
    modules = {
        'general': 8085,
        'mathematics': 8086,
        'electrical': 8087,
        'programming': 8088,
        'controllers': 9000
    }
    
    healthy_count = 0
    for module, port in modules.items():
        if test_module_directly(module, port):
            healthy_count += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {healthy_count}/{len(modules)} –º–æ–¥—É–ª–µ–π –∑–¥–æ—Ä–æ–≤—ã")
    
    # –¢–µ—Å—Ç —á–∞—Ç–∞
    if health_ok:
        test_chat_functionality()
    
    print("\n" + "=" * 50)
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    main()

