#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º—ã—à–ª–µ–Ω–∏—è Rubin AI
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç endpoints –¥–ª—è —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º—ã—à–ª–µ–Ω–∏—è –∏ –∞–±–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import time
import logging
from datetime import datetime

from rubin_ai_thinking_system import RubinAIThinkingSystem
from ai_thinking_datasets import AIThinkingDatasets
from non_trivial_queries import NonTrivialQueryGenerator
from abductive_reasoning import AbductiveReasoningEngine, Evidence

logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º—ã—à–ª–µ–Ω–∏—è
thinking_system = RubinAIThinkingSystem()

@app.route('/api/thinking/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º—ã—à–ª–µ–Ω–∏—è"""
    return jsonify({
        "status": "Rubin AI Thinking System ONLINE",
        "timestamp": datetime.now().isoformat(),
        "components": {
            "datasets": "active",
            "query_generator": "active", 
            "reasoning_engine": "active",
            "thinking_system": "active"
        }
    }), 200

@app.route('/api/thinking/stimulate', methods=['POST'])
def stimulate_thinking():
    """–°—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º—ã—à–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
    try:
        data = request.get_json() or {}
        domain = data.get('domain', 'general')
        complexity_level = data.get('complexity_level', 4)
        
        if not isinstance(complexity_level, int) or complexity_level < 1 or complexity_level > 5:
            complexity_level = 4
        
        logger.info(f"üéØ –°—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º—ã—à–ª–µ–Ω–∏—è: –¥–æ–º–µ–Ω={domain}, —Å–ª–æ–∂–Ω–æ—Å—Ç—å={complexity_level}")
        
        start_time = time.time()
        result = thinking_system.stimulate_thinking(domain, complexity_level)
        end_time = time.time()
        
        processing_time = end_time - start_time
        
        response_data = {
            "success": True,
            "query": result["query"],
            "query_type": result["query_type"],
            "domain": domain,
            "complexity_level": complexity_level,
            "thinking_result": {
                "thinking_depth": result["thinking_result"]["thinking_depth"],
                "confidence_score": result["thinking_result"]["reasoning_result"].confidence_score,
                "best_hypothesis": result["thinking_result"]["reasoning_result"].best_hypothesis.description,
                "evidence_count": result["thinking_result"]["evidence_count"],
                "knowledge_items_used": result["thinking_result"]["knowledge_items_used"]
            },
            "extended_response": result["thinking_result"]["extended_response"],
            "relevant_knowledge": result["relevant_knowledge"],
            "processing_time_seconds": f"{processing_time:.2f}",
            "timestamp": result["timestamp"]
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º—ã—à–ª–µ–Ω–∏—è: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º—ã—à–ª–µ–Ω–∏—è: {str(e)}"
        }), 500

@app.route('/api/thinking/generate_query', methods=['POST'])
def generate_query():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        data = request.get_json() or {}
        domain = data.get('domain', 'general')
        complexity_level = data.get('complexity_level', 4)
        
        logger.info(f"üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞: –¥–æ–º–µ–Ω={domain}, —Å–ª–æ–∂–Ω–æ—Å—Ç—å={complexity_level}")
        
        query_data = thinking_system.query_generator.generate_non_trivial_query(domain, complexity_level)
        complexity_analysis = thinking_system.query_generator.analyze_query_complexity(query_data["query"])
        
        response_data = {
            "success": True,
            "query": query_data["query"],
            "query_type": query_data["query_type"],
            "stimulus_type": query_data["stimulus_type"],
            "thinking_level": query_data["thinking_level"],
            "domain": domain,
            "complexity_analysis": complexity_analysis,
            "timestamp": query_data["generated_at"]
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
        }), 500

@app.route('/api/thinking/reasoning', methods=['POST'])
def perform_reasoning():
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–±–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è"""
    try:
        data = request.get_json() or {}
        evidence_list = data.get('evidence', [])
        domain = data.get('domain', 'general')
        
        if not evidence_list:
            return jsonify({
                "success": False,
                "error": "–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–ª—è —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è"
            }), 400
        
        logger.info(f"üß† –ê–±–¥—É–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ: –¥–æ–º–µ–Ω={domain}, –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤={len(evidence_list)}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
        evidence_objects = []
        for i, evidence_data in enumerate(evidence_list):
            evidence = Evidence(
                id=f"ev_{i:03d}",
                description=evidence_data.get('description', ''),
                domain=domain,
                confidence=evidence_data.get('confidence', 0.8),
                timestamp=datetime.now().isoformat(),
                source=evidence_data.get('source', 'user_input')
            )
            evidence_objects.append(evidence)
            thinking_system.reasoning_engine.add_evidence(evidence)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ
        evidence_ids = [ev.id for ev in evidence_objects]
        reasoning_result = thinking_system.reasoning_engine.perform_abductive_reasoning(evidence_ids, domain)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        explanation = thinking_system.reasoning_engine.explain_reasoning(reasoning_result)
        
        response_data = {
            "success": True,
            "reasoning_result": {
                "best_hypothesis": {
                    "description": reasoning_result.best_hypothesis.description,
                    "probability": reasoning_result.best_hypothesis.probability,
                    "complexity_score": reasoning_result.best_hypothesis.complexity_score
                },
                "alternative_hypotheses": [
                    {
                        "description": hyp.description,
                        "probability": hyp.probability
                    }
                    for hyp in reasoning_result.alternative_hypotheses
                ],
                "confidence_score": reasoning_result.confidence_score,
                "reasoning_steps": reasoning_result.reasoning_steps,
                "evidence_count": len(reasoning_result.evidence_used)
            },
            "explanation": explanation,
            "domain": domain,
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–±–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –∞–±–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è: {str(e)}"
        }), 500

@app.route('/api/thinking/knowledge', methods=['GET'])
def get_knowledge():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –∏–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        domain = request.args.get('domain', 'all')
        count = int(request.args.get('count', 5))
        
        logger.info(f"üìö –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π: –¥–æ–º–µ–Ω={domain}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ={count}")
        
        if domain == 'all':
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
            all_knowledge = {}
            for dom in ['electrical', 'math', 'programming', 'controllers']:
                knowledge_items = thinking_system.datasets.get_diverse_representative_data(dom, count)
                all_knowledge[dom] = [
                    {
                        "concept": item.concept,
                        "definition": item.definition,
                        "context": item.context,
                        "examples": item.examples,
                        "complexity_level": item.complexity_level,
                        "confidence_score": item.confidence_score
                    }
                    for item in knowledge_items
                ]
            
            response_data = {
                "success": True,
                "knowledge": all_knowledge,
                "total_domains": len(all_knowledge),
                "timestamp": datetime.now().isoformat()
            }
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞–Ω–∏—è –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
            knowledge_items = thinking_system.datasets.get_diverse_representative_data(domain, count)
            
            response_data = {
                "success": True,
                "domain": domain,
                "knowledge": [
                    {
                        "concept": item.concept,
                        "definition": item.definition,
                        "context": item.context,
                        "examples": item.examples,
                        "complexity_level": item.complexity_level,
                        "confidence_score": item.confidence_score
                    }
                    for item in knowledge_items
                ],
                "count": len(knowledge_items),
                "timestamp": datetime.now().isoformat()
            }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π: {str(e)}"
        }), 500

@app.route('/api/thinking/analytics', methods=['GET'])
def get_thinking_analytics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –º—ã—à–ª–µ–Ω–∏—è"""
    try:
        logger.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –º—ã—à–ª–µ–Ω–∏—è")
        
        analytics = thinking_system.get_thinking_analytics()
        
        response_data = {
            "success": True,
            "analytics": analytics,
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}"
        }), 500

@app.route('/api/thinking/recommendations', methods=['GET'])
def get_learning_recommendations():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–±—É—á–µ–Ω–∏—é"""
    try:
        domain = request.args.get('domain', 'all')
        
        logger.info(f"üí° –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: –¥–æ–º–µ–Ω={domain}")
        
        if domain == 'all':
            recommendations = {}
            for dom in ['electrical', 'math', 'programming', 'controllers']:
                recommendations[dom] = thinking_system.generate_learning_recommendations(dom)
            
            response_data = {
                "success": True,
                "recommendations": recommendations,
                "timestamp": datetime.now().isoformat()
            }
        else:
            recommendations = thinking_system.generate_learning_recommendations(domain)
            
            response_data = {
                "success": True,
                "domain": domain,
                "recommendations": recommendations,
                "timestamp": datetime.now().isoformat()
            }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}"
        }), 500

@app.route('/api/thinking/dataset_stats', methods=['GET'])
def get_dataset_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
        
        stats = thinking_system.datasets.get_dataset_statistics()
        
        response_data = {
            "success": True,
            "statistics": stats,
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        }), 500

@app.route('/api/thinking/query_stats', methods=['GET'])
def get_query_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        logger.info("üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        stats = thinking_system.query_generator.get_thinking_stimulation_stats()
        
        response_data = {
            "success": True,
            "statistics": stats,
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: {str(e)}"
        }), 500

@app.route('/api/thinking/reasoning_stats', methods=['GET'])
def get_reasoning_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–±–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è"""
    try:
        logger.info("üß† –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–±–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è")
        
        stats = thinking_system.reasoning_engine.get_reasoning_statistics()
        
        response_data = {
            "success": True,
            "statistics": stats,
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è: {str(e)}"
        }), 500

if __name__ == '__main__':
    port = 8095  # –ù–æ–≤—ã–π –ø–æ—Ä—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º—ã—à–ª–µ–Ω–∏—è
    logger.info(f"üß† –ó–∞–ø—É—Å–∫ Rubin AI Thinking System API —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    app.run(port=port, debug=True, use_reloader=False)










