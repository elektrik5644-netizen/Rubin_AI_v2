# Руководство по контроллерам и автоматизации

## Основы автоматизации

### Контроллеры
Контроллер - это устройство, которое управляет процессом на основе входных сигналов.

#### Типы контроллеров:
1. **ПЛК (Программируемые логические контроллеры)**
2. **ПИД-регуляторы**
3. **Микроконтроллеры**
4. **Промышленные компьютеры**

## ПЛК (Programmable Logic Controller)

### Архитектура ПЛК
```
Входы → Процессор → Выходы
  ↓        ↓         ↓
Датчики  Программа  Исполнительные
         (логика)   устройства
```

### Языки программирования ПЛК

#### Ladder Logic (LD)
```
|--[ ]--[ ]--( )--|
|  I1    I2    Q1  |
```
- I1, I2 - входы
- Q1 - выход
- Логика И: оба входа должны быть активны

#### Function Block Diagram (FBD)
```
[AND] → [TIMER] → [OUTPUT]
 I1      T1        Q1
 I2
```

#### Structured Text (ST)
```pascal
PROGRAM Main
VAR
    Input1 : BOOL;
    Input2 : BOOL;
    Output1 : BOOL;
    Timer1 : TON;
END_VAR

IF Input1 AND Input2 THEN
    Timer1(IN := TRUE, PT := T#5s);
    Output1 := Timer1.Q;
ELSE
    Timer1(IN := FALSE);
    Output1 := FALSE;
END_IF;
END_PROGRAM
```

## ПИД-регуляторы

### Принцип работы
ПИД-регулятор вычисляет управляющий сигнал на основе:
- **P (Пропорциональная)** - текущая ошибка
- **I (Интегральная)** - накопленная ошибка
- **D (Дифференциальная)** - скорость изменения ошибки

### Формула ПИД
```
u(t) = Kp * e(t) + Ki * ∫e(t)dt + Kd * de(t)/dt
```

Где:
- u(t) - управляющий сигнал
- e(t) - ошибка (заданное - текущее значение)
- Kp, Ki, Kd - коэффициенты настройки

### Настройка ПИД-регулятора

#### Метод Зиглера-Николса
1. **Только P-регулятор**: Ki = 0, Kd = 0
2. Увеличиваем Kp до появления колебаний
3. Записываем критический период Tcr
4. Вычисляем параметры:
   - Kp = 0.6 * Kcr
   - Ki = 2 * Kp / Tcr
   - Kd = Kp * Tcr / 8

#### Практические рекомендации
- Начинайте с P-регулятора
- Добавляйте I для устранения статической ошибки
- Добавляйте D для улучшения динамики
- Избегайте слишком больших значений D

## Датчики и исполнительные устройства

### Датчики
#### Аналоговые датчики
- **Температура**: термопары, RTD, термисторы
- **Давление**: пьезоэлектрические, тензометрические
- **Уровень**: ультразвуковые, емкостные, поплавковые
- **Расход**: электромагнитные, вихревые, турбинные

#### Цифровые датчики
- **Позиция**: энкодеры, резольверы
- **Присутствие**: индуктивные, емкостные, оптические
- **Скорость**: тахогенераторы, датчики Холла

### Исполнительные устройства
#### Электроприводы
- **Серводвигатели**: точное позиционирование
- **Шаговые двигатели**: дискретное перемещение
- **Асинхронные двигатели**: общее применение

#### Пневматические устройства
- **Цилиндры**: линейное перемещение
- **Поворотные приводы**: угловое перемещение
- **Клапаны**: регулирование расхода

#### Гидравлические устройства
- **Цилиндры**: большие усилия
- **Насосы**: создание давления
- **Клапаны**: точное регулирование

## Протоколы связи

### Промышленные сети
#### Modbus
```python
# Пример чтения данных по Modbus RTU
from pymodbus.client.sync import ModbusSerialClient

client = ModbusSerialClient(method='rtu', port='COM1', baudrate=9600)
connection = client.connect()

if connection:
    # Чтение регистров
    result = client.read_holding_registers(0, 10, unit=1)
    if not result.isError():
        print(f"Данные: {result.registers}")
    
    client.close()
```

#### Profibus
- Высокая скорость передачи
- Детерминированная связь
- Поддержка до 127 устройств

#### Ethernet/IP
- Основан на стандартном Ethernet
- Поддержка TCP/IP
- Интеграция с IT-системами

### Беспроводные протоколы
#### Wi-Fi
- Высокая скорость
- Большая дальность
- Интеграция с существующей инфраструктурой

#### Bluetooth
- Низкое энергопотребление
- Простота подключения
- Ограниченная дальность

#### LoRaWAN
- Очень большая дальность
- Низкое энергопотребление
- Медленная передача данных

## SCADA системы

### Архитектура SCADA
```
Полевые устройства → RTU/PLC → Коммуникационная сеть → SCADA сервер → HMI
```

### Компоненты SCADA
1. **RTU (Remote Terminal Unit)** - удаленные терминалы
2. **PLC** - программируемые контроллеры
3. **HMI (Human Machine Interface)** - интерфейс оператора
4. **Исторические данные** - архивирование
5. **Алармы** - система оповещений

### Популярные SCADA системы
- **WinCC** (Siemens)
- **FactoryTalk View** (Rockwell)
- **iFIX** (GE)
- **Wonderware** (Schneider Electric)
- **Ignition** (Inductive Automation)

## Безопасность

### Функциональная безопасность (IEC 61508)
#### Уровни SIL (Safety Integrity Level)
- **SIL 1**: Низкий риск
- **SIL 2**: Средний риск
- **SIL 3**: Высокий риск
- **SIL 4**: Критический риск

#### Принципы безопасности
1. **Избыточность** - дублирование критических функций
2. **Диверсификация** - разные технологии
3. **Тестирование** - регулярная проверка
4. **Документирование** - полная документация

### Кибербезопасность
#### Угрозы
- **Вредоносное ПО**
- **Несанкционированный доступ**
- **Атаки на сеть**
- **Социальная инженерия**

#### Защитные меры
- **Сетевая сегментация**
- **Firewall**
- **Антивирусное ПО**
- **Обновления безопасности**
- **Обучение персонала**

## Диагностика и обслуживание

### Мониторинг состояния
#### Параметры для контроля
- **Температура** компонентов
- **Вибрация** механизмов
- **Ток** электродвигателей
- **Давление** в системах

#### Методы диагностики
- **Вибродиагностика**
- **Термография**
- **Анализ токов**
- **Акустическая диагностика**

### Плановое обслуживание
#### Типы обслуживания
1. **Реактивное** - после отказа
2. **Превентивное** - по расписанию
3. **Предиктивное** - по состоянию
4. **Проактивное** - предотвращение

#### RCM (Reliability Centered Maintenance)
- Анализ критичности оборудования
- Определение режимов отказа
- Выбор стратегии обслуживания
- Оптимизация ресурсов

## Примеры применения

### Система управления температурой
```pascal
PROGRAM TemperatureControl
VAR
    Setpoint : REAL := 25.0;  // Заданная температура
    ActualTemp : REAL;        // Текущая температура
    Error : REAL;             // Ошибка
    PID_Output : REAL;        // Выход ПИД-регулятора
    Heater : BOOL;            // Нагреватель
    Cooler : BOOL;            // Охладитель
    PID_Controller : PID;     // ПИД-регулятор
END_VAR

// Чтение температуры
ActualTemp := READ_ANALOG_INPUT(0);

// Вычисление ошибки
Error := Setpoint - ActualTemp;

// ПИД-регулятор
PID_Controller(
    PV := ActualTemp,
    SP := Setpoint,
    Kp := 2.0,
    Ki := 0.1,
    Kd := 0.05,
    OUT => PID_Output
);

// Управление исполнительными устройствами
IF PID_Output > 0 THEN
    Heater := TRUE;
    Cooler := FALSE;
ELSIF PID_Output < 0 THEN
    Heater := FALSE;
    Cooler := TRUE;
ELSE
    Heater := FALSE;
    Cooler := FALSE;
END_IF;

// Запись выходов
WRITE_DIGITAL_OUTPUT(0, Heater);
WRITE_DIGITAL_OUTPUT(1, Cooler);
END_PROGRAM
```

### Система управления уровнем
```pascal
PROGRAM LevelControl
VAR
    Level : REAL;             // Текущий уровень
    Setpoint : REAL := 50.0;  // Заданный уровень
    Pump : BOOL;              // Насос
    Valve : BOOL;             // Клапан
    HighLevel : BOOL;         // Высокий уровень
    LowLevel : BOOL;          // Низкий уровень
END_VAR

// Чтение уровня
Level := READ_ANALOG_INPUT(1);

// Определение состояний
HighLevel := Level > 80.0;
LowLevel := Level < 20.0;

// Логика управления
IF LowLevel THEN
    Pump := TRUE;   // Включить насос
    Valve := FALSE; // Закрыть клапан
ELSIF HighLevel THEN
    Pump := FALSE;  // Выключить насос
    Valve := TRUE;  // Открыть клапан
ELSE
    // Поддержание уровня
    IF Level < Setpoint THEN
        Pump := TRUE;
        Valve := FALSE;
    ELSE
        Pump := FALSE;
        Valve := TRUE;
    END_IF;
END_IF;

// Запись выходов
WRITE_DIGITAL_OUTPUT(2, Pump);
WRITE_DIGITAL_OUTPUT(3, Valve);
END_PROGRAM
```

## Лучшие практики

### Программирование
1. **Модульность** - разбивайте программу на блоки
2. **Документирование** - комментируйте код
3. **Тестирование** - проверяйте логику
4. **Резервирование** - предусматривайте отказы

### Настройка
1. **Постепенная настройка** - настраивайте по одному параметру
2. **Документирование** - записывайте настройки
3. **Тестирование** - проверяйте в различных режимах
4. **Мониторинг** - отслеживайте работу системы

### Обслуживание
1. **Регулярность** - выполняйте по расписанию
2. **Документирование** - ведите журналы
3. **Запасные части** - имейте критичные компоненты
4. **Обучение** - повышайте квалификацию персонала

















