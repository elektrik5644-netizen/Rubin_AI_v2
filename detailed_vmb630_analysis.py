#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ VMB630
"""

from rubin_project_integration import RubinProjectIntegration
import sqlite3
import os

def detailed_vmb630_analysis():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ VMB630"""
    
    integration = RubinProjectIntegration()
    projects = integration.project_reader.get_all_projects()
    
    if not projects:
        print("‚ùå –ù–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
        return
        
    # –ù–∞—Ö–æ–¥–∏–º VMB630 –ø—Ä–æ–µ–∫—Ç
    vmb_project = None
    for project in projects:
        if 'VMB630' in project[1]:
            vmb_project = project
            break
    
    if not vmb_project:
        print("‚ùå VMB630 –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    project_id = vmb_project[0]
    print(f'üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ï–ö–¢–ê VMB630 (ID: {project_id})')
    
    # –ü–æ–∏—Å–∫ VMB630
    vmb_results = integration.search_project_knowledge('VMB630', project_id)
    print(f'\nüìÑ –§–∞–π–ª—ã —Å VMB630 ({len(vmb_results)}):')
    for result in vmb_results:
        print(f'  - {result["file_name"]} ({result["language"]})')
        print(f'    –ü—Ä–µ–≤—å—é: {result["content_preview"][:150]}...')
        print()
    
    # –ü–æ–∏—Å–∫ PLC
    plc_results = integration.search_project_knowledge('PLC', project_id)
    print(f'\nüîß –§–∞–π–ª—ã —Å PLC ({len(plc_results)}):')
    for result in plc_results[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        print(f'  - {result["file_name"]} ({result["language"]})')
        print(f'    –ü—Ä–µ–≤—å—é: {result["content_preview"][:100]}...')
        print()
    
    # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
    architecture = integration.get_project_architecture(project_id)
    print(f'\nüèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:')
    for comp_type, components in architecture.items():
        print(f'  {comp_type}: {len(components)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤')
        for comp in components[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f'    - {comp["name"]}: {comp["description"]}')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    print(f'\nüìÅ –í–°–ï –§–ê–ô–õ–´ –ü–†–û–ï–ö–¢–ê:')
    conn_db = sqlite3.connect(integration.project_db_path)
    cursor = conn_db.cursor()
    
    cursor.execute('''
        SELECT file_name, file_extension, language, file_size, complexity_score
        FROM project_files 
        WHERE project_id = ?
        ORDER BY file_size DESC
        LIMIT 10
    ''', (project_id,))
    
    files = cursor.fetchall()
    print(f'  –¢–æ–ø-10 —Ñ–∞–π–ª–æ–≤ –ø–æ —Ä–∞–∑–º–µ—Ä—É:')
    for file_name, ext, lang, size, complexity in files:
        size_kb = size / 1024
        print(f'    - {file_name} ({ext}) - {size_kb:.1f} KB - {lang} - —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity}')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
    cursor.execute('''
        SELECT file_extension, COUNT(*) as count, SUM(file_size) as total_size
        FROM project_files 
        WHERE project_id = ?
        GROUP BY file_extension
        ORDER BY count DESC
    ''', (project_id,))
    
    file_types = cursor.fetchall()
    print(f'\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –§–ê–ô–õ–û–í:')
    for ext, count, total_size in file_types:
        size_kb = total_size / 1024
        print(f'    - {ext}: {count} —Ñ–∞–π–ª–æ–≤, {size_kb:.1f} KB')
    
    # –ü–æ–∏—Å–∫ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
    search_terms = ['–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', 'motor', 'drive', 'sensor', 'input', 'output', 'function', 'program']
    print(f'\nüîç –ü–û–ò–°–ö –°–ü–ï–¶–ò–§–ò–ß–ù–´–• –¢–ï–†–ú–ò–ù–û–í:')
    for term in search_terms:
        results = integration.search_project_knowledge(term, project_id)
        if results:
            print(f'  "{term}": {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            first_result = results[0]
            print(f'    ‚Üí {first_result["file_name"]} ({first_result["language"]})')
    
    conn_db.close()
    
    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    print(f'\nüí¨ –ü–û–ü–´–¢–ö–ê –û–¢–í–ï–¢–ò–¢–¨ –ù–ê –í–û–ü–†–û–°–´:')
    questions = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ VMB630?",
        "–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç?",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä?",
        "–ö–∞–∫–∏–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ?"
    ]
    
    for question in questions:
        answer = integration.answer_with_project_context(question, project_id)
        print(f'\n‚ùì {question}')
        if answer['confidence'] > 0:
            print(f'üéØ –û—Ç–≤–µ—Ç (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {answer["confidence"]:.1%}):')
            print(f'   {answer["answer"][:300]}...')
            if answer['sources']:
                print(f'   üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(answer["sources"])} —Ñ–∞–π–ª–æ–≤')
        else:
            print('üéØ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ')

if __name__ == "__main__":
    detailed_vmb630_analysis()










