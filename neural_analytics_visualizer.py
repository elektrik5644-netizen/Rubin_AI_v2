#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ Rubin AI
"""

import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime, timedelta
import numpy as np
import json
import requests
from typing import Dict, Any, List
import seaborn as sns
from collections import Counter
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

class NeuralAnalyticsVisualizer:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
    
    def __init__(self, base_url: str = "http://localhost:8080"):
        self.base_url = base_url
        self.analytics_data = None
    
    def fetch_analytics(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            response = requests.get(f"{self.base_url}/api/analytics")
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    self.analytics_data = data['analytics']
                    return True
                else:
                    print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {data.get('error')}")
                    return False
            else:
                print(f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                return False
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def create_performance_dashboard(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not self.analytics_data:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            return
        
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('üìä –î–∞—à–±–æ—Ä–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ Rubin AI', fontsize=16, fontweight='bold')
        
        # 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary = self.analytics_data['summary']
        ax1 = axes[0, 0]
        
        stats_labels = ['–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤', '–£—Å–ø–µ—à–Ω—ã—Ö', '–ù–µ—É–¥–∞—á–Ω—ã—Ö', '–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (—á)']
        stats_values = [
            summary['total_requests'],
            summary['successful_requests'],
            summary['failed_requests'],
            summary['uptime_seconds'] / 3600
        ]
        
        bars = ax1.bar(stats_labels, stats_values, color=['#2E86AB', '#A23B72', '#F18F01', '#C73E1D'])
        ax1.set_title('üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar, value in zip(bars, stats_values):
            height = bar.get_height()
            ax1.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                    f'{value:.1f}', ha='center', va='bottom')
        
        # 2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        ax2 = axes[0, 1]
        categories = self.analytics_data['categories']['usage']
        
        if categories:
            labels = list(categories.keys())
            values = list(categories.values())
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
            wedges, texts, autotexts = ax2.pie(values, labels=labels, autopct='%1.1f%%', startangle=90)
            ax2.set_title('üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
            
            # –£–ª—É—á—à–∞–µ–º —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
            for autotext in autotexts:
                autotext.set_color('white')
                autotext.set_fontweight('bold')
        
        # 3. –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        ax3 = axes[1, 0]
        performance = self.analytics_data['performance']
        
        time_labels = ['–ú–∏–Ω', '–ú–∞–∫—Å', '–°—Ä–µ–¥–Ω–µ–µ', '–ú–µ–¥–∏–∞–Ω–∞']
        time_values = [
            performance['min'],
            performance['max'],
            performance['mean'],
            performance['median']
        ]
        
        bars = ax3.bar(time_labels, time_values, color=['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4'])
        ax3.set_title('‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å–µ–∫)')
        ax3.set_ylabel('–°–µ–∫—É–Ω–¥—ã')
        
        for bar, value in zip(bars, time_values):
            height = bar.get_height()
            ax3.text(bar.get_x() + bar.get_width()/2., height + 0.001,
                    f'{value:.3f}', ha='center', va='bottom')
        
        # 4. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        ax4 = axes[1, 1]
        confidence = self.analytics_data['categories']['avg_confidence']
        
        if confidence:
            cat_labels = list(confidence.keys())
            conf_values = list(confidence.values())
            
            bars = ax4.bar(cat_labels, conf_values, color='#9B59B6')
            ax4.set_title('üéØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
            ax4.set_ylabel('–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å')
            ax4.set_ylim(0, 1)
            
            # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            ax4.tick_params(axis='x', rotation=45)
            
            for bar, value in zip(bars, conf_values):
                height = bar.get_height()
                ax4.text(bar.get_x() + bar.get_width()/2., height + 0.01,
                        f'{value:.2f}', ha='center', va='bottom')
        
        plt.tight_layout()
        plt.show()
    
    def create_temporal_analysis(self) -> None:
        """–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        if not self.analytics_data:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            return
        
        fig, axes = plt.subplots(2, 1, figsize=(15, 10))
        fig.suptitle('üìÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏', fontsize=16, fontweight='bold')
        
        # 1. –ó–∞–ø—Ä–æ—Å—ã –ø–æ —á–∞—Å–∞–º
        ax1 = axes[0]
        hourly_data = self.analytics_data['requests']['hourly']
        
        if hourly_data:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            hours = []
            counts = []
            
            for hour_str, count in hourly_data.items():
                try:
                    hour_dt = datetime.strptime(hour_str, '%Y-%m-%d %H:%M')
                    hours.append(hour_dt)
                    counts.append(count)
                except ValueError:
                    continue
            
            if hours:
                ax1.plot(hours, counts, marker='o', linewidth=2, markersize=6, color='#E74C3C')
                ax1.set_title('üìà –ó–∞–ø—Ä–æ—Å—ã –ø–æ —á–∞—Å–∞–º')
                ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤')
                ax1.grid(True, alpha=0.3)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—å X
                ax1.xaxis.set_major_formatter(mdates.DateFormatter('%m-%d %H:%M'))
                ax1.xaxis.set_major_locator(mdates.HourLocator(interval=2))
                plt.setp(ax1.xaxis.get_majorticklabels(), rotation=45)
        
        # 2. –ó–∞–ø—Ä–æ—Å—ã –ø–æ –¥–Ω—è–º
        ax2 = axes[1]
        daily_data = self.analytics_data['requests']['daily']
        
        if daily_data:
            days = []
            counts = []
            
            for day_str, count in daily_data.items():
                try:
                    day_dt = datetime.strptime(day_str, '%Y-%m-%d')
                    days.append(day_dt)
                    counts.append(count)
                except ValueError:
                    continue
            
            if days:
                bars = ax2.bar(days, counts, color='#3498DB', alpha=0.7)
                ax2.set_title('üìä –ó–∞–ø—Ä–æ—Å—ã –ø–æ –¥–Ω—è–º')
                ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤')
                ax2.grid(True, alpha=0.3)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—å X
                ax2.xaxis.set_major_formatter(mdates.DateFormatter('%m-%d'))
                ax2.xaxis.set_major_locator(mdates.DayLocator())
                plt.setp(ax2.xaxis.get_majorticklabels(), rotation=45)
        
        plt.tight_layout()
        plt.show()
    
    def create_error_analysis(self) -> None:
        """–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫"""
        if not self.analytics_data:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            return
        
        errors = self.analytics_data['errors']
        
        if not errors['types']:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        fig, axes = plt.subplots(1, 2, figsize=(15, 6))
        fig.suptitle('üö® –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏', fontsize=16, fontweight='bold')
        
        # 1. –¢–∏–ø—ã –æ—à–∏–±–æ–∫
        ax1 = axes[0]
        error_types = errors['types']
        
        if error_types:
            labels = list(error_types.keys())
            values = list(error_types.values())
            
            bars = ax1.bar(labels, values, color='#E74C3C')
            ax1.set_title('üìä –¢–∏–ø—ã –æ—à–∏–±–æ–∫')
            ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            ax1.tick_params(axis='x', rotation=45)
            
            for bar, value in zip(bars, values):
                height = bar.get_height()
                ax1.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                        str(value), ha='center', va='bottom')
        
        # 2. –í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è –æ—à–∏–±–æ–∫
        ax2 = axes[1]
        recent_errors = errors['recent_errors']
        
        if recent_errors:
            timestamps = []
            error_counts = []
            
            for error in recent_errors:
                try:
                    ts = datetime.fromisoformat(error['timestamp'])
                    timestamps.append(ts)
                    error_counts.append(1)
                except ValueError:
                    continue
            
            if timestamps:
                ax2.scatter(timestamps, error_counts, color='#E74C3C', s=100, alpha=0.7)
                ax2.set_title('‚è∞ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è –æ—à–∏–±–æ–∫')
                ax2.set_ylabel('–û—à–∏–±–∫–∏')
                ax2.set_ylim(0, 2)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—å X
                ax2.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
                plt.setp(ax2.xaxis.get_majorticklabels(), rotation=45)
        
        plt.tight_layout()
        plt.show()
    
    def create_training_analysis(self) -> None:
        """–ê–Ω–∞–ª–∏–∑ –æ–±—É—á–µ–Ω–∏—è"""
        if not self.analytics_data:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            return
        
        training = self.analytics_data['training']
        
        if training['sessions'] == 0:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±—É—á–µ–Ω–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        fig, axes = plt.subplots(1, 2, figsize=(15, 6))
        fig.suptitle('üéì –ê–Ω–∞–ª–∏–∑ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏', fontsize=16, fontweight='bold')
        
        # 1. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
        ax1 = axes[0]
        training_stats = ['–°–µ—Å—Å–∏–∏', '–¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö']
        training_values = [training['sessions'], training['data_points']]
        
        bars = ax1.bar(training_stats, training_values, color=['#27AE60', '#F39C12'])
        ax1.set_title('üìö –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è')
        ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        
        for bar, value in zip(bars, training_values):
            height = bar.get_height()
            ax1.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                    str(value), ha='center', va='bottom')
        
        # 2. –£–ª—É—á—à–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
        ax2 = axes[1]
        improvements = training['recent_improvements']
        
        if improvements:
            timestamps = []
            improvement_values = []
            
            for improvement in improvements:
                try:
                    ts = datetime.fromisoformat(improvement['timestamp'])
                    timestamps.append(ts)
                    improvement_values.append(improvement['improvement'])
                except ValueError:
                    continue
            
            if timestamps:
                ax2.plot(timestamps, improvement_values, marker='o', linewidth=2, color='#27AE60')
                ax2.set_title('üìà –£–ª—É—á—à–µ–Ω–∏—è –º–æ–¥–µ–ª–∏')
                ax2.set_ylabel('–£–ª—É—á—à–µ–Ω–∏–µ')
                ax2.grid(True, alpha=0.3)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—å X
                ax2.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
                plt.setp(ax2.xaxis.get_majorticklabels(), rotation=45)
        
        plt.tight_layout()
        plt.show()
    
    def create_full_report(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        if not self.fetch_analytics():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
            return
        
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        self.create_performance_dashboard()
        
        print("üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        self.create_temporal_analysis()
        
        print("üö® –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫...")
        self.create_error_analysis()
        
        print("üéì –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—É—á–µ–Ω–∏—è...")
        self.create_training_analysis()
        
        print("‚úÖ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ Rubin AI")
    
    visualizer = NeuralAnalyticsVisualizer()
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
    visualizer.create_full_report()

if __name__ == "__main__":
    main()


