#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Simple Dispatcher
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã
"""

import subprocess
import time
import logging
import requests
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class DispatcherManager:
    def __init__(self):
        self.process = None
        self.restart_count = 0
        self.max_restarts = 10  # –ú–∞–∫—Å–∏–º—É–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é
        self.restart_delay = 5   # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏
        self.health_check_url = "http://localhost:8080/api/health"
        
    def start_dispatcher(self):
        """–ó–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞."""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Simple Dispatcher...")
            self.process = subprocess.Popen(
                ['python', 'simple_dispatcher.py'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            logger.info(f"‚úÖ Dispatcher –∑–∞–ø—É—â–µ–Ω —Å PID: {self.process.pid}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            return False
    
    def stop_dispatcher(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞."""
        if self.process:
            try:
                self.process.terminate()
                self.process.wait(timeout=10)
                logger.info("üõë Dispatcher –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.TimeoutExpired:
                self.process.kill()
                logger.warning("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ Dispatcher")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
    
    def check_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞."""
        try:
            response = requests.get(self.health_check_url, timeout=5)
            return response.status_code == 200
        except:
            return False
    
    def restart_dispatcher(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞."""
        if self.restart_count >= self.max_restarts:
            logger.error(f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ ({self.max_restarts})")
            return False
            
        self.restart_count += 1
        logger.warning(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ #{self.restart_count}")
        
        self.stop_dispatcher()
        time.sleep(self.restart_delay)
        
        if self.start_dispatcher():
            logger.info("‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω")
            return True
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
            return False
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã."""
        logger.info("üéØ –ó–∞–ø—É—Å–∫ Dispatcher Manager")
        logger.info(f"üìä –ú–∞–∫—Å–∏–º—É–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤: {self.max_restarts}")
        logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 30 —Å–µ–∫—É–Ω–¥")
        
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
        if not self.start_dispatcher():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Dispatcher")
            return
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
        time.sleep(10)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        while True:
            try:
                if not self.check_health():
                    logger.warning("‚ö†Ô∏è Dispatcher –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                    if not self.restart_dispatcher():
                        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                        break
                else:
                    logger.info("‚úÖ Dispatcher —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                time.sleep(30)
                
            except KeyboardInterrupt:
                logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                time.sleep(10)
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        self.stop_dispatcher()
        logger.info("üëã Dispatcher Manager –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == '__main__':
    manager = DispatcherManager()
    manager.run()



