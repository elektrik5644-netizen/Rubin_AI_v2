#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ Rubin AI
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ª—É—á—à–∞–µ—Ç –∏—Ö
"""

import logging
import re
import json
import time
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple
import requests
from dataclasses import dataclass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class ResponseAnalysis:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–∞"""
    is_logical: bool
    is_accurate: bool
    is_complete: bool
    quality_score: float
    issues: List[str]
    suggestions: List[str]
    corrected_response: Optional[str] = None

class ResponseAnalytics:
    """–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    
    def __init__(self):
        self.quality_patterns = {
            'logical_indicators': [
                r'–ø–æ—ç—Ç–æ–º—É', r'—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ', r'—Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º', r'–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ',
                r'–≤–æ-–ø–µ—Ä–≤—ã—Ö', r'–≤–æ-–≤—Ç–æ—Ä—ã—Ö', r'–≤-—Ç—Ä–µ—Ç—å–∏—Ö', r'—Å–Ω–∞—á–∞–ª–∞', r'–∑–∞—Ç–µ–º',
                r'–µ—Å–ª–∏.*—Ç–æ', r'–ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏', r'–≤ —Å–ª—É—á–∞–µ', r'–∫–æ–≥–¥–∞'
            ],
            'accuracy_indicators': [
                r'—Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', r'—Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç', r'–ø—Ä–∞–≤–∏–ª—å–Ω–æ', r'–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
                r'–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ', r'–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ', r'–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ', r'—Å—Ç–∞–Ω–¥–∞—Ä—Ç'
            ],
            'completeness_indicators': [
                r'–ø–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ', r'–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ', r'–≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã',
                r'–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑', r'–∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–π –æ—Ç–≤–µ—Ç', r'–≤–∫–ª—é—á–∞–µ—Ç'
            ],
            'error_indicators': [
                r'–æ—à–∏–±–∫–∞', r'–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ', r'–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', r'–Ω–µ–≤–µ—Ä–Ω–æ',
                r'–Ω–µ —É–¥–∞–ª–æ—Å—å', r'–ø—Ä–æ–±–ª–µ–º–∞', r'—Å–±–æ–π', r'–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            ]
        }
        
        self.subject_patterns = {
            'math': {
                'keywords': ['—É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '—Ñ–æ—Ä–º—É–ª–∞', '–≤—ã—á–∏—Å–ª–µ–Ω–∏–µ', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—á–∏—Å–ª–æ'],
                'required_elements': ['—Ä–µ—à–µ–Ω–∏–µ', '–æ—Ç–≤–µ—Ç', '–ø—Ä–æ–≤–µ—Ä–∫–∞'],
                'quality_checks': ['–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å_—Ä–µ—à–µ–Ω–∏—è', '–ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å_—Ä–∞—Å—á–µ—Ç–∞', '–ø–æ–ª–Ω–æ—Ç–∞_–æ–±—ä—è—Å–Ω–µ–Ω–∏—è']
            },
            'electrical': {
                'keywords': ['—Ç–æ–∫', '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', '—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ', '—Å—Ö–µ–º–∞'],
                'required_elements': ['–∑–∞–∫–æ–Ω', '—Ñ–æ—Ä–º—É–ª–∞', '—Ä–∞—Å—á–µ—Ç', '–µ–¥–∏–Ω–∏—Ü—ã'],
                'quality_checks': ['—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ_–∑–∞–∫–æ–Ω–∞–º', '–ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å_—Ñ–æ—Ä–º—É–ª', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å']
            },
            'programming': {
                'keywords': ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–∞–ª–≥–æ—Ä–∏—Ç–º', '—Ñ—É–Ω–∫—Ü–∏—è', '–∫–ª–∞—Å—Å'],
                'required_elements': ['–∫–æ–¥', '–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ', '–ø—Ä–∏–º–µ—Ä', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'],
                'quality_checks': ['—Å–∏–Ω—Ç–∞–∫—Å–∏—Å', '–ª–æ–≥–∏–∫–∞_–ø—Ä–æ–≥—Ä–∞–º–º—ã', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è']
            },
            'controllers': {
                'keywords': ['–ø–ª–∫–∞', '—á–ø—É', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'],
                'required_elements': ['–ø—Ä–∏–Ω—Ü–∏–ø_—Ä–∞–±–æ—Ç—ã', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∞'],
                'quality_checks': ['—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è_–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å', '–ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã']
            }
        }
        
        self.correction_templates = {
            'incomplete': "–û—Ç–≤–µ—Ç –Ω–µ–ø–æ–ª–Ω—ã–π. –î–æ–±–∞–≤–ª—é –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:",
            'illogical': "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ò—Å–ø—Ä–∞–≤–ª—è—é:",
            'inaccurate': "–ù–∞–π–¥–µ–Ω–∞ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—å. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:",
            'unclear': "–û—Ç–≤–µ—Ç –Ω–µ—è—Å–µ–Ω. –£—Ç–æ—á–Ω—è—é:",
            'missing_examples': "–î–æ–±–∞–≤–ª—é –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã:"
        }
    
    def analyze_response(self, question: str, response: str, server_type: str) -> ResponseAnalysis:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞"""
        try:
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–≤–µ—Ç –æ—Ç {server_type}: {response[:50]}...")
            
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            is_logical = self._check_logical_structure(response)
            is_accurate = self._check_accuracy(response, question, server_type)
            is_complete = self._check_completeness(response, question, server_type)
            
            # –í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
            issues = self._identify_issues(response, question, server_type)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            suggestions = self._generate_suggestions(issues, server_type)
            
            # –†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
            quality_score = self._calculate_quality_score(is_logical, is_accurate, is_complete, issues)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            corrected_response = self._auto_correct_response(response, issues, question, server_type)
            
            return ResponseAnalysis(
                is_logical=is_logical,
                is_accurate=is_accurate,
                is_complete=is_complete,
                quality_score=quality_score,
                issues=issues,
                suggestions=suggestions,
                corrected_response=corrected_response
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
            return ResponseAnalysis(
                is_logical=False,
                is_accurate=False,
                is_complete=False,
                quality_score=0.0,
                issues=[f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"],
                suggestions=["–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑"]
            )
    
    def _check_logical_structure(self, response: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞"""
        response_lower = response.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–≤—è–∑–æ–∫
        logical_connectors = sum(1 for pattern in self.quality_patterns['logical_indicators'] 
                               if re.search(pattern, response_lower))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–Ω–∞–ª–∏—á–∏–µ –≤–≤–µ–¥–µ–Ω–∏—è, –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏, –∑–∞–∫–ª—é—á–µ–Ω–∏—è)
        has_intro = any(word in response_lower for word in ['–∞–Ω–∞–ª–∏–∑', '—Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º', '–∏–∑—É—á–∏–º'])
        has_main = any(word in response_lower for word in ['—Ä–µ—à–µ–Ω–∏–µ', '–æ—Ç–≤–µ—Ç', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç'])
        has_conclusion = any(word in response_lower for word in ['–∑–∞–∫–ª—é—á–µ–Ω–∏–µ', '–≤—ã–≤–æ–¥', '–∏—Ç–æ–≥'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑–ª–æ–∂–µ–Ω–∏—è
        has_sequence = any(word in response_lower for word in ['—Å–Ω–∞—á–∞–ª–∞', '–∑–∞—Ç–µ–º', '–¥–∞–ª–µ–µ', '–Ω–∞–∫–æ–Ω–µ—Ü'])
        
        # –û—Ü–µ–Ω–∫–∞ –ª–æ–≥–∏—á–Ω–æ—Å—Ç–∏
        logical_score = (logical_connectors * 0.3 + 
                        (has_intro + has_main + has_conclusion) * 0.2 + 
                        has_sequence * 0.1)
        
        return logical_score >= 0.6
    
    def _check_accuracy(self, response: str, question: str, server_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞"""
        response_lower = response.lower()
        question_lower = question.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ç–æ—á–Ω–æ—Å—Ç–∏
        accuracy_indicators = sum(1 for pattern in self.quality_patterns['accuracy_indicators'] 
                                if re.search(pattern, response_lower))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
        error_indicators = sum(1 for pattern in self.quality_patterns['error_indicators'] 
                             if re.search(pattern, response_lower))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        subject_accuracy = self._check_subject_accuracy(response, question, server_type)
        
        # –û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
        accuracy_score = (accuracy_indicators * 0.4 + 
                         subject_accuracy * 0.4 - 
                         error_indicators * 0.2)
        
        return accuracy_score >= 0.5
    
    def _check_subject_accuracy(self, response: str, question: str, server_type: str) -> float:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏"""
        if server_type not in self.subject_patterns:
            return 0.5  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
        
        subject_info = self.subject_patterns[server_type]
        response_lower = response.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        keyword_matches = sum(1 for keyword in subject_info['keywords'] 
                            if keyword in response_lower)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        element_matches = sum(1 for element in subject_info['required_elements'] 
                            if element in response_lower)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
        quality_matches = sum(1 for check in subject_info['quality_checks'] 
                            if self._check_quality_criterion(response, check))
        
        # –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏
        total_possible = len(subject_info['keywords']) + len(subject_info['required_elements']) + len(subject_info['quality_checks'])
        actual_matches = keyword_matches + element_matches + quality_matches
        
        return actual_matches / total_possible if total_possible > 0 else 0.5
    
    def _check_quality_criterion(self, response: str, criterion: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π"""
        response_lower = response.lower()
        
        criterion_checks = {
            '–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å_—Ä–µ—à–µ–Ω–∏—è': ['–ø–æ—à–∞–≥–æ–≤–æ', '–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ', '–ª–æ–≥–∏—á–Ω–æ'],
            '–ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å_—Ä–∞—Å—á–µ—Ç–∞': ['—Ñ–æ—Ä–º—É–ª–∞', '—Ä–∞—Å—á–µ—Ç', '–ø—Ä–æ–≤–µ—Ä–∫–∞'],
            '–ø–æ–ª–Ω–æ—Ç–∞_–æ–±—ä—è—Å–Ω–µ–Ω–∏—è': ['–ø–æ–¥—Ä–æ–±–Ω–æ', '–¥–µ—Ç–∞–ª—å–Ω–æ', '–ø–æ–ª–Ω–æ—Å—Ç—å—é'],
            '—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ_–∑–∞–∫–æ–Ω–∞–º': ['–∑–∞–∫–æ–Ω –æ–º–∞', '–∑–∞–∫–æ–Ω –∫–∏—Ä—Ö–≥–æ—Ñ–∞', '—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –∑–∞–∫–æ–Ω—ã'],
            '–ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å_—Ñ–æ—Ä–º—É–ª': ['—Ñ–æ—Ä–º—É–ª–∞', '—É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏'],
            '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å': ['–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–Ω–æ—Ä–º—ã', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã'],
            '—Å–∏–Ω—Ç–∞–∫—Å–∏—Å': ['—Å–∏–Ω—Ç–∞–∫—Å–∏—Å', '–≥—Ä–∞–º–º–∞—Ç–∏–∫–∞', '–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω'],
            '–ª–æ–≥–∏–∫–∞_–ø—Ä–æ–≥—Ä–∞–º–º—ã': ['–∞–ª–≥–æ—Ä–∏—Ç–º', '–ª–æ–≥–∏–∫–∞', '—Å—Ç—Ä—É–∫—Ç—É—Ä–∞'],
            '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è': ['–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'],
            '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è_–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å': ['—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏', '–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', '–ø—Ä–∞–≤–∏–ª—å–Ω–æ'],
            '–ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å': ['–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏', '–ø—Ä–∏–º–µ–Ω–∏–º–æ', '—Ä–µ–∞–ª—å–Ω–æ'],
            '—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã': ['—Å—Ç–∞–Ω–¥–∞—Ä—Ç', '–Ω–æ—Ä–º–∞', '—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ']
        }
        
        if criterion in criterion_checks:
            return any(check in response_lower for check in criterion_checks[criterion])
        
        return False
    
    def _check_completeness(self, response: str, question: str, server_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω–æ—Ç—É –æ—Ç–≤–µ—Ç–∞"""
        response_lower = response.lower()
        question_lower = question.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª–Ω–æ—Ç—ã
        completeness_indicators = sum(1 for pattern in self.quality_patterns['completeness_indicators'] 
                                    if re.search(pattern, response_lower))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π)
        length_score = min(len(response) / 5000, 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 5000 —Å–∏–º–≤–æ–ª–∞–º
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –Ω–∞ –≤—Å–µ —á–∞—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞
        question_parts = self._extract_question_parts(question_lower)
        answered_parts = sum(1 for part in question_parts 
                           if any(word in response_lower for word in part.split()))
        
        completeness_score = (completeness_indicators * 0.3 + 
                            length_score * 0.4 + 
                            (answered_parts / len(question_parts)) * 0.3 if question_parts else 0.5)
        
        return completeness_score >= 0.6
    
    def _extract_question_parts(self, question: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∞—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ—Ç—ã –æ—Ç–≤–µ—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–æ—é–∑–∞–º –∏ –∑–Ω–∞–∫–∞–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        parts = re.split(r'[–∏,–∞,–Ω–æ,–∏–ª–∏,–∞ —Ç–∞–∫–∂–µ]', question)
        return [part.strip() for part in parts if part.strip()]
    
    def _identify_issues(self, response: str, question: str, server_type: str) -> List[str]:
        """–í—ã—è–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ—Ç–≤–µ—Ç–µ"""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if not self._check_logical_structure(response):
            issues.append("–õ–æ–≥–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—è—Å–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Ç–æ—á–Ω–æ—Å—Ç–∏
        if not self._check_accuracy(response, question, server_type):
            issues.append("–û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ª–Ω–æ—Ç—ã
        if not self._check_completeness(response, question, server_type):
            issues.append("–û—Ç–≤–µ—Ç –Ω–µ–ø–æ–ª–Ω—ã–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
        response_lower = response.lower()
        if any(pattern in response_lower for pattern in ['–æ—à–∏–±–∫–∞', '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ', '–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ']):
            issues.append("–û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è—Å–Ω–æ—Å—Ç—å
        if len(response) < 100:
            issues.append("–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫—Ä–∞—Ç–∫–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤
        if server_type in ['math', 'programming', 'electrical'] and '–ø—Ä–∏–º–µ—Ä' not in response_lower:
            issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã")
        
        return issues
    
    def _generate_suggestions(self, issues: List[str], server_type: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        suggestions = []
        
        for issue in issues:
            if "–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞" in issue.lower():
                suggestions.append("–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∫–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")
            elif "–Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏" in issue.lower():
                suggestions.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–∫—Ç—ã –∏ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
            elif "–Ω–µ–ø–æ–ª–Ω—ã–π" in issue.lower():
                suggestions.append("–†–∞—Å—à–∏—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏")
            elif "–æ—à–∏–±–∫–∏" in issue.lower():
                suggestions.append("–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
            elif "–∫—Ä–∞—Ç–∫–∏–π" in issue.lower():
                suggestions.append("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è")
            elif "–ø—Ä–∏–º–µ—Ä—ã" in issue.lower():
                suggestions.append("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã")
        
        # –û–±—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É —Å–µ—Ä–≤–µ—Ä–∞
        if server_type == 'math':
            suggestions.append("–î–æ–±–∞–≤–∏—Ç—å –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π")
        elif server_type == 'electrical':
            suggestions.append("–í–∫–ª—é—á–∏—Ç—å —Ñ–æ—Ä–º—É–ª—ã –∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è")
        elif server_type == 'programming':
            suggestions.append("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–±–æ—á–∏–π –∫–æ–¥ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏")
        elif server_type == 'controllers':
            suggestions.append("–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã")
        
        return list(set(suggestions))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    
    def _calculate_quality_score(self, is_logical: bool, is_accurate: bool, 
                                is_complete: bool, issues: List[str]) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞"""
        base_score = (is_logical * 0.4 + is_accurate * 0.4 + is_complete * 0.2)
        
        # –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã
        issue_penalty = len(issues) * 0.1
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª
        final_score = max(0.0, base_score - issue_penalty)
        
        return round(final_score, 2)
    
    def _auto_correct_response(self, response: str, issues: List[str], 
                             question: str, server_type: str) -> Optional[str]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç"""
        if not issues:
            return None
        
        corrected_parts = [response]
        
        for issue in issues:
            if "–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞" in issue.lower():
                corrected_parts.append(self._add_logical_structure())
            elif "–Ω–µ–ø–æ–ª–Ω—ã–π" in issue.lower():
                corrected_parts.append(self._add_completeness(question, server_type))
            elif "–Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏" in issue.lower():
                corrected_parts.append(self._add_accuracy_corrections(server_type))
            elif "–ø—Ä–∏–º–µ—Ä—ã" in issue.lower():
                corrected_parts.append(self._add_examples(server_type))
        
        if len(corrected_parts) > 1:
            return "\n\n".join(corrected_parts)
        
        return None
    
    def _add_logical_structure(self) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        return """
**üîß –£–õ–£–ß–®–ï–ù–ò–ï –õ–û–ì–ò–ß–ï–°–ö–û–ô –°–¢–†–£–ö–¢–£–†–´:**

–î–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç:

1. **–í–≤–µ–¥–µ–Ω–∏–µ:** –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–Ω—è—Ç–∏–π
2. **–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å:** –ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ/–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ  
3. **–ó–∞–∫–ª—é—á–µ–Ω–∏–µ:** –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤—ã–≤–æ–¥—ã
4. **–ü—Ä–æ–≤–µ—Ä–∫–∞:** –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏—è
"""
    
    def _add_completeness(self, question: str, server_type: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        completeness_additions = {
            'math': """
**üìö –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:**

‚Ä¢ **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–µ—à–µ–Ω–∏—è**
‚Ä¢ **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞**
‚Ä¢ **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ**
‚Ä¢ **–°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã**
""",
            'electrical': """
**‚ö° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:**

‚Ä¢ **–§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã**
‚Ä¢ **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –Ω–æ—Ä–º—ã**
‚Ä¢ **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**
‚Ä¢ **–°–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã**
""",
            'programming': """
**üíª –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:**

‚Ä¢ **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã**
‚Ä¢ **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞**
‚Ä¢ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫**
‚Ä¢ **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**
""",
            'controllers': """
**üéõÔ∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:**

‚Ä¢ **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏**
‚Ä¢ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞**
‚Ä¢ **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ**
‚Ä¢ **–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º**
"""
        }
        
        return completeness_additions.get(server_type, """
**üìñ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:**

‚Ä¢ **–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ**
‚Ä¢ **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã**
‚Ä¢ **–°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã**
‚Ä¢ **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã**
""")
    
    def _add_accuracy_corrections(self, server_type: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏"""
        return """
**‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–û–ß–ù–û–°–¢–ò:**

‚Ä¢ **–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ**
‚Ä¢ **–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º**
‚Ä¢ **–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**
‚Ä¢ **–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã –∏ —Ä–∞—Å—á–µ—Ç—ã**
"""
    
    def _add_examples(self, server_type: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã"""
        examples = {
            'math': """
**üìù –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–†–´:**

‚Ä¢ **–ü—Ä–∏–º–µ—Ä 1:** –ë–∞–∑–æ–≤–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
‚Ä¢ **–ü—Ä–∏–º–µ—Ä 2:** –£—Å–ª–æ–∂–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
‚Ä¢ **–ü—Ä–∏–º–µ—Ä 3:** –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è
""",
            'electrical': """
**‚ö° –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–†–´:**

‚Ä¢ **–ü—Ä–∏–º–µ—Ä 1:** –ü—Ä–æ—Å—Ç–∞—è —Å—Ö–µ–º–∞
‚Ä¢ **–ü—Ä–∏–º–µ—Ä 2:** –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
‚Ä¢ **–ü—Ä–∏–º–µ—Ä 3:** –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
""",
            'programming': """
**üíª –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–†–´:**

‚Ä¢ **–ü—Ä–∏–º–µ—Ä 1:** –ë–∞–∑–æ–≤—ã–π –∫–æ–¥
‚Ä¢ **–ü—Ä–∏–º–µ—Ä 2:** –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
‚Ä¢ **–ü—Ä–∏–º–µ—Ä 3:** –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
""",
            'controllers': """
**üéõÔ∏è –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–†–´:**

‚Ä¢ **–ü—Ä–∏–º–µ—Ä 1:** –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
‚Ä¢ **–ü—Ä–∏–º–µ—Ä 2:** –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚Ä¢ **–ü—Ä–∏–º–µ—Ä 3:** –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º
"""
        }
        
        return examples.get(server_type, """
**üìù –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–†–´:**

‚Ä¢ **–ü—Ä–∏–º–µ—Ä 1:** –ë–∞–∑–æ–≤–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
‚Ä¢ **–ü—Ä–∏–º–µ—Ä 2:** –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
‚Ä¢ **–ü—Ä–∏–º–µ—Ä 3:** –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
""")

class ResponseQualityController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
    
    def __init__(self):
        self.analytics = ResponseAnalytics()
        self.quality_threshold = 0.7  # –ü–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.auto_correction_enabled = True
    
    def process_response(self, question: str, response: str, server_type: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–∞—á–µ—Å—Ç–≤–∞"""
        try:
            logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—Ç–≤–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            analysis = self.analytics.analyze_response(question, response, server_type)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è
            needs_correction = (analysis.quality_score < self.quality_threshold or 
                              len(analysis.issues) > 0)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            if needs_correction and self.auto_correction_enabled and analysis.corrected_response:
                final_response = analysis.corrected_response
                correction_applied = True
            else:
                final_response = response
                correction_applied = False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'original_response': response,
                'final_response': final_response,
                'analysis': {
                    'is_logical': analysis.is_logical,
                    'is_accurate': analysis.is_accurate,
                    'is_complete': analysis.is_complete,
                    'quality_score': analysis.quality_score,
                    'issues': analysis.issues,
                    'suggestions': analysis.suggestions
                },
                'correction_applied': correction_applied,
                'quality_status': self._get_quality_status(analysis.quality_score),
                'timestamp': datetime.now().isoformat()
            }
            
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ö–∞—á–µ—Å—Ç–≤–æ: {analysis.quality_score}, –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {correction_applied}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return {
                'original_response': response,
                'final_response': response,
                'analysis': {
                    'is_logical': False,
                    'is_accurate': False,
                    'is_complete': False,
                    'quality_score': 0.0,
                    'issues': [f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"],
                    'suggestions': ["–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑"]
                },
                'correction_applied': False,
                'quality_status': 'error',
                'timestamp': datetime.now().isoformat()
            }
    
    def _get_quality_status(self, score: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–∞—á–µ—Å—Ç–≤–∞"""
        if score >= 0.8:
            return 'excellent'
        elif score >= 0.6:
            return 'good'
        elif score >= 0.4:
            return 'fair'
        else:
            return 'poor'
    
    def configure_quality_settings(self, threshold: float = None, 
                                  auto_correction: bool = None):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞"""
        if threshold is not None:
            self.quality_threshold = threshold
        if auto_correction is not None:
            self.auto_correction_enabled = auto_correction
        
        logger.info(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: threshold={self.quality_threshold}, auto_correction={self.auto_correction_enabled}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
quality_controller = None

def get_quality_controller():
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
    global quality_controller
    if quality_controller is None:
        quality_controller = ResponseQualityController()
    return quality_controller

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤")
    
    controller = get_quality_controller()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    test_cases = [
        {
            'question': '–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x^2 + 5x + 6 = 0',
            'response': '–û—Ç–≤–µ—Ç: x = -2 –∏–ª–∏ x = -3',
            'server_type': 'math'
        },
        {
            'question': '–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–∫–æ–Ω –û–º–∞?',
            'response': '–ó–∞–∫–æ–Ω –û–º–∞ —Å–≤—è–∑—ã–≤–∞–µ—Ç —Ç–æ–∫, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ.',
            'server_type': 'electrical'
        },
        {
            'question': '–ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ Python',
            'response': 'def hello(): print("Hello")',
            'server_type': 'programming'
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{'='*80}")
        print(f"–¢–µ—Å—Ç {i}: {test_case['question']}")
        print(f"{'='*80}")
        
        result = controller.process_response(
            test_case['question'],
            test_case['response'],
            test_case['server_type']
        )
        
        print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ: {result['analysis']['quality_score']}")
        print(f"üéØ –°—Ç–∞—Ç—É—Å: {result['quality_status']}")
        print(f"‚úÖ –õ–æ–≥–∏—á–Ω—ã–π: {result['analysis']['is_logical']}")
        print(f"üéØ –¢–æ—á–Ω—ã–π: {result['analysis']['is_accurate']}")
        print(f"üìù –ü–æ–ª–Ω—ã–π: {result['analysis']['is_complete']}")
        print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {result['correction_applied']}")
        
        if result['analysis']['issues']:
            print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(result['analysis']['issues'])}")
        
        if result['analysis']['suggestions']:
            print(f"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {', '.join(result['analysis']['suggestions'])}")
        
        print(f"\nüìù –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:")
        print(result['final_response'][:200] + "..." if len(result['final_response']) > 200 else result['final_response'])
    
    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")



