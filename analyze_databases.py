#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö Rubin AI v2 –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
"""

import sqlite3
import os
from datetime import datetime

def analyze_database(db_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if not os.path.exists(db_path):
        return None
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        file_size = os.path.getsize(db_path)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
        table_info = {}
        total_records = 0
        
        for table in tables:
            table_name = table[0]
            cursor.execute(f"SELECT COUNT(*) FROM {table_name};")
            count = cursor.fetchone()[0]
            total_records += count
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute(f"PRAGMA table_info({table_name});")
            columns = cursor.fetchall()
            
            table_info[table_name] = {
                'records': count,
                'columns': [col[1] for col in columns]
            }
        
        conn.close()
        
        return {
            'file_size': file_size,
            'tables': table_info,
            'total_records': total_records,
            'last_modified': datetime.fromtimestamp(os.path.getmtime(db_path))
        }
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {db_path}: {e}")
        return None

def main():
    print("üîç –ê–ù–ê–õ–ò–ó –ë–ê–ó –î–ê–ù–ù–´–• RUBIN AI V2")
    print("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    db_files = [f for f in os.listdir('.') if f.endswith('.db')]
    
    analysis_results = {}
    
    for db_file in sorted(db_files):
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é: {db_file}")
        result = analyze_database(db_file)
        
        if result:
            analysis_results[db_file] = result
            print(f"   –†–∞–∑–º–µ—Ä: {result['file_size']:,} –±–∞–π—Ç ({result['file_size']/1024/1024:.1f} MB)")
            print(f"   –¢–∞–±–ª–∏—Ü: {len(result['tables'])}")
            print(f"   –ó–∞–ø–∏—Å–µ–π: {result['total_records']:,}")
            print(f"   –ò–∑–º–µ–Ω–µ–Ω: {result['last_modified']}")
            
            for table_name, info in result['tables'].items():
                print(f"     - {table_name}: {info['records']} –∑–∞–ø–∏—Å–µ–π, {len(info['columns'])} –∫–æ–ª–æ–Ω–æ–∫")
        else:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
    
    # –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n" + "=" * 60)
    print("üîç –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–∞–∑—ã –ø–æ —Å—Ö–æ–∂–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    knowledge_bases = []
    document_bases = []
    learning_bases = []
    other_bases = []
    
    for db_file, result in analysis_results.items():
        if not result:
            continue
            
        tables = list(result['tables'].keys())
        
        if any('knowledge' in table.lower() for table in tables):
            knowledge_bases.append((db_file, result))
        elif any('document' in table.lower() for table in tables):
            document_bases.append((db_file, result))
        elif any('learning' in table.lower() for table in tables):
            learning_bases.append((db_file, result))
        else:
            other_bases.append((db_file, result))
    
    print(f"\nüìö –ë–∞–∑—ã –∑–Ω–∞–Ω–∏–π ({len(knowledge_bases)}):")
    for db_file, result in knowledge_bases:
        print(f"   - {db_file}: {result['file_size']/1024/1024:.1f} MB, {result['total_records']} –∑–∞–ø–∏—Å–µ–π")
    
    print(f"\nüìÑ –ë–∞–∑—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ({len(document_bases)}):")
    for db_file, result in document_bases:
        print(f"   - {db_file}: {result['file_size']/1024/1024:.1f} MB, {result['total_records']} –∑–∞–ø–∏—Å–µ–π")
    
    print(f"\nüß† –ë–∞–∑—ã –æ–±—É—á–µ–Ω–∏—è ({len(learning_bases)}):")
    for db_file, result in learning_bases:
        print(f"   - {db_file}: {result['file_size']/1024/1024:.1f} MB, {result['total_records']} –∑–∞–ø–∏—Å–µ–π")
    
    print(f"\nüîß –ü—Ä–æ—á–∏–µ –±–∞–∑—ã ({len(other_bases)}):")
    for db_file, result in other_bases:
        print(f"   - {db_file}: {result['file_size']/1024/1024:.1f} MB, {result['total_records']} –∑–∞–ø–∏—Å–µ–π")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    print("\n" + "=" * 60)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
    print("=" * 60)
    
    total_size = sum(result['file_size'] for result in analysis_results.values())
    print(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö –±–∞–∑: {total_size/1024/1024:.1f} MB")
    
    # –í—ã—è–≤–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
    if len(document_bases) > 1:
        print(f"\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(document_bases)} –±–∞–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - –≤–æ–∑–º–æ–∂–Ω–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ!")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤ –æ–¥–Ω—É –±–∞–∑—É")
    
    if len(knowledge_bases) > 3:
        print(f"\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(knowledge_bases)} –±–∞–∑ –∑–Ω–∞–Ω–∏–π - –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å!")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è")
    
    # –ü—É—Å—Ç—ã–µ –±–∞–∑—ã
    empty_bases = [db_file for db_file, result in analysis_results.items() 
                   if result and result['total_records'] == 0]
    if empty_bases:
        print(f"\nüóëÔ∏è  –ü—É—Å—Ç—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ({len(empty_bases)}):")
        for db_file in empty_bases:
            print(f"   - {db_file}")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –ø—É—Å—Ç—ã–µ –±–∞–∑—ã")
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(analysis_results)} –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main()





