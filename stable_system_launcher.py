#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ STABLE SYSTEM LAUNCHER –¥–ª—è Rubin AI v2
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
"""

import subprocess
import time
import requests
import threading
import os
import signal
import sys
from datetime import datetime

class StableSystemLauncher:
    def __init__(self):
        self.processes = {}
        self.servers = {
            'smart_dispatcher': {
                'command': ['python', 'simple_dispatcher.py'],
                'port': 8080,
                'health_endpoint': '/api/chat',
                'critical': True
            },
            'general_api': {
                'command': ['python', 'api/general_api.py'],
                'port': 8085,
                'health_endpoint': '/api/health',
                'critical': True
            },
            'mathematics_api': {
                'command': ['python', 'api/mathematics_api.py'],
                'port': 8086,
                'health_endpoint': '/health',
                'critical': True
            },
            'electrical_api': {
                'command': ['python', 'api/electrical_api.py'],
                'port': 8087,
                'health_endpoint': '/api/electrical/status',
                'critical': True
            },
            'programming_api': {
                'command': ['python', 'api/programming_api.py'],
                'port': 8088,
                'health_endpoint': '/api/health',
                'critical': True
            },
            'radiomechanics_api': {
                'command': ['python', 'api/radiomechanics_api.py'],
                'port': 8089,
                'health_endpoint': '/api/radiomechanics/status',
                'critical': True
            },
            'neuro_api': {
                'command': ['python', 'simple_neuro_api_server.py'],
                'port': 8090,
                'health_endpoint': '/api/health',
                'critical': True
            },
            'controllers_api': {
                'command': ['python', 'api/controllers_api.py'],
                'port': 9000,
                'health_endpoint': '/api/controllers/status',
                'critical': False
            },
            'plc_analysis': {
                'command': ['python', 'plc_analysis_api_server.py'],
                'port': 8099,
                'health_endpoint': '/api/plc/health',
                'critical': False
            },
            'advanced_math': {
                'command': ['python', 'advanced_math_api_server.py'],
                'port': 8100,
                'health_endpoint': '/api/advanced_math/health',
                'critical': False
            },
            'data_processing': {
                'command': ['python', 'data_processing_api_server.py'],
                'port': 8101,
                'health_endpoint': '/api/data_processing/health',
                'critical': False
            },
            'search_engine': {
                'command': ['python', 'search_engine_api_server.py'],
                'port': 8102,
                'health_endpoint': '/api/search/health',
                'critical': False
            },
            'system_utils': {
                'command': ['python', 'system_utils_api_server.py'],
                'port': 8103,
                'health_endpoint': '/api/system/utils/health',
                'critical': False
            },
            'gai_server': {
                'command': ['python', 'enhanced_gai_server.py'],
                'port': 8104,
                'health_endpoint': '/api/gai/health',
                'critical': False
            },
            'unified_manager': {
                'command': ['python', 'unified_system_manager.py'],
                'port': 8084,
                'health_endpoint': '/api/system/health',
                'critical': False
            },
            'ethical_core': {
                'command': ['python', 'ethical_core_api_server.py'],
                'port': 8105,
                'health_endpoint': '/api/ethical/health',
                'critical': False
            }
        }
        
    def kill_existing_processes(self):
        """–£–±–∏–≤–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ Python –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        print("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
        try:
            if os.name == 'nt':  # Windows
                subprocess.run(['taskkill', '/F', '/IM', 'python.exe'], 
                             capture_output=True, text=True)
            else:  # Linux/Mac
                subprocess.run(['pkill', '-f', 'python'], 
                             capture_output=True, text=True)
            time.sleep(2)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
    
    def start_server(self, name, config):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä"""
        try:
            print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º {name} –Ω–∞ –ø–æ—Ä—Ç—É {config['port']}...")
            process = subprocess.Popen(
                config['command'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            self.processes[name] = process
            time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
            if self.check_server_health(name, config):
                print(f"‚úÖ {name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                return True
            else:
                print(f"‚ùå {name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {e}")
            return False
    
    def check_server_health(self, name, config):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            url = f"http://localhost:{config['port']}{config['health_endpoint']}"
            
            if config['health_endpoint'] == '/api/chat':
                # –î–ª—è Smart Dispatcher –∏—Å–ø–æ–ª—å–∑—É–µ–º POST
                response = requests.post(url, json={'message': 'test'}, timeout=5)
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º GET
                response = requests.get(url, timeout=5)
            
            return response.status_code in [200, 201]
        except:
            return False
    
    def start_critical_servers(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã"""
        print("üî• –ó–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã...")
        critical_servers = {k: v for k, v in self.servers.items() if v['critical']}
        
        for name, config in critical_servers.items():
            if not self.start_server(name, config):
                print(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å {name}")
                return False
        
        return True
    
    def start_additional_servers(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã"""
        print("‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã...")
        additional_servers = {k: v for k, v in self.servers.items() if not v['critical']}
        
        for name, config in additional_servers.items():
            self.start_server(name, config)
    
    def monitor_system(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
        print("üìä –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã...")
        
        while True:
            try:
                online_count = 0
                total_count = len(self.servers)
                
                for name, config in self.servers.items():
                    if self.check_server_health(name, config):
                        online_count += 1
                
                print(f"üìà –°—Ç–∞—Ç—É—Å: {online_count}/{total_count} —Å–µ—Ä–≤–µ—Ä–æ–≤ –æ–Ω–ª–∞–π–Ω")
                
                if online_count < total_count * 0.8:  # –ú–µ–Ω–µ–µ 80% —Å–µ—Ä–≤–µ—Ä–æ–≤ –æ–Ω–ª–∞–π–Ω
                    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ú–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –æ—Ñ—Ñ–ª–∞–π–Ω!")
                
                time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except KeyboardInterrupt:
                print("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(10)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        print("üöÄ STABLE SYSTEM LAUNCHER –¥–ª—è Rubin AI v2")
        print("=" * 50)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        self.kill_existing_processes()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        if not self.start_critical_servers():
            print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã")
            return False
        
        # –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        print("‚è≥ –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...")
        time.sleep(5)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        self.start_additional_servers()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print("üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        time.sleep(3)
        
        online_count = 0
        for name, config in self.servers.items():
            if self.check_server_health(name, config):
                online_count += 1
        
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞: {online_count}/{len(self.servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤ –æ–Ω–ª–∞–π–Ω")
        
        if online_count >= len(self.servers) * 0.8:
            print("üéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
            return True
        else:
            print("‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø!")
            return False

def main():
    launcher = StableSystemLauncher()
    
    try:
        success = launcher.run()
        if success:
            print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            launcher.monitor_system()
        else:
            print("‚ùå –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –Ω–µ —É–¥–∞–ª—Å—è")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        launcher.kill_existing_processes()
        sys.exit(0)

if __name__ == "__main__":
    main()



