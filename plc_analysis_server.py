#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PLC Analysis Server –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ PLC –ø—Ä–æ–≥—Ä–∞–º–º
"""

from flask import Flask, request, jsonify
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        'status': 'healthy',
        'service': 'PLC Analysis Server',
        'port': 8099,
        'timestamp': datetime.now().isoformat(),
        'version': '1.0.0'
    })

@app.route('/api/plc/analyze', methods=['GET', 'POST'])
def analyze_plc():
    """–ê–Ω–∞–ª–∏–∑ PLC –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    try:
        if request.method == 'GET':
            plc_code = request.args.get('plc_code', '')
        else:
            data = request.get_json()
            plc_code = data.get('plc_code', '')
        
        logger.info(f"üîß –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ PLC: {plc_code[:50]}...")
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        analysis = {
            'status': 'success',
            'analysis': {
                'code_length': len(plc_code),
                'lines_count': plc_code.count('\n') + 1 if plc_code else 0,
                'issues': [],
                'recommendations': []
            },
            'service': 'plc_analysis',
            'timestamp': datetime.now().isoformat()
        }
        
        if plc_code:
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
            if 'LD' in plc_code.upper():
                analysis['analysis']['recommendations'].append("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Ladder Logic")
            
            if 'ST' in plc_code.upper():
                analysis['analysis']['recommendations'].append("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Structured Text")
            
            if 'FBD' in plc_code.upper():
                analysis['analysis']['recommendations'].append("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Function Block Diagram")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
            if plc_code.count('(') != plc_code.count(')'):
                analysis['analysis']['issues'].append("–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏")
            
            if 'GOTO' in plc_code.upper():
                analysis['analysis']['issues'].append("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GOTO - –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è")
        else:
            analysis['analysis']['recommendations'].append("–û—Ç–ø—Ä–∞–≤—å—Ç–µ PLC –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        return jsonify(analysis)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ PLC: {e}")
        return jsonify({
            'status': 'error',
            'error': str(e)
        }), 500

if __name__ == '__main__':
    print("üîß PLC Analysis Server –∑–∞–ø—É—â–µ–Ω")
    print("URL: http://localhost:8099")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    print("  - GET/POST /api/plc/analyze - –∞–Ω–∞–ª–∏–∑ PLC –ø—Ä–æ–≥—Ä–∞–º–º")
    print("  - GET /api/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    print("=" * 60)
    app.run(host='0.0.0.0', port=8099, debug=False)