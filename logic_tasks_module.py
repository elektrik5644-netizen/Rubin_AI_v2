#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –¥–ª—è Rubin AI v2
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö LogiEval
"""

import json
import os
import random
from typing import Dict, List, Any, Optional
from datetime import datetime

class LogicTaskDatabase:
    """–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á."""
    
    def __init__(self, data_path: str = r"C:\Users\elekt\OneDrive\Desktop\LogiEval-main\Data"):
        self.data_path = data_path
        self.datasets = {}
        self.load_all_datasets()
    
    def load_all_datasets(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –Ω–∞–±–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö."""
        dataset_files = {
            'logiqa': 'logiqa.jsonl',
            'logiqa_zh': 'logiqa_zh.jsonl', 
            'logiqa_ood': 'logiqa_ood.jsonl',
            'proofwriter': 'proofwriter.jsonl',
            'ruletaker': 'ruletaker.jsonl',
            'taxi': 'taxi.jsonl',
            'fracas': 'fracas.jsonl',
            'control': 'control.jsonl',
            'help': 'help.jsonl',
            'med': 'med.jsonl',
            'mnli': 'mnli.jsonl',
            'nannli': 'nannli.jsonl',
            'conjnli': 'conjnli.jsonl',
            'reclor': 'reclor.jsonl',
            'ar_lsat': 'ar_lsat.jsonl'
        }
        
        for dataset_name, filename in dataset_files.items():
            file_path = os.path.join(self.data_path, filename)
            if os.path.exists(file_path):
                try:
                    self.datasets[dataset_name] = self.load_jsonl(file_path)
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –¥–∞—Ç–∞—Å–µ—Ç {dataset_name}: {len(self.datasets[dataset_name])} –∑–∞–¥–∞—á")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {dataset_name}: {e}")
            else:
                print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    def load_jsonl(self, file_path: str) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSONL —Ñ–∞–π–ª."""
        data = []
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                for line in f:
                    if line.strip():
                        data.append(json.loads(line))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        return data
    
    def get_random_task(self, dataset_name: str = None) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–∞—á—É."""
        if dataset_name and dataset_name in self.datasets:
            dataset = self.datasets[dataset_name]
        else:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
            if not self.datasets:
                return None
            dataset_name = random.choice(list(self.datasets.keys()))
            dataset = self.datasets[dataset_name]
        
        if not dataset:
            return None
        
        task = random.choice(dataset)
        task['dataset_name'] = dataset_name
        return task
    
    def get_task_by_type(self, task_type: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞."""
        type_mapping = {
            '–ª–æ–≥–∏–∫–∞': 'logiqa',
            '–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞': 'proofwriter',
            '–ø—Ä–∞–≤–∏–ª–∞': 'ruletaker',
            '—Ç–∞–∫—Å–∏': 'taxi',
            '–∫–æ–Ω—Ç—Ä–æ–ª—å': 'control',
            '–º–µ–¥–∏—Ü–∏–Ω–∞': 'med',
            '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞': 'mnli',
            '–∫–∏—Ç–∞–π—Å–∫–∏–π': 'logiqa_zh',
            '–∞—Ä–≥—É–º–µ–Ω—Ç—ã': 'ar_lsat'
        }
        
        dataset_name = type_mapping.get(task_type.lower())
        if dataset_name and dataset_name in self.datasets:
            return self.get_random_task(dataset_name)
        
        return self.get_random_task()
    
    def format_task_for_chat(self, task: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è —á–∞—Ç–∞."""
        if not task:
            return "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        dataset_name = task.get('dataset_name', 'unknown')
        input_data = task.get('input', [])
        
        if not input_data:
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–¥–∞—á–∏
        content = ""
        for item in input_data:
            if item.get('role') == 'user':
                content = item.get('content', '')
                break
        
        if not content:
            return "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è Rubin
        formatted_task = f"""
üß† **–õ–æ–≥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞** (—Ç–∏–ø: {dataset_name})

{content}

---
üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞**: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.
"""
        return formatted_task.strip()
    
    def get_task_answer(self, task: Dict) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É."""
        return task.get('ideal', '–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
    
    def get_dataset_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞—Ç–∞—Å–µ—Ç–∞–º."""
        stats = {}
        for name, data in self.datasets.items():
            stats[name] = {
                'count': len(data),
                'description': self.get_dataset_description(name)
            }
        return stats
    
    def get_dataset_description(self, dataset_name: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞."""
        descriptions = {
            'logiqa': '–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã',
            'logiqa_zh': '–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –∫–∏—Ç–∞–π—Å–∫–æ–º',
            'logiqa_ood': '–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤–Ω–µ –¥–æ–º–µ–Ω–∞',
            'proofwriter': '–ó–∞–¥–∞—á–∏ –Ω–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞',
            'ruletaker': '–ó–∞–¥–∞—á–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏',
            'taxi': '–ó–∞–¥–∞—á–∏ —Ç–∞–∫—Å–∏ (–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è)',
            'fracas': '–§—Ä–∞–∫—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏',
            'control': '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏',
            'help': '–ó–∞–¥–∞—á–∏ –ø–æ–º–æ—â–∏',
            'med': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏',
            'mnli': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏',
            'nannli': '–ù–µ–∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏',
            'conjnli': '–°–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏',
            'reclor': '–ó–∞–¥–∞—á–∏ —á—Ç–µ–Ω–∏—è –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è',
            'ar_lsat': '–ê—Ä–≥—É–º–µ–Ω—Ç–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ LSAT'
        }
        return descriptions.get(dataset_name, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á')

class LogicTaskSolver:
    """–†–µ—à–∞—Ç–µ–ª—å –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á."""
    
    def __init__(self, database: LogicTaskDatabase):
        self.database = database
        self.solved_tasks = []
        self.failed_tasks = []
    
    def solve_task(self, task: Dict, user_answer: str = None) -> Dict:
        """–†–µ—à–∞–µ—Ç –∑–∞–¥–∞—á—É."""
        if not task:
            return {'success': False, 'error': '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
        
        correct_answer = self.database.get_task_answer(task)
        dataset_name = task.get('dataset_name', 'unknown')
        
        result = {
            'task': self.database.format_task_for_chat(task),
            'correct_answer': correct_answer,
            'user_answer': user_answer,
            'dataset_name': dataset_name,
            'timestamp': datetime.now().isoformat()
        }
        
        if user_answer:
            is_correct = str(user_answer).strip().upper() == str(correct_answer).strip().upper()
            result['is_correct'] = is_correct
            
            if is_correct:
                self.solved_tasks.append(result)
                result['message'] = 'üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!'
            else:
                self.failed_tasks.append(result)
                result['message'] = f'‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}'
        else:
            result['message'] = f'üí° –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}'
        
        return result
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á."""
        total_attempts = len(self.solved_tasks) + len(self.failed_tasks)
        success_rate = (len(self.solved_tasks) / total_attempts * 100) if total_attempts > 0 else 0
        
        return {
            'total_attempts': total_attempts,
            'solved_tasks': len(self.solved_tasks),
            'failed_tasks': len(self.failed_tasks),
            'success_rate': f"{success_rate:.1f}%",
            'dataset_stats': self.database.get_dataset_stats()
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
logic_database = LogicTaskDatabase()
logic_solver = LogicTaskSolver(logic_database)

def get_logic_task(task_type: str = None) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –¥–ª—è Rubin."""
    task = logic_database.get_task_by_type(task_type) if task_type else logic_database.get_random_task()
    return logic_database.format_task_for_chat(task)

def solve_logic_task(task_type: str = None, user_answer: str = None) -> Dict:
    """–†–µ—à–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É."""
    task = logic_database.get_task_by_type(task_type) if task_type else logic_database.get_random_task()
    return logic_solver.solve_task(task, user_answer)

def get_logic_statistics() -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á."""
    return logic_solver.get_statistics()

if __name__ == '__main__':
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–∞—á—É
    task = get_logic_task()
    print("üìù –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–∞—á–∞:")
    print(task)
    
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤:")
    stats = get_logic_statistics()
    for name, info in stats['dataset_stats'].items():
        print(f"  üîπ {name}: {info['count']} –∑–∞–¥–∞—á - {info['description']}")



