#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìö –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è
================================================

–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è Rubin AI
—Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∑–∞–¥–∞—á –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏—è–º–∏.

–ê–≤—Ç–æ—Ä: Rubin AI System
–í–µ—Ä—Å–∏—è: 2.0
"""

import sys
import os
import time
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from mathematical_problem_solver import MathematicalProblemSolver, ProblemType

def print_solution(solution, problem_text):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ—à–µ–Ω–∏—è"""
    print(f"\n{'='*60}")
    print(f"üìù –ó–∞–¥–∞—á–∞: {problem_text}")
    print(f"üéØ –¢–∏–ø: {solution.problem_type.value}")
    print(f"‚úÖ –û—Ç–≤–µ—Ç: {solution.final_answer}")
    print(f"üé≤ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {solution.confidence:.2f}")
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: {'‚úì' if solution.verification else '‚úó'}")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {solution.processing_time:.3f}s")
    
    if solution.solution_steps:
        print(f"\nüìã –ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ:")
        for i, step in enumerate(solution.solution_steps, 1):
            print(f"   {i}. {step}")
    
    if solution.explanation:
        print(f"\nüí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {solution.explanation}")

def example_arithmetic():
    """–ü—Ä–∏–º–µ—Ä—ã –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    print("\nüßÆ –ê–†–ò–§–ú–ï–¢–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò")
    print("="*60)
    
    solver = MathematicalProblemSolver()
    
    problems = [
        "–í—ã—á–∏—Å–ª–∏ 2 + 3 * 4",
        "–ü–æ—Å—á–∏—Ç–∞–π (10 - 3) * 2 + 5",
        "–ù–∞–π–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç 15 / 3 + 2 * 4",
        "–í—ã—á–∏—Å–ª–∏ 2^3 + 4 * 5",
        "–ù–∞–π–¥–∏ –∑–Ω–∞—á–µ–Ω–∏–µ 100 - 25 * 2 + 10"
    ]
    
    for problem in problems:
        start_time = time.time()
        solution = solver.solve_problem(problem)
        solution.processing_time = time.time() - start_time
        print_solution(solution, problem)

def example_equations():
    """–ü—Ä–∏–º–µ—Ä—ã —Ä–µ—à–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏–π"""
    print("\nüìê –†–ï–®–ï–ù–ò–ï –£–†–ê–í–ù–ï–ù–ò–ô")
    print("="*60)
    
    solver = MathematicalProblemSolver()
    
    problems = [
        "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ 2x + 5 = 13",
        "–ù–∞–π–¥–∏ x –≤ —É—Ä–∞–≤–Ω–µ–Ω–∏–∏ 3x - 7 = 8",
        "–†–µ—à–∏ 4x + 2 = 18",
        "–ù–∞–π–¥–∏ –∫–æ—Ä–µ–Ω—å —É—Ä–∞–≤–Ω–µ–Ω–∏—è 5x - 3 = 12",
        "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ 2x + 3 = 7"
    ]
    
    for problem in problems:
        start_time = time.time()
        solution = solver.solve_problem(problem)
        solution.processing_time = time.time() - start_time
        print_solution(solution, problem)

def example_quadratic_equations():
    """–ü—Ä–∏–º–µ—Ä—ã –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π"""
    print("\nüìä –ö–í–ê–î–†–ê–¢–ù–´–ï –£–†–ê–í–ù–ï–ù–ò–Ø")
    print("="*60)
    
    solver = MathematicalProblemSolver()
    
    problems = [
        "–†–µ—à–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x¬≤ - 5x + 6 = 0",
        "–ù–∞–π–¥–∏ –∫–æ—Ä–Ω–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è x¬≤ - 4 = 0",
        "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x¬≤ - 3x + 2 = 0",
        "–ù–∞–π–¥–∏ —Ä–µ—à–µ–Ω–∏—è x¬≤ + 2x - 3 = 0"
    ]
    
    for problem in problems:
        start_time = time.time()
        solution = solver.solve_problem(problem)
        solution.processing_time = time.time() - start_time
        print_solution(solution, problem)

def example_geometry():
    """–ü—Ä–∏–º–µ—Ä—ã –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    print("\nüìè –ì–ï–û–ú–ï–¢–†–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò")
    print("="*60)
    
    solver = MathematicalProblemSolver()
    
    problems = [
        "–ù–∞–π–¥–∏ –ø–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º 5 –∏ –≤—ã—Å–æ—Ç–æ–π 3",
        "–†–∞—Å—Å—á–∏—Ç–∞–π –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ —Å —Ä–∞–¥–∏—É—Å–æ–º 4",
        "–ù–∞–π–¥–∏ –ø–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –¥–ª–∏–Ω–æ–π 6 –∏ —à–∏—Ä–∏–Ω–æ–π 8",
        "–í—ã—á–∏—Å–ª–∏ –ø–ª–æ—â–∞–¥—å –∫–≤–∞–¥—Ä–∞—Ç–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–æ–π 5",
        "–ù–∞–π–¥–∏ –ø–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º 10 –∏ –≤—ã—Å–æ—Ç–æ–π 6"
    ]
    
    for problem in problems:
        start_time = time.time()
        solution = solver.solve_problem(problem)
        solution.processing_time = time.time() - start_time
        print_solution(solution, problem)

def example_trigonometry():
    """–ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    print("\nüìê –¢–†–ò–ì–û–ù–û–ú–ï–¢–†–ò–Ø")
    print("="*60)
    
    solver = MathematicalProblemSolver()
    
    problems = [
        "–í—ã—á–∏—Å–ª–∏ sin(30¬∞)",
        "–ù–∞–π–¥–∏ cos(60¬∞)",
        "–í—ã—á–∏—Å–ª–∏ tan(45¬∞)",
        "–ù–∞–π–¥–∏ sin(90¬∞)",
        "–í—ã—á–∏—Å–ª–∏ cos(0¬∞)"
    ]
    
    for problem in problems:
        start_time = time.time()
        solution = solver.solve_problem(problem)
        solution.processing_time = time.time() - start_time
        print_solution(solution, problem)

def example_statistics():
    """–ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("="*60)
    
    solver = MathematicalProblemSolver()
    
    problems = [
        "–ù–∞–π–¥–∏ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–µ–ª 1, 2, 3, 4, 5",
        "–†–∞—Å—Å—á–∏—Ç–∞–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö 10, 20, 30, 40, 50",
        "–ù–∞–π–¥–∏ —Å—Ä–µ–¥–Ω–µ–µ, –º–µ–¥–∏–∞–Ω—É –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è 2, 4, 6, 8, 10",
        "–í—ã—á–∏—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ 15, 25, 35, 45, 55"
    ]
    
    for problem in problems:
        start_time = time.time()
        solution = solver.solve_problem(problem)
        solution.processing_time = time.time() - start_time
        print_solution(solution, problem)

def example_percentage():
    """–ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç—ã"""
    print("\nüìà –ó–ê–î–ê–ß–ò –ù–ê –ü–†–û–¶–ï–ù–¢–´")
    print("="*60)
    
    solver = MathematicalProblemSolver()
    
    problems = [
        "–ù–∞–π–¥–∏ 15% –æ—Ç 200",
        "–°–∫–æ–ª—å–∫–æ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 25% –æ—Ç 80",
        "–ù–∞–π–¥–∏ 10% –æ—Ç 150",
        "–í—ã—á–∏—Å–ª–∏ 30% –æ—Ç 300",
        "–ù–∞–π–¥–∏ 5% –æ—Ç 1000"
    ]
    
    for problem in problems:
        start_time = time.time()
        solution = solver.solve_problem(problem)
        solution.processing_time = time.time() - start_time
        print_solution(solution, problem)

def example_complex_problems():
    """–ü—Ä–∏–º–µ—Ä—ã —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á"""
    print("\nüéØ –°–õ–û–ñ–ù–´–ï –ó–ê–î–ê–ß–ò")
    print("="*60)
    
    solver = MathematicalProblemSolver()
    
    problems = [
        "–†–µ—à–∏ —Å–∏—Å—Ç–µ–º—É —É—Ä–∞–≤–Ω–µ–Ω–∏–π: 2x + y = 5, x - y = 1",
        "–ù–∞–π–¥–∏ –æ–±—ä–µ–º —Ü–∏–ª–∏–Ω–¥—Ä–∞ —Å —Ä–∞–¥–∏—É—Å–æ–º 3 –∏ –≤—ã—Å–æ—Ç–æ–π 5",
        "–í—ã—á–∏—Å–ª–∏ –ø–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ì–µ—Ä–æ–Ω–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ 3, 4, 5",
        "–ù–∞–π–¥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–∏ sin(x)",
        "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x¬≥ - 6x¬≤ + 11x - 6 = 0"
    ]
    
    for problem in problems:
        start_time = time.time()
        solution = solver.solve_problem(problem)
        solution.processing_time = time.time() - start_time
        print_solution(solution, problem)

def interactive_mode():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
    print("\nüéÆ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú")
    print("="*60)
    print("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    
    solver = MathematicalProblemSolver()
    
    while True:
        try:
            problem = input("\nüìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É: ").strip()
            
            if problem.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if not problem:
                continue
            
            start_time = time.time()
            solution = solver.solve_problem(problem)
            solution.processing_time = time.time() - start_time
            
            print_solution(solution, problem)
            
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def benchmark_test():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("="*60)
    
    solver = MathematicalProblemSolver()
    
    test_problems = [
        "–í—ã—á–∏—Å–ª–∏ 2 + 3 * 4",
        "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ 2x + 5 = 13",
        "–ù–∞–π–¥–∏ –ø–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º 5 –∏ –≤—ã—Å–æ—Ç–æ–π 3",
        "–†–µ—à–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x¬≤ - 5x + 6 = 0",
        "–ù–∞–π–¥–∏ 15% –æ—Ç 200",
        "–í—ã—á–∏—Å–ª–∏ sin(30¬∞)",
        "–ù–∞–π–¥–∏ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–µ–ª 1, 2, 3, 4, 5"
    ]
    
    total_time = 0
    results = []
    
    for i, problem in enumerate(test_problems, 1):
        start_time = time.time()
        solution = solver.solve_problem(problem)
        processing_time = time.time() - start_time
        total_time += processing_time
        
        results.append({
            "problem": problem,
            "type": solution.problem_type.value,
            "answer": solution.final_answer,
            "confidence": solution.confidence,
            "time": processing_time
        })
        
        print(f"{i:2d}. {problem[:40]:<40} | {processing_time:.3f}s | {solution.confidence:.2f}")
    
    average_time = total_time / len(test_problems)
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(test_problems)}")
    print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.3f}s")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {average_time:.3f}s")
    print(f"   –ó–∞–¥–∞—á –≤ —Å–µ–∫—É–Ω–¥—É: {1/average_time:.1f}")
    
    return results

def save_results_to_file(results, filename="mathematical_results.json"):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üßÆ –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ï–®–ê–¢–ï–õ–¨ RUBIN AI")
    print("="*60)
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏")
    print("2. –†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–π")
    print("3. –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è")
    print("4. –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏")
    print("5. –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è")
    print("6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("7. –ó–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç—ã")
    print("8. –°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏")
    print("9. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("10. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
    print("11. –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã")
    print("0. –í—ã—Ö–æ–¥")
    
    while True:
        try:
            choice = input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (0-11): ").strip()
            
            if choice == '0':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == '1':
                example_arithmetic()
            elif choice == '2':
                example_equations()
            elif choice == '3':
                example_quadratic_equations()
            elif choice == '4':
                example_geometry()
            elif choice == '5':
                example_trigonometry()
            elif choice == '6':
                example_statistics()
            elif choice == '7':
                example_percentage()
            elif choice == '8':
                example_complex_problems()
            elif choice == '9':
                results = benchmark_test()
                save_results_to_file(results)
            elif choice == '10':
                interactive_mode()
            elif choice == '11':
                example_arithmetic()
                example_equations()
                example_quadratic_equations()
                example_geometry()
                example_trigonometry()
                example_statistics()
                example_percentage()
                example_complex_problems()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()

