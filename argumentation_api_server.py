#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
API —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Rubin AI
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç endpoints –¥–ª—è —Å–ø–æ—Ä–æ–≤, –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –∏ –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –æ—à–∏–±–æ–∫
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import time
import logging
from datetime import datetime
import json

from rubin_argumentation_system import RubinArgumentationSystem, Argument, Evidence, EvidenceType, ArgumentStrength

logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏
argumentation_system = RubinArgumentationSystem()

@app.route('/api/argumentation/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    return jsonify({
        "status": "Rubin AI Argumentation Server ONLINE",
        "timestamp": datetime.now().isoformat(),
        "knowledge_domains": list(argumentation_system.knowledge_base.keys()),
        "evidence_count": len(argumentation_system.evidence_database),
        "debate_history": len(argumentation_system.debate_history)
    }), 200

@app.route('/api/argumentation/create_argument', methods=['POST'])
def create_argument():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞"""
    try:
        data = request.get_json() or {}
        claim = data.get('claim', '')
        domain = data.get('domain', 'general')
        evidence_ids = data.get('evidence_ids', [])
        
        if not claim:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–∫–∞–∑–∞–Ω–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞"
            }), 400
        
        logger.info(f"‚öñÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: {claim}")
        
        argument = argumentation_system.create_argument(claim, domain, evidence_ids)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON-—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        argument_data = {
            "id": argument.id,
            "claim": argument.claim,
            "evidence_list": [
                {
                    "id": ev.id,
                    "description": ev.description,
                    "evidence_type": ev.evidence_type.value,
                    "strength": ev.strength.value,
                    "source": ev.source,
                    "domain": ev.domain,
                    "reliability": ev.reliability
                } for ev in argument.evidence_list
            ],
            "reasoning": argument.reasoning,
            "strength": argument.strength.value,
            "domain": argument.domain,
            "counter_arguments": argument.counter_arguments,
            "timestamp": argument.timestamp
        }
        
        response_data = {
            "success": True,
            "argument": argument_data,
            "message": f"–ê—Ä–≥—É–º–µ–Ω—Ç '{claim}' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ",
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 201
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞: {str(e)}"
        }), 500

@app.route('/api/argumentation/defend_position', methods=['POST'])
def defend_position():
    """–ó–∞—â–∏—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–ø–æ—Ä–µ"""
    try:
        data = request.get_json() or {}
        position = data.get('position', '')
        domain = data.get('domain', 'general')
        
        if not position:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–∫–∞–∑–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –∑–∞—â–∏—Ç—ã"
            }), 400
        
        logger.info(f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏: {position}")
        
        debate_position = argumentation_system.defend_position(position, domain)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ JSON-—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        arguments_data = []
        for arg in debate_position.arguments:
            arguments_data.append({
                "id": arg.id,
                "claim": arg.claim,
                "evidence_list": [
                    {
                        "id": ev.id,
                        "description": ev.description,
                        "evidence_type": ev.evidence_type.value,
                        "strength": ev.strength.value,
                        "source": ev.source,
                        "domain": ev.domain,
                        "reliability": ev.reliability
                    } for ev in arg.evidence_list
                ],
                "reasoning": arg.reasoning,
                "strength": arg.strength.value,
                "domain": arg.domain,
                "counter_arguments": arg.counter_arguments
            })
        
        response_data = {
            "success": True,
            "position": debate_position.position,
            "arguments": arguments_data,
            "confidence": debate_position.confidence,
            "evidence_support": debate_position.evidence_support,
            "logical_consistency": debate_position.logical_consistency,
            "message": f"–ü–æ–∑–∏—Ü–∏—è '{position}' –∑–∞—â–∏—â–µ–Ω–∞ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {debate_position.confidence:.2%}",
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞—â–∏—Ç—ã –ø–æ–∑–∏—Ü–∏–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –∑–∞—â–∏—Ç—ã –ø–æ–∑–∏—Ü–∏–∏: {str(e)}"
        }), 500

@app.route('/api/argumentation/challenge_argument', methods=['POST'])
def challenge_argument():
    """–û—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞"""
    try:
        data = request.get_json() or {}
        argument_data = data.get('argument', {})
        challenge = data.get('challenge', '')
        
        if not argument_data or not challenge:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç –∏–ª–∏ –≤—ã–∑–æ–≤"
            }), 400
        
        logger.info(f"ü§î –û—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: {argument_data.get('claim', '')}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç Argument –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        argument = Argument(
            id=argument_data.get('id', ''),
            claim=argument_data.get('claim', ''),
            evidence_list=[],  # –£–ø—Ä–æ—â–∞–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            reasoning=argument_data.get('reasoning', ''),
            strength=ArgumentStrength(argument_data.get('strength', 'weak')),
            domain=argument_data.get('domain', 'general'),
            counter_arguments=argument_data.get('counter_arguments', []),
            timestamp=argument_data.get('timestamp', '')
        )
        
        challenge_result = argumentation_system.challenge_argument(argument, challenge)
        
        response_data = {
            "success": True,
            "challenge": challenge,
            "challenge_strength": challenge_result['challenge_strength'],
            "fallacies_detected": challenge_result['fallacies_detected'],
            "response": challenge_result['response'],
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞: {str(e)}"
        }), 500

@app.route('/api/argumentation/acknowledge_error', methods=['POST'])
def acknowledge_error():
    """–ü—Ä–∏–∑–Ω–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
    try:
        data = request.get_json() or {}
        argument_data = data.get('argument', {})
        error_description = data.get('error_description', '')
        
        if not argument_data or not error_description:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"
            }), 400
        
        logger.info(f"‚úÖ –ü—Ä–∏–∑–Ω–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ: {argument_data.get('claim', '')}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç Argument –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        argument = Argument(
            id=argument_data.get('id', ''),
            claim=argument_data.get('claim', ''),
            evidence_list=[],  # –£–ø—Ä–æ—â–∞–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            reasoning=argument_data.get('reasoning', ''),
            strength=ArgumentStrength(argument_data.get('strength', 'weak')),
            domain=argument_data.get('domain', 'general'),
            counter_arguments=argument_data.get('counter_arguments', []),
            timestamp=argument_data.get('timestamp', '')
        )
        
        acknowledgment = argumentation_system.acknowledge_error(argument, error_description)
        
        response_data = {
            "success": True,
            "argument_id": argument.id,
            "claim": argument.claim,
            "error_description": error_description,
            "acknowledgment": acknowledgment,
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏–∑–Ω–∞–Ω–∞ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –æ—à–∏–±–∫–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –æ—à–∏–±–∫–∏: {str(e)}"
        }), 500

@app.route('/api/argumentation/debate', methods=['POST'])
def conduct_debate():
    """–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–ø–æ—Ä–∞"""
    try:
        data = request.get_json() or {}
        topic = data.get('topic', '')
        position = data.get('position', '')
        domain = data.get('domain', 'general')
        opponent_arguments = data.get('opponent_arguments', [])
        
        if not topic or not position:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ç–µ–º–∞ –∏–ª–∏ –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Å–ø–æ—Ä–∞"
            }), 400
        
        logger.info(f"‚öñÔ∏è –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–ø–æ—Ä–∞: {topic}")
        
        # –ó–∞—â–∏—â–∞–µ–º —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é
        my_position = argumentation_system.defend_position(position, domain)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
        opponent_analysis = []
        for opp_arg in opponent_arguments:
            analysis = {
                "argument": opp_arg,
                "strength": argumentation_system._evaluate_challenge_strength(opp_arg, my_position.arguments[0]) if my_position.arguments else 0.5,
                "fallacies": argumentation_system._detect_logical_fallacies(opp_arg),
                "response": argumentation_system._defend_against_challenge(my_position.arguments[0], opp_arg) if my_position.arguments else "–ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞"
            }
            opponent_analysis.append(analysis)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–æ—Ä–∞
        my_confidence = my_position.confidence
        opponent_strength = sum(analysis['strength'] for analysis in opponent_analysis) / max(len(opponent_analysis), 1)
        
        if my_confidence > opponent_strength + 0.2:
            debate_result = "victory"
            result_message = f"–ú–æ—è –ø–æ–∑–∏—Ü–∏—è '{position}' –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∞ —Å–∏–ª—å–Ω–µ–µ"
        elif opponent_strength > my_confidence + 0.2:
            debate_result = "defeat"
            result_message = f"–ê—Ä–≥—É–º–µ–Ω—Ç—ã –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ —Å–∏–ª—å–Ω–µ–µ –º–æ–µ–π –ø–æ–∑–∏—Ü–∏–∏"
        else:
            debate_result = "draw"
            result_message = f"–°–ø–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–∏—á—å–µ–π - –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏–º–µ—é—Ç –≤–µ—Å–∫–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        
        response_data = {
            "success": True,
            "topic": topic,
            "my_position": {
                "position": my_position.position,
                "confidence": my_position.confidence,
                "evidence_support": my_position.evidence_support,
                "logical_consistency": my_position.logical_consistency,
                "arguments_count": len(my_position.arguments)
            },
            "opponent_analysis": opponent_analysis,
            "debate_result": debate_result,
            "result_message": result_message,
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–ø–æ—Ä–∞: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–ø–æ—Ä–∞: {str(e)}"
        }), 500

@app.route('/api/argumentation/evidence', methods=['GET'])
def get_evidence():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤"""
    try:
        domain = request.args.get('domain', '')
        
        logger.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤")
        
        evidence_list = argumentation_system.evidence_database
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–æ–º–µ–Ω—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if domain:
            evidence_list = [ev for ev in evidence_list if ev.domain == domain]
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON-—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        evidence_data = [
            {
                "id": ev.id,
                "description": ev.description,
                "evidence_type": ev.evidence_type.value,
                "strength": ev.strength.value,
                "source": ev.source,
                "domain": ev.domain,
                "reliability": ev.reliability,
                "timestamp": ev.timestamp
            } for ev in evidence_list
        ]
        
        response_data = {
            "success": True,
            "evidence": evidence_data,
            "total_count": len(evidence_data),
            "domain_filter": domain,
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤: {str(e)}"
        }), 500

@app.route('/api/argumentation/domains', methods=['GET'])
def get_domains():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –∑–Ω–∞–Ω–∏–π"""
    try:
        logger.info("üìö –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–æ–≤ –∑–Ω–∞–Ω–∏–π")
        
        domains_info = {}
        for domain, knowledge in argumentation_system.knowledge_base.items():
            domains_info[domain] = {
                "laws": knowledge.get("laws", []),
                "principles": knowledge.get("principles", []),
                "facts": knowledge.get("facts", []),
                "evidence_count": len([ev for ev in argumentation_system.evidence_database if ev.domain == domain])
            }
        
        response_data = {
            "success": True,
            "domains": domains_info,
            "total_domains": len(domains_info),
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤: {str(e)}"
        }), 500

@app.route('/api/argumentation/history', methods=['GET'])
def get_debate_history():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–ø–æ—Ä–æ–≤"""
    try:
        logger.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–ø–æ—Ä–æ–≤")
        
        response_data = {
            "success": True,
            "debate_history": argumentation_system.debate_history,
            "total_debates": len(argumentation_system.debate_history),
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"
        }), 500

@app.route('/api/argumentation/chat_integration', methods=['POST'])
def chat_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —á–∞—Ç–æ–º RubinDeveloper"""
    try:
        data = request.get_json() or {}
        message = data.get('message', '')
        context = data.get('context', {})
        
        logger.info(f"üí¨ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å —á–∞—Ç–æ–º: {message}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        message_lower = message.lower()
        
        if any(word in message_lower for word in ["–¥–æ–∫–∞–∂–∏", "–æ–±–æ—Å–Ω—É–π", "–∞—Ä–≥—É–º–µ–Ω—Ç", "—Å–ø–æ—Ä"]):
            # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
            domain = context.get('domain', 'general')
            argument = argumentation_system.create_argument(message, domain)
            
            response_data = {
                "success": True,
                "type": "argument",
                "argument": {
                    "claim": argument.claim,
                    "reasoning": argument.reasoning,
                    "strength": argument.strength.value,
                    "evidence_count": len(argument.evidence_list)
                },
                "message": f"–ê—Ä–≥—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {argument.claim}",
                "timestamp": datetime.now().isoformat()
            }
            
        elif any(word in message_lower for word in ["–æ—à–∏–±–∫–∞", "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ", "–Ω–µ–≤–µ—Ä–Ω–æ"]):
            # –ü—Ä–∏–∑–Ω–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            response_data = {
                "success": True,
                "type": "error_acknowledgment",
                "message": "ü§î –í—ã –ø—Ä–∞–≤—ã, —è –≥–æ—Ç–æ–≤ –ø—Ä–∏–∑–Ω–∞—Ç—å –æ—à–∏–±–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –≤ —á–µ–º –∏–º–µ–Ω–Ω–æ —è –æ—à–∏–±—Å—è?",
                "timestamp": datetime.now().isoformat()
            }
            
        elif any(word in message_lower for word in ["–∑–∞—â–∏—Ç–∏", "–∑–∞—â–∏—â–∞–π", "–æ—Ç—Å—Ç–∞–∏–≤–∞–π"]):
            # –ó–∞—â–∏—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏
            domain = context.get('domain', 'general')
            position = argumentation_system.defend_position(message, domain)
            
            response_data = {
                "success": True,
                "type": "position_defense",
                "position": {
                    "position": position.position,
                    "confidence": position.confidence,
                    "arguments_count": len(position.arguments)
                },
                "message": f"–ü–æ–∑–∏—Ü–∏—è –∑–∞—â–∏—â–µ–Ω–∞ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {position.confidence:.2%}",
                "timestamp": datetime.now().isoformat()
            }
            
        else:
            # –û–±—â–∏–π –æ—Ç–≤–µ—Ç
            response_data = {
                "success": True,
                "type": "general",
                "message": "‚öñÔ∏è –Ø –≥–æ—Ç–æ–≤ –∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –æ–±—Å—É–∂–¥–µ–Ω–∏—é. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –∏–ª–∏ –æ—Å–ø–æ—Ä–∏—Ç—å?",
                "timestamp": datetime.now().isoformat()
            }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —á–∞—Ç–æ–º: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —á–∞—Ç–æ–º: {str(e)}"
        }), 500

if __name__ == '__main__':
    port = 8100  # –ù–æ–≤—ã–π –ø–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    logger.info(f"‚öñÔ∏è –ó–∞–ø—É—Å–∫ Rubin AI Argumentation —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    app.run(port=port, debug=True, use_reloader=False)





