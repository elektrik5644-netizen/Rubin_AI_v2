#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —É–ª—É—á—à–µ–Ω–∏—è–º —Å–∏—Å—Ç–µ–º—ã Rubin AI
"""

import sqlite3
import json
from datetime import datetime

def generate_final_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –£–õ–£–ß–®–ï–ù–ò–Ø–ú RUBIN AI")
    print("=" * 60)
    
    try:
        conn = sqlite3.connect("rubin_ai_v2.db")
        cursor = conn.cursor()
        
        # 1. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        print("\nüìÑ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û–ö–£–ú–ï–ù–¢–û–í:")
        cursor.execute("SELECT COUNT(*) FROM documents")
        total_docs = cursor.fetchone()[0]
        print(f"  - –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_docs}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        cursor.execute("""
            SELECT category, COUNT(*) 
            FROM documents 
            GROUP BY category 
            ORDER BY COUNT(*) DESC
        """)
        categories = cursor.fetchall()
        print("  - –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for category, count in categories:
            print(f"    ‚Ä¢ {category}: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
        print("\nüîç –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–ù–û–ù–ò–ú–û–í:")
        cursor.execute("SELECT COUNT(*) FROM synonyms")
        total_synonyms = cursor.fetchone()[0]
        print(f"  - –í—Å–µ–≥–æ —Å–∏–Ω–æ–Ω–∏–º–æ–≤: {total_synonyms}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å–∏–Ω–æ–Ω–∏–º–æ–≤
        cursor.execute("""
            SELECT category, COUNT(*) 
            FROM synonyms 
            GROUP BY category 
            ORDER BY COUNT(*) DESC
        """)
        syn_categories = cursor.fetchall()
        print("  - –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for category, count in syn_categories:
            print(f"    ‚Ä¢ {category}: {count} —Å–∏–Ω–æ–Ω–∏–º–æ–≤")
        
        # 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
        print("\n‚öôÔ∏è –ü–ê–†–ê–ú–ï–¢–†–´ –ü–û–ò–°–ö–ê:")
        cursor.execute("SELECT COUNT(*) FROM search_parameters")
        total_params = cursor.fetchone()[0]
        print(f"  - –í—Å–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {total_params}")
        
        # –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        cursor.execute("SELECT parameter_name, parameter_value, description FROM search_parameters")
        params = cursor.fetchall()
        print("  - –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        for name, value, desc in params:
            print(f"    ‚Ä¢ {name}: {value} - {desc}")
        
        # 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        print("\nüìä –ú–ï–¢–ê–î–ê–ù–ù–´–ï –î–û–ö–£–ú–ï–ù–¢–û–í:")
        cursor.execute("SELECT COUNT(*) FROM documents WHERE tags IS NOT NULL AND tags != '[]'")
        docs_with_tags = cursor.fetchone()[0]
        print(f"  - –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–≥–∞–º–∏: {docs_with_tags}")
        
        cursor.execute("SELECT COUNT(*) FROM documents WHERE difficulty_level IS NOT NULL")
        docs_with_difficulty = cursor.fetchone()[0]
        print(f"  - –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —É—Ä–æ–≤–Ω–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {docs_with_difficulty}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        cursor.execute("""
            SELECT difficulty_level, COUNT(*) 
            FROM documents 
            WHERE difficulty_level IS NOT NULL
            GROUP BY difficulty_level
        """)
        difficulties = cursor.fetchall()
        print("  - –ü–æ —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
        for level, count in difficulties:
            print(f"    ‚Ä¢ {level}: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        print("\nüîÑ –°–ò–°–¢–ï–ú–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô:")
        cursor.execute("SELECT COUNT(*) FROM update_schedule")
        total_tasks = cursor.fetchone()[0]
        print(f"  - –í—Å–µ–≥–æ –∑–∞–¥–∞—á –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {total_tasks}")
        
        # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        cursor.execute("SELECT task_name, description, interval_hours FROM update_schedule")
        tasks = cursor.fetchall()
        print("  - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
        for name, desc, interval in tasks:
            print(f"    ‚Ä¢ {name}: {desc} (–∫–∞–∂–¥—ã–µ {interval} —á–∞—Å–æ–≤)")
        
        # 6. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("\nüìà –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
        
        # –î–æ–∫—É–º–µ–Ω—Ç—ã —Å —Ö–æ—Ä–æ—à–∏–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        cursor.execute("""
            SELECT COUNT(*) FROM documents 
            WHERE tags IS NOT NULL AND tags != '[]' 
            AND difficulty_level IS NOT NULL 
            AND last_updated IS NOT NULL
        """)
        well_metadata_docs = cursor.fetchone()[0]
        metadata_quality = (well_metadata_docs / total_docs) * 100
        print(f"  - –ö–∞—á–µ—Å—Ç–≤–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {metadata_quality:.1f}%")
        
        # –ü–æ–∫—Ä—ã—Ç–∏–µ —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
        cursor.execute("SELECT COUNT(DISTINCT term) FROM synonyms")
        unique_terms = cursor.fetchone()[0]
        print(f"  - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏: {unique_terms}")
        
        # 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –î–ê–õ–¨–ù–ï–ô–®–ï–ú–£ –†–ê–ó–í–ò–¢–ò–Æ:")
        
        if metadata_quality < 80:
            print("  üîß –£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        if total_synonyms < 500:
            print("  üîç –†–∞—Å—à–∏—Ä–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤")
        
        if total_docs < 200:
            print("  üìÑ –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        print("  üß™ –†–µ–≥—É–ª—è—Ä–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞")
        print("  üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã")
        print("  üîÑ –í—ã–ø–æ–ª–Ω—è—Ç—å –ø–ª–∞–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤")
        
        # 8. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        print("\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –£–õ–£–ß–®–ï–ù–ò–ô:")
        
        improvement_score = 0
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
        if total_docs >= 100:
            improvement_score += 25
        elif total_docs >= 50:
            improvement_score += 15
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º
        if total_synonyms >= 300:
            improvement_score += 25
        elif total_synonyms >= 200:
            improvement_score += 15
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
        if metadata_quality >= 90:
            improvement_score += 25
        elif metadata_quality >= 70:
            improvement_score += 15
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –ø–æ–∏—Å–∫–∞
        if total_params >= 10:
            improvement_score += 25
        elif total_params >= 5:
            improvement_score += 15
        
        print(f"  - –û–±—â–∏–π –±–∞–ª–ª —É–ª—É—á—à–µ–Ω–∏–π: {improvement_score}/100")
        
        if improvement_score >= 90:
            print("  üèÜ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–∞")
        elif improvement_score >= 70:
            print("  ‚úÖ –•–û–†–û–®–û! –°–∏—Å—Ç–µ–º–∞ —Ö–æ—Ä–æ—à–æ —É–ª—É—á—à–µ–Ω–∞")
        elif improvement_score >= 50:
            print("  ‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
        else:
            print("  ‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê! –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    generate_final_report()
    
    print("\n" + "=" * 60)
    print("üéâ –û–¢–ß–ï–¢ –ó–ê–í–ï–†–®–ï–ù!")
    print("üìÖ –î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    print("=" * 60)

if __name__ == "__main__":
    main()

















