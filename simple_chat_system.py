#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —á–∞—Ç–∞ –¥–ª—è Rubin AI –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import json
import re
from datetime import datetime
from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

class SimpleRubinAI:
    """–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ AI –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    def __init__(self):
        self.knowledge_base = self.load_knowledge_base()
        self.conversation_history = []
    
    def load_knowledge_base(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        knowledge = {
            # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
            'python': {
                'keywords': ['python', '–ø–∏—Ç–æ–Ω', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–¥'],
                'responses': [
                    "Python - –æ—Ç–ª–∏—á–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è! –ú–æ–≥—É –ø–æ–º–æ—á—å —Å:\n‚Ä¢ –°–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏ (numpy, pandas, matplotlib)\n‚Ä¢ –û–û–ü –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n‚Ä¢ –û—Ç–ª–∞–¥–∫–æ–π –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∫–æ–¥–∞",
                    "Python —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:\n‚Ä¢ –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (Django, Flask)\n‚Ä¢ Data Science –∏ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ —Å–∫—Ä–∏–ø—Ç–∏–Ω–≥–µ\n‚Ä¢ –ù–∞—É—á–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏—è—Ö"
                ]
            },
            
            # –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞
            'electronics': {
                'keywords': ['—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä', '–¥–∏–æ–¥', '—Ä–µ–∑–∏—Å—Ç–æ—Ä', '–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä', '—Å—Ö–µ–º–∞', '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞'],
                'responses': [
                    "–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ - –æ—Å–Ω–æ–≤–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏!\n‚Ä¢ –¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã - –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É—Å–∏–ª–∏—Ç–µ–ª–µ–π –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π\n‚Ä¢ –î–∏–æ–¥—ã - –≤—ã–ø—Ä—è–º–ª—è—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫\n‚Ä¢ –†–µ–∑–∏—Å—Ç–æ—Ä—ã - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—Ç —Ç–æ–∫\n‚Ä¢ –ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã - –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç —ç–Ω–µ—Ä–≥–∏—é",
                    "–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–∫–æ–Ω—ã:\n‚Ä¢ –ó–∞–∫–æ–Ω –û–º–∞: U = I √ó R\n‚Ä¢ –ó–∞–∫–æ–Ω—ã –ö–∏—Ä—Ö–≥–æ—Ñ–∞\n‚Ä¢ –ú–æ—â–Ω–æ—Å—Ç—å: P = U √ó I\n‚Ä¢ –≠–Ω–µ—Ä–≥–∏—è: W = P √ó t"
                ]
            },
            
            # –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
            'automation': {
                'keywords': ['plc', 'scada', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', 'pmac', '—á–ø—É'],
                'responses': [
                    "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–∞–µ—Ç:\n‚Ä¢ PLC (–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º—ã–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã)\n‚Ä¢ SCADA —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n‚Ä¢ PMAC –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n‚Ä¢ –ß–ü–£ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Å—Ç–∞–Ω–∫–æ–≤",
                    "–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã:\n‚Ä¢ Modbus RTU/TCP\n‚Ä¢ Profinet\n‚Ä¢ Ethernet/IP\n‚Ä¢ OPC UA"
                ]
            },
            
            # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
            'mathematics': {
                'keywords': ['–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–≤—ã—á–∏—Å–ª–∏—Ç—å', '—Ä–µ—à–∏—Ç—å', '—Ñ–æ—Ä–º—É–ª–∞', '—É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '+', '-', '*', '/'],
                'responses': [
                    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - —è–∑—ã–∫ –Ω–∞—É–∫–∏!\n‚Ä¢ –ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞: —Å–ª–æ–∂–µ–Ω–∏–µ, –≤—ã—á–∏—Ç–∞–Ω–∏–µ, —É–º–Ω–æ–∂–µ–Ω–∏–µ, –¥–µ–ª–µ–Ω–∏–µ\n‚Ä¢ –ê–ª–≥–µ–±—Ä–∞: —É—Ä–∞–≤–Ω–µ–Ω–∏—è, —Ñ—É–Ω–∫—Ü–∏–∏, –≥—Ä–∞—Ñ–∏–∫–∏\n‚Ä¢ –ì–µ–æ–º–µ—Ç—Ä–∏—è: –ø–ª–æ—â–∞–¥–∏, –æ–±—ä–µ–º—ã, —É–≥–ª—ã\n‚Ä¢ –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è: —Å–∏–Ω—É—Å—ã, –∫–æ—Å–∏–Ω—É—Å—ã, —Ç–∞–Ω–≥–µ–Ω—Å—ã"
                ]
            },
            
            # –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
            'general': {
                'keywords': ['–ø—Ä–∏–≤–µ—Ç', '–∫–∞–∫ –¥–µ–ª–∞', '—á—Ç–æ —É–º–µ–µ—à—å', '–ø–æ–º–æ—â—å', 'help'],
                'responses': [
                    "–ü—Ä–∏–≤–µ—Ç! –Ø Rubin AI - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º.\n\n–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞:\n‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ (Python, C++, PLC)\n‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ –∏ —Å—Ö–µ–º–æ—Ç–µ—Ö–Ω–∏–∫–µ\n‚Ä¢ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏\n‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏ —Ñ–∏–∑–∏–∫–µ\n\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                    "–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞\n‚Ä¢ –†–µ—à–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á\n‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Å—Ö–µ–º\n‚Ä¢ –ü–æ–º–æ—â—å —Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π\n‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"
                ]
            }
        }
        return knowledge
    
    def classify_message(self, message):
        """–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message_lower = message.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        for category, data in self.knowledge_base.items():
            for keyword in data['keywords']:
                if keyword in message_lower:
                    return category
        
        return 'general'
    
    def solve_math(self, message):
        """–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        # –ò—â–µ–º –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        pattern = r'(\d+)\s*([+\-*/])\s*(\d+)'
        match = re.search(pattern, message)
        
        if match:
            num1 = int(match.group(1))
            op = match.group(2)
            num2 = int(match.group(3))
            
            if op == '+':
                result = num1 + num2
            elif op == '-':
                result = num1 - num2
            elif op == '*':
                result = num1 * num2
            elif op == '/':
                result = num1 / num2 if num2 != 0 else "–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!"
            
            return f"üßÆ **–†–µ—à–µ–Ω–∏–µ:** {num1} {op} {num2} = {result}"
        
        return None
    
    def generate_response(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.conversation_history.append({
            'timestamp': datetime.now().isoformat(),
            'user_message': message,
            'category': None
        })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
        math_result = self.solve_math(message)
        if math_result:
            return {
                'response': math_result,
                'category': 'mathematics',
                'confidence': 0.9,
                'source': 'math_solver'
            }
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        category = self.classify_message(message)
        
        # –í—ã–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç
        if category in self.knowledge_base:
            responses = self.knowledge_base[category]['responses']
            import random
            response = random.choice(responses)
        else:
            response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏, —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏."
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        self.conversation_history[-1]['category'] = category
        
        return {
            'response': response,
            'category': category,
            'confidence': 0.8,
            'source': 'knowledge_base'
        }

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä AI
rubin_ai = SimpleRubinAI()

@app.route('/api/chat', methods=['POST', 'OPTIONS'])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —á–∞—Ç–∞"""
    if request.method == 'OPTIONS':
        return '', 200
    
    try:
        data = request.get_json()
        message = data.get('message', '')
        
        if not message:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = rubin_ai.generate_response(message)
        response['timestamp'] = datetime.now().isoformat()
        
        return jsonify(response)
        
    except Exception as e:
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}',
            'response': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/api/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'system': 'Simple Rubin AI',
        'conversations': len(rubin_ai.conversation_history)
    })

@app.route('/api/stats')
def stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    return jsonify({
        'conversations': len(rubin_ai.conversation_history),
        'knowledge_categories': len(rubin_ai.knowledge_base),
        'system': 'Simple Rubin AI',
        'timestamp': datetime.now().isoformat()
    })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ Simple Rubin AI...")
    print("üì° API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:8085")
    print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: http://localhost:8085/api/health")
    app.run(host='0.0.0.0', port=8085, debug=True)












