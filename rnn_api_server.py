#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
API —Å–µ—Ä–≤–µ—Ä –¥–ª—è RNN (Recurrent Neural Networks) Rubin AI
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç endpoints –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–º–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import time
import logging
from datetime import datetime
import numpy as np

from rubin_rnn import RubinRNNManager, RubinRNNClassifier, RubinRNNRegressor

logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RNN Manager
rnn_manager = RubinRNNManager()

@app.route('/api/rnn/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è RNN —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "status": "Rubin AI RNN Server ONLINE",
        "timestamp": datetime.now().isoformat(),
        "device": str(rnn_manager.device),
        "models_count": len(rnn_manager.models),
        "available_rnn_types": ["rnn", "lstm", "gru"],
        "available_tasks": ["classification", "regression"]
    }), 200

@app.route('/api/rnn/create_classifier', methods=['POST'])
def create_rnn_classifier():
    """–°–æ–∑–¥–∞–Ω–∏–µ RNN –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"""
    try:
        data = request.get_json() or {}
        input_size = data.get('input_size', 10)
        hidden_size = data.get('hidden_size', 64)
        num_classes = data.get('num_classes', 5)
        rnn_type = data.get('rnn_type', 'lstm')
        num_layers = data.get('num_layers', 1)
        dropout = data.get('dropout', 0.0)
        bidirectional = data.get('bidirectional', False)
        model_name = data.get('model_name', f'rnn_classifier_{len(rnn_manager.models)}')
        
        logger.info(f"üéØ –°–æ–∑–¥–∞–Ω–∏–µ RNN –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: {model_name}")
        
        model = rnn_manager.create_rnn_classifier(
            input_size=input_size,
            hidden_size=hidden_size,
            num_classes=num_classes,
            rnn_type=rnn_type,
            num_layers=num_layers,
            dropout=dropout,
            bidirectional=bidirectional,
            model_name=model_name
        )
        
        if model:
            model_info = rnn_manager.get_model_info(model_name)
            response_data = {
                "success": True,
                "model_name": model_name,
                "model_info": model_info,
                "message": f"RNN –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä '{model_name}' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ",
                "timestamp": datetime.now().isoformat()
            }
            return jsonify(response_data), 201
        else:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å RNN –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä"
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RNN –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RNN –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: {str(e)}"
        }), 500

@app.route('/api/rnn/create_regressor', methods=['POST'])
def create_rnn_regressor():
    """–°–æ–∑–¥–∞–Ω–∏–µ RNN —Ä–µ–≥—Ä–µ—Å—Å–æ—Ä–∞"""
    try:
        data = request.get_json() or {}
        input_size = data.get('input_size', 10)
        hidden_size = data.get('hidden_size', 64)
        output_size = data.get('output_size', 1)
        rnn_type = data.get('rnn_type', 'lstm')
        num_layers = data.get('num_layers', 1)
        dropout = data.get('dropout', 0.0)
        bidirectional = data.get('bidirectional', False)
        model_name = data.get('model_name', f'rnn_regressor_{len(rnn_manager.models)}')
        
        logger.info(f"üéØ –°–æ–∑–¥–∞–Ω–∏–µ RNN —Ä–µ–≥—Ä–µ—Å—Å–æ—Ä–∞: {model_name}")
        
        model = rnn_manager.create_rnn_regressor(
            input_size=input_size,
            hidden_size=hidden_size,
            output_size=output_size,
            rnn_type=rnn_type,
            num_layers=num_layers,
            dropout=dropout,
            bidirectional=bidirectional,
            model_name=model_name
        )
        
        if model:
            model_info = rnn_manager.get_model_info(model_name)
            response_data = {
                "success": True,
                "model_name": model_name,
                "model_info": model_info,
                "message": f"RNN —Ä–µ–≥—Ä–µ—Å—Å–æ—Ä '{model_name}' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ",
                "timestamp": datetime.now().isoformat()
            }
            return jsonify(response_data), 201
        else:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å RNN —Ä–µ–≥—Ä–µ—Å—Å–æ—Ä"
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RNN —Ä–µ–≥—Ä–µ—Å—Å–æ—Ä–∞: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RNN —Ä–µ–≥—Ä–µ—Å—Å–æ—Ä–∞: {str(e)}"
        }), 500

@app.route('/api/rnn/train', methods=['POST'])
def train_model():
    """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    try:
        data = request.get_json() or {}
        model_name = data.get('model_name')
        epochs = data.get('epochs', 10)
        learning_rate = data.get('learning_rate', 0.001)
        task_type = data.get('task_type', 'classification')
        
        if not model_name:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –º–æ–¥–µ–ª–∏"
            }), 400
        
        logger.info(f"üöÄ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}")
        
        start_time = time.time()
        success = rnn_manager.train_model(model_name, None, epochs, learning_rate, task_type)
        end_time = time.time()
        
        training_time = end_time - start_time
        
        if success:
            model_info = rnn_manager.get_model_info(model_name)
            response_data = {
                "success": True,
                "model_name": model_name,
                "task_type": task_type,
                "epochs": epochs,
                "learning_rate": learning_rate,
                "training_time_seconds": f"{training_time:.2f}",
                "training_history": model_info.get("training_history", []),
                "message": f"–ú–æ–¥–µ–ª—å '{model_name}' –æ–±—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                "timestamp": datetime.now().isoformat()
            }
            return jsonify(response_data), 200
        else:
            return jsonify({
                "success": False,
                "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å '{model_name}'"
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {str(e)}"
        }), 500

@app.route('/api/rnn/predict', methods=['POST'])
def predict():
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏"""
    try:
        data = request.get_json() or {}
        model_name = data.get('model_name')
        input_data = data.get('input_data')
        
        if not model_name:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –º–æ–¥–µ–ª–∏"
            }), 400
        
        if not input_data:
            return jsonify({
                "success": False,
                "error": "–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
            }), 400
        
        logger.info(f"üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ numpy array
        import numpy as np
        if isinstance(input_data, list):
            input_array = np.array(input_data)
        else:
            input_array = input_data
        
        # –î–æ–±–∞–≤–ª—è–µ–º batch dimension –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if input_array.ndim == 2:
            input_array = input_array.reshape(1, *input_array.shape)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ tensor
        import torch
        input_tensor = torch.FloatTensor(input_array)
        
        start_time = time.time()
        predictions = rnn_manager.predict(model_name, input_tensor)
        end_time = time.time()
        
        prediction_time = end_time - start_time
        
        if predictions is not None:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–æ–¥–µ–ª–∏
            model_info = rnn_manager.get_model_info(model_name)
            is_classifier = "Classifier" in model_info["type"]
            
            if is_classifier:
                # –î–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
                predicted_class = np.argmax(predictions, axis=1)
                confidence = np.max(predictions, axis=1)
                
                response_data = {
                    "success": True,
                    "model_name": model_name,
                    "model_type": "classifier",
                    "predictions": predictions.tolist(),
                    "predicted_classes": predicted_class.tolist(),
                    "confidence_scores": confidence.tolist(),
                    "prediction_time_seconds": f"{prediction_time:.4f}",
                    "timestamp": datetime.now().isoformat()
                }
            else:
                # –î–ª—è —Ä–µ–≥—Ä–µ—Å—Å–æ—Ä–∞
                response_data = {
                    "success": True,
                    "model_name": model_name,
                    "model_type": "regressor",
                    "predictions": predictions.tolist(),
                    "prediction_time_seconds": f"{prediction_time:.4f}",
                    "timestamp": datetime.now().isoformat()
                }
            
            return jsonify(response_data), 200
        else:
            return jsonify({
                "success": False,
                "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç –º–æ–¥–µ–ª–∏ '{model_name}'"
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}"
        }), 500

@app.route('/api/rnn/models', methods=['GET'])
def get_models():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
    try:
        logger.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π")
        
        all_models_info = rnn_manager.get_all_models_info()
        
        response_data = {
            "success": True,
            "models": all_models_info,
            "total_models": len(all_models_info),
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {str(e)}"
        }), 500

@app.route('/api/rnn/model/<model_name>', methods=['GET'])
def get_model_info(model_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    try:
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {model_name}")
        
        model_info = rnn_manager.get_model_info(model_name)
        
        if model_info:
            response_data = {
                "success": True,
                "model_info": model_info,
                "timestamp": datetime.now().isoformat()
            }
            return jsonify(response_data), 200
        else:
            return jsonify({
                "success": False,
                "error": f"–ú–æ–¥–µ–ª—å '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }), 404
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {str(e)}"
        }), 500

@app.route('/api/rnn/save/<model_name>', methods=['POST'])
def save_model(model_name):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    try:
        data = request.get_json() or {}
        filepath = data.get('filepath', f'models/{model_name}.pth')
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}")
        
        success = rnn_manager.save_model(model_name, filepath)
        
        if success:
            response_data = {
                "success": True,
                "model_name": model_name,
                "filepath": filepath,
                "message": f"–ú–æ–¥–µ–ª—å '{model_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {filepath}",
                "timestamp": datetime.now().isoformat()
            }
            return jsonify(response_data), 200
        else:
            return jsonify({
                "success": False,
                "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª—å '{model_name}'"
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {str(e)}"
        }), 500

@app.route('/api/rnn/load', methods=['POST'])
def load_model():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"""
    try:
        data = request.get_json() or {}
        model_name = data.get('model_name')
        filepath = data.get('filepath')
        input_size = data.get('input_size')
        hidden_size = data.get('hidden_size')
        num_classes = data.get('num_classes')
        output_size = data.get('output_size')
        rnn_type = data.get('rnn_type', 'lstm')
        num_layers = data.get('num_layers', 1)
        dropout = data.get('dropout', 0.0)
        bidirectional = data.get('bidirectional', False)
        
        if not model_name or not filepath:
            return jsonify({
                "success": False,
                "error": "–ù–µ —É–∫–∞–∑–∞–Ω—ã –∏–º—è –º–æ–¥–µ–ª–∏ –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"
            }), 400
        
        logger.info(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏: {model_name}")
        
        success = rnn_manager.load_model(
            model_name, filepath, input_size, hidden_size, 
            num_classes, output_size, rnn_type, num_layers, dropout, bidirectional
        )
        
        if success:
            model_info = rnn_manager.get_model_info(model_name)
            response_data = {
                "success": True,
                "model_name": model_name,
                "filepath": filepath,
                "model_info": model_info,
                "message": f"–ú–æ–¥–µ–ª—å '{model_name}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {filepath}",
                "timestamp": datetime.now().isoformat()
            }
            return jsonify(response_data), 200
        else:
            return jsonify({
                "success": False,
                "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å '{model_name}'"
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}"
        }), 500

@app.route('/api/rnn/delete/<model_name>', methods=['DELETE'])
def delete_model(model_name):
    """–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    try:
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}")
        
        if model_name in rnn_manager.models:
            del rnn_manager.models[model_name]
            if model_name in rnn_manager.training_history:
                del rnn_manager.training_history[model_name]
            
            response_data = {
                "success": True,
                "model_name": model_name,
                "message": f"–ú–æ–¥–µ–ª—å '{model_name}' —É–¥–∞–ª–µ–Ω–∞",
                "timestamp": datetime.now().isoformat()
            }
            return jsonify(response_data), 200
        else:
            return jsonify({
                "success": False,
                "error": f"–ú–æ–¥–µ–ª—å '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }), 404
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {str(e)}"
        }), 500

@app.route('/api/rnn/rnn_types', methods=['GET'])
def get_rnn_types():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–∞—Ö RNN"""
    try:
        rnn_types = {
            "rnn": {
                "name": "Basic RNN",
                "description": "–ë–∞–∑–æ–≤–∞—è —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å",
                "advantages": ["–ü—Ä–æ—Å—Ç–æ—Ç–∞", "–ë—ã—Å—Ç—Ä–æ—Ç–∞ –æ–±—É—á–µ–Ω–∏—è", "–ù–∏–∑–∫–∏–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"],
                "disadvantages": ["–ü—Ä–æ–±–ª–µ–º–∞ –∏—Å—á–µ–∑–∞—é—â–µ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞", "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å"],
                "use_cases": ["–ü—Ä–æ—Å—Ç—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "–ö–æ—Ä–æ—Ç–∫–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã"],
                "parameters": "~10K-100K"
            },
            "lstm": {
                "name": "Long Short-Term Memory",
                "description": "LSTM —Å —è—á–µ–π–∫–∞–º–∏ –ø–∞–º—è—Ç–∏ –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
                "advantages": ["–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å", "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å—á–µ–∑–∞—é—â–µ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞", "–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å"],
                "disadvantages": ["–ë–æ–ª—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", "–ú–µ–¥–ª–µ–Ω–Ω–µ–µ –æ–±—É—á–µ–Ω–∏—è"],
                "use_cases": ["–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞", "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã"],
                "parameters": "~50K-500K"
            },
            "gru": {
                "name": "Gated Recurrent Unit",
                "description": "GRU —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å LSTM",
                "advantages": ["–ë–∞–ª–∞–Ω—Å —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏", "–ú–µ–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ–º LSTM", "–ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ"],
                "disadvantages": ["–ú–µ–Ω—å—à–µ –ø–∞–º—è—Ç–∏ —á–µ–º LSTM", "–°–ª–æ–∂–Ω–µ–µ —á–µ–º RNN"],
                "use_cases": ["–°—Ä–µ–¥–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "–†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è", "–ö–æ–º–ø—Ä–æ–º–∏—Å—Å —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏"],
                "parameters": "~30K-300K"
            }
        }
        
        response_data = {
            "success": True,
            "rnn_types": rnn_types,
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ RNN: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ RNN: {str(e)}"
        }), 500

if __name__ == '__main__':
    port = 8097  # –ù–æ–≤—ã–π –ø–æ—Ä—Ç –¥–ª—è RNN —Å–µ—Ä–≤–µ—Ä–∞
    logger.info(f"üß† –ó–∞–ø—É—Å–∫ Rubin AI RNN —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    app.run(port=port, debug=True, use_reloader=False)










