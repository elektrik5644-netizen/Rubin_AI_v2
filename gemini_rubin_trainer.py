#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ –°–∫—Ä–∏–ø—Ç –æ–±—É—á–µ–Ω–∏—è Rubin AI –æ—Ç Gemini
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã Rubin AI
"""

import requests
import json
import time
from datetime import datetime

class RubinAITrainer:
    def __init__(self):
        self.gemini_bridge_url = "http://localhost:8082"
        self.rubin_url = "http://localhost:8080"
        self.training_sessions = []
        
    def check_system_health(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Gemini Bridge
            bridge_status = requests.get(f"{self.gemini_bridge_url}/api/gemini/status", timeout=5)
            print(f"üåâ Gemini Bridge: {'‚úÖ' if bridge_status.status_code == 200 else '‚ùå'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Smart Dispatcher
            dispatcher_status = requests.get(f"{self.rubin_url}/api/health", timeout=5)
            print(f"üéØ Smart Dispatcher: {'‚úÖ' if dispatcher_status.status_code == 200 else '‚ùå'}")
            
            return bridge_status.status_code == 200 and dispatcher_status.status_code == 200
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False
    
    def teach_mathematics(self):
        """–û–±—É—á–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –º–æ–¥—É–ª—é"""
        lessons = [
            {
                "topic": "–∞–ª–≥–µ–±—Ä–∞",
                "instruction": "–û–±—ä—è—Å–Ω–∏ –æ—Å–Ω–æ–≤—ã –∞–ª–≥–µ–±—Ä—ã: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —É—Ä–∞–≤–Ω–µ–Ω–∏—è, —Ñ—É–Ω–∫—Ü–∏–∏",
                "category": "mathematics"
            },
            {
                "topic": "–≥–µ–æ–º–µ—Ç—Ä–∏—è", 
                "instruction": "–†–∞—Å—Å–∫–∞–∂–∏ –æ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–≥—É—Ä–∞—Ö –∏ –∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞—Ö",
                "category": "mathematics"
            },
            {
                "topic": "—Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è",
                "instruction": "–û–±—ä—è—Å–Ω–∏ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ",
                "category": "mathematics"
            }
        ]
        
        for lesson in lessons:
            self.teach_lesson(lesson)
            time.sleep(2)
    
    def teach_electrical(self):
        """–û–±—É—á–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –º–æ–¥—É–ª—é"""
        lessons = [
            {
                "topic": "–∑–∞–∫–æ–Ω –æ–º–∞",
                "instruction": "–û–±—ä—è—Å–Ω–∏ –∑–∞–∫–æ–Ω –û–º–∞ –∏ –µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ø—è—Ö",
                "category": "electrical"
            },
            {
                "topic": "—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã",
                "instruction": "–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–∏–Ω—Ü–∏–ø–µ —Ä–∞–±–æ—Ç—ã —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä–æ–≤ –∏ –∏—Ö —Ç–∏–ø–∞—Ö",
                "category": "electrical"
            },
            {
                "topic": "–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã",
                "instruction": "–û–±—ä—è—Å–Ω–∏ —Ä–∞–±–æ—Ç—É –∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä–æ–≤ –≤ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ø—è—Ö",
                "category": "electrical"
            }
        ]
        
        for lesson in lessons:
            self.teach_lesson(lesson)
            time.sleep(2)
    
    def teach_programming(self):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥—É–ª—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
        lessons = [
            {
                "topic": "python",
                "instruction": "–û–±—ä—è—Å–Ω–∏ –æ—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Python",
                "category": "programming"
            },
            {
                "topic": "–∞–ª–≥–æ—Ä–∏—Ç–º—ã",
                "instruction": "–†–∞—Å—Å–∫–∞–∂–∏ –æ –±–∞–∑–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö –¥–∞–Ω–Ω—ã—Ö",
                "category": "programming"
            },
            {
                "topic": "–æ–æ–ø",
                "instruction": "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
                "category": "programming"
            }
        ]
        
        for lesson in lessons:
            self.teach_lesson(lesson)
            time.sleep(2)
    
    def teach_controllers(self):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥—É–ª—é –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤"""
        lessons = [
            {
                "topic": "plc",
                "instruction": "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã –ü–õ–ö –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ—Å—Ç–Ω–∏—á–Ω–æ–π –ª–æ–≥–∏–∫–∏",
                "category": "controllers"
            },
            {
                "topic": "pid",
                "instruction": "–†–∞—Å—Å–∫–∞–∂–∏ –æ PID —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞—Ö –∏ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–µ",
                "category": "controllers"
            },
            {
                "topic": "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
                "instruction": "–û–±—ä—è—Å–Ω–∏ –æ—Å–Ω–æ–≤—ã –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏",
                "category": "controllers"
            }
        ]
        
        for lesson in lessons:
            self.teach_lesson(lesson)
            time.sleep(2)
    
    def teach_gai(self):
        """–û–±—É—á–µ–Ω–∏–µ GAI –º–æ–¥—É–ª—é"""
        lessons = [
            {
                "topic": "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞",
                "instruction": "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏ —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π",
                "category": "gai"
            },
            {
                "topic": "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ",
                "instruction": "–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ò–ò –≤ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö",
                "category": "gai"
            }
        ]
        
        for lesson in lessons:
            self.teach_lesson(lesson)
            time.sleep(2)
    
    def teach_lesson(self, lesson):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—Ä–æ–∫ —á–µ—Ä–µ–∑ Gemini Bridge"""
        try:
            payload = {
                "topic": lesson["topic"],
                "instruction": lesson["instruction"],
                "category": lesson["category"]
            }
            
            response = requests.post(
                f"{self.gemini_bridge_url}/api/gemini/teach",
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –£—Ä–æ–∫ '{lesson['topic']}' —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –≤ –º–æ–¥—É–ª—å {lesson['category']}")
                print(f"   –û—Ç–≤–µ—Ç Rubin: {result.get('rubin_ai_response', '')[:100]}...")
                
                self.training_sessions.append({
                    "timestamp": datetime.now().isoformat(),
                    "lesson": lesson,
                    "success": True,
                    "response": result
                })
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è '{lesson['topic']}': {response.status_code}")
                self.training_sessions.append({
                    "timestamp": datetime.now().isoformat(),
                    "lesson": lesson,
                    "success": False,
                    "error": f"HTTP {response.status_code}"
                })
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ '{lesson['topic']}': {e}")
            self.training_sessions.append({
                "timestamp": datetime.now().isoformat(),
                "lesson": lesson,
                "success": False,
                "error": str(e)
            })
    
    def analyze_system(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É Rubin AI"""
        try:
            payload = {
                "type": "comprehensive",
                "query": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã Rubin AI"
            }
            
            response = requests.post(
                f"{self.gemini_bridge_url}/api/gemini/analyze",
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"üìä –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω")
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('rubin_ai_response', '')[:200]}...")
                return result
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
            return None
    
    def run_comprehensive_training(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ Rubin AI –æ—Ç Gemini")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É
        if not self.check_system_health():
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—É—á–µ–Ω–∏—é")
            return
        
        print("\nüìö –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π...")
        
        # –û–±—É—á–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
        print("\nüßÆ –û–±—É—á–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–¥—É–ª—è...")
        self.teach_mathematics()
        
        print("\n‚ö° –û–±—É—á–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–æ–¥—É–ª—è...")
        self.teach_electrical()
        
        print("\nüíª –û–±—É—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è...")
        self.teach_programming()
        
        print("\nüéõÔ∏è –û–±—É—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤...")
        self.teach_controllers()
        
        print("\nü§ñ –û–±—É—á–µ–Ω–∏–µ GAI –º–æ–¥—É–ª—è...")
        self.teach_gai()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è...")
        self.analyze_system()
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.print_training_summary()
    
    def print_training_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ –æ–±—É—á–µ–Ω–∏—é"""
        print("\n" + "=" * 60)
        print("üìà –°–í–û–î–ö–ê –û–ë–£–ß–ï–ù–ò–Ø")
        print("=" * 60)
        
        total_lessons = len(self.training_sessions)
        successful_lessons = sum(1 for session in self.training_sessions if session["success"])
        failed_lessons = total_lessons - successful_lessons
        
        print(f"üìö –í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {total_lessons}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_lessons}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_lessons}")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(successful_lessons/total_lessons*100):.1f}%")
        
        if failed_lessons > 0:
            print("\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —É—Ä–æ–∫–∏:")
            for session in self.training_sessions:
                if not session["success"]:
                    print(f"   - {session['lesson']['topic']}: {session.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        print(f"\nüïí –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    trainer = RubinAITrainer()
    trainer.run_comprehensive_training()

if __name__ == "__main__":
    main()



