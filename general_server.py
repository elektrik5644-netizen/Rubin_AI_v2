#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–µ—Ä–≤–µ—Ä –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è Rubin AI v2
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import logging
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app, origins="*", methods=["GET", "POST", "OPTIONS"], allow_headers=["Content-Type", "Authorization"])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤
@app.before_request
def handle_preflight():
    if request.method == "OPTIONS":
        response = jsonify({})
        response.headers.add("Access-Control-Allow-Origin", "*")
        response.headers.add('Access-Control-Allow-Headers', "Content-Type,Authorization")
        response.headers.add('Access-Control-Allow-Methods', "GET,POST,OPTIONS")
        response.headers.add('Content-Type', 'application/json; charset=utf-8')
        return response

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
@app.after_request
def after_request(response):
    if response.content_type == 'application/json':
        response.headers['Content-Type'] = 'application/json; charset=utf-8'
    return response

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'service': 'General Server',
        'port': 8085,
        'timestamp': time.time()
    })

# –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
GENERAL_KNOWLEDGE = {
    "–ø—Ä–∏–≤–µ—Ç": {
        "title": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
        "description": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rubin AI v2",
        "explanation": """
**ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø Rubin - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.**

**–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:**
‚Ä¢ **‚ö° –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–æ–π** - –∑–∞–∫–æ–Ω—ã –ö–∏—Ä—Ö–≥–æ—Ñ–∞, —Å—Ö–µ–º—ã, —Ä–∞—Å—á–µ—Ç—ã
‚Ä¢ **üì° –†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–æ–π** - –∞–Ω—Ç–µ–Ω–Ω—ã, —Å–∏–≥–Ω–∞–ª—ã, –º–æ–¥—É–ª—è—Ü–∏—è
‚Ä¢ **üéõÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏** - –ü–õ–ö, –ß–ü–£, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
‚Ä¢ **üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π** - —É—Ä–∞–≤–Ω–µ–Ω–∏—è, –∞–ª–≥–æ—Ä–∏—Ç–º—ã, —Ä–∞—Å—á–µ—Ç—ã
‚Ä¢ **üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º** - C++, Python, –∞–ª–≥–æ—Ä–∏—Ç–º—ã

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –∫ –Ω—É–∂–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ö–∞–∫ —Ä–µ—à–∏—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x¬≤ - 5x + 6 = 0?"
‚Ä¢ "–û–±—ä—è—Å–Ω–∏ –∑–∞–∫–æ–Ω –ö–∏—Ä—Ö–≥–æ—Ñ–∞"
‚Ä¢ "–ö–∞–∫ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ —Å –ß–ü–£ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä?"
‚Ä¢ "–°—Ä–∞–≤–Ω–∏ C++ –∏ Python –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"

**–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã!** üöÄ
        """
    },
    "–ø–æ–º–æ—â—å": {
        "title": "–°–ø—Ä–∞–≤–∫–∞",
        "description": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Rubin AI v2",
        "explanation": """
**üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ Rubin AI v2:**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏:**
‚Ä¢ **–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ (–ø–æ—Ä—Ç 8087)** - —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã, –∑–∞–∫–æ–Ω—ã, —Ä–∞—Å—á–µ—Ç—ã
‚Ä¢ **–†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞ (–ø–æ—Ä—Ç 8089)** - —Ä–∞–¥–∏–æ—á–∞—Å—Ç–æ—Ç—ã, –∞–Ω—Ç–µ–Ω–Ω—ã, –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∏
‚Ä¢ **–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã (–ø–æ—Ä—Ç 9000)** - –ü–õ–ö, –ß–ü–£, –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
‚Ä¢ **–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ø–æ—Ä—Ç 8086)** - —É—Ä–∞–≤–Ω–µ–Ω–∏—è, —Ñ—É–Ω–∫—Ü–∏–∏, –∞–ª–≥–æ—Ä–∏—Ç–º—ã
‚Ä¢ **–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ—Ä—Ç 8088)** - —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∞–ª–≥–æ—Ä–∏—Ç–º—ã

**–¢–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ** - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚Ä¢ **–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ** - –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
‚Ä¢ **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ** - —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á
‚Ä¢ **–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ** - –∞–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π

**–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤:**
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
‚Ä¢ –ö–æ–¥ –∏ —Ñ–æ—Ä–º—É–ª—ã –≥–¥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã

**–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å!**
        """
    },
    "—Å—Ç–∞—Ç—É—Å": {
        "title": "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã",
        "description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã",
        "explanation": """
**üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã Rubin AI v2:**

**–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:**
‚Ä¢ ‚úÖ **–£–º–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä** (–ø–æ—Ä—Ç 8080) - –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ ‚úÖ **–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞** (–ø–æ—Ä—Ç 8087) - —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã
‚Ä¢ ‚úÖ **–†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞** (–ø–æ—Ä—Ç 8089) - —Ä–∞–¥–∏–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ ‚úÖ **–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã** (–ø–æ—Ä—Ç 9000) - –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
‚Ä¢ ‚úÖ **–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞** (–ø–æ—Ä—Ç 8086) - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
‚Ä¢ ‚úÖ **–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ** (–ø–æ—Ä—Ç 8088) - —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞

**–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!** üöÄ
        """
    }
}

def find_best_match(query):
    """–ü–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    query_lower = query.lower()
    
    # –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for key, data in GENERAL_KNOWLEDGE.items():
        if key in query_lower:
            return data
    
    # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    keywords = {
        "–ø—Ä–∏–≤–µ—Ç": "–ø—Ä–∏–≤–µ—Ç",
        "hello": "–ø—Ä–∏–≤–µ—Ç",
        "hi": "–ø—Ä–∏–≤–µ—Ç",
        "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π": "–ø—Ä–∏–≤–µ—Ç",
        "–ø–æ–º–æ—â—å": "–ø–æ–º–æ—â—å",
        "help": "–ø–æ–º–æ—â—å",
        "—Å–ø—Ä–∞–≤–∫–∞": "–ø–æ–º–æ—â—å",
        "—Å—Ç–∞—Ç—É—Å": "—Å—Ç–∞—Ç—É—Å",
        "status": "—Å—Ç–∞—Ç—É—Å",
        "—Ä–∞–±–æ—Ç–∞–µ—Ç": "—Å—Ç–∞—Ç—É—Å",
        "–æ–Ω–ª–∞–π–Ω": "—Å—Ç–∞—Ç—É—Å"
    }
    
    for keyword, topic in keywords.items():
        if keyword in query_lower:
            return GENERAL_KNOWLEDGE[topic]
    
    return None

@app.route('/')
def index():
    return jsonify({
        'name': 'General Server',
        'version': '1.0',
        'status': 'online',
        'features': ['greetings', 'help', 'status']
    })

@app.route('/api/chat', methods=['POST'])
def chat():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    try:
        data = request.get_json()
        message = data.get('message', '')
        
        # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        knowledge = find_best_match(message)
        
        if knowledge:
            response = {
                "success": True,
                "category": "general",
                "response": {
                    "title": knowledge["title"],
                    "description": knowledge["description"],
                    "explanation": knowledge["explanation"],
                    "success": True
                }
            }
            
            return jsonify(response)
        else:
            return jsonify({
                "success": True,
                "category": "general",
                "response": {
                    "title": "–û–±—â–∏–π –æ—Ç–≤–µ—Ç",
                    "description": "–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å",
                    "explanation": f"–í—ã —Å–ø—Ä–æ—Å–∏–ª–∏: \"{message}\"\n\n–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å, –Ω–æ –Ω–µ –º–æ–≥—É –¥–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –º–æ–¥—É–ª—é:\n\n‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ - –¥–ª—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n‚Ä¢ –†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞ - –¥–ª—è —Ä–∞–¥–∏–æ—á–∞—Å—Ç–æ—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã - –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏\n‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á\n‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                    "success": True
                }
            })
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return jsonify({
            "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "details": str(e)
        }), 500

@app.route('/api/health')
def health():
    return jsonify({'status': 'healthy', 'timestamp': '2025-09-20'})

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É 8085...")
    app.run(host='0.0.0.0', port=8085, debug=True)
