#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–Ω–∞–Ω–∏–π –ø–æ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ –¥–ª—è Rubin AI
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∑–∞—â–∏—Ç–µ —Ü–µ–ø–µ–π, —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–µ –∏ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ
"""

import re
import logging
from typing import Dict, List, Optional
from datetime import datetime

class ElectricalKnowledgeHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–Ω–∞–Ω–∏–π –ø–æ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ
        self.knowledge_base = {
            'short_circuit_protection': {
                'keywords': [
                    '–∑–∞—â–∏—Ç–∞', '–∫–æ—Ä–æ—Ç–∫–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ', '–∫–∑', '—Ü–µ–ø–∏', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ',
                    'protection', 'short circuit', 'circuits', 'electrical',
                    '–ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å', '–∞–≤—Ç–æ–º–∞—Ç', '—É–∑–æ', 'fuse', 'breaker'
                ],
                'response_ru': """üõ°Ô∏è **–ó–∞—â–∏—Ç–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ø–µ–π –æ—Ç –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–º—ã–∫–∞–Ω–∏—è:**

**–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ:**
–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —Ç–æ—á–µ–∫ —Ü–µ–ø–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞–º–∏ —á–µ—Ä–µ–∑ –æ—á–µ–Ω—å –º–∞–ª–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Ä–µ–∑–∫–æ–º—É —É–≤–µ–ª–∏—á–µ–Ω–∏—é —Ç–æ–∫–∞.

**–û–ø–∞—Å–Ω–æ—Å—Ç–∏ –ö–ó:**
‚Ä¢ **–ü–µ—Ä–µ–≥—Ä–µ–≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤** - –≤–æ–∑–º–æ–∂–µ–Ω –ø–æ–∂–∞—Ä
‚Ä¢ **–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è** - –≤—ã—Ö–æ–¥ –∏–∑ —Å—Ç—Ä–æ—è
‚Ä¢ **–ü–æ—Ä–∞–∂–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–º —Ç–æ–∫–æ–º** - –æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è –ª—é–¥–µ–π
‚Ä¢ **–î—É–≥–æ–≤—ã–µ —Ä–∞–∑—Ä—è–¥—ã** - –≤–∑—Ä—ã–≤–æ–æ–ø–∞—Å–Ω–æ—Å—Ç—å

**–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—â–∏—Ç—ã:**

**1. –ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏:**
‚Ä¢ **–ü–ª–∞–≤–∫–∏–µ –≤—Å—Ç–∞–≤–∫–∏** - –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ, —Ç–æ—á–Ω—ã–µ
‚Ä¢ **–í—Ä–µ–º—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è** - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø—Ä–∏ –ö–ó
‚Ä¢ **–ù–æ–º–∏–Ω–∞–ª—ã** - –æ—Ç –º–ê –¥–æ –∫–ê
‚Ä¢ **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ** - –±—ã—Ç–æ–≤—ã–µ –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–µ—Ç–∏

**2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–∏:**
‚Ä¢ **–¢–µ–ø–ª–æ–≤–∞—è –∑–∞—â–∏—Ç–∞** - –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
‚Ä¢ **–≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∑–∞—â–∏—Ç–∞** - –æ—Ç –ö–ó
‚Ä¢ **–ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ** - –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
‚Ä¢ **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏** - B, C, D (–≤—Ä–µ–º—è-—Ç–æ–∫–æ–≤—ã–µ)

**3. –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã (–£–ó–û):**
‚Ä¢ **–ó–∞—â–∏—Ç–∞ –æ—Ç —É—Ç–µ—á–µ–∫** - —Ç–æ–∫ —É—Ç–µ—á–∫–∏ –Ω–∞ –∑–µ–º–ª—é
‚Ä¢ **–ó–∞—â–∏—Ç–∞ –ª—é–¥–µ–π** - –æ—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–∫–æ–º
‚Ä¢ **–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å** - 10–º–ê, 30–º–ê, 100–º–ê, 300–º–ê
‚Ä¢ **–í—Ä–µ–º—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è** - < 30–º—Å

**–†–∞—Å—á–µ—Ç –∑–∞—â–∏—Ç—ã:**
‚Ä¢ **I–Ω–æ–º.–∑–∞—â–∏—Ç—ã ‚â• I—Ä–∞–±.–º–∞–∫—Å** (—Ä–∞–±–æ—á–∏–π —Ç–æ–∫)
‚Ä¢ **I–Ω–æ–º.–∑–∞—â–∏—Ç—ã ‚â§ I–¥–æ–ø.–ø—Ä–æ–≤–æ–¥–∞** (–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–æ–∫ –ø—Ä–æ–≤–æ–¥–∞)

‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ = –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å!**"""  
          },
            
            'power_factor': {
                'keywords': [
                    '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏', 'cos œÜ', 'cos phi', 'power factor',
                    '—Ä–µ–∞–∫—Ç–∏–≤–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å', 'reactive power', '–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è'
                ],
                'response_ru': """‚ö° **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏ (cos œÜ):**

**–ß—Ç–æ —ç—Ç–æ:**
–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏.

**–§–æ—Ä–º—É–ª–∞:** cos œÜ = P / S
‚Ä¢ P - –∞–∫—Ç–∏–≤–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å (–í—Ç)  
‚Ä¢ S - –ø–æ–ª–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å (–í–ê)
‚Ä¢ œÜ - —É–≥–æ–ª —Å–¥–≤–∏–≥–∞ —Ñ–∞–∑ –º–µ–∂–¥—É —Ç–æ–∫–æ–º –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ–º

**–¢–∏–ø—ã –º–æ—â–Ω–æ—Å—Ç–∏:**
‚Ä¢ **–ê–∫—Ç–∏–≤–Ω–∞—è (P)** - –ø–æ–ª–µ–∑–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –í—Ç
‚Ä¢ **–†–µ–∞–∫—Ç–∏–≤–Ω–∞—è (Q)** - "–±–µ—Å–ø–æ–ª–µ–∑–Ω–∞—è" –º–æ—â–Ω–æ—Å—Ç—å, –í–ê—Ä
‚Ä¢ **–ü–æ–ª–Ω–∞—è (S)** - –æ–±—â–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –í–ê
‚Ä¢ **S¬≤ = P¬≤ + Q¬≤** (—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –º–æ—â–Ω–æ—Å—Ç–µ–π)

**–ó–Ω–∞—á–µ–Ω–∏—è cos œÜ:**
‚Ä¢ **cos œÜ = 1** - –∏–¥–µ–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω–∞—è)
‚Ä¢ **cos œÜ = 0.9-0.95** - —Ö–æ—Ä–æ—à–æ
‚Ä¢ **cos œÜ = 0.7-0.9** - —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ
‚Ä¢ **cos œÜ < 0.7** - –ø–ª–æ—Ö–æ, —Ç—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏

**–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å cos œÜ:**
1. **–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä–Ω—ã–µ –±–∞—Ç–∞—Ä–µ–∏** - –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏
2. **–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –¥–≤–∏–≥–∞—Ç–µ–ª–∏** - —Ä–∞–±–æ—Ç–∞ —Å –æ–ø–µ—Ä–µ–∂–∞—é—â–∏–º cos œÜ
3. **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã** - –¥–ª—è –Ω–µ–ª–∏–Ω–µ–π–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
4. **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è**

**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤—ã—Å–æ–∫–æ–≥–æ cos œÜ:**
‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å –≤ —Å–µ—Ç–∏
‚Ä¢ –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ç–æ–∫–∞ –≤ –ø—Ä–æ–≤–æ–¥–∞—Ö
‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏
‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è

‚úÖ **–•–æ—Ä–æ—à–∏–π cos œÜ = —ç–∫–æ–Ω–æ–º–∏—è —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏!**"""
            },
            
            'electronic_components': {
                'keywords': [
                    '—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä', '–¥–∏–æ–¥', '—Ä–µ–∑–∏—Å—Ç–æ—Ä', '–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä', '–∏–Ω–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                    'transistor', 'diode', 'resistor', 'capacitor', 'inductor',
                    '–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã', '—ç–ª–µ–º–µ–Ω—Ç—ã', 'components'
                ],
                'response_ru': """üîå **–û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**

**1. –†–µ–∑–∏—Å—Ç–æ—Ä:**
‚Ä¢ **–§—É–Ω–∫—Ü–∏—è:** –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–æ–∫–∞, –¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
‚Ä¢ **–ó–∞–∫–æ–Ω –û–º–∞:** U = I √ó R
‚Ä¢ **–ú–æ—â–Ω–æ—Å—Ç—å:** P = I¬≤ √ó R = U¬≤/R
‚Ä¢ **–¢–∏–ø—ã:** –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –ø–æ–¥—Å—Ç—Ä–æ–µ—á–Ω—ã–µ
‚Ä¢ **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:** –¢–æ–∫–æ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, –¥–µ–ª–∏—Ç–µ–ª–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è

**2. –ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä:**
‚Ä¢ **–§—É–Ω–∫—Ü–∏—è:** –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏
‚Ä¢ **–§–æ—Ä–º—É–ª–∞:** Q = C √ó U, E = ¬ΩCU¬≤
‚Ä¢ **–¢–∏–ø—ã:** –≠–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ, –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–µ, –ø–ª–µ–Ω–æ—á–Ω—ã–µ
‚Ä¢ **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:** –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–∑–≤—è–∑–∫–∞, –≤—Ä–µ–º—è–∑–∞–¥–∞—é—â–∏–µ —Ü–µ–ø–∏

**3. –ò–Ω–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∫–∞—Ç—É—à–∫–∞):**
‚Ä¢ **–§—É–Ω–∫—Ü–∏—è:** –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –º–∞–≥–Ω–∏—Ç–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
‚Ä¢ **–§–æ—Ä–º—É–ª–∞:** E = ¬ΩLI¬≤, U = L √ó dI/dt
‚Ä¢ **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:** –§–∏–ª—å—Ç—Ä—ã, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä—ã, –¥—Ä–æ—Å—Å–µ–ª–∏

**4. –î–∏–æ–¥:**
‚Ä¢ **–§—É–Ω–∫—Ü–∏—è:** –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–æ–∫ —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
‚Ä¢ **–¢–∏–ø—ã:** –í—ã–ø—Ä—è–º–∏—Ç–µ–ª—å–Ω—ã–µ, —Å—Ç–∞–±–∏–ª–∏—Ç—Ä–æ–Ω—ã, —Å–≤–µ—Ç–æ–¥–∏–æ–¥—ã
‚Ä¢ **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:** –í—ã–ø—Ä—è–º–ª–µ–Ω–∏–µ, —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è, –∑–∞—â–∏—Ç–∞

**5. –¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä:**
‚Ä¢ **–§—É–Ω–∫—Ü–∏—è:** –£—Å–∏–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
‚Ä¢ **–¢–∏–ø—ã:** –ë–∏–ø–æ–ª—è—Ä–Ω—ã–µ (NPN, PNP), –ø–æ–ª–µ–≤—ã–µ (MOSFET, JFET)
‚Ä¢ **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:** –£—Å–∏–ª–∏—Ç–µ–ª–∏, –∫–ª—é—á–∏, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã

‚úÖ **–û—Å–Ω–æ–≤–∞ –≤—Å–µ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏!**"""
            },
            
            'electrical_laws': {
                'keywords': [
                    '–∑–∞–∫–æ–Ω –æ–º–∞', '–∫–∏—Ä—Ö–≥–æ—Ñ', 'ohm law', 'kirchhoff',
                    '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', '—Ç–æ–∫', '—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ', '–º–æ—â–Ω–æ—Å—Ç—å',
                    'voltage', 'current', 'resistance', 'power'
                ],
                'response_ru': """‚ö° **–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–∫–æ–Ω—ã —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∏:**

**–ó–∞–∫–æ–Ω –û–º–∞:**
‚Ä¢ **U = I √ó R** (–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ = —Ç–æ–∫ √ó —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ)
‚Ä¢ **I = U / R** (—Ç–æ–∫ = –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ / —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ)
‚Ä¢ **R = U / I** (—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ = –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ / —Ç–æ–∫)

**–ú–æ—â–Ω–æ—Å—Ç—å:**
‚Ä¢ **P = U √ó I** (–º–æ—â–Ω–æ—Å—Ç—å = –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ √ó —Ç–æ–∫)
‚Ä¢ **P = I¬≤ √ó R** (—á–µ—Ä–µ–∑ —Ç–æ–∫ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ)
‚Ä¢ **P = U¬≤ / R** (—á–µ—Ä–µ–∑ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ)

**–ó–∞–∫–æ–Ω—ã –ö–∏—Ä—Ö–≥–æ—Ñ–∞:**
‚Ä¢ **1-–π –∑–∞–∫–æ–Ω (—Ç–æ–∫–æ–≤):** –°—É–º–º–∞ —Ç–æ–∫–æ–≤ –≤ —É–∑–ª–µ = 0
  Œ£I = 0 (–∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∞—è —Å—É–º–º–∞)
‚Ä¢ **2-–π –∑–∞–∫–æ–Ω (–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–π):** –°—É–º–º–∞ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç—É—Ä–µ = 0
  Œ£U = 0 (–∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∞—è —Å—É–º–º–∞)

**–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤:**
‚Ä¢ **–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ:** R = R1 + R2 + R3...
‚Ä¢ **–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ:** 1/R = 1/R1 + 1/R2 + 1/R3...

**–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è:**
‚Ä¢ –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: –í–æ–ª—å—Ç (–í)
‚Ä¢ –¢–æ–∫: –ê–º–ø–µ—Ä (–ê)
‚Ä¢ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: –û–º (Œ©)
‚Ä¢ –ú–æ—â–Ω–æ—Å—Ç—å: –í–∞—Ç—Ç (–í—Ç)
‚Ä¢ –≠–Ω–µ—Ä–≥–∏—è: –î–∂–æ—É–ª—å (–î–∂), –∫–í—Ç¬∑—á

‚úÖ **–û—Å–Ω–æ–≤–∞ –≤—Å–µ–π —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∏!**"""
            },
            
            'motors': {
                'keywords': [
                    '–¥–≤–∏–≥–∞—Ç–µ–ª—å', '–º–æ—Ç–æ—Ä', '–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π', '—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π',
                    'motor', 'asynchronous', 'synchronous', 'servo',
                    '–ø—Ä–∏–≤–æ–¥', '—á–∞—Å—Ç–æ—Ç–Ω—ã–π –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å'
                ],
                'response_ru': """‚öôÔ∏è **–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–≤–∏–≥–∞—Ç–µ–ª–∏:**

**–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å:**
‚Ä¢ **–ü—Ä–∏–Ω—Ü–∏–ø:** –†–æ—Ç–æ—Ä "–¥–æ–≥–æ–Ω—è–µ—Ç" –≤—Ä–∞—â–∞—é—â–µ–µ—Å—è –º–∞–≥–Ω–∏—Ç–Ω–æ–µ –ø–æ–ª–µ —Å—Ç–∞—Ç–æ—Ä–∞
‚Ä¢ **–°–∫–æ–ª—å–∂–µ–Ω–∏–µ:** s = (n‚ÇÄ - n) / n‚ÇÄ
‚Ä¢ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:** –ü—Ä–æ—Å—Ç–æ—Ç–∞, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å, –Ω–∏–∑–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
‚Ä¢ **–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:** –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
‚Ä¢ **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:** –ù–∞—Å–æ—Å—ã, –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã, –∫–æ–Ω–≤–µ–π–µ—Ä—ã

**–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å:**
‚Ä¢ **–ü—Ä–∏–Ω—Ü–∏–ø:** –†–æ—Ç–æ—Ä –≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –ø–æ–ª–µ–º —Å—Ç–∞—Ç–æ—Ä–∞
‚Ä¢ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:** –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å, –≤—ã—Å–æ–∫–∏–π –ö–ü–î
‚Ä¢ **–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:** –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—É—Å–∫–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤–æ–∑–±—É–∂–¥–µ–Ω–∏—è
‚Ä¢ **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:** –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã, —Ç–æ—á–Ω—ã–µ –ø—Ä–∏–≤–æ–¥—ã

**–°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥:**
‚Ä¢ **–ü—Ä–∏–Ω—Ü–∏–ø:** –î–≤–∏–≥–∞—Ç–µ–ª—å —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –ø–æ –ø–æ–ª–æ–∂–µ–Ω–∏—é
‚Ä¢ **–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:** –î–≤–∏–≥–∞—Ç–µ–ª—å + —ç–Ω–∫–æ–¥–µ—Ä + –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
‚Ä¢ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:** –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:** –°—Ç–∞–Ω–∫–∏ –ß–ü–£, —Ä–æ–±–æ—Ç—ã, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è

**–ß–∞—Å—Ç–æ—Ç–Ω—ã–π –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å:**
‚Ä¢ **–§—É–Ω–∫—Ü–∏—è:** –ü–ª–∞–≤–Ω–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ê–î
‚Ä¢ **–ü—Ä–∏–Ω—Ü–∏–ø:** –ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∏ –∞–º–ø–ª–∏—Ç—É–¥—ã –ø–∏—Ç–∞—é—â–µ–≥–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
‚Ä¢ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:** –≠–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ, –ø–ª–∞–≤–Ω—ã–π –ø—É—Å–∫
‚Ä¢ **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:** –ù–∞—Å–æ—Å—ã, –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã, –∫–æ–Ω–≤–µ–π–µ—Ä—ã

‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–≤–∏–≥–∞—Ç–µ–ª—è = —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞!**"""
            }
        }
        
        self.logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–Ω–∞–Ω–∏–π –ø–æ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def detect_topic(self, message: str) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º—ã —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        message_lower = message.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–µ–º—É –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        topic_priorities = [
            'short_circuit_protection',  # –í—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É
            'power_factor',
            'electronic_components', 
            'electrical_laws',
            'motors'
        ]
        
        best_topic = None
        max_matches = 0
        
        for topic in topic_priorities:
            keywords = self.knowledge_base[topic]['keywords']
            matches = sum(1 for keyword in keywords if keyword in message_lower)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ö–ó
            if topic == 'short_circuit_protection':
                if any(phrase in message_lower for phrase in [
                    '–∫–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å', '–∑–∞—â–∏—Ç–∞ —Ü–µ–ø–µ–π', '–∫–æ—Ä–æ—Ç–∫–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ',
                    'how to protect', 'circuit protection', 'short circuit'
                ]):
                    return topic  # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
            
            if matches > max_matches:
                max_matches = matches
                best_topic = topic
        
        return best_topic if max_matches >= 1 else None
    
    def detect_language(self, message: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        cyrillic_chars = len(re.findall(r'[–∞-—è—ë]', message.lower()))
        latin_chars = len(re.findall(r'[a-z]', message.lower()))
        
        return 'ru' if cyrillic_chars > latin_chars else 'en'
    
    def handle_request(self, message: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –∏ —è–∑—ã–∫
            topic = self.detect_topic(message)
            language = self.detect_language(message)
            
            if not topic:
                # –û–±—â–∏–π –æ—Ç–≤–µ—Ç –ø–æ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ
                return self._get_general_electrical_response(language)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            knowledge = self.knowledge_base[topic]
            response_text = knowledge['response_ru']  # –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π
            
            self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å: —Ç–µ–º–∞='{topic}', —è–∑—ã–∫='{language}'")
            
            return {
                'response': response_text,
                'provider': 'Electrical Knowledge Handler',
                'category': 'electrical',
                'topic': topic,
                'language': language,
                'success': True,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {
                'response': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}',
                'provider': 'Electrical Knowledge Handler',
                'category': 'electrical',
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
    
    def _get_general_electrical_response(self, language: str) -> Dict:
        """–û–±—â–∏–π –æ—Ç–≤–µ—Ç –ø–æ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ"""
        if language == 'ru':
            response = """‚ö° **–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ - –º–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è!**

**–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏:**
‚Ä¢ **–ó–∞—â–∏—Ç–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ø–µ–π** - –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏, –∞–≤—Ç–æ–º–∞—Ç—ã, –£–ó–û
‚Ä¢ **–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã** - —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã, –∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã, —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã
‚Ä¢ **–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –º–∞—à–∏–Ω—ã** - –¥–≤–∏–≥–∞—Ç–µ–ª–∏, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä—ã
‚Ä¢ **–°–∏–ª–æ–≤–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞** - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª–∏, –∏–Ω–≤–µ—Ä—Ç–æ—Ä—ã, –≤—ã–ø—Ä—è–º–∏—Ç–µ–ª–∏
‚Ä¢ **–ò–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å** - –¥–∞—Ç—á–∏–∫–∏, –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã
‚Ä¢ **–≠–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å** - –∑–∞–∑–µ–º–ª–µ–Ω–∏–µ, –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ä—ã

**–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:**
‚Ä¢ –†–∞—Å—á–µ—Ç–æ–º —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ø–µ–π
‚Ä¢ –í—ã–±–æ—Ä–æ–º –∑–∞—â–∏—Ç–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
‚Ä¢ –ü—Ä–∏–Ω—Ü–∏–ø–∞–º–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
‚Ä¢ –≠–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é

**–ó–∞–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å** - –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "–ö–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å —Ü–µ–ø–∏ –æ—Ç –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–º—ã–∫–∞–Ω–∏—è?"
‚Ä¢ "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏?"
‚Ä¢ "–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞"

‚úÖ **–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ!**"""
        else:
            response = """‚ö° **Electrical Engineering - My Specialization!**

**Main Areas:**
‚Ä¢ **Electrical Circuit Protection** - fuses, breakers, RCDs
‚Ä¢ **Electronic Components** - resistors, capacitors, transistors
‚Ä¢ **Electrical Machines** - motors, generators, transformers
‚Ä¢ **Power Electronics** - converters, inverters, rectifiers
‚Ä¢ **Measurements and Control** - sensors, measuring instruments
‚Ä¢ **Electrical Safety** - grounding, protective measures

**I can help with:**
‚Ä¢ Electrical circuit calculations
‚Ä¢ Protective device selection
‚Ä¢ Component working principles
‚Ä¢ Electrical safety
‚Ä¢ Energy saving and efficiency

**Ask a specific question** - for example:
‚Ä¢ "How to protect circuits from short circuit?"
‚Ä¢ "What is power factor?"
‚Ä¢ "Transformer working principle"

‚úÖ **Ready to help with any electrical engineering questions!**"""
        
        return {
            'response': response,
            'provider': 'Electrical Knowledge Handler',
            'category': 'electrical',
            'topic': 'general',
            'language': language,
            'success': True,
            'timestamp': datetime.now().isoformat()
        }
    
    def get_supported_topics(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–µ–º"""
        return list(self.knowledge_base.keys())
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        return {
            'supported_topics': len(self.knowledge_base),
            'topics': list(self.knowledge_base.keys()),
            'supported_languages': ['ru', 'en']
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_electrical_handler_instance = None

def get_electrical_handler() -> ElectricalKnowledgeHandler:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    global _electrical_handler_instance
    if _electrical_handler_instance is None:
        _electrical_handler_instance = ElectricalKnowledgeHandler()
    return _electrical_handler_instance

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    import logging
    logging.basicConfig(level=logging.INFO)
    
    handler = ElectricalKnowledgeHandler()
    
    test_questions = [
        "–ö–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ü–µ–ø–∏ –æ—Ç –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–º—ã–∫–∞–Ω–∏—è?",
        "How to protect electrical circuits from short circuit?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏?",
        "–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä–∞",
        "–ó–∞–∫–æ–Ω –û–º–∞",
        "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å",
        "–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ"
    ]
    
    print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê –≠–õ–ï–ö–¢–†–û–¢–ï–•–ù–ò–ö–ò ===")
    for question in test_questions:
        print(f"\n–í–æ–ø—Ä–æ—Å: {question}")
        result = handler.handle_request(question)
        print(f"–¢–µ–º–∞: {result.get('topic', 'N/A')}")
        print(f"–Ø–∑—ã–∫: {result.get('language', 'N/A')}")
        print(f"–£—Å–ø–µ—Ö: {result.get('success', False)}")
        print("–û—Ç–≤–µ—Ç:", result['response'][:200] + "..." if len(result['response']) > 200 else result['response'])
    
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {handler.get_statistics()}")