#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
"""

from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import requests
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
SERVERS = {
    'learning': {
        'port': 8091,
        'endpoint': '/api/learning/chat',
        'keywords': ['–æ–±—É—á–µ–Ω–∏–µ', '–∏–∑—É—á–µ–Ω–∏–µ', '–ø—Ä–æ–≥—Ä–µ—Å—Å', '–ø–æ–Ω–∏–º–∞–Ω–∏–µ', '–Ω–∞—É—á–∏–ª—Å—è', '—Å–µ–≥–æ–¥–Ω—è', '–¥–µ–ª–∞–ª–∏', '—Ä–∞–±–æ—Ç–∞–ª–∏', '–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ', '–∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç', '—á—Ç–æ –∏–∑—É—á–∏–ª', '—á—Ç–æ –Ω–∞—É—á–∏–ª—Å—è', '–ø–æ–Ω–∏–º–∞–µ—à—å –ø—Ä–æ—Ü–µ—Å—Å', '–Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å', '–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ', '–¥–µ–ª–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è'],
        'priority': 10,  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–± –æ–±—É—á–µ–Ω–∏–∏
        'fallback': 'general',
        'fallback_keywords': ['–æ–±—É—á–µ–Ω–∏–µ', '–∏–∑—É—á–µ–Ω–∏–µ', '–ø—Ä–æ–≥—Ä–µ—Å—Å']
    },
    'electrical': {
        'port': 8087,
        'endpoint': '/api/electrical/explain',
        'keywords': ['–∑–∞–∫–æ–Ω', '–∫–∏—Ä—Ö–≥–æ—Ñ–∞', '—Ä–µ–∑–∏—Å—Ç–æ—Ä', '—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä', '–¥–∏–æ–¥', '–∫–æ–Ω—Ç–∞–∫—Ç–æ—Ä', '—Ä–µ–ª–µ', '–º–æ—â–Ω–æ—Å—Ç—å', '—Ç–æ–∫', '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', '—Å—Ö–µ–º–∞', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ', '—Ü–µ–ø–∏'],
        'priority': 5,
        'fallback': 'mathematics',
        'fallback_keywords': ['–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', '—Ç–æ–∫', '–º–æ—â–Ω–æ—Å—Ç—å', '—ç–Ω–µ—Ä–≥–∏—è', '–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è', '–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è', '—Ñ–∏–∑–∏–∫–∞', '—Ñ–æ—Ä–º—É–ª–∞']
    },
    'radiomechanics': {
        'port': 8089,
        'endpoint': '/api/radiomechanics/explain',
        'keywords': ['–∞–Ω—Ç–µ–Ω–Ω–∞', '—Å–∏–≥–Ω–∞–ª', '—Ä–∞–¥–∏–æ', '–º–æ–¥—É–ª—è—Ü–∏—è', '—á–∞—Å—Ç–æ—Ç–∞', '–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫', '–ø—Ä–∏–µ–º–Ω–∏–∫'],
        'fallback': 'general',
        'fallback_keywords': ['—Ä–∞–¥–∏–æ', '—Å–∏–≥–Ω–∞–ª', '–∞–Ω—Ç–µ–Ω–Ω–∞']
    },
    'controllers': {
        'port': 9000,
        'endpoint': '/api/controllers/topic/general',
        'keywords': ['–ø–∏–¥', '—Ä–µ–≥—É–ª—è—Ç–æ—Ä', 'plc', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–ª–æ–≥–∏–∫–∞', '—Å–æ–±—ã—Ç–∏—è', '–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è', 'events', 'interrupts', 'ascii', '–∫–æ–º–∞–Ω–¥—ã', '–ø—Ä–æ—Ç–æ–∫–æ–ª', '–æ—Ç–ø—Ä–∞–≤–∫–∞', '–ø–æ–ª—É—á–µ–Ω–∏–µ', '–æ—Ç–≤–µ—Ç—ã', '—á–ø—É', 'cnc', '—á–∏—Å–ª–æ–≤–æ–µ', '–ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–ø–µ—Ä–µ–¥–∞—á–∞', '–¥–∞–Ω–Ω—ã–µ', 'g-–∫–æ–¥—ã', '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã', 'pmac', '–º–Ω–æ–≥–æ–æ—Å–µ–≤–æ–π', '–¥–≤–∏–∂–µ–Ω–∏–µ', '–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è', '–æ—Å—å', '–æ—Å–∏', '—Å–µ—Ä–≤–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å', '—à–∞–≥–æ–≤—ã–π', '—ç–Ω–∫–æ–¥–µ—Ä', '–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', '—Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥', '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∞', '–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', '–ø–∞—Ä–∞–º–µ—Ç—Ä—ã', 'i130', 'i130a', 'i130b', 'i130c', 'i130d', 'i130e', 'i130f', 'i130g', 'i130h', 'i130i', 'i130j', 'i130k', 'i130l', 'i130m', 'i130n', 'i130o', 'i130p', 'i130q', 'i130r', 'i130s', 'i130t', 'i130u', 'i130v', 'i130w', 'i130x', 'i130y', 'i130z'],
        'fallback': 'programming',
        'fallback_keywords': ['plc', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ª–æ–≥–∏–∫–∞', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–æ—à–∏–±–∫–∞', '–∞–Ω–∞–ª–∏–∑', '—Ñ–∞–π–ª']
    },
    'mathematics': {
        'port': 8086,
        'endpoint': '/api/chat',
        'keywords': ['—É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '–∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–∞–ª–≥–µ–±—Ä–∞', '–≥–µ–æ–º–µ—Ç—Ä–∏—è', '–∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞', '+', '-', '*', '/', '=', '–≤—ã—á–∏—Å–ª–∏—Ç—å', '–ø–æ—Å—á–∏—Ç–∞—Ç—å', '—Å–ª–æ–∂–∏—Ç—å', '–≤—ã—á–µ—Å—Ç—å', '—É–º–Ω–æ–∂–∏—Ç—å', '—Ä–∞–∑–¥–µ–ª–∏—Ç—å', '—á–∏—Å–ª–æ', '—Ü–∏—Ñ—Ä–∞', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–æ—Ç–≤–µ—Ç'],
        'fallback': 'general',
        'fallback_keywords': ['–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–≤—ã—á–∏—Å–ª–∏—Ç—å', '–ø–æ—Å—á–∏—Ç–∞—Ç—å']
    },
    'programming': {
        'port': 8088,
        'endpoint': '/api/programming/explain',
        'keywords': ['–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ', '—Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ', '—Ñ—É–Ω–∫—Ü–∏–∏', '–∞–ª–≥–æ—Ä–∏—Ç–º—ã', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–¥', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'python', 'javascript', 'c++', 'java', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è', '–∫–æ–Ω–≤–µ–π–µ—Ä', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', '–æ—à–∏–±–∫–∏', 'error', 'xml', '–æ–±—Ä–∞–±–æ—Ç–∫–∞'],
        'fallback': 'general',
        'fallback_keywords': ['–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–¥', '–∞–ª–≥–æ—Ä–∏—Ç–º', 'python', '–æ—à–∏–±–∫–∞']
    },
    'general': {
        'port': 8085,
        'endpoint': '/api/chat',
        'keywords': ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–ø–æ–º–æ—â—å', 'help', '—Å–ø—Ä–∞–≤–∫–∞', '—Å—Ç–∞—Ç—É—Å', 'status', '—Ä–∞–±–æ—Ç–∞–µ—Ç', '–æ–Ω–ª–∞–π–Ω', '—á—Ç–æ', '–∫–∞–∫', '–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏'],
        'fallback': None,  # general –Ω–µ –∏–º–µ–µ—Ç fallback
        'fallback_keywords': []
    }
}

def categorize_message(message):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    message_lower = message.lower()
    scores = {}
    
    for category, config in SERVERS.items():
        score = 0
        for keyword in config['keywords']:
            if keyword.lower() in message_lower:
                score += 1
        scores[category] = score
    
    if scores and max(scores.values()) > 0:
        best_category = max(scores, key=scores.get)
        logger.info(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è: '{message[:50]}...' ‚Üí {best_category} (score: {scores[best_category]})")
        return best_category
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º general –∫–∞–∫ fallback
    logger.info(f"‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: '{message[:50]}...' ‚Üí general (fallback)")
    return 'general'

def check_server_health(category):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞"""
    if category not in SERVERS:
        return False
    
    config = SERVERS[category]
    url = f"http://localhost:{config['port']}/api/health"
    
    try:
        response = requests.get(url, timeout=5)
        return response.status_code == 200
    except:
        return False

def forward_request(category, message, max_retries=2):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Å–µ—Ä–≤–µ—Ä—É —Å fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
    if category not in SERVERS:
        return None, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
    
    config = SERVERS[category]
    url = f"http://localhost:{config['port']}{config['endpoint']}"
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    if category in ['electrical', 'radiomechanics', 'controllers', 'programming']:
        payload = {'concept': message}
    else:  # mathematics, general
        payload = {'message': message}
    
    try:
        logger.info(f"üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ {category} –Ω–∞ {url}")
        response = requests.post(url, json=payload, timeout=15)
        
        if response.status_code == 200:
            logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä {category} –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ")
            return response.json(), None
        else:
            logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä {category} –≤–µ—Ä–Ω—É–ª {response.status_code}")
            return None, f"HTTP {response.status_code}: {response.text}"
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {category}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ fallback
        if config.get('fallback') and max_retries > 0:
            fallback_category = config['fallback']
            fallback_keywords = config.get('fallback_keywords', [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è fallback
            message_lower = message.lower()
            if any(keyword.lower() in message_lower for keyword in fallback_keywords):
                logger.info(f"üîÑ Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ {fallback_category}")
                return forward_request(fallback_category, message, max_retries - 1)
            else:
                logger.info(f"üîÑ Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ general (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π fallback)")
                return forward_request('general', message, max_retries - 1)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç fallback –∏–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        return None, str(e)

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Rubin IDE"""
    try:
        return send_from_directory('.', 'RubinIDE.html')
    except FileNotFoundError:
        return jsonify({
            'name': 'Smart Dispatcher',
            'version': '2.0',
            'status': 'online',
            'servers': {name: f"localhost:{config['port']}" for name, config in SERVERS.items()},
            'note': 'RubinIDE.html not found'
        })

@app.route('/matrix/RubinDeveloper.html')
def rubin_developer():
    """Rubin Developer –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    return send_from_directory('matrix', 'RubinDeveloper.html')

@app.route('/test-rubin')
def test_rubin():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è RubinDeveloper"""
    return send_from_directory('.', 'test_rubin_developer.html')

@app.route('/api/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    return jsonify({
        'status': 'healthy',
        'dispatcher': 'Smart Dispatcher v2.0',
        'servers': {name: 'online' if check_server_health(name) else 'offline' 
                   for name in SERVERS.keys()}
    })

@app.route('/api/dispatcher/info')
def dispatcher_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ"""
    return jsonify({
        'name': 'Smart Dispatcher',
        'version': '2.0',
        'status': 'online',
        'servers': {name: f"localhost:{config['port']}" for name, config in SERVERS.items()},
        'features': ['fallback_mechanism', 'health_check', 'intelligent_routing']
    })

@app.route('/api/chat', methods=['POST'])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —á–∞—Ç–∞"""
    try:
        data = request.get_json()
        if not data or 'message' not in data:
            return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ message'}), 400
        
        message = data['message']
        if not message.strip():
            return jsonify({'error': '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}), 400
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = categorize_message(message)
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
        result, error = forward_request(category, message)
        
        if result:
            return jsonify({
                'success': True,
                'category': category,
                'response': result
            })
        else:
            return jsonify({
                'success': False,
                'error': error,
                'category': category
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ chat endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/servers/status')
def servers_status():
    """–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    status = {}
    for name in SERVERS.keys():
        status[name] = {
            'online': check_server_health(name),
            'port': SERVERS[name]['port'],
            'fallback': SERVERS[name].get('fallback', 'none')
        }
    
    return jsonify({
        'servers': status,
        'timestamp': str(pd.Timestamp.now()) if 'pd' in globals() else 'unknown'
    })

if __name__ == '__main__':
    print("üöÄ Smart Dispatcher v2.0 –∑–∞–ø—É—â–µ–Ω")
    print("URL: http://localhost:8080")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:")
    for name, config in SERVERS.items():
        status = "‚úÖ" if check_server_health(name) else "‚ùå"
        fallback = f" ‚Üí {config.get('fallback', 'none')}" if config.get('fallback') else ""
        print(f"  - {name}: localhost:{config['port']} {status}{fallback}")
    
    app.run(host='0.0.0.0', port=8080, debug=True)
