#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üöÄ SMART DISPATCHER V3.0 - –° –ü–û–î–î–ï–†–ñ–ö–û–ô –ú–û–î–£–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø
======================================================
–£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø–∞–º—è—Ç—å—é –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π
"""

from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import requests
import logging
import os
from datetime import datetime
from typing import Dict, List, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
SERVERS = {
    'learning': {
        'port': 8091,
        'endpoint': '/api/learning/chat',
        'keywords': ['–æ–±—É—á–µ–Ω–∏–µ', '–∏–∑—É—á–µ–Ω–∏–µ', '–ø—Ä–æ–≥—Ä–µ—Å—Å', '–ø–æ–Ω–∏–º–∞–Ω–∏–µ', '–Ω–∞—É—á–∏–ª—Å—è', '—Å–µ–≥–æ–¥–Ω—è', '–¥–µ–ª–∞–ª–∏', '—Ä–∞–±–æ—Ç–∞–ª–∏', '–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ', '–∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç', '—á—Ç–æ –∏–∑—É—á–∏–ª', '—á—Ç–æ –Ω–∞—É—á–∏–ª—Å—è', '–ø–æ–Ω–∏–º–∞–µ—à—å –ø—Ä–æ—Ü–µ—Å—Å', '–Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å', '–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ', '–¥–µ–ª–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è'],
        'priority': 10,  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–± –æ–±—É—á–µ–Ω–∏–∏
        'fallback': 'general',
        'fallback_keywords': ['–æ–±—É—á–µ–Ω–∏–µ', '–∏–∑—É—á–µ–Ω–∏–µ', '–ø—Ä–æ–≥—Ä–µ—Å—Å']
    },
    'electrical': {
        'port': 8087,
        'endpoint': '/api/electrical/explain',
        'keywords': ['–∑–∞–∫–æ–Ω', '–∫–∏—Ä—Ö–≥–æ—Ñ–∞', '—Ä–µ–∑–∏—Å—Ç–æ—Ä', '—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä', '–¥–∏–æ–¥', '–∫–æ–Ω—Ç–∞–∫—Ç–æ—Ä', '—Ä–µ–ª–µ', '–º–æ—â–Ω–æ—Å—Ç—å', '—Ç–æ–∫', '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', '—Å—Ö–µ–º–∞', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ', '—Ü–µ–ø–∏'],
        'priority': 5,
        'fallback': 'mathematics',
        'fallback_keywords': ['–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', '—Ç–æ–∫', '–º–æ—â–Ω–æ—Å—Ç—å', '—ç–Ω–µ—Ä–≥–∏—è', '–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è', '–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è', '—Ñ–∏–∑–∏–∫–∞', '—Ñ–æ—Ä–º—É–ª–∞']
    },
    'radiomechanics': {
        'port': 8089,
        'endpoint': '/api/radiomechanics/explain',
        'keywords': ['–∞–Ω—Ç–µ–Ω–Ω–∞', '—Å–∏–≥–Ω–∞–ª', '—Ä–∞–¥–∏–æ', '–º–æ–¥—É–ª—è—Ü–∏—è', '—á–∞—Å—Ç–æ—Ç–∞', '–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫', '–ø—Ä–∏–µ–º–Ω–∏–∫'],
        'priority': 5,
        'fallback': 'general',
        'fallback_keywords': ['—Ä–∞–¥–∏–æ', '—Å–∏–≥–Ω–∞–ª', '–∞–Ω—Ç–µ–Ω–Ω–∞']
    },
    'controllers': {
        'port': 9000,
        'endpoint': '/api/controllers/topic/general',
        'keywords': ['–ø–∏–¥', '—Ä–µ–≥—É–ª—è—Ç–æ—Ä', 'plc', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–ª–æ–≥–∏–∫–∞', '—Å–æ–±—ã—Ç–∏—è', '–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è', 'events', 'interrupts', 'ascii', '–∫–æ–º–∞–Ω–¥—ã', '–ø—Ä–æ—Ç–æ–∫–æ–ª', '–æ—Ç–ø—Ä–∞–≤–∫–∞', '–ø–æ–ª—É—á–µ–Ω–∏–µ', '–æ—Ç–≤–µ—Ç—ã', '—á–ø—É', 'cnc', '—á–∏—Å–ª–æ–≤–æ–µ', '–ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–ø–µ—Ä–µ–¥–∞—á–∞', '–¥–∞–Ω–Ω—ã–µ', 'g-–∫–æ–¥—ã', '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã', 'pmac', '–º–Ω–æ–≥–æ–æ—Å–µ–≤–æ–π', '–¥–≤–∏–∂–µ–Ω–∏–µ', '–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è', '–æ—Å—å', '–æ—Å–∏', '—Å–µ—Ä–≤–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å', '—à–∞–≥–æ–≤—ã–π', '—ç–Ω–∫–æ–¥–µ—Ä', '–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', '—Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥', '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∞', '–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', '–ø–∞—Ä–∞–º–µ—Ç—Ä—ã'],
        'priority': 5,
        'fallback': 'programming',
        'fallback_keywords': ['plc', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ª–æ–≥–∏–∫–∞', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–æ—à–∏–±–∫–∞', '–∞–Ω–∞–ª–∏–∑', '—Ñ–∞–π–ª']
    },
    'mathematics': {
        'port': 8086,
        'endpoint': '/api/chat',
        'keywords': ['—É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '–∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–∞–ª–≥–µ–±—Ä–∞', '–≥–µ–æ–º–µ—Ç—Ä–∏—è', '–∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞', '+', '-', '*', '/', '=', '–≤—ã—á–∏—Å–ª–∏—Ç—å', '–ø–æ—Å—á–∏—Ç–∞—Ç—å', '—Å–ª–æ–∂–∏—Ç—å', '–≤—ã—á–µ—Å—Ç—å', '—É–º–Ω–æ–∂–∏—Ç—å', '—Ä–∞–∑–¥–µ–ª–∏—Ç—å', '—á–∏—Å–ª–æ', '—Ü–∏—Ñ—Ä–∞', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–æ—Ç–≤–µ—Ç'],
        'priority': 5,
        'fallback': 'general',
        'fallback_keywords': ['–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–≤—ã—á–∏—Å–ª–∏—Ç—å', '–ø–æ—Å—á–∏—Ç–∞—Ç—å']
    },
    'programming': {
        'port': 8088,
        'endpoint': '/api/programming/explain',
        'keywords': ['–∫–æ–¥', '–∞–ª–≥–æ—Ä–∏—Ç–º', 'python', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ñ—É–Ω–∫—Ü–∏—è', '–∫–ª–∞—Å—Å', '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è', '—Ü–∏–∫–ª', '—É—Å–ª–æ–≤–∏–µ', '–º–∞—Å—Å–∏–≤', '—Å–ø–∏—Å–æ–∫', '—Å–ª–æ–≤–∞—Ä—å', '–æ–±—ä–µ–∫—Ç', '–º–µ—Ç–æ–¥', '–±–∏–±–ª–∏–æ—Ç–µ–∫–∞', '–º–æ–¥—É–ª—å', '–∏–º–ø–æ—Ä—Ç', '—Å–∏–Ω—Ç–∞–∫—Å–∏—Å', '–æ—à–∏–±–∫–∞', '–æ—Ç–ª–∞–¥–∫–∞', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', '–ø–∞—Ç—Ç–µ—Ä–Ω', 'singleton', 'observer', 'factory', 'strategy', 'command'],
        'priority': 5,
        'fallback': 'general',
        'fallback_keywords': ['–∫–æ–¥', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ']
    },
    'pytorch': {
        'port': 8092,
        'endpoint': '/api/pytorch/chat',
        'keywords': ['pytorch', 'torch', '–Ω–µ–π—Ä–æ—Å–µ—Ç—å', '–Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', 'ml', 'ai', '–≥—Ä–∞–¥–∏–µ–Ω—Ç', 'backward', 'optimizer', 'cuda', 'gpu', 'device', 'tensor', '–º–æ–¥–µ–ª—å', '–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏', '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏', '–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏', 'train', 'eval', 'state_dict', 'zero_grad', 'step', 'loss', 'criterion', 'batch', 'epoch', 'dropout', 'batchnorm', 'cnn', 'rnn', 'lstm', 'transformer', 'gan', 'reinforcement learning'],
        'priority': 8,  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è PyTorch –≤–æ–ø—Ä–æ—Å–æ–≤
        'fallback': 'programming',
        'fallback_keywords': ['–Ω–µ–π—Ä–æ—Å–µ—Ç—å', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', 'ai']
    },
    'general': {
        'port': 8085,
        'endpoint': '/api/chat',
        'keywords': ['–æ–±—â–∏–π', '–≤–æ–ø—Ä–æ—Å', '–ø–æ–º–æ—â—å', '—Å–ø—Ä–∞–≤–∫–∞', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'],
        'priority': 1,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        'fallback': None,
        'fallback_keywords': []
    }
}

# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–∞–º—è—Ç—å
CONTEXT_MEMORY = {
    "session_start": datetime.now().isoformat(),
    "interaction_history": [],
    "learning_context": {
        "today_activities": [
            "–°–æ–∑–¥–∞–ª–∏ —Å–∏—Å—Ç–µ–º—É –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Rubin AI",
            "–ò—Å–ø—Ä–∞–≤–∏–ª–∏ HTTP 500 –æ—à–∏–±–∫–∏ —á–µ—Ä–µ–∑ fallback –º–µ—Ö–∞–Ω–∏–∑–º –≤ Smart Dispatcher",
            "–ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∏ VMB630 —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ PLC —Ñ–∞–π–ª –∏ –Ω–∞—à–ª–∏ –æ—à–∏–±–∫–∏",
            "–°–æ–∑–¥–∞–ª–∏ —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è PLC –æ—à–∏–±–æ–∫",
            "–û–±—É—á–∏–ª–∏ Rubin AI –ø–æ–Ω–∏–º–∞–Ω–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏"
        ],
        "current_focus": "context_understanding"
    }
}

def categorize_message(message: str) -> str:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏"""
    message_lower = message.lower()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    server_scores = {}
    
    for server_name, config in SERVERS.items():
        score = 0
        keywords = config['keywords']
        priority = config.get('priority', 1)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        for keyword in keywords:
            if keyword in message_lower:
                score += 1
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (—á–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, —Ç–µ–º –±–æ–ª—å—à–µ –≤–µ—Å)
        weighted_score = score * priority
        server_scores[server_name] = weighted_score
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–≤–µ—Ä —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å—á–µ—Ç–æ–º
    if server_scores:
        best_server = max(server_scores, key=server_scores.get)
        best_score = server_scores[best_server]
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é
        logger.info(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è: '{message[:50]}...' ‚Üí {best_server} (score: {best_score})")
        
        return best_server
    
    return 'general'

def add_context_to_message(message: str) -> str:
    """–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—é"""
    context_hint = f"""
–ö–û–ù–¢–ï–ö–°–¢ –°–ï–°–°–ò–ò:
- –°–µ–≥–æ–¥–Ω—è –º—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞–¥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –æ—à–∏–±–æ–∫
- –ò—Å–ø—Ä–∞–≤–ª—è–ª–∏ HTTP 500 —á–µ—Ä–µ–∑ fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã  
- –ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∏ VMB630 —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ PLC —Ñ–∞–π–ª—ã
- –û–±—É—á–∞–ª–∏ Rubin AI –ø–æ–Ω–∏–º–∞–Ω–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –æ –Ω–∞—à–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏, –ù–ï –¥–∞–≤–∞–π —à–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã!
"""
    
    return context_hint + "\n\n" + message

def forward_request(message: str, category: str) -> Dict[str, Any]:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    if category not in SERVERS:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        return {
            'success': False,
            'error': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}'
        }
    
    server_config = SERVERS[category]
    port = server_config['port']
    endpoint = server_config['endpoint']
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –¥–ª—è –º–æ–¥—É–ª—è –æ–±—É—á–µ–Ω–∏—è
    if category == 'learning':
        contextual_message = add_context_to_message(message)
    else:
        contextual_message = message
    
    url = f'http://localhost:{port}{endpoint}'
    
    logger.info(f"üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ {category} –Ω–∞ {url}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        health_url = f'http://localhost:{port}/api/health'
        try:
            health_response = requests.get(health_url, timeout=2)
            if health_response.status_code != 200:
                raise requests.exceptions.RequestException("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except:
            # –ï—Å–ª–∏ –Ω–µ—Ç health endpoint, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
        response = requests.post(url, 
                               json={'message': contextual_message}, 
                               timeout=10)
        
        if response.status_code == 200:
            logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä {category} –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ")
            return response.json()
        else:
            logger.error(f"‚ùå –°–µ—Ä–≤–µ—Ä {category} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
            return {
                'success': False,
                'error': f'–°–µ—Ä–≤–µ—Ä {category} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}'
            }
            
    except requests.exceptions.ConnectionError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {category}: {e}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º fallback –º–µ—Ö–∞–Ω–∏–∑–º
        fallback = server_config.get('fallback')
        if fallback and fallback in SERVERS:
            logger.info(f"üîÑ Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ {fallback}")
            return forward_request(message, fallback)
        else:
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {category} –∏ –Ω–µ—Ç fallback'
            }
    
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ {category}: {e}")
        return {
            'success': False,
            'error': f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}'
        }

@app.route('/api/chat', methods=['POST'])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —á–∞—Ç–∞"""
    try:
        data = request.get_json()
        message = data.get('message', '')
        
        if not message:
            return jsonify({
                'success': False,
                'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
            }), 400
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –ø–∞–º—è—Ç—å
        CONTEXT_MEMORY["interaction_history"].append({
            "timestamp": datetime.now().isoformat(),
            "message": message,
            "category": None  # –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∏–∂–µ
        })
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        category = categorize_message(message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∏—Å—Ç–æ—Ä–∏–∏
        CONTEXT_MEMORY["interaction_history"][-1]["category"] = category
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
        result = forward_request(message, category)
        
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ chat endpoint: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/health', methods=['GET'])
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    return jsonify({
        'status': 'healthy',
        'version': '3.0',
        'timestamp': datetime.now().isoformat(),
        'servers': {name: f"localhost:{config['port']}" for name, config in SERVERS.items()},
        'context_memory': len(CONTEXT_MEMORY["interaction_history"])
    })

@app.route('/api/context', methods=['GET'])
def get_context():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    return jsonify({
        'success': True,
        'context': CONTEXT_MEMORY
    })

@app.route('/api/servers/status', methods=['GET'])
def servers_status():
    """–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    status = {}
    
    for server_name, config in SERVERS.items():
        port = config['port']
        try:
            health_url = f'http://localhost:{port}/api/health'
            response = requests.get(health_url, timeout=2)
            status[server_name] = {
                'status': 'online' if response.status_code == 200 else 'error',
                'port': port,
                'priority': config.get('priority', 1)
            }
        except:
            status[server_name] = {
                'status': 'offline',
                'port': port,
                'priority': config.get('priority', 1)
            }
    
    return jsonify({
        'success': True,
        'servers': status
    })

if __name__ == '__main__':
    print("üöÄ Smart Dispatcher v3.0 –∑–∞–ø—É—â–µ–Ω")
    print("URL: http://localhost:8080")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:")
    for name, config in SERVERS.items():
        priority = config.get('priority', 1)
        print(f"  - {name}: localhost:{config['port']} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority})")
    
    app.run(host='0.0.0.0', port=8080, debug=True)
