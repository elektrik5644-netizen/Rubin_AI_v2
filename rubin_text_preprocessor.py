import re
import logging
from typing import List, Optional

logger = logging.getLogger(__name__)

class RubinTextPreprocessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—é—â–∏–π —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—á–∏—Å—Ç–∫–∏."""

    def __init__(self):
        # –î–ª—è —Å—Ç–æ–ø-—Å–ª–æ–≤ –∏ –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, NLTK, spaCy)
        # –∏ –∏—Ö –∑–∞–≥—Ä—É–∑–∫–∞. –ü–æ–∫–∞ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∏.
        pass

    def to_lowercase(self, text: str) -> str:
        """–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É."""
        return text.lower()

    def remove_extra_spaces(self, text: str) -> str:
        """–£–¥–∞–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –æ—á–∏—Å—Ç–∫–∞ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ."""
        text = re.sub(r'\s+', ' ', text).strip()
        return text

    def remove_special_characters(self, text: str, pattern: str = r'[^\w\s\-.,!?]') -> str:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É."""
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–¥–∞–ª—è–µ—Ç –≤—Å–µ, –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤, –¥–µ—Ñ–∏—Å–æ–≤, —Ç–æ—á–µ–∫, –∑–∞–ø—è—Ç—ã—Ö, –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö/–≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
        return re.sub(pattern, '', text)

    def limit_length(self, text: str, max_length: int = 5000) -> str:
        """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞."""
        if len(text) > max_length:
            return text[:max_length]
        return text

    def preprocess_text(self, text: str, 
                        to_lower: bool = True,
                        remove_spaces: bool = True,
                        remove_special: bool = True,
                        limit_len: Optional[int] = 512) -> str:
        """–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞."""
        if not text:
            return ""

        processed_text = text

        if to_lower:
            processed_text = self.to_lowercase(processed_text)
        if remove_spaces:
            processed_text = self.remove_extra_spaces(processed_text)
        if remove_special:
            processed_text = self.remove_special_characters(processed_text)
        if limit_len is not None:
            processed_text = self.limit_length(processed_text, limit_len)

        return processed_text

    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç–æ–¥–æ–≤ (–ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è –≤–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏)
    def remove_stopwords(self, text: str, lang: str = 'russian') -> str:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤ (–ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è NLTK –∏–ª–∏ –ø–æ–¥–æ–±–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞)."""
        logger.warning(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ remove_stopwords –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω. –î–ª—è —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, NLTK). –¢–µ–∫—Å—Ç: \"{text[:50]}...\"")
        return text

    def lemmatize_text(self, text: str, lang: str = 'russian') -> str:
        """–õ–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ (–ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è spaCy, pymystem3 –∏–ª–∏ –ø–æ–¥–æ–±–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞)."""
        logger.warning(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ lemmatize_text –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω. –î–ª—è —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, spaCy). –¢–µ–∫—Å—Ç: \"{text[:50]}...\"")
        return text

if __name__ == "__main__":
    logger.info("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RubinTextPreprocessor")
    preprocessor = RubinTextPreprocessor()

    test_string = "  –≠—Ç–æ –¢–ï–°–¢–û–í–ê–Ø —Å—Ç—Ä–æ–∫–∞ —Å   —Ä–∞–∑–Ω—ã–º–∏   –°–ò–ú–í–û–õ–ê–ú–ò: !@#$%^&*() –∏ —Ü–∏—Ñ—Ä–∞–º–∏ 123. –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã... "
    long_string = "a" * 1000 # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞

    print(f"\n–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: '{test_string}'")

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    print(f"–ù–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä: '{preprocessor.to_lowercase(test_string)}'")
    print(f"–ë–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤: '{preprocessor.remove_extra_spaces(test_string)}'")
    print(f"–ë–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤: '{preprocessor.remove_special_characters(test_string)}'")
    print(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã (50): '{preprocessor.limit_length(test_string, 50)}'")
    print(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (50): '{preprocessor.limit_length(long_string, 50)}'")

    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
    processed_text = preprocessor.preprocess_text(test_string)
    print(f"\n–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞: '{processed_text}'")

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤ –∏ –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∏)
    processed_with_stopwords = preprocessor.remove_stopwords(processed_text)
    processed_with_lemmas = preprocessor.lemmatize_text(processed_with_stopwords)
    print(f"–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–æ–ø-—Å–ª–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞): '{processed_with_stopwords}'")
    print(f"–ü–æ—Å–ª–µ –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞): '{processed_with_lemmas}'")

    logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RubinTextPreprocessor –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")







