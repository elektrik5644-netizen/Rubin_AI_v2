#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É–º–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç—å—é –¥–ª—è Rubin AI v2
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import requests
import logging
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
try:
    from neural_rubin import get_neural_rubin
    NEURAL_NETWORK_AVAILABLE = True
    logger.info("üß† –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞!")
except ImportError as e:
    NEURAL_NETWORK_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")

app = Flask(__name__)
CORS(app, origins="*", methods=["GET", "POST", "OPTIONS"], allow_headers=["Content-Type", "Authorization"])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤
@app.before_request
def handle_preflight():
    if request.method == "OPTIONS":
        response = jsonify({})
        response.headers.add("Access-Control-Allow-Origin", "*")
        response.headers.add('Access-Control-Allow-Headers', "Content-Type,Authorization")
        response.headers.add('Access-Control-Allow-Methods', "GET,POST,OPTIONS")
        response.headers.add('Content-Type', 'application/json; charset=utf-8')
        return response

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
@app.after_request
def after_request(response):
    if response.content_type and 'application/json' in response.content_type:
        response.headers['Content-Type'] = 'application/json; charset=utf-8'
    return response

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
SERVERS = {
    'electrical': {
        'port': 8087,
        'endpoint': '/api/electrical/explain',
        'keywords': ['–∑–∞–∫–æ–Ω', '–∫–∏—Ä—Ö–≥–æ—Ñ–∞', '—Ä–µ–∑–∏—Å—Ç–æ—Ä', '—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä', '–¥–∏–æ–¥', '–∫–æ–Ω—Ç–∞–∫—Ç–æ—Ä', '—Ä–µ–ª–µ', '–º–æ—â–Ω–æ—Å—Ç—å', '—Ç–æ–∫', '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', '—Å—Ö–µ–º–∞', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ', '—Ü–µ–ø–∏', '—à–∏–º', '–ø–ª–∞—Ç–∞', '–º–æ–¥—É–ª—è—Ü–∏—è', '–∏–º–ø—É–ª—å—Å–Ω–∞—è', '—à–∏—Ä–æ—Ç–Ω–æ', '—Å–∫–≤–∞–∂–Ω–æ—Å—Ç—å', '–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ']
    },
    'radiomechanics': {
        'port': 8089,
        'endpoint': '/api/radiomechanics/explain',
        'keywords': ['–∞–Ω—Ç–µ–Ω–Ω–∞', '—Å–∏–≥–Ω–∞–ª', '—Ä–∞–¥–∏–æ', '–º–æ–¥—É–ª—è—Ü–∏—è', '—á–∞—Å—Ç–æ—Ç–∞', '–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫', '–ø—Ä–∏–µ–º–Ω–∏–∫']
    },
    'controllers': {
        'port': 9000,
        'endpoint': '/api/controllers/topic/general',
        'keywords': ['–ø–∏–¥', '—Ä–µ–≥—É–ª—è—Ç–æ—Ä', 'plc', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–ª–æ–≥–∏–∫–∞', '—Å–æ–±—ã—Ç–∏—è', '–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è', 'events', 'interrupts', 'ascii', '–∫–æ–º–∞–Ω–¥—ã', '–ø—Ä–æ—Ç–æ–∫–æ–ª', '–æ—Ç–ø—Ä–∞–≤–∫–∞', '–ø–æ–ª—É—á–µ–Ω–∏–µ', '–æ—Ç–≤–µ—Ç—ã', '—á–ø—É', 'cnc', '—á–∏—Å–ª–æ–≤–æ–µ', '–ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–ø–µ—Ä–µ–¥–∞—á–∞', '–¥–∞–Ω–Ω—ã–µ', 'g-–∫–æ–¥—ã', '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã']
    },
    'mathematics': {
        'port': 8086,
        'endpoint': '/api/chat',
        'keywords': ['—É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '–∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–∞–ª–≥–µ–±—Ä–∞', '–≥–µ–æ–º–µ—Ç—Ä–∏—è', '–∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞']
    },
    'programming': {
        'port': 8088,
        'endpoint': '/api/programming/explain',
        'keywords': ['–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ', '—Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ', '—Ñ—É–Ω–∫—Ü–∏–∏', '–∞–ª–≥–æ—Ä–∏—Ç–º—ã', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–¥', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'python', 'javascript', 'c++', 'java', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è', '–∫–æ–Ω–≤–µ–π–µ—Ä', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', '–æ—à–∏–±–∫–∏', 'error', 'xml', '–æ–±—Ä–∞–±–æ—Ç–∫–∞', '—Å—Ü–µ–Ω–∞—Ä–∏–∏', '—Å—Ü–µ–Ω–∞—Ä–∏–π', '—Ä–µ—à–µ–Ω–∏–µ', '–ø—Ä–æ–±–ª–µ–º', '–ø—Ä–æ–±–ª–µ–º—ã']
    },
    'general': {
        'port': 8085,
        'endpoint': '/api/chat',
        'keywords': ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–ø–æ–º–æ—â—å', 'help', '—Å–ø—Ä–∞–≤–∫–∞', '—Å—Ç–∞—Ç—É—Å', 'status', '—Ä–∞–±–æ—Ç–∞–µ—Ç', '–æ–Ω–ª–∞–π–Ω', '—á—Ç–æ', '–∫–∞–∫', '–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏']
    }
}

def categorize_message_neural(message):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
    if not NEURAL_NETWORK_AVAILABLE:
        return categorize_message_keywords(message)
    
    try:
        neural_ai = get_neural_rubin()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
        category, confidence = neural_ai.classify_question(message)
        
        logger.info(f"üß† –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª–∞: '{message[:50]}...' ‚Üí {category} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –Ω–∞ –Ω–∞—à–∏ —Å–µ—Ä–≤–µ—Ä—ã
        neural_to_server = {
            '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞': 'mathematics',
            '—Ñ–∏–∑–∏–∫–∞': 'mathematics',  # –§–∏–∑–∏–∫–∞ —Ç–æ–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π
            '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞': 'electrical',
            '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ': 'programming',
            '—Ç–µ—Ö–Ω–∏–∫–∞': 'controllers',
            '–æ–±—â–∏–µ_–≤–æ–ø—Ä–æ—Å—ã': 'general',
            '–¥—Ä—É–≥–æ–µ': 'general'
        }
        
        server_category = neural_to_server.get(category, 'general')
        
        # –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º keyword-based fallback
        if confidence < 0.6:
            logger.info(f"‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ ({confidence:.2f}), –∏—Å–ø–æ–ª—å–∑—É–µ–º keyword-based fallback")
            return categorize_message_keywords(message)
        
        return server_category
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: {e}")
        return categorize_message_keywords(message)

def categorize_message_keywords(message):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (fallback)"""
    message_lower = message.lower()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    scores = {}
    for category, config in SERVERS.items():
        score = 0
        for keyword in config['keywords']:
            if keyword in message_lower:
                score += 1
        scores[category] = score
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    if scores and max(scores.values()) > 0:
        best_category = max(scores, key=scores.get)
        logger.info(f"üìä Keyword-based –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è: '{message[:50]}...' ‚Üí {best_category} (score: {scores[best_category]})")
        return best_category
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º general –∫–∞–∫ fallback
    logger.info(f"‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: '{message[:50]}...' ‚Üí general (fallback)")
    return 'general'

def forward_request(category, message):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Å–µ—Ä–≤–µ—Ä—É"""
    if category not in SERVERS:
        return None, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
    
    config = SERVERS[category]
    url = f"http://localhost:{config['port']}{config['endpoint']}"
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    if category in ['electrical', 'radiomechanics', 'controllers', 'programming']:
        payload = {'concept': message}
    else:  # mathematics, general
        payload = {'message': message}
    
    try:
        logger.info(f"üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ {category} –Ω–∞ {url}")
        response = requests.post(url, json=payload, timeout=10)
        
        if response.status_code == 200:
            logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä {category} –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ")
            return response.json(), category
        else:
            logger.error(f"‚ùå –°–µ—Ä–≤–µ—Ä {category} –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status_code}")
            return None, f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ {category}: {response.status_code}"
            
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {category}: {e}")
        return None, f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {category}: {e}"

@app.route('/')
def index():
    return jsonify({
        'name': 'Smart Dispatcher with Neural Network',
        'version': '2.0',
        'status': 'online',
        'neural_network': 'available' if NEURAL_NETWORK_AVAILABLE else 'unavailable',
        'servers': list(SERVERS.keys())
    })

@app.route('/api/chat', methods=['POST'])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —á–∞—Ç–∞"""
    try:
        data = request.get_json()
        message = data.get('message', '').strip()
        
        if not message:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        if NEURAL_NETWORK_AVAILABLE:
            category = categorize_message_neural(message)
        else:
            category = categorize_message_keywords(message)
        
        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        response, server_category = forward_request(category, message)
        
        if response:
            return jsonify({
                'success': True,
                'category': server_category,
                'response': response,
                'server': f'localhost:{SERVERS[server_category]["port"]}',
                'neural_used': NEURAL_NETWORK_AVAILABLE
            })
        else:
            return jsonify({
                'success': False,
                'error': server_category,
                'neural_used': NEURAL_NETWORK_AVAILABLE
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {e}")
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500

@app.route('/api/neural-status')
def neural_status():
    """–°—Ç–∞—Ç—É—Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
    if not NEURAL_NETWORK_AVAILABLE:
        return jsonify({
            'available': False,
            'message': '–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
        })
    
    try:
        neural_ai = get_neural_rubin()
        stats = neural_ai.get_neural_stats()
        
        return jsonify({
            'available': True,
            'stats': stats,
            'message': '–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –∞–∫—Ç–∏–≤–Ω–∞'
        })
    except Exception as e:
        return jsonify({
            'available': False,
            'error': str(e),
            'message': '–û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏'
        })

@app.route('/api/neural-feedback', methods=['POST'])
def neural_feedback():
    """–û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    if not NEURAL_NETWORK_AVAILABLE:
        return jsonify({
            'success': False,
            'message': '–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è'
        }), 400
    
    try:
        data = request.get_json()
        question = data.get('question', '').strip()
        correct_category = data.get('correct_category', '').strip()
        rating = data.get('rating', 0)
        
        if not question or not correct_category:
            return jsonify({
                'success': False,
                'message': '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã question –∏ correct_category'
            }), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å –∏ –æ–±—É—á–∞–µ–º
        neural_ai = get_neural_rubin()
        success = neural_ai.learn_from_feedback(question, correct_category, rating)
        
        if success:
            return jsonify({
                'success': True,
                'message': f'–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: "{question}" ‚Üí {correct_category} (–æ—Ü–µ–Ω–∫–∞: {rating}/5)'
            })
        else:
            return jsonify({
                'success': False,
                'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏'
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        return jsonify({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {str(e)}'
        }), 500

@app.route('/api/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    return jsonify({
        'status': 'healthy',
        'timestamp': time.time(),
        'neural_network': NEURAL_NETWORK_AVAILABLE,
        'servers_count': len(SERVERS)
    })

if __name__ == '__main__':
    logger.info("Smart Dispatcher —Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç—å—é –∑–∞–ø—É—â–µ–Ω")
    logger.info("URL: http://localhost:8080")
    logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:")
    for name, config in SERVERS.items():
        logger.info(f"  - {name}: localhost:{config['port']}")
    
    if NEURAL_NETWORK_AVAILABLE:
        logger.info("üß† –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
    else:
        logger.info("‚ö†Ô∏è –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è keyword-based fallback")
    
    app.run(host='0.0.0.0', port=8080, debug=True)
