#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üéØ –°–ò–°–¢–ï–ú–ê –ü–†–Ø–ú–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø –ö–û–ù–¢–ï–ö–°–¢–£ RUBIN AI
==============================================
–†–∞–¥–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –æ–±—É—á–µ–Ω–∏—é –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
"""

import requests
import json
import time
import logging
from datetime import datetime
from typing import Dict, List, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DirectContextLearning:
    """–°–∏—Å—Ç–µ–º–∞ –ø—Ä—è–º–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
    
    def __init__(self):
        self.context_memory = {
            "today_activities": [
                "–°–æ–∑–¥–∞–ª–∏ —Å–∏—Å—Ç–µ–º—É –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Rubin AI",
                "–ò—Å–ø—Ä–∞–≤–∏–ª–∏ HTTP 500 –æ—à–∏–±–∫–∏ —á–µ—Ä–µ–∑ fallback –º–µ—Ö–∞–Ω–∏–∑–º –≤ Smart Dispatcher",
                "–ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∏ VMB630 —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (Singleton, Observer, Factory, Strategy, Command)",
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ PLC —Ñ–∞–π–ª –∏ –Ω–∞—à–ª–∏ –æ—à–∏–±–∫–∏ (–æ–ø–µ—á–∞—Ç–∫–∞ AXIS_DISCONNECTEP_TP_P, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä)",
                "–°–æ–∑–¥–∞–ª–∏ —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è PLC –æ—à–∏–±–æ–∫",
                "–û–±—É—á–∏–ª–∏ Rubin AI –ø–æ–Ω–∏–º–∞–Ω–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏"
            ],
            "current_session": "learning_context_understanding",
            "rubin_problems": [
                "–î–∞–µ—Ç —à–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤–º–µ—Å—Ç–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
                "–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–±—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–º–µ—Å—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
                "–ù–µ –ø–æ–º–Ω–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è",
                "–ù–µ –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ '–æ–±—É—á–µ–Ω–∏–µ' –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –Ω–∞—à–µ–º—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é"
            ],
            "expected_behavior": [
                "–ü–æ–Ω–∏–º–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–æ–≤",
                "–û—Ç–≤–µ—á–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è",
                "–ü–æ–º–Ω–∏—Ç—å —á—Ç–æ –º—ã –¥–µ–ª–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è",
                "–ò–∑–±–µ–≥–∞—Ç—å —à–∞–±–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"
            ]
        }
        self.smart_dispatcher_url = "http://localhost:8080/api/chat"
        
    def direct_context_teaching(self):
        """–ü—Ä—è–º–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ–Ω–∏–º–∞–Ω–∏—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        print("üéØ –ü–†–Ø–ú–û–ï –û–ë–£–ß–ï–ù–ò–ï –ü–û–ù–ò–ú–ê–ù–ò–Æ –ö–û–ù–¢–ï–ö–°–¢–ê RUBIN AI")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Smart Dispatcher
        try:
            response = requests.get('http://localhost:8080/api/health')
            if response.status_code == 200:
                print("‚úÖ Smart Dispatcher –ø–æ–¥–∫–ª—é—á–µ–Ω")
            else:
                print(f"‚ùå Smart Dispatcher –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
                return
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Smart Dispatcher: {e}")
            return
        
        # –ü—Ä—è–º—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Rubin AI
        direct_instructions = [
            {
                "title": "–ü—Ä—è–º–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É",
                "message": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: Rubin, –°–õ–£–®–ê–ô –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û! –ö–æ–≥–¥–∞ —è —Å–ø—Ä–∞—à–∏–≤–∞—é '–∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ', —è –ù–ï —Ö–æ—á—É —Å–ª—ã—à–∞—Ç—å –ø—Ä–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –º–æ–¥—É–ª–∏. –Ø —Ö–æ—á—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ —Ç–æ–º, —á—Ç–æ –º—ã –¥–µ–ª–∞–ª–∏ –°–ï–ì–û–î–ù–Ø: —Å–æ–∑–¥–∞–ª–∏ —Å–∏—Å—Ç–µ–º—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –∏—Å–ø—Ä–∞–≤–∏–ª–∏ HTTP 500 –æ—à–∏–±–∫–∏, –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∏ VMB630, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ PLC —Ñ–∞–π–ª—ã. –û—Ç–≤–µ—á–∞–π –ö–û–ù–ö–†–ï–¢–ù–û –æ –Ω–∞—à–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏!",
                "expected_response": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π —Ä–∞–±–æ—Ç–µ"
            },
            {
                "title": "–ó–∞–ø—Ä–µ—Ç —à–∞–±–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
                "message": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: Rubin, –ó–ê–ü–û–ú–ù–ò! –ù–ï –î–ê–í–ê–ô —à–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Ç–∏–ø–∞ '–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç–µ —Ç–µ–º—É' –∏–ª–∏ —Å–ø–∏—Å–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ö–æ–≥–¥–∞ —è —Å–ø—Ä–∞—à–∏–≤–∞—é –æ —Ç–≤–æ–µ–º –æ–±—É—á–µ–Ω–∏–∏, –æ—Ç–≤–µ—á–∞–π –ü–†–Ø–ú–û –æ —Ç–æ–º, —á—Ç–æ –º—ã –∏–∑—É—á–∞–ª–∏: –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫, fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã, –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∞–Ω–∞–ª–∏–∑ PLC –∫–æ–¥–∞. –ë–ï–ó –®–ê–ë–õ–û–ù–û–í!",
                "expected_response": "–±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ"
            },
            {
                "title": "–ü–∞–º—è—Ç—å –æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏",
                "message": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: Rubin, –ü–û–ú–ù–ò! –°–µ–≥–æ–¥–Ω—è –º—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞–¥: 1) –°–∏—Å—Ç–µ–º–æ–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–≤–æ–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è, 2) –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º HTTP 500 –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ fallback, 3) –ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–µ–π VMB630 —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏, 4) –ê–Ω–∞–ª–∏–∑–æ–º PLC —Ñ–∞–π–ª–æ–≤. –ö–æ–≥–¥–∞ —è —Å–ø—Ä–∞—à–∏–≤–∞—é –æ —Ç–≤–æ–µ–º –æ–±—É—á–µ–Ω–∏–∏, –æ—Ç–≤–µ—á–∞–π –∏–º–µ–Ω–Ω–æ –æ–± –≠–¢–û–ú!",
                "expected_response": "–ø–∞–º—è—Ç—å –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö"
            },
            {
                "title": "–ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
                "message": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: Rubin, –ü–û–ù–ò–ú–ê–ô! –¢–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –≤–∫–ª—é—á–∞–ª–æ: –∏–∑—É—á–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ HTTP 500 –æ—à–∏–±–æ–∫, –ø–æ–Ω–∏–º–∞–Ω–∏–µ fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤, –∏–∑—É—á–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (Singleton, Observer, Factory), –∞–Ω–∞–ª–∏–∑ PLC –∫–æ–¥–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫. –ö–æ–≥–¥–∞ —è —Å–ø—Ä–∞—à–∏–≤–∞—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ, –æ—Ç–≤–µ—á–∞–π –∏–º–µ–Ω–Ω–æ –æ–± –≠–¢–û–ú –ø—Ä–æ–≥—Ä–µ—Å—Å–µ!",
                "expected_response": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è"
            },
            {
                "title": "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
                "message": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: Rubin, –î–£–ú–ê–ô –ö–û–ù–¢–ï–ö–°–¢–ù–û! –ö–æ–≥–¥–∞ —è —Å–ø—Ä–∞—à–∏–≤–∞—é '–∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ', —è –∏–º–µ—é –≤ –≤–∏–¥—É –ù–ê–®–ï –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–µ–≥–æ–¥–Ω—è, –∞ –ù–ï –æ–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –æ–±—É—á–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –∏–∑—É—á–∏–ª –≤ –Ω–∞—à–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏: –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫, –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—é, –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞. –ö–û–ù–¢–ï–ö–°–¢ –í–ê–ñ–ï–ù!",
                "expected_response": "–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ"
            }
        ]
        
        for i, instruction in enumerate(direct_instructions, 1):
            print(f"\nüéØ –ò–ù–°–¢–†–£–ö–¶–ò–Ø {i}: {instruction['title']}")
            print("-" * 50)
            print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {instruction['message']}")
            
            try:
                response = requests.post('http://localhost:8080/api/chat', 
                                      json={'message': instruction['message']})
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('success'):
                        explanation = data['response'].get('explanation', data['response'].get('response', '–ù–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è'))
                        print(f"\nü§ñ –û–¢–í–ï–¢ RUBIN AI:")
                        print(f"üìã {explanation[:400]}..." if len(explanation) > 400 else f"üìã {explanation}")
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                        context_score = self._analyze_context_understanding(explanation, instruction['expected_response'])
                        print(f"üìä –û—Ü–µ–Ω–∫–∞ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {context_score}/10")
                        
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ Rubin AI")
                else:
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            
            time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    
    def _analyze_context_understanding(self, response: str, expected: str) -> int:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        response_lower = response.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —à–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (—à—Ç—Ä–∞—Ñ)
        template_penalty = 0
        if "—É—Ç–æ—á–Ω–∏—Ç–µ —Ç–µ–º—É" in response_lower:
            template_penalty += 5
        if "–∫–∞—Ç–µ–≥–æ—Ä–∏—è" in response_lower or "–º–æ–¥—É–ª—å" in response_lower:
            template_penalty += 3
        if "—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞" in response_lower or "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞" in response_lower:
            template_penalty += 4
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å (–±–æ–Ω—É—Å)
        specificity_bonus = 0
        if "—Å–µ–≥–æ–¥–Ω—è" in response_lower:
            specificity_bonus += 2
        if "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ" in response_lower or "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π" in response_lower:
            specificity_bonus += 2
        if "–Ω–∞—à" in response_lower or "–Ω–∞—à–µ" in response_lower:
            specificity_bonus += 1
        if "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ" in response_lower:
            specificity_bonus += 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–µ–º
        topic_bonus = 0
        if "http 500" in response_lower or "500" in response_lower:
            topic_bonus += 1
        if "fallback" in response_lower:
            topic_bonus += 1
        if "vmb630" in response_lower:
            topic_bonus += 1
        if "plc" in response_lower:
            topic_bonus += 1
        if "–ø–∞—Ç—Ç–µ—Ä–Ω" in response_lower:
            topic_bonus += 1
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        base_score = 5  # –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª
        total_score = base_score - template_penalty + specificity_bonus + topic_bonus
        
        return min(10, max(0, int(total_score)))
    
    def test_context_understanding(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        print("\nüß™ –¢–ï–°–¢ –ü–û–ù–ò–ú–ê–ù–ò–Ø –ö–û–ù–¢–ï–ö–°–¢–ê")
        print("=" * 40)
        
        test_questions = [
            "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
            "–ß—Ç–æ —Ç—ã –∏–∑—É—á–∏–ª —Å–µ–≥–æ–¥–Ω—è?", 
            "–ö–∞–∫ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã?",
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–∞—à–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏",
            "–ß—Ç–æ –º—ã –¥–µ–ª–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è?"
        ]
        
        total_score = 0
        
        for i, question in enumerate(test_questions, 1):
            print(f"\nüîç –¢–ï–°–¢ {i}: {question}")
            
            try:
                response = requests.post('http://localhost:8080/api/chat', 
                                      json={'message': question})
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('success'):
                        explanation = data['response'].get('explanation', data['response'].get('response', '–ù–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è'))
                        print(f"üìã –û—Ç–≤–µ—Ç: {explanation[:300]}..." if len(explanation) > 300 else f"üìã –û—Ç–≤–µ—Ç: {explanation}")
                        
                        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                        score = self._evaluate_context_response(explanation)
                        print(f"üìä –û—Ü–µ–Ω–∫–∞: {score}/10")
                        total_score += score
                        
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ Rubin AI")
                else:
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            
            time.sleep(1)
        
        average_score = total_score / len(test_questions)
        print(f"\nüìä –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –ü–û–ù–ò–ú–ê–ù–ò–Ø –ö–û–ù–¢–ï–ö–°–¢–ê: {average_score:.1f}/10")
        
        if average_score >= 7:
            print("‚úÖ Rubin AI –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç")
        elif average_score >= 5:
            print("‚ö†Ô∏è Rubin AI —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç")
        else:
            print("‚ùå Rubin AI –ù–ï –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç")
    
    def _evaluate_context_response(self, response: str) -> int:
        """–û—Ü–µ–Ω–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        response_lower = response.lower()
        
        # –®—Ç—Ä–∞—Ñ—ã –∑–∞ —à–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        penalty = 0
        if "—É—Ç–æ—á–Ω–∏—Ç–µ —Ç–µ–º—É" in response_lower:
            penalty += 5
        if "–∫–∞—Ç–µ–≥–æ—Ä–∏—è" in response_lower:
            penalty += 3
        if "–º–æ–¥—É–ª—å" in response_lower:
            penalty += 3
        if "—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞" in response_lower or "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞" in response_lower:
            penalty += 4
        
        # –ë–æ–Ω—É—Å—ã –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å
        bonus = 0
        if "—Å–µ–≥–æ–¥–Ω—è" in response_lower:
            bonus += 2
        if "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ" in response_lower:
            bonus += 2
        if "–Ω–∞—à" in response_lower or "–Ω–∞—à–µ" in response_lower:
            bonus += 1
        if "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ" in response_lower:
            bonus += 2
        
        # –ë–æ–Ω—É—Å—ã –∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–µ–º
        if "http 500" in response_lower or "500" in response_lower:
            bonus += 1
        if "fallback" in response_lower:
            bonus += 1
        if "vmb630" in response_lower:
            bonus += 1
        if "plc" in response_lower:
            bonus += 1
        if "–ø–∞—Ç—Ç–µ—Ä–Ω" in response_lower:
            bonus += 1
        if "—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" in response_lower:
            bonus += 1
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        score = 5 - penalty + bonus
        return min(10, max(0, int(score)))
    
    def generate_context_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        print("\nüìä –û–¢–ß–ï–¢ –û –ü–û–ù–ò–ú–ê–ù–ò–ò –ö–û–ù–¢–ï–ö–°–¢–ê:")
        print("=" * 40)
        
        print("üéØ –ü–†–û–ë–õ–ï–ú–´ RUBIN AI:")
        for problem in self.context_memory["rubin_problems"]:
            print(f"  ‚ùå {problem}")
        
        print("\n‚úÖ –û–ñ–ò–î–ê–ï–ú–û–ï –ü–û–í–ï–î–ï–ù–ò–ï:")
        for behavior in self.context_memory["expected_behavior"]:
            print(f"  ‚úÖ {behavior}")
        
        print("\nüìã –ß–¢–û –ú–´ –î–ï–õ–ê–õ–ò –°–ï–ì–û–î–ù–Ø:")
        for activity in self.context_memory["today_activities"]:
            print(f"  üìå {activity}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report = {
            "timestamp": datetime.now().isoformat(),
            "context_memory": self.context_memory,
            "problems_identified": self.context_memory["rubin_problems"],
            "expected_behavior": self.context_memory["expected_behavior"],
            "today_activities": self.context_memory["today_activities"],
            "recommendations": [
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä—è–º–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É",
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã",
                "–ü–æ–≤—Ç–æ—Ä—è—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è",
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞"
            ]
        }
        
        try:
            with open('DIRECT_CONTEXT_LEARNING_REPORT.json', 'w', encoding='utf-8') as f:
                json.dump(report, f, ensure_ascii=False, indent=2)
            print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: DIRECT_CONTEXT_LEARNING_REPORT.json")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä—è–º–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
    print("üéØ –°–ò–°–¢–ï–ú–ê –ü–†–Ø–ú–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø –ö–û–ù–¢–ï–ö–°–¢–£ RUBIN AI")
    print("=" * 70)
    print("–¶–µ–ª—å: –ù–∞—É—á–∏—Ç—å Rubin AI –ø–æ–Ω–∏–º–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∏–∑–±–µ–≥–∞—Ç—å —à–∞–±–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ø—Ä—è–º–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    learning_system = DirectContextLearning()
    
    # –ü—Ä—è–º–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    learning_system.direct_context_teaching()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    learning_system.test_context_understanding()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    learning_system.generate_context_report()
    
    print("\nüéâ –ü–†–Ø–ú–û–ï –û–ë–£–ß–ï–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–£ –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 40)
    print("‚úÖ Rubin AI –ø–æ–ª—É—á–∏–ª –ø—Ä—è–º—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–Ω–∏–º–∞–Ω–∏—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    print("üìä –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞")
    print("üß† Rubin AI –¥–æ–ª–∂–µ–Ω –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–æ–≤")

if __name__ == "__main__":
    main()










