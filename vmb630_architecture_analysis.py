#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã VMB630 –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å –ø–æ–º–æ—â—å—é –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

from rubin_project_integration import RubinProjectIntegration
import os

def analyze_vmb630_architecture():
    """–ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã VMB630 –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
    
    print("üèóÔ∏è –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´ VMB630 –ò –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Rubin AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    integration = RubinProjectIntegration()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
    projects = integration.project_reader.get_all_projects()
    
    if not projects:
        print("‚ùå –ù–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º VMB630 –ø—Ä–æ–µ–∫—Ç
    vmb_project = None
    for project in projects:
        if 'VMB630' in project[1]:
            vmb_project = project
            break
    
    if not vmb_project:
        print("‚ùå VMB630 –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    project_id = vmb_project[0]
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç VMB630 (ID: {project_id})")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    architecture = integration.get_project_architecture(project_id)
    
    print(f"\nüìä –¢–ï–ö–£–©–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:")
    print("-" * 30)
    
    total_components = 0
    for comp_type, components in architecture.items():
        if components:
            print(f"  {comp_type.upper()}: {len(components)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
            total_components += len(components)
            for comp in components[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"    - {comp['name']}: {comp['description']}")
    
    print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  –í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {total_components}")
    print(f"  –¢–∏–ø–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len([t for t, c in architecture.items() if c])}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–û–í –ü–†–û–ï–ö–¢–ê:")
    print("-" * 30)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–∞–π–ª–∞–º
    import sqlite3
    conn_db = sqlite3.connect(integration.project_db_path)
    cursor = conn_db.cursor()
    
    cursor.execute('''
        SELECT file_extension, COUNT(*) as count, SUM(file_size) as total_size
        FROM project_files 
        WHERE project_id = ?
        GROUP BY file_extension
        ORDER BY count DESC
    ''', (project_id,))
    
    file_types = cursor.fetchall()
    print(f"  –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤:")
    for ext, count, total_size in file_types:
        size_kb = total_size / 1024
        print(f"    - {ext}: {count} —Ñ–∞–π–ª–æ–≤, {size_kb:.1f} KB")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Ñ–∞–π–ª–æ–≤ –ø–æ —Ä–∞–∑–º–µ—Ä—É
    cursor.execute('''
        SELECT file_name, file_extension, file_size, complexity_score
        FROM project_files 
        WHERE project_id = ?
        ORDER BY file_size DESC
        LIMIT 5
    ''', (project_id,))
    
    top_files = cursor.fetchall()
    print(f"\n  –¢–æ–ø-5 —Ñ–∞–π–ª–æ–≤ –ø–æ —Ä–∞–∑–º–µ—Ä—É:")
    for file_name, ext, size, complexity in top_files:
        size_kb = size / 1024
        print(f"    - {file_name} ({ext}) - {size_kb:.1f} KB - —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity}")
    
    conn_db.close()
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    print(f"\nüí° –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ –ê–†–•–ò–¢–ï–ö–¢–£–†–´:")
    print("=" * 50)
    
    print(f"\nüéØ 1. –ü–ê–¢–¢–ï–†–ù SINGLETON (–û–¥–∏–Ω–æ—á–∫–∞)")
    print("   –ü—Ä–æ–±–ª–µ–º–∞: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã")
    print("   –†–µ—à–µ–Ω–∏–µ: –°–æ–∑–¥–∞—Ç—å –µ–¥–∏–Ω—ã–π ConfigurationManager")
    print("   –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:")
    print("     - define.xml ‚Üí ConfigurationManager.get_definition()")
    print("     - start.cfg ‚Üí ConfigurationManager.get_start_config()")
    print("     - errors.xml ‚Üí ConfigurationManager.get_error_codes()")
    
    print(f"\nüéØ 2. –ü–ê–¢–¢–ï–†–ù FACTORY (–§–∞–±—Ä–∏–∫–∞)")
    print("   –ü—Ä–æ–±–ª–µ–º–∞: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–æ—Ç–æ—Ä–æ–≤ –∏ –æ—Å–µ–π")
    print("   –†–µ—à–µ–Ω–∏–µ: MotorFactory –∏ AxisFactory")
    print("   –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:")
    print("     - MotorFactory.create_linear_motor(axis_type)")
    print("     - MotorFactory.create_rotary_motor(spindle_type)")
    print("     - AxisFactory.create_axis(axis_name, motor)")
    
    print(f"\nüéØ 3. –ü–ê–¢–¢–ï–†–ù OBSERVER (–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å)")
    print("   –ü—Ä–æ–±–ª–µ–º–∞: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
    print("   –†–µ—à–µ–Ω–∏–µ: EventSystem –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    print("   –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:")
    print("     - MotorStatusObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ—Ç–æ—Ä–æ–≤")
    print("     - ErrorObserver –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
    print("     - PositionObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π")
    
    print(f"\nüéØ 4. –ü–ê–¢–¢–ï–†–ù STRATEGY (–°—Ç—Ä–∞—Ç–µ–≥–∏—è)")
    print("   –ü—Ä–æ–±–ª–µ–º–∞: –†–∞–∑–ª–∏—á–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—è–º–∏")
    print("   –†–µ—à–µ–Ω–∏–µ: ControlStrategy –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    print("   –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:")
    print("     - LinearControlStrategy –¥–ª—è –ª–∏–Ω–µ–π–Ω—ã—Ö –æ—Å–µ–π")
    print("     - RotaryControlStrategy –¥–ª—è –≤—Ä–∞—â–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Å–µ–π")
    print("     - GantryControlStrategy –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    
    print(f"\nüéØ 5. –ü–ê–¢–¢–ï–†–ù COMMAND (–ö–æ–º–∞–Ω–¥–∞)")
    print("   –ü—Ä–æ–±–ª–µ–º–∞: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    print("   –†–µ—à–µ–Ω–∏–µ: Command pattern –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π")
    print("   –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:")
    print("     - MoveCommand –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ—Å–µ–π")
    print("     - SpindleCommand –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–ø–∏–Ω–¥–µ–ª—è–º–∏")
    print("     - CalibrationCommand –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏")
    
    print(f"\nüéØ 6. –ü–ê–¢–¢–ï–†–ù STATE (–°–æ—Å—Ç–æ—è–Ω–∏–µ)")
    print("   –ü—Ä–æ–±–ª–µ–º–∞: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ —Å–∏—Å—Ç–µ–º—ã")
    print("   –†–µ—à–µ–Ω–∏–µ: StateMachine –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å—Ç–∞–Ω–∫–∞")
    print("   –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:")
    print("     - IdleState, RunningState, ErrorState")
    print("     - CalibrationState, MaintenanceState")
    print("     - EmergencyStopState")
    
    print(f"\nüéØ 7. –ü–ê–¢–¢–ï–†–ù ADAPTER (–ê–¥–∞–ø—Ç–µ—Ä)")
    print("   –ü—Ä–æ–±–ª–µ–º–∞: –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    print("   –†–µ—à–µ–Ω–∏–µ: ConfigAdapter –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print("   –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:")
    print("     - XMLConfigAdapter –¥–ª—è .xml —Ñ–∞–π–ª–æ–≤")
    print("     - CFGConfigAdapter –¥–ª—è .cfg —Ñ–∞–π–ª–æ–≤")
    print("     - INIConfigAdapter –¥–ª—è .ini —Ñ–∞–π–ª–æ–≤")
    
    print(f"\nüéØ 8. –ü–ê–¢–¢–ï–†–ù FACADE (–§–∞—Å–∞–¥)")
    print("   –ü—Ä–æ–±–ª–µ–º–∞: –°–ª–æ–∂–Ω–æ—Å—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–¥—Å–∏—Å—Ç–µ–º–∞–º–∏")
    print("   –†–µ—à–µ–Ω–∏–µ: VMB630Facade –∫–∞–∫ –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞")
    print("   –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:")
    print("     - VMB630Facade.start_machine()")
    print("     - VMB630Facade.move_axis(axis, position)")
    print("     - VMB630Facade.get_status()")
    
    # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüîß –ö–û–ù–ö–†–ï–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 40)
    
    print(f"\nüìÅ 1. –†–ï–°–¢–†–£–ö–¢–£–†–ò–ó–ê–¶–ò–Ø –§–ê–ô–õ–û–í:")
    print("   –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
    print("     - 66 .cfg —Ñ–∞–π–ª–æ–≤ (3221 KB)")
    print("     - 28 .xml —Ñ–∞–π–ª–æ–≤ (1305 KB)")
    print("     - 7 .ini —Ñ–∞–π–ª–æ–≤ (5 KB)")
    print("   –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
    print("     - config/ (–≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)")
    print("     - motors/ (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ—Ç–æ—Ä–æ–≤)")
    print("     - axes/ (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Å–µ–π)")
    print("     - spindles/ (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —à–ø–∏–Ω–¥–µ–ª–µ–π)")
    print("     - plc/ (PLC –ø—Ä–æ–≥—Ä–∞–º–º—ã)")
    
    print(f"\nüèóÔ∏è 2. –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –°–õ–û–ò:")
    print("   - Presentation Layer (UI/API)")
    print("   - Business Logic Layer (Control Logic)")
    print("   - Data Access Layer (Configuration)")
    print("   - Hardware Abstraction Layer (Motors/Axes)")
    
    print(f"\nüîå 3. –ò–ù–¢–ï–†–§–ï–ô–°–´ –ò –ê–ë–°–¢–†–ê–ö–¶–ò–ò:")
    print("   - IMotor (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ—Ç–æ—Ä–∞)")
    print("   - IAxis (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Å–∏)")
    print("   - ISpindle (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —à–ø–∏–Ω–¥–µ–ª—è)")
    print("   - IConfiguration (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)")
    
    print(f"\nüìä 4. –ú–ï–¢–†–ò–ö–ò –ö–ê–ß–ï–°–¢–í–ê:")
    print("   - Cyclomatic Complexity: —Å–Ω–∏–∑–∏—Ç—å —Å —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è")
    print("   - Coupling: —É–º–µ–Ω—å—à–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏")
    print("   - Cohesion: —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤—è–∑–Ω–æ—Å—Ç—å –≤–Ω—É—Ç—Ä–∏ –º–æ–¥—É–ª–µ–π")
    print("   - Maintainability Index: —É–ª—É—á—à–∏—Ç—å –∏–Ω–¥–µ–∫—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏")
    
    print(f"\nüéâ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("=" * 20)
    print("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–º–æ–∂–µ—Ç:")
    print("‚úÖ –£–ª—É—á—à–∏—Ç—å —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞")
    print("‚úÖ –£–ø—Ä–æ—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫—É")
    print("‚úÖ –ü–æ–≤—ã—Å–∏—Ç—å —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã")
    print("‚úÖ –°–Ω–∏–∑–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
    print("‚úÖ –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å")
    
    print(f"\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –°–æ–∑–¥–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É —Ç–µ–∫—É—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
    print("2. –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞–Ω —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞")
    print("3. –ü–æ—ç—Ç–∞–ø–Ω–æ –≤–Ω–µ–¥—Ä–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É")
    print("5. –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")

if __name__ == "__main__":
    analyze_vmb630_architecture()










