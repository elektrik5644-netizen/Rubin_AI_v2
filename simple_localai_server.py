#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π LocalAI —Å–µ—Ä–≤–µ—Ä –¥–ª—è Rubin AI v2
–ò–º–∏—Ç–∏—Ä—É–µ—Ç OpenAI API –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import logging
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
CORS(app, origins="*", methods=["GET", "POST", "OPTIONS"], allow_headers=["Content-Type", "Authorization"])

@app.before_request
def handle_preflight():
    if request.method == "OPTIONS":
        response = jsonify({})
        response.headers.add("Access-Control-Allow-Origin", "*")
        response.headers.add('Access-Control-Allow-Headers', "Content-Type,Authorization")
        response.headers.add('Access-Control-Allow-Methods', "GET,POST,OPTIONS")
        response.headers.add('Content-Type', 'application/json; charset=utf-8')
        return response

@app.after_request
def after_request(response):
    if response.content_type == 'application/json':
        response.headers['Content-Type'] = 'application/json; charset=utf-8'
    return response

# –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
KNOWLEDGE_BASE = {
    "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": {
        "keywords": ["–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "–∞–ª–≥–æ—Ä–∏—Ç–º", "—Ñ—É–Ω–∫—Ü–∏—è", "–∫–ª–∞—Å—Å", "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è"],
        "responses": [
            "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º.",
            "–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–∞—é—Ç –∏–∑—É—á–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö.",
            "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: Python, JavaScript, Java, C++."
        ]
    },
    "—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞": {
        "keywords": ["—Ç–æ–∫", "–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ", "—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ", "–º–æ—â–Ω–æ—Å—Ç—å", "—Å—Ö–µ–º–∞", "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ"],
        "responses": [
            "–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ –∏–∑—É—á–∞–µ—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —è–≤–ª–µ–Ω–∏—è –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ.",
            "–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–∫–æ–Ω—ã: –∑–∞–∫–æ–Ω –û–º–∞, –∑–∞–∫–æ–Ω—ã –ö–∏—Ä—Ö–≥–æ—Ñ–∞.",
            "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã —Å–æ—Å—Ç–æ—è—Ç –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –Ω–∞–≥—Ä—É–∑–æ–∫ –∏ —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–æ–¥–æ–≤."
        ]
    },
    "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞": {
        "keywords": ["—á–∏—Å–ª–æ", "—É—Ä–∞–≤–Ω–µ–Ω–∏–µ", "—Ñ—É–Ω–∫—Ü–∏—è", "–∏–Ω—Ç–µ–≥—Ä–∞–ª", "–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è", "–∞–ª–≥–µ–±—Ä–∞"],
        "responses": [
            "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - –Ω–∞—É–∫–∞ –æ —á–∏—Å–ª–∞—Ö, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.",
            "–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã: –∞–ª–≥–µ–±—Ä–∞, –≥–µ–æ–º–µ—Ç—Ä–∏—è, –∞–Ω–∞–ª–∏–∑, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.",
            "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤–æ –≤—Å–µ—Ö –æ–±–ª–∞—Å—Ç—è—Ö –Ω–∞—É–∫–∏."
        ]
    },
    "–æ–±—â–µ–µ": {
        "keywords": ["–ø—Ä–∏–≤–µ—Ç", "–ø–æ–º–æ—â—å", "—Å–ø–∞—Å–∏–±–æ", "–∫–∞–∫ –¥–µ–ª–∞"],
        "responses": [
            "–ü—Ä–∏–≤–µ—Ç! –Ø LocalAI —Å–µ—Ä–≤–µ—Ä –¥–ª—è Rubin AI v2.",
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.",
            "–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é, —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ, –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ!"
        ]
    }
}

def generate_response(message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    message_lower = message.lower()
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∂–∏–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è
    if any(word in message_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "hello", "hi"]):
        responses = [
            "–ü—Ä–∏–≤–µ—Ç! –Ø Rubin, —Ç–≤–æ–π AI-–ø–æ–º–æ—â–Ω–∏–∫. –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üòä",
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!",
            "–ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º, —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–æ–π –∏ –Ω–µ —Ç–æ–ª—å–∫–æ!"
        ]
        import random
        return random.choice(responses)
    
    if any(word in message_lower for word in ["–∫–∞–∫ –¥–µ–ª–∞", "–∫–∞–∫ –∂–∏–∑–Ω—å", "–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å"]):
        responses = [
            "–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏! –ê —É —Ç–µ–±—è –∫–∞–∫ –¥–µ–ª–∞?",
            "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ. –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?",
            "–í—Å–µ —Ö–æ—Ä–æ—à–æ! –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            "–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –º–æ–¥—É–ª–∏ –æ–Ω–ª–∞–π–Ω. –ß–µ–º –∑–∞–π–º–µ–º—Å—è?"
        ]
        import random
        return random.choice(responses)
    
    if any(word in message_lower for word in ["–∫–∞–∫–æ–π –¥–µ–Ω—å", "–∫–∞–∫–∞—è –¥–∞—Ç–∞", "—Å–µ–≥–æ–¥–Ω—è", "–≤—Ä–µ–º—è", "–¥–∞—Ç–∞"]):
        from datetime import datetime
        now = datetime.now()
        responses = [
            f"–°–µ–≥–æ–¥–Ω—è {now.strftime('%d.%m.%Y')} ({now.strftime('%A')}). –í—Ä–µ–º—è: {now.strftime('%H:%M')}",
            f"–°–µ–≥–æ–¥–Ω—è {now.strftime('%d %B %Y')}. –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {now.strftime('%A')}",
            f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {now.strftime('%d.%m.%Y')}, –≤—Ä–µ–º—è: {now.strftime('%H:%M:%S')}",
            f"–°–µ–≥–æ–¥–Ω—è {now.strftime('%d.%m.%Y')}. –ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –∑–∞–π–º–µ–º—Å—è?"
        ]
        import random
        return random.choice(responses)
    
    if any(word in message_lower for word in ["pmac", "–º–Ω–æ–≥–æ–æ—Å–µ–≤–æ–π", "–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–≤–∏–∂–µ–Ω–∏—è"]):
        responses = [
            "PMAC (Programmable Multi-Axis Controller) - —ç—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º—ã–π –º–Ω–æ–≥–æ–æ—Å–µ–≤–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–≤–∏–∂–µ–Ω–∏—è. –ú–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ 32 –æ—Å—è–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å—Ç–∞–Ω–∫–∞—Ö —Å –ß–ü–£, —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–µ –∏ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö.",
            "PMAC –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã - —ç—Ç–æ –º–æ—â–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏–µ–º. –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ—Å—è–º–∏, –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å, —Ä–∞–±–æ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π.",
            "PMAC - —ç—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π, –∏–º–µ–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –∏ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç–Ω–∫–æ–¥–µ—Ä–∞–º–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."
        ]
        import random
        return random.choice(responses)
    
    # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for category, data in KNOWLEDGE_BASE.items():
        for keyword in data["keywords"]:
            if keyword in message_lower:
                import random
                return random.choice(data["responses"])
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    if any(word in message_lower for word in ["—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä", "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π", "–º–æ—â–Ω–æ—Å—Ç—å", "—Ç–æ–∫", "–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ"]):
        return "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä - —ç—Ç–æ —ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è. –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–Ω—Ü–∏–ø: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫ –≤ –ø–µ—Ä–≤–∏—á–Ω–æ–π –æ–±–º–æ—Ç–∫–µ —Å–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ –º–∞–≥–Ω–∏—Ç–Ω–æ–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –∏–Ω–¥—É—Ü–∏—Ä—É–µ—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤–æ –≤—Ç–æ—Ä–∏—á–Ω–æ–π –æ–±–º–æ—Ç–∫–µ. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ k = U1/U2 = N1/N2, –≥–¥–µ N - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ç–∫–æ–≤."
    
    if any(word in message_lower for word in ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∫–æ–¥", "–∞–ª–≥–æ—Ä–∏—Ç–º", "—Ñ—É–Ω–∫—Ü–∏—è"]):
        return "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º. –û—Å–Ω–æ–≤—ã –≤–∫–ª—é—á–∞—é—Ç –∏–∑—É—á–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö, —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —è–∑—ã–∫–∏: Python (–ø—Ä–æ—Å—Ç–æ—Ç–∞), JavaScript (–≤–µ–±), Java (–∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å), C++ (–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)."
    
    if any(word in message_lower for word in ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—É—Ä–∞–≤–Ω–µ–Ω–∏–µ", "—Ñ—É–Ω–∫—Ü–∏—è", "–∏–Ω—Ç–µ–≥—Ä–∞–ª"]):
        return "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - –Ω–∞—É–∫–∞ –æ —á–∏—Å–ª–∞—Ö, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö. –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã: –∞–ª–≥–µ–±—Ä–∞ (—É—Ä–∞–≤–Ω–µ–Ω–∏—è, —Ñ—É–Ω–∫—Ü–∏–∏), –≥–µ–æ–º–µ—Ç—Ä–∏—è (–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, —Ñ–æ—Ä–º—ã), –∞–Ω–∞–ª–∏–∑ (–ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ, –∏–Ω—Ç–µ–≥—Ä–∞–ª—ã), —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö). –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤–æ –≤—Å–µ—Ö –æ–±–ª–∞—Å—Ç—è—Ö –Ω–∞—É–∫–∏ –∏ —Ç–µ—Ö–Ω–∏–∫–∏."
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∂–∏–≤–æ–π –æ—Ç–≤–µ—Ç
    responses = [
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        "–•–º, —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ú–æ–∂–µ—à—å —É—Ç–æ—á–Ω–∏—Ç—å, –≤ –∫–∞–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?",
        "–ü–æ–Ω—è–ª! –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –≤–º–µ—Å—Ç–µ. –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?",
        "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å, –ø—Ä–æ—Å—Ç–æ —É—Ç–æ—á–Ω–∏ –¥–µ—Ç–∞–ª–∏.",
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å."
    ]
    import random
    return random.choice(responses)

@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({
        "status": "healthy",
        "service": "Simple LocalAI Server",
        "version": "1.0.0",
        "timestamp": datetime.now().isoformat()
    })

@app.route('/v1/models', methods=['GET'])
def get_models():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (OpenAI API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    return jsonify({
        "object": "list",
        "data": [
            {
                "id": "gpt-3.5-turbo",
                "object": "model",
                "created": 1677610602,
                "owned_by": "localai"
            },
            {
                "id": "gpt-4",
                "object": "model", 
                "created": 1677610602,
                "owned_by": "localai"
            }
        ]
    })

@app.route('/v1/chat/completions', methods=['POST'])
def chat_completions():
    """Chat completions endpoint (OpenAI API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    try:
        data = request.get_json()
        messages = data.get('messages', [])
        
        if not messages:
            return jsonify({"error": "No messages provided"}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        last_message = messages[-1]
        user_message = last_message.get('content', '')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = generate_response(user_message)
        
        return jsonify({
            "id": "chatcmpl-localai-" + str(int(datetime.now().timestamp())),
            "object": "chat.completion",
            "created": int(datetime.now().timestamp()),
            "model": data.get('model', 'gpt-3.5-turbo'),
            "choices": [
                {
                    "index": 0,
                    "message": {
                        "role": "assistant",
                        "content": response_text
                    },
                    "finish_reason": "stop"
                }
            ],
            "usage": {
                "prompt_tokens": len(user_message.split()),
                "completion_tokens": len(response_text.split()),
                "total_tokens": len(user_message.split()) + len(response_text.split())
            }
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ chat completions: {str(e)}")
        return jsonify({"error": f"Internal server error: {str(e)}"}), 500

@app.route('/v1/completions', methods=['POST'])
def completions():
    """Text completions endpoint (OpenAI API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    try:
        data = request.get_json()
        prompt = data.get('prompt', '')
        
        if not prompt:
            return jsonify({"error": "No prompt provided"}), 400
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = generate_response(prompt)
        
        return jsonify({
            "id": "cmpl-localai-" + str(int(datetime.now().timestamp())),
            "object": "text_completion",
            "created": int(datetime.now().timestamp()),
            "model": data.get('model', 'gpt-3.5-turbo'),
            "choices": [
                {
                    "index": 0,
                    "text": response_text,
                    "finish_reason": "stop"
                }
            ],
            "usage": {
                "prompt_tokens": len(prompt.split()),
                "completion_tokens": len(response_text.split()),
                "total_tokens": len(prompt.split()) + len(response_text.split())
            }
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ completions: {str(e)}")
        return jsonify({"error": f"Internal server error: {str(e)}"}), 500

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ LocalAI —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 11434...")
    logger.info("OpenAI API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: http://localhost:11434/v1/")
    logger.info("–ú–æ–¥–µ–ª–∏: http://localhost:11434/v1/models")
    logger.info("–°—Ç–∞—Ç—É—Å: http://localhost:11434/health")
    app.run(host='0.0.0.0', port=11434, debug=True)
