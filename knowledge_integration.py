#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ë–∞–∑—ã –ó–Ω–∞–Ω–∏–π —Å Smart Dispatcher
"""

import requests
import logging
from typing import Dict, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class KnowledgeIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ë–∞–∑–æ–π –ó–Ω–∞–Ω–∏–π"""
    
    def __init__(self, knowledge_api_url: str = "http://localhost:8093"):
        self.api_url = knowledge_api_url
        self.session = requests.Session()
        self.session.timeout = 5
    
    def enhance_response_with_knowledge(self, question: str, original_response: str, 
                                      user_id: str = "default") -> Dict[str, Any]:
        """–£–ª—É—á—à–∞–µ—Ç –æ—Ç–≤–µ—Ç –∑–Ω–∞–Ω–∏—è–º–∏ –∏–∑ –±–∞–∑—ã"""
        try:
            logger.info(f"üß† –£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∑–Ω–∞–Ω–∏—è–º–∏ –¥–ª—è: {question[:50]}...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —Å–∏—Å—Ç–µ–º—É –∑–Ω–∞–Ω–∏–π
            response = self.session.post(f"{self.api_url}/api/knowledge/chat", 
                                       json={
                                           'message': question,
                                           'user_id': user_id
                                       })
            
            if response.status_code == 200:
                knowledge_data = response.json()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                enhanced_response = {
                    'original_response': original_response,
                    'knowledge_response': knowledge_data['response'],
                    'has_suggestions': knowledge_data['active_suggestions'] > 0,
                    'suggestions': knowledge_data['suggestions'],
                    'enhanced': True
                }
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫ –æ—Ç–≤–µ—Ç—É
                if knowledge_data['active_suggestions'] > 0:
                    enhanced_response['needs_user_confirmation'] = True
                    enhanced_response['suggestion_message'] = knowledge_data['response']
                
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç —É–ª—É—á—à–µ–Ω –∑–Ω–∞–Ω–∏—è–º–∏")
                return enhanced_response
            
            else:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API –∑–Ω–∞–Ω–∏–π: {response.status_code}")
                return {
                    'original_response': original_response,
                    'knowledge_response': None,
                    'has_suggestions': False,
                    'enhanced': False,
                    'error': f"API error: {response.status_code}"
                }
                
        except requests.exceptions.RequestException as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API –∑–Ω–∞–Ω–∏–π: {e}")
            return {
                'original_response': original_response,
                'knowledge_response': None,
                'has_suggestions': False,
                'enhanced': False,
                'error': f"Connection error: {str(e)}"
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
            return {
                'original_response': original_response,
                'knowledge_response': None,
                'has_suggestions': False,
                'enhanced': False,
                'error': str(e)
            }
    
    def search_knowledge(self, query: str, category: str = None) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
        try:
            params = {'q': query}
            if category:
                params['category'] = category
            
            response = self.session.get(f"{self.api_url}/api/knowledge/search", 
                                      params=params)
            
            if response.status_code == 200:
                data = response.json()
                return data['results']
            else:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–Ω–∞–Ω–∏–π: {response.status_code}")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–Ω–∞–Ω–∏–π: {e}")
            return []
    
    def handle_knowledge_feedback(self, feedback: str, user_id: str = "default") -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –∑–Ω–∞–Ω–∏—è–º"""
        try:
            response = self.session.post(f"{self.api_url}/api/knowledge/chat", 
                                       json={
                                           'message': feedback,
                                           'user_id': user_id
                                       })
            
            if response.status_code == 200:
                return response.json()
            else:
                return {
                    'error': f"API error: {response.status_code}",
                    'response': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å'
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            return {
                'error': str(e),
                'response': '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏'
            }
    
    def get_knowledge_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        try:
            response = self.session.get(f"{self.api_url}/api/knowledge/stats")
            
            if response.status_code == 200:
                return response.json()
            else:
                return {'error': f"API error: {response.status_code}"}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'error': str(e)}
    
    def is_knowledge_api_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∑–Ω–∞–Ω–∏–π"""
        try:
            response = self.session.get(f"{self.api_url}/api/knowledge/health", timeout=2)
            return response.status_code == 200
        except:
            return False

def enhance_smart_dispatcher_response(question: str, original_response: str, 
                                    user_id: str = "default") -> str:
    """–£–ª—É—á—à–∞–µ—Ç –æ—Ç–≤–µ—Ç Smart Dispatcher –∑–Ω–∞–Ω–∏—è–º–∏"""
    try:
        knowledge_integration = KnowledgeIntegration()
        
        if not knowledge_integration.is_knowledge_api_available():
            logger.warning("‚ö†Ô∏è API –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
            return original_response
        
        # –£–ª—É—á—à–∞–µ–º –æ—Ç–≤–µ—Ç –∑–Ω–∞–Ω–∏—è–º–∏
        enhanced = knowledge_integration.enhance_response_with_knowledge(
            question, original_response, user_id
        )
        
        if enhanced['enhanced'] and enhanced['knowledge_response']:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∑–Ω–∞–Ω–∏—è–º–∏
            if enhanced['has_suggestions']:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
                return f"{original_response}\n\n{enhanced['suggestion_message']}"
            else:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
                return f"{original_response}\n\nüìö **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è:**\n{enhanced['knowledge_response']}"
        
        return original_response
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
        return original_response

# –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º Smart Dispatcher
def enhanced_smart_dispatcher_handler(question: str, user_id: str = "default") -> Dict[str, Any]:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Smart Dispatcher —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∑–Ω–∞–Ω–∏–π"""
    try:
        # –ó–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ Smart Dispatcher
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        original_response = f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}"
        
        # –£–ª—É—á—à–∞–µ–º –æ—Ç–≤–µ—Ç –∑–Ω–∞–Ω–∏—è–º–∏
        knowledge_integration = KnowledgeIntegration()
        
        if knowledge_integration.is_knowledge_api_available():
            enhanced = knowledge_integration.enhance_response_with_knowledge(
                question, original_response, user_id
            )
            
            return {
                'response': enhanced.get('knowledge_response', original_response),
                'original_response': original_response,
                'enhanced_with_knowledge': enhanced['enhanced'],
                'has_suggestions': enhanced.get('has_suggestions', False),
                'suggestions': enhanced.get('suggestions', []),
                'needs_user_confirmation': enhanced.get('needs_user_confirmation', False)
            }
        else:
            return {
                'response': original_response,
                'original_response': original_response,
                'enhanced_with_knowledge': False,
                'has_suggestions': False,
                'suggestions': [],
                'needs_user_confirmation': False
            }
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return {
            'response': f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}",
            'original_response': "",
            'enhanced_with_knowledge': False,
            'has_suggestions': False,
            'suggestions': [],
            'needs_user_confirmation': False
        }

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ë–∞–∑—ã –ó–Ω–∞–Ω–∏–π")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    knowledge_integration = KnowledgeIntegration()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    if knowledge_integration.is_knowledge_api_available():
        print("‚úÖ API –∑–Ω–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        test_questions = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–∫–æ–Ω –û–º–∞?",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä?",
            "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x^2 + 5x + 6 = 0"
        ]
        
        for question in test_questions:
            print(f"\n{'='*60}")
            print(f"–í–æ–ø—Ä–æ—Å: {question}")
            print(f"{'='*60}")
            
            enhanced = knowledge_integration.enhance_response_with_knowledge(
                question, f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞: {question}"
            )
            
            print(f"–£–ª—É—á—à–µ–Ω: {enhanced['enhanced']}")
            print(f"–ï—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {enhanced['has_suggestions']}")
            if enhanced['knowledge_response']:
                print(f"–û—Ç–≤–µ—Ç —Å –∑–Ω–∞–Ω–∏—è–º–∏: {enhanced['knowledge_response'][:100]}...")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = knowledge_integration.get_knowledge_stats()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–Ω–∞–Ω–∏–π: {stats}")
        
    else:
        print("‚ùå API –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")










