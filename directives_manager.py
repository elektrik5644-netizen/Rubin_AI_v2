#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–∏–≤–∞–º–∏ –¥–ª—è Rubin AI
–ü–æ–∑–≤–æ–ª—è–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å, –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–∏—Ä–µ–∫—Ç–∏–≤—ã —á–µ—Ä–µ–∑ —á–∞—Ç/Telegram
"""

import json
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional
import os

logger = logging.getLogger(__name__)

class DirectivesManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏—Ä–µ–∫—Ç–∏–≤ –¥–ª—è Rubin AI"""
    
    def __init__(self, directives_file: str = "rubin_directives.json"):
        self.directives_file = directives_file
        self.directives = self._load_directives()
        
    def _load_directives(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–∏–≤—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.directives_file):
                with open(self.directives_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                return {
                    "active_directives": [],
                    "directive_history": [],
                    "last_updated": datetime.now().isoformat()
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤: {e}")
            return {"active_directives": [], "directive_history": []}
    
    def _save_directives(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∏—Ä–µ–∫—Ç–∏–≤—ã –≤ —Ñ–∞–π–ª"""
        try:
            self.directives["last_updated"] = datetime.now().isoformat()
            with open(self.directives_file, 'w', encoding='utf-8') as f:
                json.dump(self.directives, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–∏–≤: {e}")
    
    def add_directive(self, directive_text: str, user_id: str = "default") -> Dict[str, Any]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–∏–≤—É"""
        directive_id = f"dir_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        directive = {
            "id": directive_id,
            "text": directive_text,
            "created_at": datetime.now().isoformat(),
            "created_by": user_id,
            "active": True,
            "execution_count": 0,
            "last_executed": None
        }
        
        self.directives["active_directives"].append(directive)
        self.directives["directive_history"].append({
            "action": "added",
            "directive": directive,
            "timestamp": datetime.now().isoformat()
        })
        
        self._save_directives()
        
        return {
            "success": True,
            "message": f"–î–∏—Ä–µ–∫—Ç–∏–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {directive_text}",
            "directive_id": directive_id
        }
    
    def remove_directive(self, directive_id: str) -> Dict[str, Any]:
        """–£–¥–∞–ª—è–µ—Ç –¥–∏—Ä–µ–∫—Ç–∏–≤—É –ø–æ ID"""
        for i, directive in enumerate(self.directives["active_directives"]):
            if directive["id"] == directive_id:
                removed = self.directives["active_directives"].pop(i)
                self.directives["directive_history"].append({
                    "action": "removed",
                    "directive": removed,
                    "timestamp": datetime.now().isoformat()
                })
                self._save_directives()
                return {
                    "success": True,
                    "message": f"–î–∏—Ä–µ–∫—Ç–∏–≤–∞ —É–¥–∞–ª–µ–Ω–∞: {removed['text']}"
                }
        
        return {
            "success": False,
            "message": f"–î–∏—Ä–µ–∫—Ç–∏–≤–∞ —Å ID {directive_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        }
    
    def list_directives(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–∏–≤"""
        return {
            "success": True,
            "active_directives": self.directives["active_directives"],
            "count": len(self.directives["active_directives"])
        }
    
    def check_directives(self, context: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∏—Ä–µ–∫—Ç–∏–≤—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞/–∞–Ω–∞–ª–∏–∑–∞"""
        applicable_directives = []
        
        for directive in self.directives["active_directives"]:
            if not directive["active"]:
                continue
                
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –¥–∏—Ä–µ–∫—Ç–∏–≤–µ
            directive_text = directive["text"].lower()
            context_text = str(context).lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–º–µ–Ω–∏–º–∞ –ª–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤–∞ –∫ —Ç–µ–∫—É—â–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            if self._is_directive_applicable(directive_text, context_text, context):
                directive["execution_count"] += 1
                directive["last_executed"] = datetime.now().isoformat()
                applicable_directives.append(directive)
        
        if applicable_directives:
            self._save_directives()
        
        return applicable_directives
    
    def _is_directive_applicable(self, directive_text: str, context_text: str, context: Dict[str, Any]) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø—Ä–∏–º–µ–Ω–∏–º–∞ –ª–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤–∞ –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
        # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–∏–≤
        
        # –î–∏—Ä–µ–∫—Ç–∏–≤–∞ "–≤—Å–µ–≥–¥–∞" - –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º –æ—Ç–≤–µ—Ç–∞–º
        if "–≤—Å–µ–≥–¥–∞" in directive_text or "–∫–∞–∂–¥—ã–π —Ä–∞–∑" in directive_text:
            return True
        
        # –î–∏—Ä–µ–∫—Ç–∏–≤–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–¥—É–ª—è
        module_category = context.get("category", "").lower()
        if module_category and module_category in directive_text:
            return True
        
        # –î–∏—Ä–µ–∫—Ç–∏–≤–∞ –ø–æ —Ç–∏–ø—É –∑–∞–ø—Ä–æ—Å–∞
        if "–∞–Ω–∞–ª–∏–∑" in directive_text and "analysis" in context_text:
            return True
        
        if "–≥—Ä–∞—Ñ–∏–∫" in directive_text and ("graph" in context_text or "–≥—Ä–∞—Ñ–∏–∫" in context_text):
            return True
        
        if "—Ä–∞—Å—á–µ—Ç" in directive_text and ("calculate" in context_text or "—Ä–∞—Å—á–µ—Ç" in context_text):
            return True
        
        # –î–∏—Ä–µ–∫—Ç–∏–≤–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        directive_keywords = directive_text.split()
        context_keywords = context_text.split()
        
        # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã 2 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞ –∏–∑ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã –µ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        matches = sum(1 for kw in directive_keywords if kw in context_keywords)
        if matches >= 2:
            return True
        
        return False
    
    def execute_directive(self, directive: Dict[str, Any], context: Dict[str, Any]) -> str:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–∏—Ä–µ–∫—Ç–∏–≤—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        directive_text = directive["text"]
        
        # –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–∏—Ä–µ–∫—Ç–∏–≤
        if "–¥–æ–±–∞–≤—å" in directive_text.lower():
            return f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {directive_text}"
        
        if "–ø—Ä–æ–≤–µ—Ä—å" in directive_text.lower():
            return f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: {directive_text}"
        
        if "—É—Ç–æ—á–Ω–∏" in directive_text.lower():
            return f"‚ùì –£—Ç–æ—á–Ω–µ–Ω–∏–µ: {directive_text}"
        
        if "–æ–±—ä—è—Å–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ" in directive_text.lower():
            return f"üìñ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É"
        
        if "–ø–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä" in directive_text.lower():
            return f"üí° –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
        
        if "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ" in directive_text.lower():
            return f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: {directive_text}"
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –¥–∏—Ä–µ–∫—Ç–∏–≤—ã
        return f"üìã –î–∏—Ä–µ–∫—Ç–∏–≤–∞: {directive_text}"
    
    def get_directive_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∏—Ä–µ–∫—Ç–∏–≤–∞–º"""
        total_directives = len(self.directives["active_directives"])
        total_executions = sum(d["execution_count"] for d in self.directives["active_directives"])
        
        most_used = max(self.directives["active_directives"], 
                       key=lambda x: x["execution_count"], 
                       default={"text": "–ù–µ—Ç", "execution_count": 0})
        
        return {
            "total_directives": total_directives,
            "total_executions": total_executions,
            "most_used_directive": most_used["text"],
            "most_used_count": most_used["execution_count"],
            "last_updated": self.directives.get("last_updated", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–∏–≤
directives_manager = DirectivesManager()

def process_directives_command(command: str, user_id: str = "default") -> Dict[str, Any]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–∏–≤–∞–º–∏"""
    command_lower = command.lower().strip()
    
    if command_lower.startswith("–ø—Ä–∏–º–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤—É"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–∏—Ä–µ–∫—Ç–∏–≤—ã –ø–æ—Å–ª–µ "–ø—Ä–∏–º–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤—É"
        directive_text = command[15:].strip()
        if directive_text:
            return directives_manager.add_directive(directive_text, user_id)
        else:
            return {
                "success": False,
                "message": "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–∏—Ä–µ–∫—Ç–∏–≤—ã –ø–æ—Å–ª–µ '–ø—Ä–∏–º–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤—É'"
            }
    
    elif command_lower == "—Å–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–∏–≤":
        return directives_manager.list_directives()
    
    elif command_lower.startswith("—É–¥–∞–ª–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤—É"):
        directive_id = command[15:].strip()
        return directives_manager.remove_directive(directive_id)
    
    elif command_lower == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏—Ä–µ–∫—Ç–∏–≤":
        return {
            "success": True,
            "stats": directives_manager.get_directive_stats()
        }
    
    elif command_lower == "–ø–æ–º–æ—â—å –ø–æ –¥–∏—Ä–µ–∫—Ç–∏–≤–∞–º":
        return {
            "success": True,
            "help": {
                "commands": [
                    "–ø—Ä–∏–º–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤—É [—Ç–µ–∫—Å—Ç] - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–∏–≤—É",
                    "—Å–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–∏–≤ - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã",
                    "—É–¥–∞–ª–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤—É [ID] - —É–¥–∞–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–∏–≤—É –ø–æ ID",
                    "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏—Ä–µ–∫—Ç–∏–≤ - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                    "–ø–æ–º–æ—â—å –ø–æ –¥–∏—Ä–µ–∫—Ç–∏–≤–∞–º - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
                ],
                "examples": [
                    "–ø—Ä–∏–º–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤—É –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–∏–º–µ—Ä—ã –∫ –æ—Ç–≤–µ—Ç–∞–º",
                    "–ø—Ä–∏–º–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤—É –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–π —Ç—Ä–µ–Ω–¥",
                    "–ø—Ä–∏–º–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤—É –≤ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ –æ–±—ä—è—Å–Ω—è–π —Ñ–æ—Ä–º—É–ª—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ"
                ]
            }
        }
    
    else:
        return {
            "success": False,
            "message": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ø–æ–º–æ—â—å –ø–æ –¥–∏—Ä–µ–∫—Ç–∏–≤–∞–º'"
        }

def check_and_apply_directives(context: Dict[str, Any]) -> List[str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –¥–∏—Ä–µ–∫—Ç–∏–≤—ã –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
    applicable_directives = directives_manager.check_directives(context)
    
    results = []
    for directive in applicable_directives:
        result = directives_manager.execute_directive(directive, context)
        results.append(result)
    
    return results






