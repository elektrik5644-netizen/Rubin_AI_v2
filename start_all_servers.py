#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö API —Å–µ—Ä–≤–µ—Ä–æ–≤ Rubin AI
"""

import subprocess
import time
import sys
import os

def start_server(script_path, port, name):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    try:
        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é {name} –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
        process = subprocess.Popen([
            sys.executable, script_path
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        time.sleep(2)
        
        if process.poll() is None:
            print(f"‚úÖ {name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            return process
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    print("üéØ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö API —Å–µ—Ä–≤–µ—Ä–æ–≤ Rubin AI")
    print("=" * 50)
    
    # –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    servers = [
        ("api/general_api.py", 8085, "General API"),
        ("api/mathematics_api.py", 8086, "Mathematics API"),
        ("api/electrical_api.py", 8087, "Electrical API"),
        ("api/programming_api.py", 8088, "Programming API"),
        ("api/neuro_repository_api.py", 8090, "Neuro Repository API"),
        ("api/controllers_api.py", 9000, "Controllers API"),
        ("api/plc_analysis_api.py", 8099, "PLC Analysis API"),
        ("api/advanced_math_api.py", 8100, "Advanced Math API"),
        ("api/data_processing_api.py", 8101, "Data Processing API"),
        ("api/search_engine_api.py", 8102, "Search Engine API"),
        ("api/system_utils_api.py", 8103, "System Utils API"),
        ("api/gai_server_api.py", 8104, "GAI Server API"),
        ("api/ethical_core_api.py", 8105, "Ethical Core API"),
    ]
    
    processes = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
    for script, port, name in servers:
        if os.path.exists(script):
            process = start_server(script, port, name)
            if process:
                processes.append((process, name, port))
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª {script} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é")
    
    print("\n" + "=" * 50)
    print(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {len(processes)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
    
    try:
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while True:
            time.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
            active_processes = []
            for process, name, port in processes:
                if process.poll() is None:
                    active_processes.append((process, name, port))
                else:
                    print(f"‚ö†Ô∏è {name} (–ø–æ—Ä—Ç {port}) –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
            
            processes = active_processes
            
            if not processes:
                print("‚ùå –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å")
                break
                
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        for process, name, port in processes:
            try:
                process.terminate()
                print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {name} (–ø–æ—Ä—Ç {port})")
            except:
                pass
        
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

if __name__ == "__main__":
    main()