#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ VMB630
"""

from project_folder_reader import ProjectFolderReader
from rubin_project_integration import RubinProjectIntegration
import os

def analyze_vmb630_project():
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ VMB630"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏
    path = r'C:\Users\elekt\OneDrive\Desktop\VMB630_v_005_019_000'
    print(f'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Ç—å: {path}')
    
    if os.path.exists(path):
        print('‚úÖ –ü—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
        reader = ProjectFolderReader()
        success = reader.analyze_project_folder(path, 'VMB630 Project')
        
        if success:
            print('‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å–∞–π—Ç—ã
            integration = RubinProjectIntegration()
            projects = integration.project_reader.get_all_projects()
            
            if projects:
                project_id = projects[0][0]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                insights = integration.generate_project_insights(project_id)
                
                print('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:')
                overview = insights['project_overview']
                print(f'  - –ù–∞–∑–≤–∞–Ω–∏–µ: {overview["name"]}')
                print(f'  - –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: {overview["type"]}')
                print(f'  - –§–∞–π–ª–æ–≤: {overview["total_files"]}')
                print(f'  - –†–∞–∑–º–µ—Ä: {overview["total_size_mb"]} MB')
                print(f'  - –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {overview["average_complexity"]}')
                
                # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
                arch = insights['architecture_analysis']
                if arch['component_types']:
                    print(f'  - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {arch["total_components"]}')
                    print(f'  - –¢–∏–ø—ã: {", ".join(arch["component_types"])}')
                
                # –ü–∞—Ç—Ç–µ—Ä–Ω—ã
                patterns = insights['design_patterns']
                if patterns['total_patterns'] > 0:
                    print(f'  - –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {patterns["total_patterns"]}')
                    print(f'  - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {", ".join(patterns["pattern_categories"])}')
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if insights['recommendations']:
                    print('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:')
                    for rec in insights['recommendations']:
                        print(f'  - {rec}')
                
                # –ü–æ–∏—Å–∫ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                print('\nüîç –ü–û–ò–°–ö –°–ü–ï–¶–ò–§–ò–ß–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò:')
                search_queries = ['VMB630', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', 'PLC', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '—Ñ—É–Ω–∫—Ü–∏—è']
                
                for query in search_queries:
                    results = integration.search_project_knowledge(query, project_id)
                    print(f'  "{query}": {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
                    
                    if results:
                        first_result = results[0]
                        print(f'    ‚Üí {first_result["file_name"]} ({first_result["language"]})')
                
                # –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
                print('\nüí¨ –û–¢–í–ï–¢–´ –ù–ê –í–û–ü–†–û–°–´:')
                questions = [
                    "–ß—Ç–æ —Ç–∞–∫–æ–µ VMB630?",
                    "–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç?",
                    "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä?"
                ]
                
                for question in questions:
                    answer = integration.answer_with_project_context(question, project_id)
                    print(f'\n‚ùì {question}')
                    if answer['confidence'] > 0:
                        print(f'üéØ –û—Ç–≤–µ—Ç (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {answer["confidence"]:.1%}):')
                        print(f'   {answer["answer"][:200]}...')
                    else:
                        print('üéØ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ')
                        
        else:
            print('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞')
    else:
        print('‚ùå –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        print('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏...')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø—É—Ç–∏
        base_path = r'C:\Users\elekt\OneDrive\Desktop'
        if os.path.exists(base_path):
            print(f'üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ {base_path}:')
            try:
                items = os.listdir(base_path)
                vmb_items = [item for item in items if 'VMB' in item.upper()]
                if vmb_items:
                    print(f'  –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ –ø–∞–ø–∫–∏: {vmb_items}')
                else:
                    print(f'  –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items)}')
                    print(f'  –ü–µ—Ä–≤—ã–µ 10: {items[:10]}')
            except Exception as e:
                print(f'  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏: {e}')

if __name__ == "__main__":
    analyze_vmb630_project()










