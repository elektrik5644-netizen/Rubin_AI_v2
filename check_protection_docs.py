#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sqlite3

def check_protection_documents():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞—â–∏—Ç–µ –æ—Ç –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–º—ã–∫–∞–Ω–∏—è"""
    
    conn = sqlite3.connect('rubin_ai_documents.db')
    cursor = conn.cursor()
    
    # –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    keywords = ['–∑–∞—â–∏—Ç', '–ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å', '–∫–æ—Ä–æ—Ç–∫', '–∞–≤—Ç–æ–º–∞—Ç', '–≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å', '–∑–∞—â–∏—Ç–∞']
    
    print("üîç **–ü–û–ò–°–ö –î–û–ö–£–ú–ï–ù–¢–û–í –ü–û –ó–ê–©–ò–¢–ï –û–¢ –ö–û–†–û–¢–ö–û–ì–û –ó–ê–ú–´–ö–ê–ù–ò–Ø**")
    print("=" * 60)
    
    for keyword in keywords:
        cursor.execute('''
            SELECT file_name, category, LENGTH(content) as content_length
            FROM documents 
            WHERE content LIKE ? 
            LIMIT 5
        ''', (f'%{keyword}%',))
        
        results = cursor.fetchall()
        
        if results:
            print(f"\nüìÑ **–î–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ —Å–ª–æ–≤–æ–º '{keyword}':**")
            for row in results:
                print(f"  - {row[0]} ({row[1]}) - {row[2]} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            print(f"\n‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ —Å–ª–æ–≤–æ–º '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cursor.execute('SELECT COUNT(*) FROM documents')
    total_docs = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(DISTINCT category) FROM documents')
    total_categories = cursor.fetchone()[0]
    
    print(f"\nüìä **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**")
    print(f"  –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_docs}")
    print(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {total_categories}")
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    cursor.execute('SELECT category, COUNT(*) FROM documents GROUP BY category')
    categories = cursor.fetchall()
    
    print(f"\nüìÅ **–ö–ê–¢–ï–ì–û–†–ò–ò –î–û–ö–£–ú–ï–ù–¢–û–í:**")
    for category, count in categories:
        print(f"  - {category}: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    conn.close()

if __name__ == "__main__":
    check_protection_documents()

















