#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª–µ–π Rubin AI
"""

import time
import subprocess
import requests
import logging
from datetime import datetime
from typing import Dict, List, Any
import json
import os

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("rubin_monitor")

class ModuleMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏ Rubin AI"""
    
    def __init__(self):
        self.modules = {
            'general': {'port': 8085, 'script': 'api/general_api.py', 'process': None},
            'mathematics': {'port': 8086, 'script': 'api/mathematics_api.py', 'process': None},
            'electrical': {'port': 8087, 'script': 'api/electrical_api.py', 'process': None},
            'programming': {'port': 8088, 'script': 'api/programming_api.py', 'process': None},
            'controllers': {'port': 9000, 'script': 'controllers_server.py', 'process': None}
        }
        self.restart_attempts = {name: 0 for name in self.modules.keys()}
        self.max_restart_attempts = 3
        self.check_interval = 30  # —Å–µ–∫—É–Ω–¥
        
    def check_module_health(self, module_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –º–æ–¥—É–ª—è"""
        try:
            port = self.modules[module_name]['port']
            response = requests.get(f"http://localhost:{port}/api/health", timeout=5)
            return response.status_code == 200
        except Exception as e:
            logger.warning(f"‚ùå –ú–æ–¥—É–ª—å {module_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    def start_module(self, module_name: str) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–¥—É–ª—å"""
        try:
            script_path = self.modules[module_name]['script']
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –º–æ–¥—É–ª—å {module_name} ({script_path})")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥—É–ª—å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            process = subprocess.Popen(
                ['python', script_path],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                creationflags=subprocess.CREATE_NEW_CONSOLE if os.name == 'nt' else 0
            )
            
            self.modules[module_name]['process'] = process
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥—É–ª—å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            if self.check_module_health(module_name):
                logger.info(f"‚úÖ –ú–æ–¥—É–ª—å {module_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                self.restart_attempts[module_name] = 0
                return True
            else:
                logger.error(f"‚ùå –ú–æ–¥—É–ª—å {module_name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è {module_name}: {e}")
            return False
    
    def restart_module(self, module_name: str) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–¥—É–ª—å"""
        logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –º–æ–¥—É–ª—å {module_name}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
        if self.modules[module_name]['process']:
            try:
                self.modules[module_name]['process'].terminate()
                time.sleep(2)
            except:
                pass
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        self.restart_attempts[module_name] += 1
        
        if self.restart_attempts[module_name] > self.max_restart_attempts:
            logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–ª—è {module_name}")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥—É–ª—å
        return self.start_module(module_name)
    
    def check_all_modules(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ"""
        results = {
            'timestamp': datetime.now().isoformat(),
            'modules': {},
            'actions_taken': []
        }
        
        for module_name in self.modules.keys():
            is_healthy = self.check_module_health(module_name)
            
            results['modules'][module_name] = {
                'status': 'healthy' if is_healthy else 'unhealthy',
                'port': self.modules[module_name]['port'],
                'restart_attempts': self.restart_attempts[module_name]
            }
            
            if not is_healthy:
                logger.warning(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å {module_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—ã—Ç–∞—é—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å")
                if self.restart_module(module_name):
                    results['actions_taken'].append(f"–ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –º–æ–¥—É–ª—å {module_name}")
                else:
                    results['actions_taken'].append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–¥—É–ª—å {module_name}")
        
        return results
    
    def start_all_modules(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –≤—Å–µ –º–æ–¥—É–ª–∏ Rubin AI")
        
        for module_name in self.modules.keys():
            if not self.check_module_health(module_name):
                self.start_module(module_name)
            else:
                logger.info(f"‚úÖ –ú–æ–¥—É–ª—å {module_name} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
    
    def monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–æ–¥—É–ª–µ–π Rubin AI")
        logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫—É–Ω–¥")
        
        while True:
            try:
                results = self.check_all_modules()
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                healthy_count = sum(1 for m in results['modules'].values() if m['status'] == 'healthy')
                total_count = len(results['modules'])
                
                logger.info(f"üìä –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª–µ–π: {healthy_count}/{total_count} –∑–¥–æ—Ä–æ–≤—ã")
                
                if results['actions_taken']:
                    for action in results['actions_taken']:
                        logger.info(f"üîß {action}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
                with open('monitor_results.json', 'w', encoding='utf-8') as f:
                    json.dump(results, f, ensure_ascii=False, indent=2)
                
                time.sleep(self.check_interval)
                
            except KeyboardInterrupt:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(10)

def main():
    monitor = ModuleMonitor()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
    monitor.start_all_modules()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor.monitor_loop()

if __name__ == "__main__":
    main()

