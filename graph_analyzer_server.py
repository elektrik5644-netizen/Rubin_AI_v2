#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è Rubin AI
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MCSetup –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤–æ–¥–æ–≤
"""

from flask import Flask, request, jsonify
import logging
import json
import requests
from datetime import datetime
import numpy as np
import matplotlib.pyplot as plt
import io
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MCSETUP_BRIDGE_URL = "http://localhost:8096"
RUBIN_SMART_DISPATCHER_URL = "http://localhost:8080"

class GraphAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –ø—Ä–∏–≤–æ–¥–æ–≤"""
    
    def __init__(self):
        self.analysis_cache = {}
        self.graph_patterns = {
            'position': ['pos', 'position', '–ø–æ–∑–∏—Ü', '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç'],
            'velocity': ['vel', 'velocity', '—Å–∫–æ—Ä–æ—Å—Ç', 'speed'],
            'current': ['cur', 'current', '—Ç–æ–∫', 'ampere'],
            'torque': ['torque', '–º–æ–º–µ–Ω—Ç', 'force'],
            'temperature': ['temp', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä', 'heat']
        }
    
    def analyze_motor_trends(self, motor_data):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã –º–æ—Ç–æ—Ä–æ–≤"""
        try:
            analysis = {
                'timestamp': datetime.now().isoformat(),
                'trend_analysis': {},
                'anomalies': [],
                'recommendations': []
            }
            
            for motor_name, data in motor_data.items():
                motor_analysis = {
                    'data_points': len(data.get('sources', [])),
                    'gather_period': int(data.get('gather_period', 10)),
                    'performance_score': 0
                }
                
                # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
                gather_period = motor_analysis['gather_period']
                if gather_period <= 5:
                    motor_analysis['performance_score'] += 30
                    analysis['recommendations'].append(f"–ú–æ—Ç–æ—Ä {motor_name}: –û—Ç–ª–∏—á–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
                elif gather_period <= 20:
                    motor_analysis['performance_score'] += 20
                    analysis['recommendations'].append(f"–ú–æ—Ç–æ—Ä {motor_name}: –•–æ—Ä–æ—à–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
                else:
                    motor_analysis['performance_score'] += 10
                    analysis['recommendations'].append(f"–ú–æ—Ç–æ—Ä {motor_name}: –ù–∏–∑–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
                
                # –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                sources_count = motor_analysis['data_points']
                if sources_count >= 6:
                    motor_analysis['performance_score'] += 25
                    analysis['recommendations'].append(f"–ú–æ—Ç–æ—Ä {motor_name}: –ü–æ–ª–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                elif sources_count >= 3:
                    motor_analysis['performance_score'] += 15
                    analysis['recommendations'].append(f"–ú–æ—Ç–æ—Ä {motor_name}: –ë–∞–∑–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                else:
                    motor_analysis['performance_score'] += 5
                    analysis['anomalies'].append(f"–ú–æ—Ç–æ—Ä {motor_name}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                
                # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
                data_types = self._analyze_data_types(data.get('sources', []))
                motor_analysis['data_types'] = data_types
                
                if 'position' in data_types and 'velocity' in data_types and 'current' in data_types:
                    motor_analysis['performance_score'] += 25
                    analysis['recommendations'].append(f"–ú–æ—Ç–æ—Ä {motor_name}: –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                elif 'position' in data_types and 'velocity' in data_types:
                    motor_analysis['performance_score'] += 15
                    analysis['recommendations'].append(f"–ú–æ—Ç–æ—Ä {motor_name}: –•–æ—Ä–æ—à–∏–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
                else:
                    motor_analysis['performance_score'] += 5
                    analysis['anomalies'].append(f"–ú–æ—Ç–æ—Ä {motor_name}: –ù–µ–ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
                if motor_analysis['performance_score'] >= 80:
                    motor_analysis['rating'] = 'excellent'
                elif motor_analysis['performance_score'] >= 60:
                    motor_analysis['rating'] = 'good'
                elif motor_analysis['performance_score'] >= 40:
                    motor_analysis['rating'] = 'fair'
                else:
                    motor_analysis['rating'] = 'poor'
                
                analysis['trend_analysis'][motor_name] = motor_analysis
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return {'error': str(e)}
    
    def _analyze_data_types(self, sources):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö"""
        data_types = set()
        
        for source in sources:
            name = source.get('name', '').lower()
            address = source.get('address', '').lower()
            
            for data_type, keywords in self.graph_patterns.items():
                if any(keyword in name or keyword in address for keyword in keywords):
                    data_types.add(data_type)
                    break
        
        return list(data_types)
    
    def generate_performance_report(self, analysis_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            report = {
                'timestamp': datetime.now().isoformat(),
                'summary': {
                    'total_motors': len(analysis_data.get('trend_analysis', {})),
                    'excellent_motors': 0,
                    'good_motors': 0,
                    'fair_motors': 0,
                    'poor_motors': 0
                },
                'detailed_analysis': {},
                'recommendations': [],
                'warnings': []
            }
            
            # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            for motor_name, motor_data in analysis_data.get('trend_analysis', {}).items():
                rating = motor_data.get('rating', 'unknown')
                if rating == 'excellent':
                    report['summary']['excellent_motors'] += 1
                elif rating == 'good':
                    report['summary']['good_motors'] += 1
                elif rating == 'fair':
                    report['summary']['fair_motors'] += 1
                elif rating == 'poor':
                    report['summary']['poor_motors'] += 1
                
                report['detailed_analysis'][motor_name] = {
                    'rating': rating,
                    'performance_score': motor_data.get('performance_score', 0),
                    'data_types': motor_data.get('data_types', []),
                    'gather_period': motor_data.get('gather_period', 0)
                }
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            if report['summary']['poor_motors'] > 0:
                report['warnings'].append(f"‚ö†Ô∏è {report['summary']['poor_motors']} –º–æ—Ç–æ—Ä–æ–≤ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
            
            if report['summary']['excellent_motors'] > report['summary']['total_motors'] / 2:
                report['recommendations'].append("‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–æ—Ç–æ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ç–ª–∏—á–Ω–æ")
            else:
                report['recommendations'].append("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ—Ç–æ—Ä–æ–≤")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            report['recommendations'].extend([
                "üìä –†–µ–≥—É–ª—è—Ä–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                "‚öôÔ∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —á–∞—Å—Ç–æ—Ç—É —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö",
                "üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤–∞—Ä–∏–π–Ω—ã–µ –ø–æ—Ä–æ–≥–∏",
                "üìà –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"
            ])
            
            return report
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return {'error': str(e)}
    
    def create_visualization(self, motor_data):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –º–æ—Ç–æ—Ä–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ—Ç–æ—Ä–æ–≤
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))
            
            motor_names = list(motor_data.keys())
            performance_scores = [motor_data[name].get('performance_score', 0) for name in motor_names]
            gather_periods = [motor_data[name].get('gather_period', 10) for name in motor_names]
            
            # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            bars = ax1.bar(motor_names, performance_scores, color=['green' if score >= 80 else 'orange' if score >= 60 else 'red' for score in performance_scores])
            ax1.set_title('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ—Ç–æ—Ä–æ–≤', fontsize=14, fontweight='bold')
            ax1.set_ylabel('–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
            ax1.set_ylim(0, 100)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, score in zip(bars, performance_scores):
                ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1, 
                        f'{score}', ha='center', va='bottom', fontweight='bold')
            
            # –ì—Ä–∞—Ñ–∏–∫ —á–∞—Å—Ç–æ—Ç—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            ax2.bar(motor_names, gather_periods, color='skyblue', alpha=0.7)
            ax2.set_title('–ß–∞—Å—Ç–æ—Ç–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ—Ç–æ—Ä–æ–≤', fontsize=14, fontweight='bold')
            ax2.set_ylabel('–ü–µ—Ä–∏–æ–¥ —Å–±–æ—Ä–∞ (–º—Å)')
            ax2.set_xlabel('–ú–æ—Ç–æ—Ä—ã')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for i, period in enumerate(gather_periods):
                ax2.text(i, period + 0.5, f'{period}–º—Å', ha='center', va='bottom')
            
            plt.tight_layout()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            img_buffer = io.BytesIO()
            plt.savefig(img_buffer, format='png', dpi=150, bbox_inches='tight')
            img_buffer.seek(0)
            img_base64 = base64.b64encode(img_buffer.getvalue()).decode()
            plt.close()
            
            return img_base64
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
graph_analyzer = GraphAnalyzer()

@app.route('/api/graph/analyze/motors', methods=['POST'])
def analyze_motor_graphs():
    """–ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –º–æ—Ç–æ—Ä–æ–≤"""
    try:
        data = request.get_json() or {}
        motor_id = data.get('motor_id')
        
        logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –º–æ—Ç–æ—Ä–æ–≤: {motor_id or '–≤—Å–µ'}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç MCSetup Bridge
        try:
            mcsetup_response = requests.post(
                f"{MCSETUP_BRIDGE_URL}/api/mcsetup/analyze/motors",
                json={'motor_id': motor_id},
                timeout=10
            )
            
            if mcsetup_response.status_code != 200:
                return jsonify({
                    'status': 'error',
                    'error': 'MCSetup Bridge –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
                }), 503
            
            mcsetup_data = mcsetup_response.json()
            
        except requests.exceptions.RequestException:
            return jsonify({
                'status': 'error',
                'error': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MCSetup Bridge'
            }), 503
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        analysis = graph_analyzer.analyze_motor_trends(mcsetup_data.get('analysis', {}).get('performance_metrics', {}))
        
        return jsonify({
            'status': 'success',
            'analysis': analysis,
            'mcsetup_data': mcsetup_data,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –º–æ—Ç–æ—Ä–æ–≤: {e}")
        return jsonify({
            'status': 'error',
            'error': str(e)
        }), 500

@app.route('/api/graph/report', methods=['POST'])
def generate_performance_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        data = request.get_json() or {}
        motor_id = data.get('motor_id')
        
        logger.info(f"üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞: {motor_id or '–≤—Å–µ'}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑
        analysis_response = requests.post(
            f"{MCSETUP_BRIDGE_URL}/api/mcsetup/analyze/motors",
            json={'motor_id': motor_id},
            timeout=10
        )
        
        if analysis_response.status_code != 200:
            return jsonify({
                'status': 'error',
                'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞'
            }), 503
        
        analysis_data = analysis_response.json()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = graph_analyzer.generate_performance_report(analysis_data.get('analysis', {}))
        
        return jsonify({
            'status': 'success',
            'report': report,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return jsonify({
            'status': 'error',
            'error': str(e)
        }), 500

@app.route('/api/graph/visualize', methods=['POST'])
def create_graph_visualization():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    try:
        data = request.get_json() or {}
        motor_id = data.get('motor_id')
        
        logger.info(f"üìà –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {motor_id or '–≤—Å–µ'}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
        analysis_response = requests.post(
            f"{MCSETUP_BRIDGE_URL}/api/mcsetup/analyze/motors",
            json={'motor_id': motor_id},
            timeout=10
        )
        
        if analysis_response.status_code != 200:
            return jsonify({
                'status': 'error',
                'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏'
            }), 503
        
        analysis_data = analysis_response.json()
        motor_data = analysis_data.get('analysis', {}).get('performance_metrics', {})
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        visualization = graph_analyzer.create_visualization(motor_data)
        
        if visualization:
            return jsonify({
                'status': 'success',
                'visualization': {
                    'image_base64': visualization,
                    'format': 'png',
                    'description': '–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ—Ç–æ—Ä–æ–≤'
                },
                'timestamp': datetime.now().isoformat()
            })
        else:
            return jsonify({
                'status': 'error',
                'error': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏'
            }), 500
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return jsonify({
            'status': 'error',
            'error': str(e)
        }), 500

@app.route('/api/graph/integrate/rubin', methods=['POST'])
def integrate_with_rubin():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Rubin AI"""
    try:
        data = request.get_json() or {}
        query = data.get('query', '')
        analysis_type = data.get('analysis_type', 'graph_analysis')
        
        logger.info(f"ü§ñ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Rubin AI: {query[:50]}...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Rubin AI
        rubin_payload = {
            'message': f"–ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø—Ä–∏–≤–æ–¥–æ–≤: {query}",
            'context': {
                'source': 'graph_analyzer',
                'analysis_type': analysis_type,
                'capabilities': [
                    '–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ—Ç–æ—Ä–æ–≤',
                    '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤',
                    '–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π',
                    '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MCSetup'
                ]
            }
        }
        
        try:
            response = requests.post(
                f"{RUBIN_SMART_DISPATCHER_URL}/api/chat",
                json=rubin_payload,
                timeout=30
            )
            
            if response.status_code == 200:
                rubin_response = response.json()
                return jsonify({
                    'status': 'success',
                    'rubin_response': rubin_response,
                    'integration_status': 'successful',
                    'timestamp': datetime.now().isoformat()
                })
            else:
                return jsonify({
                    'status': 'error',
                    'error': f'Rubin AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}',
                    'integration_status': 'failed'
                }), 503
                
        except requests.exceptions.RequestException as e:
            return jsonify({
                'status': 'error',
                'error': f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Rubin AI: {e}',
                'integration_status': 'failed'
            }), 503
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Rubin AI: {e}")
        return jsonify({
            'status': 'error',
            'error': str(e)
        }), 500

@app.route('/api/graph/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({
        'service': 'graph_analyzer',
        'status': 'healthy',
        'version': '1.0.0',
        'timestamp': datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
        'mcsetup_bridge_connected': True,  # –ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        'rubin_ai_connected': True,  # –ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        'capabilities': [
            '–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –º–æ—Ç–æ—Ä–æ–≤',
            '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
            '–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π',
            '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Rubin AI'
        ]
    })

if __name__ == '__main__':
    print("üìä Graph Analyzer Server –∑–∞–ø—É—â–µ–Ω")
    print("URL: http://localhost:8097")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    print("  - POST /api/graph/analyze/motors - –∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –º–æ—Ç–æ—Ä–æ–≤")
    print("  - POST /api/graph/report - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞")
    print("  - POST /api/graph/visualize - —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
    print("  - POST /api/graph/integrate/rubin - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Rubin AI")
    print("  - GET /api/graph/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    print("=" * 60)
    
    app.run(host='0.0.0.0', port=8097, debug=False)



