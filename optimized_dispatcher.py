#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Smart Dispatcher –¥–ª—è Rubin AI v2
–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import requests
import logging
import gc
import os
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è)
logging.basicConfig(level=logging.WARNING)  # –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
SERVERS = {
    'electrical': {'port': 8087, 'endpoint': '/api/electrical/status', 'method': 'GET'},
    'mathematics': {'port': 8086, 'endpoint': '/health', 'method': 'GET'},
    'programming': {'port': 8088, 'endpoint': '/api/programming/explain', 'method': 'GET'},
    'general': {'port': 8085, 'endpoint': '/api/general/chat', 'method': 'POST'},
    'neuro': {'port': 8090, 'endpoint': '/api/health', 'method': 'GET'},
    'controllers': {'port': 9000, 'endpoint': '/api/controllers/status', 'method': 'GET'},
    'gai': {'port': 8104, 'endpoint': '/api/gai/health', 'method': 'GET'},
    'unified_manager': {'port': 8084, 'endpoint': '/api/system/health', 'method': 'GET'},
    'ethical_core': {'port': 8105, 'endpoint': '/api/ethical/health', 'method': 'GET'}
}

def cleanup_memory():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
    gc.collect()

def check_server_health(server_name, config):
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        url = f"http://localhost:{config['port']}{config['endpoint']}"
        response = requests.get(url, timeout=2)
        return response.status_code == 200
    except:
        return False

def route_message(message):
    """–ü—Ä–æ—Å—Ç–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    message_lower = message.lower()
    
    # –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞
    if any(kw in message_lower for kw in ['–∑–∞–∫–æ–Ω', '–∫–∏—Ä—Ö–≥–æ—Ñ–∞', '—Ä–µ–∑–∏—Å—Ç–æ—Ä', '—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä', '–¥–∏–æ–¥', '–º–æ—â–Ω–æ—Å—Ç—å', '—Ç–æ–∫', '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ']):
        return 'electrical'
    
    # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
    elif any(kw in message_lower for kw in ['—É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–≤—ã—á–∏—Å–ª–∏—Ç—å', '–ø–æ—Å—á–∏—Ç–∞—Ç—å', '+', '-', '*', '/']):
        return 'mathematics'
    
    # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
    elif any(kw in message_lower for kw in ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–∞–ª–≥–æ—Ä–∏—Ç–º', 'python', 'java', '—Ñ—É–Ω–∫—Ü–∏—è']):
        return 'programming'
    
    # –ù–µ–π—Ä–æ—Å–µ—Ç–∏
    elif any(kw in message_lower for kw in ['–Ω–µ–π—Ä–æ—Å–µ—Ç—å', '–Ω–µ–π—Ä–æ–Ω–Ω–∞—è', '–∏–∏', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ']):
        return 'neuro'
    
    # –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
    elif any(kw in message_lower for kw in ['–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', '–ø–ª–∫', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '—Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥']):
        return 'controllers'
    
    # GAI
    elif any(kw in message_lower for kw in ['—Å–æ–∑–¥–∞—Ç—å', '–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å', '–Ω–∞–ø–∏—Å–∞—Ç—å', '—Å–æ—á–∏–Ω–∏—Ç—å']):
        return 'gai'
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - General
    else:
        return 'general'

@app.route('/api/chat', methods=['POST'])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —á–∞—Ç–∞"""
    try:
        data = request.get_json()
        message = data.get('message', '')
        
        if not message:
            return jsonify({'error': '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}), 400
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä
        target_server = route_message(message)
        server_config = SERVERS.get(target_server)
        
        if not server_config:
            return jsonify({'error': '–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        if not check_server_health(target_server, server_config):
            return jsonify({
                'response': f'–°–µ—Ä–≤–µ—Ä {target_server} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                'server': target_server,
                'status': 'offline'
            }), 503
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {
            'response': f'–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–µ—Ä–≤–µ—Ä–æ–º {target_server}',
            'server': target_server,
            'status': 'online',
            'timestamp': datetime.now().isoformat()
        }
        
        # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
        cleanup_memory()
        
        return jsonify(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ chat: {e}")
        cleanup_memory()
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/api/health', methods=['GET'])
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    return jsonify({
        'status': 'ok',
        'servers_count': len(SERVERS),
        'memory_optimized': True,
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/servers', methods=['GET'])
def servers():
    """–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    server_status = {}
    for name, config in SERVERS.items():
        server_status[name] = {
            'port': config['port'],
            'status': 'online' if check_server_health(name, config) else 'offline'
        }
    
    cleanup_memory()
    return jsonify(server_status)

if __name__ == '__main__':
    print("üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Smart Dispatcher –∑–∞–ø—É—â–µ–Ω")
    print("üíæ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏")
    print("üåê URL: http://localhost:8080")
    
    # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    cleanup_memory()
    
    app.run(host='0.0.0.0', port=8080, debug=False, threaded=True)








