#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å –¥–ª—è Rubin AI
"""

import re
import math

class RubinMathSolver:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å"""
    
    def __init__(self):
        self.patterns = {
            # –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            'arithmetic': r'(\d+(?:\.\d+)?)\s*([+\-*/])\s*(\d+(?:\.\d+)?)',
            
            # –ó–∞–¥–∞—á–∏ –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ
            'motion': r'(?:—Å–∫–æ—Ä–æ—Å—Ç—å|—Å–∫–æ—Ä–æ—Å—Ç—å—é|—Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é)\s*(\d+(?:\.\d+)?)\s*(?:–∫–º/—á|–∫–º/—á–∞—Å)',
            'time': r'(?:–∑–∞|—á–µ—Ä–µ–∑|–≤—Ä–µ–º—è)\s*(\d+(?:\.\d+)?)\s*(?:–º–∏–Ω|–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–æ–≤|—á)',
            'distance': r'(?:—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ|–ø—É—Ç—å|–ø—Ä–æ–µ—Ö–∞–ª|–ø—Ä–æ—à–µ–ª)\s*(\d+(?:\.\d+)?)\s*(?:–∫–º|–º–µ—Ç—Ä–æ–≤|–º)',
            
            # –ó–∞–¥–∞—á–∏ –Ω–∞ —É–≥–ª—ã
            'angle': r'—É–≥–æ–ª\s*([–ê-–Ø]+)\s*—Ä–∞–≤–µ–Ω\s*(\d+(?:\.\d+)?)¬∞',
            'angle_division': r'–ª—É—á\s*([–ê-–Ø]+)\s*–¥–µ–ª–∏—Ç\s*—É–≥–æ–ª\s*([–ê-–Ø]+)\s*–Ω–∞\s*–¥–≤–∞\s*—É–≥–ª–∞',
            
            # –ó–∞–¥–∞—á–∏ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            'quantity': r'(\d+)\s*(?:—è—â–∏–∫|—è—â–∏–∫–∞|—è—â–∏–∫–æ–≤|—à—Ç—É–∫|—à—Ç—É–∫–∏|—à—Ç—É–∫–∞)',
            'more_less': r'(?:–Ω–∞|–±–æ–ª—å—à–µ|–º–µ–Ω—å—à–µ)\s*(\d+)\s*(?:—è—â–∏–∫|—è—â–∏–∫–∞|—è—â–∏–∫–æ–≤|—à—Ç—É–∫|—à—Ç—É–∫–∏|—à—Ç—É–∫–∞)',
        }
    
    def solve_arithmetic(self, text):
        """–†–µ—à–µ–Ω–∏–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        matches = re.findall(self.patterns['arithmetic'], text)
        if not matches:
            return None
        
        results = []
        for match in matches:
            num1 = float(match[0])
            op = match[1]
            num2 = float(match[2])
            
            if op == '+':
                result = num1 + num2
            elif op == '-':
                result = num1 - num2
            elif op == '*':
                result = num1 * num2
            elif op == '/':
                result = num1 / num2 if num2 != 0 else "–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!"
            
            results.append(f"{num1} {op} {num2} = {result}")
        
        return "üßÆ **–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞:**\n" + "\n".join(results)
    
    def solve_motion_problem(self, text):
        """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ"""
        # –ò—â–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
        speed_match = re.search(r'(\d+(?:\.\d+)?)\s*(?:–∫–º/—á|–∫–º/—á–∞—Å)', text)
        if not speed_match:
            return None
        
        speed = float(speed_match.group(1))
        
        # –ò—â–µ–º –≤—Ä–µ–º—è
        time_match = re.search(r'(\d+(?:\.\d+)?)\s*(?:–º–∏–Ω|–º–∏–Ω—É—Ç)', text)
        if time_match:
            time_minutes = float(time_match.group(1))
            time_hours = time_minutes / 60
        else:
            time_match = re.search(r'(\d+(?:\.\d+)?)\s*(?:—á–∞—Å|—á–∞—Å–æ–≤|—á)', text)
            if time_match:
                time_hours = float(time_match.group(1))
            else:
                return None
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        distance = speed * time_hours
        
        result = f"""üöó **–ó–∞–¥–∞—á–∞ –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ:**

**–î–∞–Ω–æ:**
‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {speed} –∫–º/—á
‚Ä¢ –í—Ä–µ–º—è: {time_minutes if 'time_minutes' in locals() else time_hours} {'–º–∏–Ω—É—Ç' if 'time_minutes' in locals() else '—á–∞—Å–æ–≤'}

**–†–µ—à–µ–Ω–∏–µ:**
–§–æ—Ä–º—É–ª–∞ –ø—É—Ç–∏: S = v √ó t
S = {speed} √ó {time_hours} = {distance} –∫–º

**–û—Ç–≤–µ—Ç:** {distance} –∫–º"""
        
        return result
    
    def solve_angle_problem(self, text):
        """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ —É–≥–ª—ã"""
        # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–≥–ª–∞—Ö
        angle_matches = re.findall(self.patterns['angle'], text)
        if not angle_matches:
            return None
        
        # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–ª–µ–Ω–∏–∏ —É–≥–ª–∞
        division_match = re.search(self.patterns['angle_division'], text)
        if not division_match:
            return None
        
        # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –æ–¥–∏–Ω —É–≥–æ–ª –Ω–∞ 90¬∞ –±–æ–ª—å—à–µ –¥—Ä—É–≥–æ–≥–æ
        difference_match = re.search(r'–Ω–∞\s*(\d+(?:\.\d+)?)¬∞\s*(?:–±–æ–ª—å—à–µ|–º–µ–Ω—å—à–µ)', text)
        if not difference_match:
            return None
        
        difference = float(difference_match.group(1))
        
        # –ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —É–≥–ª–æ–≤
        angle_values = []
        for match in angle_matches:
            angle_name = match[0]
            angle_value = float(match[1])
            angle_values.append((angle_name, angle_value))
        
        if not angle_values:
            return None
        
        results = []
        for angle_name, total_angle in angle_values:
            # –ï—Å–ª–∏ –æ–¥–∏–Ω —É–≥–æ–ª –Ω–∞ difference¬∞ –±–æ–ª—å—à–µ –¥—Ä—É–≥–æ–≥–æ
            # –ü—É—Å—Ç—å x - –º–µ–Ω—å—à–∏–π —É–≥–æ–ª, —Ç–æ–≥–¥–∞ x + difference - –±–æ–ª—å—à–∏–π —É–≥–æ–ª
            # x + (x + difference) = total_angle
            # 2x + difference = total_angle
            # x = (total_angle - difference) / 2
            
            smaller_angle = (total_angle - difference) / 2
            larger_angle = smaller_angle + difference
            
            results.append(f"""üìê **–£–≥–æ–ª {angle_name} = {total_angle}¬∞:**

**–î–∞–Ω–æ:**
‚Ä¢ –û–¥–∏–Ω —É–≥–æ–ª –Ω–∞ {difference}¬∞ –±–æ–ª—å—à–µ –¥—Ä—É–≥–æ–≥–æ
‚Ä¢ –°—É–º–º–∞ —É–≥–ª–æ–≤ = {total_angle}¬∞

**–†–µ—à–µ–Ω–∏–µ:**
–ü—É—Å—Ç—å x - –º–µ–Ω—å—à–∏–π —É–≥–æ–ª, —Ç–æ–≥–¥–∞ (x + {difference}) - –±–æ–ª—å—à–∏–π —É–≥–æ–ª
x + (x + {difference}) = {total_angle}
2x + {difference} = {total_angle}
2x = {total_angle - difference}
x = {smaller_angle}

**–û—Ç–≤–µ—Ç:**
‚Ä¢ –ú–µ–Ω—å—à–∏–π —É–≥–æ–ª: {smaller_angle}¬∞
‚Ä¢ –ë–æ–ª—å—à–∏–π —É–≥–æ–ª: {larger_angle}¬∞""")
        
        return "\n\n".join(results)
    
    def solve_quantity_problem(self, text):
        """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"""
        # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç
        candy_match = re.search(r'(\d+)\s*(?:—è—â–∏–∫|—è—â–∏–∫–∞|—è—â–∏–∫–æ–≤)\s*(?:–∫–æ–Ω—Ñ–µ—Ç|–∫–æ–Ω—Ñ–µ—Ç—ã)', text)
        if not candy_match:
            return None
        
        candy_boxes = int(candy_match.group(1))
        
        # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—á–µ–Ω—å–µ
        cookie_match = re.search(r'–ø–µ—á–µ–Ω—å—è?\s*-\s*–Ω–∞\s*(\d+)\s*(?:—è—â–∏–∫|—è—â–∏–∫–∞|—è—â–∏–∫–æ–≤)\s*(?:–±–æ–ª—å—à–µ|–º–µ–Ω—å—à–µ)', text)
        if not cookie_match:
            return None
        
        cookie_difference = int(cookie_match.group(1))
        cookie_boxes = candy_boxes + cookie_difference
        total_boxes = candy_boxes + cookie_boxes
        
        result = f"""üì¶ **–ó–∞–¥–∞—á–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:**

**–î–∞–Ω–æ:**
‚Ä¢ –ö–æ–Ω—Ñ–µ—Ç: {candy_boxes} —è—â–∏–∫–æ–≤
‚Ä¢ –ü–µ—á–µ–Ω—å—è: –Ω–∞ {cookie_difference} —è—â–∏–∫–æ–≤ –±–æ–ª—å—à–µ

**–†–µ—à–µ–Ω–∏–µ:**
‚Ä¢ –Ø—â–∏–∫–æ–≤ –∫–æ–Ω—Ñ–µ—Ç: {candy_boxes}
‚Ä¢ –Ø—â–∏–∫–æ–≤ –ø–µ—á–µ–Ω—å—è: {candy_boxes} + {cookie_difference} = {cookie_boxes}
‚Ä¢ –í—Å–µ–≥–æ —è—â–∏–∫–æ–≤: {candy_boxes} + {cookie_boxes} = {total_boxes}

**–û—Ç–≤–µ—Ç:** {total_boxes} —è—â–∏–∫–æ–≤"""
        
        return result
    
    def solve(self, text):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–µ—à–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á
        solvers = [
            self.solve_arithmetic,
            self.solve_motion_problem,
            self.solve_angle_problem,
            self.solve_quantity_problem
        ]
        
        for solver in solvers:
            result = solver(text)
            if result:
                return result
        
        return None

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ—à–∞—Ç–µ–ª—è
math_solver = RubinMathSolver()

def solve_math_problem(text):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    return math_solver.solve(text)

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_problems = [
        "2+3",
        "5-7",
        "–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–∞–º–æ–ª–µ—Ç–∞ –ò–ª-14 —Ä–∞–≤–Ω–∞ 412 –∫–º/—á. –ö–∞–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ–Ω –ø—Ä–æ–ª–µ—Ç–∏—Ç –∑–∞ 15 –º–∏–Ω?",
        "–õ—É—á –û–° –¥–µ–ª–∏—Ç —É–≥–æ–ª –ê–û–í –Ω–∞ –¥–≤–∞ —É–≥–ª–∞, –æ–¥–∏–Ω –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞ 90¬∞ –±–æ–ª—å—à–µ –¥—Ä—É–≥–æ–≥–æ. –ù–∞–π–¥–∏—Ç–µ —ç—Ç–∏ —É–≥–ª—ã, –µ—Å–ª–∏ —É–≥–æ–ª –ê–û–í —Ä–∞–≤–µ–Ω 120¬∞",
        "–í –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–≤–µ–∑–ª–∏ 3 —è—â–∏–∫–∞ –∫–æ–Ω—Ñ–µ—Ç, –∞ –ø–µ—á–µ–Ω—å—è - –Ω–∞ 3 —è—â–∏–∫–∞ –±–æ–ª—å—à–µ. –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —è—â–∏–∫–æ–≤ –ø—Ä–∏–≤–µ–∑–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω?"
    ]
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ï–®–ê–¢–ï–õ–Ø")
    print("=" * 50)
    
    for i, problem in enumerate(test_problems, 1):
        print(f"\n{i}. –ó–∞–¥–∞—á–∞: {problem}")
        result = solve_math_problem(problem)
        if result:
            print(f"‚úÖ –†–µ—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ:")
            print(result)
        else:
            print("‚ùå –†–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

















