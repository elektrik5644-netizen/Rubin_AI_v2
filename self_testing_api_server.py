#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
API —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Rubin AI
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç endpoints –¥–ª—è —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import logging
import time
from datetime import datetime
import json

from rubin_self_testing import RubinSelfTesting

logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
self_testing_system = RubinSelfTesting()

@app.route('/api/self_testing/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return jsonify({
        "status": "Rubin AI Self-Testing Server ONLINE",
        "timestamp": datetime.now().isoformat(),
        "total_servers": len(self_testing_system.servers),
        "total_capabilities": sum(len(caps) for caps in self_testing_system.capabilities.values())
    }), 200

@app.route('/api/self_testing/full_test', methods=['POST'])
def run_full_test():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Rubin AI...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        report = self_testing_system.run_full_self_test()
        
        response_data = {
            "success": True,
            "report": report,
            "message": "–ü–æ–ª–Ω–æ–µ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"
        }), 500

@app.route('/api/self_testing/server_status', methods=['GET'])
def check_server_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    try:
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        server_status = self_testing_system._check_all_servers()
        
        response_data = {
            "success": True,
            "server_status": server_status,
            "total_servers": len(server_status),
            "online_servers": len([s for s in server_status.values() if s['status'] == 'online']),
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
        }), 500

@app.route('/api/self_testing/functionality_test', methods=['POST'])
def test_functionality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        functionality_tests = self_testing_system._test_functionality()
        
        response_data = {
            "success": True,
            "functionality_tests": functionality_tests,
            "total_tests": len(functionality_tests),
            "working_tests": len([t for t in functionality_tests.values() if t['status'] == 'working']),
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {str(e)}"
        }), 500

@app.route('/api/self_testing/capabilities', methods=['GET'])
def get_capabilities():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Rubin AI"""
    try:
        logger.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...")
        
        capabilities_report = self_testing_system._generate_capabilities_report()
        
        response_data = {
            "success": True,
            "capabilities_report": capabilities_report,
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {str(e)}"
        }), 500

@app.route('/api/self_testing/self_description', methods=['GET'])
def get_self_description():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Rubin AI"""
    try:
        logger.info("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Rubin AI...")
        
        description = self_testing_system.generate_self_description()
        
        response_data = {
            "success": True,
            "description": description,
            "message": "–û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Rubin AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ",
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {str(e)}"
        }), 500

@app.route('/api/self_testing/quick_test', methods=['POST'])
def quick_test():
    """–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    try:
        logger.info("‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        main_servers = ['smart_dispatcher', 'math_server', 'electrical_server', 'programming_server']
        
        quick_status = {}
        for server_id in main_servers:
            if server_id in self_testing_system.servers:
                server_info = self_testing_system.servers[server_id]
                try:
                    health_url = f"http://localhost:{server_info['port']}{server_info['endpoint']}"
                    response = requests.get(health_url, timeout=2)
                    
                    if response.status_code == 200:
                        quick_status[server_id] = {
                            "status": "online",
                            "name": server_info['name'],
                            "port": server_info['port']
                        }
                    else:
                        quick_status[server_id] = {
                            "status": "error",
                            "name": server_info['name'],
                            "port": server_info['port'],
                            "error": f"HTTP {response.status_code}"
                        }
                except:
                    quick_status[server_id] = {
                        "status": "offline",
                        "name": server_info['name'],
                        "port": server_info['port']
                    }
        
        response_data = {
            "success": True,
            "quick_status": quick_status,
            "online_count": len([s for s in quick_status.values() if s['status'] == 'online']),
            "total_count": len(quick_status),
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"
        }), 500

@app.route('/api/self_testing/chat_integration', methods=['POST'])
def chat_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —á–∞—Ç–æ–º RubinDeveloper"""
    try:
        data = request.get_json() or {}
        message = data.get('message', '')
        
        logger.info(f"üí¨ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —á–∞—Ç–æ–º: {message}")
        
        message_lower = message.lower()
        
        if any(word in message_lower for word in ["—Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Å–∞–º–æ—Ç–µ—Å—Ç", "—á—Ç–æ —É–º–µ–µ—à—å", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "—Ñ—É–Ω–∫—Ü–∏–∏"]):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            description = self_testing_system.generate_self_description()
            
            response_data = {
                "success": True,
                "type": "self_description",
                "description": description,
                "message": "–û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Rubin AI",
                "timestamp": datetime.now().isoformat()
            }
            
        elif any(word in message_lower for word in ["—Å—Ç–∞—Ç—É—Å", "–ø—Ä–æ–≤–µ—Ä—å", "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "—Å–æ—Å—Ç–æ—è–Ω–∏–µ"]):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤
            server_status = self_testing_system._check_all_servers()
            online_count = len([s for s in server_status.values() if s['status'] == 'online'])
            total_count = len(server_status)
            
            status_message = f"üîç **–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ RUBIN AI:**\n\n"
            status_message += f"üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            status_message += f"‚Ä¢ –í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: {total_count}\n"
            status_message += f"‚Ä¢ –û–Ω–ª–∞–π–Ω –º–æ–¥—É–ª–µ–π: {online_count}\n"
            status_message += f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {(online_count/total_count*100):.1f}%\n\n"
            
            status_message += f"üìã **–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:**\n"
            for server_id, status in server_status.items():
                server_name = self_testing_system.servers[server_id]['name']
                if status['status'] == 'online':
                    status_message += f"‚úÖ {server_name} (–ø–æ—Ä—Ç {status['port']}) - –û–ù–õ–ê–ô–ù\n"
                elif status['status'] == 'offline':
                    status_message += f"‚ùå {server_name} (–ø–æ—Ä—Ç {status['port']}) - –ù–ï–î–û–°–¢–£–ü–ï–ù\n"
                else:
                    status_message += f"‚ö†Ô∏è {server_name} (–ø–æ—Ä—Ç {status['port']}) - –û–®–ò–ë–ö–ê\n"
            
            response_data = {
                "success": True,
                "type": "server_status",
                "status_message": status_message,
                "server_status": server_status,
                "timestamp": datetime.now().isoformat()
            }
            
        else:
            # –û–±—â–∏–π –æ—Ç–≤–µ—Ç
            response_data = {
                "success": True,
                "type": "general",
                "message": "üß™ –Ø –º–æ–≥—É –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö. –°–ø—Ä–æ—Å–∏—Ç–µ: '—á—Ç–æ —É–º–µ–µ—à—å?', '—Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã', '—Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'",
                "timestamp": datetime.now().isoformat()
            }
        
        return jsonify(response_data), 200
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —á–∞—Ç–æ–º: {e}")
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —á–∞—Ç–æ–º: {str(e)}"
        }), 500

if __name__ == '__main__':
    port = 8102  # –ù–æ–≤—ã–π –ø–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.info(f"üß™ –ó–∞–ø—É—Å–∫ Rubin AI Self-Testing —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    app.run(port=port, debug=True, use_reloader=False)










