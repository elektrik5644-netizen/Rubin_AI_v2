#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–† PLC –§–ê–ô–õ–û–í VMB630
===============================
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç PLC —Ñ–∞–π–ª—ã –∏ –Ω–∞—Ö–æ–¥–∏—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
"""

import re
import os

def analyze_plc_file(file_path):
    """–ê–Ω–∞–ª–∏–∑ PLC —Ñ–∞–π–ª–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫"""
    print(f"üîç –ê–ù–ê–õ–ò–ó PLC –§–ê–ô–õ–ê: {os.path.basename(file_path)}")
    print("=" * 60)
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return
    
    lines = content.split('\n')
    errors = []
    warnings = []
    
    # –ê–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    print("\nüìã –°–ò–ù–¢–ê–ö–°–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:")
    print("-" * 30)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ–±–æ–∫ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    if_count = 0
    endif_count = 0
    while_count = 0
    endwhile_count = 0
    
    for i, line in enumerate(lines, 1):
        line = line.strip()
        if not line or line.startswith(';'):
            continue
            
        # –ü–æ–¥—Å—á–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        if_count += line.count('IF(') + line.count('IF (')
        endif_count += line.count('ENDIF')
        while_count += line.count('WHILE(') + line.count('WHILE (')
        endwhile_count += line.count('ENDWHILE')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        if 'IF(' in line and not line.endswith(')'):
            errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –ù–µ–∑–∞–∫—Ä—ã—Ç–∞—è —Å–∫–æ–±–∫–∞ –≤ IF")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if 'AXIS_DISCONNECTEP_TP_P' in line:
            errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –û–ø–µ—á–∞—Ç–∫–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π AXIS_DISCONNECTEP_TP_P (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å AXIS_DISCONNECTED_TP_P)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤
        if 'TIMER_SIMPLE77_P' in line and 'SOJ_PUMP_PISTOL_STAGE_P' in line:
            warnings.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∞–π–º–µ—Ä–∞ TIMER_SIMPLE77_P –≤ —Å–µ–∫—Ü–∏–∏ –ø–∏—Å—Ç–æ–ª–µ—Ç–∞ –°–û–ñ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    if if_count != endif_count:
        errors.append(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ IF/ENDIF: IF={if_count}, ENDIF={endif_count}")
    
    if while_count != endwhile_count:
        errors.append(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ WHILE/ENDWHILE: WHILE={while_count}, ENDWHILE={endwhile_count}")
    
    # –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    print("\nüß† –õ–û–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:")
    print("-" * 30)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–¥–∏–π —Å–º–∞–∑–∫–∏
    lube_stages = []
    for i, line in enumerate(lines, 1):
        if 'LUBE_STAGE_P =' in line:
            stage_match = re.search(r'LUBE_STAGE_P = (\d+)', line)
            if stage_match:
                stage = int(stage_match.group(1))
                lube_stages.append((i, stage))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Å—Ç–∞–¥–∏—è–º–∏
    valid_transitions = {0: [1], 1: [2], 2: [3], 3: [4, 1000], 4: [5], 5: [0], 1000: [0]}
    for i, (line_num, stage) in enumerate(lube_stages):
        if i < len(lube_stages) - 1:
            next_stage = lube_stages[i + 1][1]
            if stage in valid_transitions and next_stage not in valid_transitions[stage]:
                warnings.append(f"–°—Ç—Ä–æ–∫–∞ {line_num}: –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ —Å—Ç–∞–¥–∏–∏ —Å–º–∞–∑–∫–∏ {stage} ‚Üí {next_stage}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤
    timer_usage = {}
    for i, line in enumerate(lines, 1):
        timer_matches = re.findall(r'TIMER_SIMPLE(\d+)_P', line)
        for timer in timer_matches:
            if timer not in timer_usage:
                timer_usage[timer] = []
            timer_usage[timer].append(i)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ç–∞–π–º–µ—Ä–æ–≤
    for timer, lines_used in timer_usage.items():
        if len(lines_used) > 3:  # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –±–æ–ª–µ–µ —á–µ–º 3 –º–µ—Å—Ç–∞—Ö
            warnings.append(f"–¢–∞–π–º–µ—Ä TIMER_SIMPLE{timer}_P –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ {len(lines_used)} –º–µ—Å—Ç–∞—Ö: —Å—Ç—Ä–æ–∫–∏ {lines_used}")
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
    print(f"  –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ IF: {if_count}")
    print(f"  –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ ENDIF: {endif_count}")
    print(f"  –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ WHILE: {while_count}")
    print(f"  –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ ENDWHILE: {endwhile_count}")
    print(f"  –°—Ç–∞–¥–∏–π —Å–º–∞–∑–∫–∏: {len(lube_stages)}")
    print(f"  –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤: {len(timer_usage)}")
    
    print(f"\n‚ùå –ù–ê–ô–î–ï–ù–ù–´–ï –û–®–ò–ë–ö–ò ({len(errors)}):")
    if errors:
        for error in errors:
            print(f"  ‚Ä¢ {error}")
    else:
        print("  ‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(warnings)}):")
    if warnings:
        for warning in warnings:
            print(f"  ‚Ä¢ {warning}")
    else:
        print("  ‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç")
    
    # –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    print(f"\nüîß –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
    print("-" * 30)
    
    functions = {
        "–°–∏—Å—Ç–µ–º–∞ —Å–º–∞–∑–∫–∏": 0,
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ–º": 0,
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –°–û–ñ": 0,
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ë—Ä–æ–º": 0,
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∂–∏–º–æ–º –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤": 0,
        "–ê–Ω–∞–ª–æ–≥–æ–≤—ã–µ –≤—ã—Ö–æ–¥—ã": 0
    }
    
    for line in content:
        if "LUBE_STAGE_P" in line or "PULSE_LUBE" in line:
            functions["–°–∏—Å—Ç–µ–º–∞ —Å–º–∞–∑–∫–∏"] += 1
        if "LED_WORKPLACE" in line or "LIGHT_WORKZONE" in line:
            functions["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ–º"] += 1
        if "SOJ_PUMP" in line or "SOJ_" in line:
            functions["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –°–û–ñ"] += 1
        if "TRANSPORT" in line:
            functions["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ë—Ä–æ–º"] += 1
        if "BEAR_TIGHT" in line or "PRELOAD_BEAR" in line:
            functions["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∂–∏–º–æ–º –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤"] += 1
        if "ANALOG" in line or "_CMD_LIM" in line:
            functions["–ê–Ω–∞–ª–æ–≥–æ–≤—ã–µ –≤—ã—Ö–æ–¥—ã"] += 1
    
    print("  –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏:")
    for func, count in functions.items():
        if count > 0:
            print(f"    ‚úÖ {func}: {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("-" * 30)
    
    if errors:
        print("  üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:")
        for error in errors:
            if "AXIS_DISCONNECTEP_TP_P" in error:
                print("    ‚Ä¢ –ó–∞–º–µ–Ω–∏—Ç—å AXIS_DISCONNECTEP_TP_P –Ω–∞ AXIS_DISCONNECTED_TP_P")
    
    if warnings:
        print("  ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É:")
        for warning in warnings:
            if "—Ç–∞–π–º–µ—Ä" in warning.lower():
                print("    ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤")
    
    print("  üìö –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("    ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–ª–æ–∂–Ω—ã–º –ª–æ–≥–∏—á–µ—Å–∫–∏–º –±–ª–æ–∫–∞–º")
    print("    ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å—Ç–∞–¥–∏—è–º–∏")
    print("    ‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Ç–∞–π–º–µ—Ä–æ–≤")
    print("    ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    file_path = r"C:\Users\elekt\OneDrive\Desktop\VMB630_v_005_019_000\out\plc_18_background_ctrl.plc"
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return
    
    analyze_plc_file(file_path)
    
    print(f"\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("=" * 30)
    print("PLC —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ —Å—Ç–∞–Ω–∫–∞ VMB630.")
    print("–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: —Å–∏—Å—Ç–µ–º–∞ —Å–º–∞–∑–∫–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –°–û–ñ, –æ—Å–≤–µ—â–µ–Ω–∏–µ, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ë—Ä.")
    print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.")

if __name__ == "__main__":
    main()





