#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ Quick API Test - –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å–µ—Ä–≤–µ—Ä–æ–≤ Rubin AI v2
"""

import requests
import json
import time
from datetime import datetime

def quick_test():
    """–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    print("üöÄ Rubin AI v2 - –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API")
    print("=" * 50)
    
    servers = {
        'Smart Dispatcher': 8080,
        'General API': 8085,
        'Mathematics': 8086,
        'Electrical': 8087,
        'Programming': 8088,
        'Neuro': 8090,
        'Controllers': 9000,
        'PLC Analysis': 8099,
        'Advanced Math': 8100,
        'Data Processing': 8101,
        'Search Engine': 8102,
        'System Utils': 8103,
        'GAI Server': 8104,
        'Unified Manager': 8084,
        'Ethical Core': 8105
    }
    
    results = {}
    online_count = 0
    
    for name, port in servers.items():
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            if name == 'Neuro':
                endpoints = ['/api/health']  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
            elif name == 'Electrical':
                endpoints = ['/api/electrical/status']
            elif name == 'Controllers':
                endpoints = ['/api/controllers/topic/general']
            elif name == 'PLC Analysis':
                endpoints = ['/api/plc/health']
            elif name == 'Advanced Math':
                endpoints = ['/api/advanced_math/health']
            elif name == 'Data Processing':
                endpoints = ['/api/data_processing/health']
            elif name == 'Search Engine':
                endpoints = ['/api/search/health']
            elif name == 'System Utils':
                endpoints = ['/api/system/health']
            elif name == 'GAI Server':
                endpoints = ['/api/gai/health']
            elif name == 'Unified Manager':
                endpoints = ['/api/system/health']
            elif name == 'Ethical Core':
                endpoints = ['/api/ethical/health']
            else:
                endpoints = ['/api/health', '/health']  # –û–±—â–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            
            for endpoint in endpoints:
                try:
                    url = f"http://localhost:{port}{endpoint}"
                    response = requests.get(url, timeout=3)
                    if response.status_code == 200:
                        results[name] = "‚úÖ –û–ù–õ–ê–ô–ù"
                        online_count += 1
                        break
                except:
                    continue
            else:
                results[name] = "‚ùå –û–§–§–õ–ê–ô–ù"
                
        except Exception as e:
            results[name] = f"‚ùå –û–®–ò–ë–ö–ê: {str(e)[:30]}"
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("-" * 50)
    
    for name, status in results.items():
        print(f"{status} {name}")
    
    print("-" * 50)
    print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {online_count}/{len(servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤ –æ–Ω–ª–∞–π–Ω")
    
    success_rate = (online_count / len(servers)) * 100
    
    if success_rate >= 90:
        print("üéâ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!")
    elif success_rate >= 75:
        print("üëç –•–û–†–û–®–û! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ.")
    elif success_rate >= 50:
        print("‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.")
    else:
        print("üö® –ö–†–ò–¢–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞.")
    
    return results

def test_smart_dispatcher():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Smart Dispatcher"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Smart Dispatcher...")
    
    try:
        url = "http://localhost:8080/api/chat"
        test_message = "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"
        
        payload = {'message': test_message}
        response = requests.post(url, json=payload, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print("‚úÖ Smart Dispatcher —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                print(f"üìù –û—Ç–≤–µ—Ç: {data.get('response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')[:100]}...")
                return True
            else:
                print(f"‚ö†Ô∏è Smart Dispatcher –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å –æ—à–∏–±–∫–æ–π: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
        else:
            print(f"‚ùå Smart Dispatcher HTTP {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Smart Dispatcher –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

if __name__ == "__main__":
    # –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    results = quick_test()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Smart Dispatcher
    smart_dp_ok = test_smart_dispatcher()
    
    print("\n" + "=" * 50)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("=" * 50)
