#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è Rubin AI v2.0
–° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è
"""

import time
import random
import threading
import requests
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from collections import defaultdict, deque

# –ò–º–ø–æ—Ä—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from mathematical_solver.integrated_solver import IntegratedMathematicalSolver, MathIntegrationConfig

@dataclass
class ModuleMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è"""
    module_name: str
    port: int
    request_count: int = 0
    avg_response_time: float = 0.0
    error_count: int = 0
    last_health_check: Optional[datetime] = None
    status: str = "unknown"  # online, offline, degraded
    cpu_usage: float = 0.0
    memory_usage: float = 0.0

@dataclass
class RequestMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
    timestamp: datetime
    module: str
    response_time: float
    success: bool
    category: str

class EnhancedIntelligentDispatcher:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
        self.modules = {
            'controllers': {'port': 8090, 'name': '–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã'},
            'electrical': {'port': 8087, 'name': '–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞'},
            'radiomechanics': {'port': 8089, 'name': '–†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞'},
            'ai_chat': {'port': 8084, 'name': 'AI –ß–∞—Ç'},
            'documents': {'port': 8085, 'name': '–î–æ–∫—É–º–µ–Ω—Ç—ã'},
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–¥—É–ª—å
            'mathematics': {'port': 8089, 'name': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å', 'type': 'internal'}
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è
        math_config = MathIntegrationConfig(
            enabled=True,
            confidence_threshold=0.7,
            fallback_to_general=True,
            log_requests=True,
            response_format="structured"
        )
        self.mathematical_solver = IntegratedMathematicalSolver(math_config)
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.module_metrics = {}
        self.request_metrics = deque(maxlen=1000)
        self.lock = threading.Lock()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
        for module_name, module_info in self.modules.items():
            self.module_metrics[module_name] = ModuleMetrics(
                module_name=module_name,
                port=module_info['port']
            )
        
        self.logger.info("Enhanced Intelligent Dispatcher initialized with mathematical solver")
    
    def analyze_request_category(self, message: str) -> str:
        """
        –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–∞
        """
        message_lower = message.lower()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        if self.mathematical_solver.is_mathematical_request(message):
            detected_category = self.mathematical_solver.get_detected_category(message)
            if detected_category:
                return f"mathematics_{detected_category}"
            else:
                return "mathematics_general"
        
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = {
            'controllers': ['–ø–∏–¥', '—Ä–µ–≥—É–ª—è—Ç–æ—Ä', 'plc', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ª–æ–≥–∏–∫–∞'],
            'electrical': ['—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ', '—Å—Ö–µ–º–∞', '—Ç–æ–∫', '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', '—Ä–µ–∑–∏—Å—Ç–æ—Ä', '–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä', '–∑–∞–∫–æ–Ω –æ–º–∞'],
            'radiomechanics': ['–∞–Ω—Ç–µ–Ω–Ω–∞', '—Å–∏–≥–Ω–∞–ª', '—Ä–∞–¥–∏–æ', '–º–æ–¥—É–ª—è—Ü–∏—è', '—á–∞—Å—Ç–æ—Ç–∞', '–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫', '–ø—Ä–∏–µ–º–Ω–∏–∫'],
            'documents': ['–¥–æ–∫—É–º–µ–Ω—Ç', '—Ñ–∞–π–ª', '–ø–æ–∏—Å–∫', '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
        }
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        scores = {}
        for category, keywords in categories.items():
            score = sum(1 for keyword in keywords if keyword in message_lower)
            scores[category] = score
        
        # –í–æ–∑–≤—Ä–∞—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º score
        if scores and max(scores.values()) > 0:
            return max(scores, key=scores.get)
        
        return 'general'
    
    def get_available_modules(self, category: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        with self.lock:
            available = []
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            if category.startswith('mathematics_'):
                # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–æ–¥—É–ª—å)
                available.append('mathematics')
                return available
            
            # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category in self.modules:
                if self.module_metrics[category].status == 'online':
                    available.append(category)
            
            # Fallback –º–æ–¥—É–ª–∏
            if category == 'general':
                # –î–ª—è –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º AI —á–∞—Ç
                if self.module_metrics['ai_chat'].status == 'online':
                    available.append('ai_chat')
                # –ï—Å–ª–∏ AI —á–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å –∫–∞–∫ fallback
                elif category.startswith('mathematics_') or self._is_potentially_mathematical(category):
                    available.append('mathematics')
            
            return available if available else ['ai_chat']  # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
    
    def _is_potentially_mathematical(self, message: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º"""
        math_indicators = ['—á–∏—Å–ª–æ', '–≤—ã—á–∏—Å–ª–∏', '–Ω–∞–π–¥–∏', '—Å–∫–æ–ª—å–∫–æ', '—Ä–µ—à–∏', '—Ä–∞—Å—á–µ—Ç', '+', '-', '*', '/', '=']
        return any(indicator in message.lower() for indicator in math_indicators)
    
    def process_request(self, message: str, category: str = None) -> Dict[str, any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        """
        start_time = time.time()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
        if not category:
            category = self.analyze_request_category(message)
        
        self.logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å: \"{message}\"")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if category.startswith('mathematics_'):
            return self._process_mathematical_request(message, category)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        available_modules = self.get_available_modules(category)
        
        if not available_modules:
            return self._create_fallback_response(message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π")
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –º–æ–¥—É–ª—å
        selected_module = self._select_best_module(available_modules)
        
        if selected_module == 'mathematics':
            return self._process_mathematical_request(message, category)
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–æ–¥—É–ª—é
        self.logger.info(f"üì° –ù–∞–ø—Ä–∞–≤–ª—è—é –∫ –º–æ–¥—É–ª—é: {self.modules[selected_module]['name']} (–ø–æ—Ä—Ç {self.modules[selected_module]['port']})")
        
        try:
            response = self._forward_to_module(message, selected_module)
            processing_time = time.time() - start_time
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            self._update_request_metrics(selected_module, processing_time, True, category)
            
            return {
                "response": response,
                "module": selected_module,
                "category": category,
                "processing_time": processing_time,
                "success": True
            }
            
        except Exception as e:
            processing_time = time.time() - start_time
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–∫–∏
            self._update_request_metrics(selected_module, processing_time, False, category)
            
            # Fallback –∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É —Ä–µ—à–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if self.mathematical_solver.is_mathematical_request(message):
                return self._process_mathematical_request(message, "mathematics_general")
            
            return self._create_fallback_response(message, str(e))
    
    def _process_mathematical_request(self, message: str, category: str) -> Dict[str, any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å"""
        start_time = time.time()
        
        self.logger.info(f"üßÆ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å: {category}")
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å
            result = self.mathematical_solver.process_request(message)
            
            processing_time = time.time() - start_time
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
            if result.get("should_route_to_other"):
                self.logger.info("üì° –ó–∞–ø—Ä–æ—Å –Ω–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –∫ –¥—Ä—É–≥–∏–º –º–æ–¥—É–ª—è–º")
                return self.process_request(message, "general")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if result.get("success"):
                response_text = result.get("response", "–†–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ")
                self.logger.info(f"‚úÖ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞ –∑–∞ {processing_time:.3f}—Å")
            else:
                response_text = result.get("response", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏: {result.get('error_message')}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            self._update_request_metrics("mathematics", processing_time, result.get("success", False), category)
            
            return {
                "response": response_text,
                "module": "mathematics",
                "category": category,
                "processing_time": processing_time,
                "success": result.get("success", False),
                "confidence": result.get("confidence", 0.0),
                "solution_data": result.get("solution_data", {})
            }
            
        except Exception as e:
            processing_time = time.time() - start_time
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ—à–∞—Ç–µ–ª–µ: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–∫–∏
            self._update_request_metrics("mathematics", processing_time, False, category)
            
            # Fallback –∫ –æ–±—â–µ–º—É AI —á–∞—Ç—É
            return self._create_fallback_response(message, f"–û—à–∏–±–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è: {str(e)}")
    
    def _select_best_module(self, available_modules: List[str]) -> str:
        """–í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –º–æ–¥—É–ª—å –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö"""
        if not available_modules:
            return 'ai_chat'
        
        # –ü—Ä–æ—Å—Ç–æ–π –≤—ã–±–æ—Ä - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É
        return available_modules[0]
    
    def _forward_to_module(self, message: str, module_name: str) -> str:
        """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –º–æ–¥—É–ª—é"""
        module_info = self.modules[module_name]
        
        # –î–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–¥—É–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–µ—à–∞—Ç–µ–ª—å
        if module_name == 'mathematics':
            result = self.mathematical_solver.process_request(message)
            return result.get("response", "–û—à–∏–±–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è")
        
        # –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö –º–æ–¥—É–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP –∑–∞–ø—Ä–æ—Å—ã
        try:
            url = f"http://localhost:{module_info['port']}/chat"
            response = requests.post(url, json={"message": message}, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                return data.get("response", "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
            else:
                raise Exception(f"HTTP {response.status_code}: {response.text}")
                
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –º–æ–¥—É–ª–µ–º {module_name}: {str(e)}")
    
    def _create_fallback_response(self, message: str, error: str) -> Dict[str, any]:
        """–°–æ–∑–¥–∞–µ—Ç fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        return {
            "response": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {error}",
            "module": "fallback",
            "category": "error",
            "processing_time": 0.0,
            "success": False,
            "error": error
        }
    
    def _update_request_metrics(self, module: str, response_time: float, success: bool, category: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        with self.lock:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É –∑–∞–ø—Ä–æ—Å–∞
            self.request_metrics.append(RequestMetrics(
                timestamp=datetime.now(),
                module=module,
                response_time=response_time,
                success=success,
                category=category
            ))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –º–æ–¥—É–ª—è
            if module in self.module_metrics:
                metrics = self.module_metrics[module]
                metrics.request_count += 1
                metrics.avg_response_time = (
                    (metrics.avg_response_time * (metrics.request_count - 1) + response_time) / 
                    metrics.request_count
                )
                if not success:
                    metrics.error_count += 1
    
    def get_system_status(self) -> Dict[str, any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ—à–∞—Ç–µ–ª–µ–º"""
        status = {
            "timestamp": datetime.now().isoformat(),
            "modules": {},
            "mathematical_solver": {},
            "overall_status": "operational"
        }
        
        # –°—Ç–∞—Ç—É—Å –æ–±—ã—á–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        with self.lock:
            for module_name, metrics in self.module_metrics.items():
                if module_name != 'mathematics':  # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                    status["modules"][module_name] = {
                        "status": metrics.status,
                        "port": metrics.port,
                        "request_count": metrics.request_count,
                        "avg_response_time": metrics.avg_response_time,
                        "error_count": metrics.error_count
                    }
        
        # –°—Ç–∞—Ç—É—Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è
        try:
            math_status = self.mathematical_solver.get_solver_status()
            status["mathematical_solver"] = math_status
            
            if not math_status.get("status") == "operational":
                status["overall_status"] = "degraded"
                
        except Exception as e:
            status["mathematical_solver"] = {"status": "error", "error": str(e)}
            status["overall_status"] = "degraded"
        
        return status
    
    def health_check(self) -> Dict[str, any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        health = {
            "timestamp": datetime.now().isoformat(),
            "overall_health": "healthy",
            "components": {}
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å
        try:
            math_health = self.mathematical_solver.health_check()
            health["components"]["mathematical_solver"] = math_health
            
            if math_health["overall_status"] != "healthy":
                health["overall_health"] = "degraded"
                
        except Exception as e:
            health["components"]["mathematical_solver"] = {
                "overall_status": "unhealthy",
                "error": str(e)
            }
            health["overall_health"] = "unhealthy"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        for module_name, module_info in self.modules.items():
            if module_name != 'mathematics':
                health["components"][module_name] = {
                    "status": self.module_metrics[module_name].status
                }
        
        return health













