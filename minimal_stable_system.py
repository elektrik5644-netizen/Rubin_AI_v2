#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ MINIMAL STABLE SYSTEM –¥–ª—è Rubin AI v2
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
"""

import subprocess
import time
import requests
import os
import signal
import sys

class MinimalStableSystem:
    def __init__(self):
        self.processes = {}
        # –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        self.minimal_servers = {
            'smart_dispatcher': {
                'command': ['python', 'simple_dispatcher.py'],
                'port': 8080,
                'critical': True
            },
            'general_api': {
                'command': ['python', 'api/general_api.py'],
                'port': 8085,
                'critical': True
            },
            'mathematics_api': {
                'command': ['python', 'api/mathematics_api.py'],
                'port': 8086,
                'critical': True
            },
            'electrical_api': {
                'command': ['python', 'api/electrical_api.py'],
                'port': 8087,
                'critical': True
            },
            'programming_api': {
                'command': ['python', 'api/programming_api.py'],
                'port': 8088,
                'critical': True
            },
            'radiomechanics_api': {
                'command': ['python', 'api/radiomechanics_api.py'],
                'port': 8089,
                'critical': True
            },
            'neuro_api': {
                'command': ['python', 'simple_neuro_api_server.py'],
                'port': 8090,
                'critical': True
            }
        }
    
    def kill_all_python_processes(self):
        """–£–±–∏–≤–∞–µ–º –≤—Å–µ Python –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        print("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ Python –ø—Ä–æ—Ü–µ—Å—Å—ã...")
        try:
            if os.name == 'nt':  # Windows
                subprocess.run(['taskkill', '/F', '/IM', 'python.exe'], 
                             capture_output=True, text=True)
            else:  # Linux/Mac
                subprocess.run(['pkill', '-f', 'python'], 
                             capture_output=True, text=True)
            time.sleep(3)
            print("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
    
    def start_server(self, name, config):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä"""
        try:
            print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º {name} –Ω–∞ –ø–æ—Ä—Ç—É {config['port']}...")
            process = subprocess.Popen(
                config['command'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            self.processes[name] = process
            time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            print(f"‚úÖ {name} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {e}")
            return False
    
    def check_server_health(self, name, config):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            if name == 'smart_dispatcher':
                url = f"http://localhost:{config['port']}/api/chat"
                response = requests.post(url, json={'message': 'test'}, timeout=3)
            else:
                url = f"http://localhost:{config['port']}/api/health"
                response = requests.get(url, timeout=3)
            
            return response.status_code in [200, 201]
        except:
            return False
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        print("üéØ MINIMAL STABLE SYSTEM –¥–ª—è Rubin AI v2")
        print("=" * 50)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        self.kill_all_python_processes()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–æ–≤
        print("üî• –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        success_count = 0
        
        for name, config in self.minimal_servers.items():
            if self.start_server(name, config):
                success_count += 1
        
        print(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {success_count}/{len(self.minimal_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
        
        # –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        print("‚è≥ –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...")
        time.sleep(5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã...")
        healthy_count = 0
        
        for name, config in self.minimal_servers.items():
            if self.check_server_health(name, config):
                healthy_count += 1
                print(f"‚úÖ {name} - –∑–¥–æ—Ä–æ–≤")
            else:
                print(f"‚ùå {name} - –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {healthy_count}/{len(self.minimal_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤ –∑–¥–æ—Ä–æ–≤—ã")
        
        if healthy_count >= len(self.minimal_servers) * 0.8:
            print("üéâ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
            return True
        else:
            print("‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø!")
            return False

def main():
    system = MinimalStableSystem()
    
    try:
        success = system.run()
        if success:
            print("üöÄ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            # –î–µ—Ä–∂–∏–º —Å–∏—Å—Ç–µ–º—É –∑–∞–ø—É—â–µ–Ω–Ω–æ–π
            while True:
                time.sleep(1)
        else:
            print("‚ùå –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –Ω–µ —É–¥–∞–ª—Å—è")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        system.kill_all_python_processes()
        sys.exit(0)

if __name__ == "__main__":
    main()








