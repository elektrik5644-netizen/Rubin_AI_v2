#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Neural Rubin AI v2.0 - –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –¥–ª—è Rubin AI
–ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
"""

import logging
import json
import random
import re
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ML –±–∏–±–ª–∏–æ—Ç–µ–∫ —Å fallback
try:
    import torch
    import torch.nn as nn
    import torch.optim as optim
    import numpy as np
    ML_AVAILABLE = True
except ImportError:
    ML_AVAILABLE = False
    # Mock –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ ML –±–∏–±–ª–∏–æ—Ç–µ–∫
    class torch:
        @staticmethod
        def device(name):
            return name
        
        @staticmethod
        def cuda_is_available():
            return False
        
        @staticmethod
        def FloatTensor(data):
            return data
        
        @staticmethod
        def randn(*args):
            return [0.1] * (args[0] * args[1] if len(args) > 1 else args[0])
        
        @staticmethod
        def argmax(tensor, dim=None):
            return 0
        
        @staticmethod
        def max(tensor):
            return 0.85
        
        @staticmethod
        def no_grad():
            class NoGradContext:
                def __enter__(self): return self
                def __exit__(self, *args): pass
            return NoGradContext()
    
    class nn:
        class Module:
            def __init__(self): pass
            def forward(self, x): return x
            def parameters(self): return []
            def train(self): pass
            def eval(self): pass
        
        class Linear:
            def __init__(self, in_features, out_features): pass
            def __call__(self, x): return x
        
        class ReLU:
            def __call__(self, x): return x
        
        class Dropout:
            def __init__(self, p): pass
            def __call__(self, x): return x
    
    class optim:
        class Adam:
            def __init__(self, params, lr): pass
            def step(self): pass
            def zero_grad(self): pass
    
    import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EnhancedNeuralRubinAI:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å Rubin AI —Å –ø–æ–ª–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    
    def __init__(self):
        if ML_AVAILABLE:
            try:
                self.device = torch.device('cuda' if torch.cuda_is_available() else 'cpu')
            except AttributeError:
                self.device = 'cpu'
        else:
            self.device = 'cpu'
        self.model = None
        self.optimizer = None
        self.training_data = []
        self.knowledge_base = self._initialize_knowledge_base()
        self.response_templates = self._initialize_response_templates()
        self.category_handlers = self._initialize_category_handlers()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
        self._initialize_neural_network()
        
        logger.info("üß† Enhanced Neural Rubin AI v2.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üîß ML –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã: {ML_AVAILABLE}")
        logger.info(f"üíª –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}")
    
    def _initialize_knowledge_base(self) -> Dict[str, Any]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        return {
            'mathematics': {
                'formulas': {
                    'physics': {
                        'ohm_law': 'U = I * R',
                        'kinetic_energy': 'E = 0.5 * m * v^2',
                        'power': 'P = U * I',
                        'force': 'F = m * a'
                    },
                    'chemistry': {
                        'concentration': 'C = n / V',
                        'molar_mass': 'M = m / n',
                        'ideal_gas': 'PV = nRT'
                    }
                },
                'methods': [
                    'symbolic_computation',
                    'numerical_analysis',
                    'graph_analysis',
                    'data_visualization'
                ]
            },
            'programming': {
                'languages': ['Python', 'JavaScript', 'Java', 'C++', 'C#', 'Go', 'Rust'],
                'concepts': [
                    'algorithms', 'data_structures', 'design_patterns',
                    'oop', 'functional_programming', 'concurrency'
                ],
                'frameworks': {
                    'web': ['React', 'Vue', 'Angular', 'Django', 'Flask'],
                    'mobile': ['React Native', 'Flutter', 'Xamarin'],
                    'ai': ['TensorFlow', 'PyTorch', 'Scikit-learn']
                }
            },
            'electrical': {
                'circuits': ['series', 'parallel', 'mixed'],
                'components': ['resistor', 'capacitor', 'inductor', 'transistor'],
                'analysis': ['nodal', 'mesh', 'thevenin', 'norton']
            },
            'controllers': {
                'types': ['PLC', 'PID', 'DCS', 'SCADA'],
                'protocols': ['Modbus', 'Profibus', 'Ethernet/IP'],
                'programming': ['Ladder Logic', 'Function Block', 'Structured Text']
            },
            'radiomechanics': {
                'antennas': ['dipole', 'yagi', 'parabolic', 'helical'],
                'propagation': ['line_of_sight', 'ground_wave', 'sky_wave'],
                'modulation': ['AM', 'FM', 'PM', 'QAM']
            }
        }
    
    def _initialize_response_templates(self) -> Dict[str, List[str]]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
        return {
            'mathematics': [
                "–†–µ—à–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏: {solution}",
                "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: {analysis}",
                "–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: {result}",
                "–ü—Ä–∏–º–µ–Ω—è—è —Ñ–æ—Ä–º—É–ª—É {formula}, –ø–æ–ª—É—á–∞–µ–º: {answer}"
            ],
            'programming': [
                "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {solution}",
                "–ö–æ–¥ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {code}",
                "–ê–ª–≥–æ—Ä–∏—Ç–º: {algorithm}",
                "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é: {recommendation}"
            ],
            'electrical': [
                "–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {solution}",
                "–ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º—ã: {analysis}",
                "–†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {calculation}",
                "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è —Å—Ö–µ–º–∞: {circuit}"
            ],
            'controllers': [
                "–†–µ—à–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞: {solution}",
                "–ü—Ä–æ–≥—Ä–∞–º–º–∞ PLC: {program}",
                "–õ–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {logic}",
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞: {settings}"
            ],
            'radiomechanics': [
                "–†–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {solution}",
                "–†–∞—Å—á–µ—Ç –∞–Ω—Ç–µ–Ω–Ω—ã: {calculation}",
                "–ê–Ω–∞–ª–∏–∑ —Ä–∞–¥–∏–æ—Å–∏–≥–Ω–∞–ª–∞: {analysis}",
                "–°—Ö–µ–º–∞ —Ä–∞–¥–∏–æ–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞: {circuit}"
            ],
            'general': [
                "–û–±—â–∏–π –æ—Ç–≤–µ—Ç: {response}",
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {information}",
                "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {explanation}",
                "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}"
            ]
        }
    
    def _initialize_category_handlers(self) -> Dict[str, callable]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        return {
            'mathematics': self._handle_mathematics,
            'programming': self._handle_programming,
            'electrical': self._handle_electrical,
            'controllers': self._handle_controllers,
            'radiomechanics': self._handle_radiomechanics,
            'general': self._handle_general
        }
    
    def _initialize_neural_network(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
        if ML_AVAILABLE:
            self.model = NeuralNetwork(
                input_size=512,  # –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞
                hidden_size=256,
                output_size=6    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            ).to(self.device)
            
            self.optimizer = optim.Adam(self.model.parameters(), lr=0.001)
            logger.info("üß† –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å PyTorch")
        else:
            logger.info("‚ö†Ô∏è ML –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –º–æ–¥–µ–ª—å")
    
    def categorize_question(self, question: str) -> Tuple[str, float]:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
        if ML_AVAILABLE and self.model:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–æ–ø—Ä–æ—Å –≤ –≤–µ–∫—Ç–æ—Ä
            question_vector = self._text_to_vector(question)
            
            with torch.no_grad():
                self.model.eval()
                output = self.model(torch.FloatTensor(question_vector).to(self.device))
                category_index = torch.argmax(output).item()
                confidence = torch.max(output).item()
            
            categories = ['mathematics', 'programming', 'electrical', 'controllers', 'radiomechanics', 'general']
            category = categories[category_index]
            
            logger.info(f"üéØ –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª–∞: {category} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
            return category, confidence
        else:
            # Fallback –Ω–∞ –ø—Ä–∞–≤–∏–ª–æ-–æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é
            return self._rule_based_categorization(question)
    
    def _text_to_vector(self, text: str) -> List[float]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –≤–µ–∫—Ç–æ—Ä –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è TF-IDF –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        words = re.findall(r'\b\w+\b', text.lower())
        word_freq = {}
        for word in words:
            word_freq[word] = word_freq.get(word, 0) + 1
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–æ–º 512
        vector = [0.0] * 512
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        keywords = {
            'mathematics': ['—Ä–µ—à–∏—Ç—å', '—É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '—Ñ–æ—Ä–º—É–ª–∞', '–≤—ã—á–∏—Å–ª–∏—Ç—å', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—á–∏—Å–ª–æ', '—Ñ—É–Ω–∫—Ü–∏—è'],
            'programming': ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–∞–ª–≥–æ—Ä–∏—Ç–º', '—Ñ—É–Ω–∫—Ü–∏—è', '–∫–ª–∞—Å—Å', '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'],
            'electrical': ['—Å—Ö–µ–º–∞', '—Ç–æ–∫', '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', '—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ', '–∫–æ–Ω—Ç—É—Ä', '—ç–ª–µ–º–µ–Ω—Ç'],
            'controllers': ['–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', 'plc', '–ª–æ–≥–∏–∫–∞', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–¥–∞—Ç—á–∏–∫', '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'],
            'radiomechanics': ['–∞–Ω—Ç–µ–Ω–Ω–∞', '—Ä–∞–¥–∏–æ', '—Å–∏–≥–Ω–∞–ª', '—á–∞—Å—Ç–æ—Ç–∞', '–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫', '–ø—Ä–∏–µ–º–Ω–∏–∫', '–≤–æ–ª–Ω–∞']
        }
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤–µ–∫—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        for i, (category, words) in enumerate(keywords.items()):
            for word in words:
                if word in text.lower():
                    vector[i * 85 + hash(word) % 85] = word_freq.get(word, 0) / len(words)
        
        return vector
    
    def _rule_based_categorization(self, question: str) -> Tuple[str, float]:
        """–ü—Ä–∞–≤–∏–ª–æ-–æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ fallback"""
        question_lower = question.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_keywords = {
            'mathematics': ['—Ä–µ—à–∏—Ç—å', '—É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '—Ñ–æ—Ä–º—É–ª–∞', '–≤—ã—á–∏—Å–ª–∏—Ç—å', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—á–∏—Å–ª–æ', '—Ñ—É–Ω–∫—Ü–∏—è', '–≥—Ä–∞—Ñ–∏–∫', '–¥–∏–∞–≥—Ä–∞–º–º–∞'],
            'programming': ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–∞–ª–≥–æ—Ä–∏—Ç–º', '—Ñ—É–Ω–∫—Ü–∏—è', '–∫–ª–∞—Å—Å', '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '—è–∑—ã–∫'],
            'electrical': ['—Å—Ö–µ–º–∞', '—Ç–æ–∫', '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', '—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ', '–∫–æ–Ω—Ç—É—Ä', '—ç–ª–µ–º–µ–Ω—Ç', '–∑–∞–∫–æ–Ω –æ–º–∞'],
            'controllers': ['–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', 'plc', '–ª–æ–≥–∏–∫–∞', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–¥–∞—Ç—á–∏–∫', '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', '–ø—Ä–æ–≥—Ä–∞–º–º–∞'],
            'radiomechanics': ['–∞–Ω—Ç–µ–Ω–Ω–∞', '—Ä–∞–¥–∏–æ', '—Å–∏–≥–Ω–∞–ª', '—á–∞—Å—Ç–æ—Ç–∞', '–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫', '–ø—Ä–∏–µ–º–Ω–∏–∫', '–≤–æ–ª–Ω–∞', '–º–æ–¥—É–ª—è—Ü–∏—è']
        }
        
        scores = {}
        for category, keywords in category_keywords.items():
            score = sum(1 for keyword in keywords if keyword in question_lower)
            scores[category] = score
        
        if max(scores.values()) > 0:
            best_category = max(scores, key=scores.get)
            confidence = min(0.9, scores[best_category] / len(category_keywords[best_category]))
            return best_category, confidence
        else:
            return 'general', 0.5
    
    def generate_response(self, question: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        try:
            logger.info(f"üß† Neural Rubin AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: {question[:50]}...")
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞
            category, confidence = self.categorize_question(question)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
            if category in self.category_handlers:
                response_data = self.category_handlers[category](question)
            else:
                response_data = self._handle_general(question)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            response = {
                'response': response_data.get('response', '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å'),
                'category': category,
                'confidence': confidence,
                'method': response_data.get('method', 'neural_network'),
                'timestamp': datetime.now().isoformat(),
                'metadata': {
                    'question_length': len(question),
                    'processing_time': response_data.get('processing_time', 0),
                    'knowledge_used': response_data.get('knowledge_used', [])
                }
            }
            
            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {category} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return {
                'response': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞',
                'category': 'error',
                'confidence': 0.0,
                'method': 'error_handler',
                'timestamp': datetime.now().isoformat(),
                'error': str(e)
            }
    
    def _handle_mathematics(self, question: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        start_time = datetime.now()
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏
        if any(word in question.lower() for word in ['—É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '—Ä–µ—à–∏—Ç—å']):
            solution = self._solve_equation(question)
            method = 'equation_solver'
        elif any(word in question.lower() for word in ['—Ñ–æ—Ä–º—É–ª–∞', '–∑–∞–∫–æ–Ω –æ–º–∞']):
            solution = self._apply_physics_formula(question)
            method = 'physics_formula'
        elif any(word in question.lower() for word in ['–≥—Ä–∞—Ñ–∏–∫', '–¥–∏–∞–≥—Ä–∞–º–º–∞']):
            solution = self._create_visualization(question)
            method = 'data_visualization'
        else:
            solution = self._general_math_solution(question)
            method = 'general_math'
        
        processing_time = (datetime.now() - start_time).total_seconds()
        
        return {
            'response': solution,
            'method': method,
            'processing_time': processing_time,
            'knowledge_used': ['mathematics', 'physics', 'chemistry']
        }
    
    def _handle_programming(self, question: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é"""
        start_time = datetime.now()
        
        if any(word in question.lower() for word in ['–∫–æ–¥', '–Ω–∞–ø–∏—Å–∞—Ç—å']):
            solution = self._generate_code(question)
            method = 'code_generation'
        elif any(word in question.lower() for word in ['–∞–ª–≥–æ—Ä–∏—Ç–º', '–ª–æ–≥–∏–∫–∞']):
            solution = self._explain_algorithm(question)
            method = 'algorithm_explanation'
        elif any(word in question.lower() for word in ['–æ—à–∏–±–∫–∞', '–±–∞–≥']):
            solution = self._debug_code(question)
            method = 'debugging'
        else:
            solution = self._general_programming_answer(question)
            method = 'general_programming'
        
        processing_time = (datetime.now() - start_time).total_seconds()
        
        return {
            'response': solution,
            'method': method,
            'processing_time': processing_time,
            'knowledge_used': ['programming', 'algorithms', 'data_structures']
        }
    
    def _handle_electrical(self, question: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        start_time = datetime.now()
        
        if any(word in question.lower() for word in ['—Å—Ö–µ–º–∞', '–∫–æ–Ω—Ç—É—Ä']):
            solution = self._analyze_circuit(question)
            method = 'circuit_analysis'
        elif any(word in question.lower() for word in ['–∑–∞–∫–æ–Ω –æ–º–∞', '—Ç–æ–∫', '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ']):
            solution = self._electrical_calculation(question)
            method = 'electrical_calculation'
        else:
            solution = self._general_electrical_answer(question)
            method = 'general_electrical'
        
        processing_time = (datetime.now() - start_time).total_seconds()
        
        return {
            'response': solution,
            'method': method,
            'processing_time': processing_time,
            'knowledge_used': ['electrical', 'circuits', 'physics']
        }
    
    def _handle_controllers(self, question: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º"""
        start_time = datetime.now()
        
        if any(word in question.lower() for word in ['plc', '–ø—Ä–æ–≥—Ä–∞–º–º–∞']):
            solution = self._plc_programming(question)
            method = 'plc_programming'
        elif any(word in question.lower() for word in ['–ª–æ–≥–∏–∫–∞', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']):
            solution = self._control_logic(question)
            method = 'control_logic'
        else:
            solution = self._general_controller_answer(question)
            method = 'general_controller'
        
        processing_time = (datetime.now() - start_time).total_seconds()
        
        return {
            'response': solution,
            'method': method,
            'processing_time': processing_time,
            'knowledge_used': ['controllers', 'automation', 'plc']
        }
    
    def _handle_radiomechanics(self, question: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ä–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–µ"""
        start_time = datetime.now()
        
        if any(word in question.lower() for word in ['–∞–Ω—Ç–µ–Ω–Ω–∞', '–∏–∑–ª—É—á–µ–Ω–∏–µ']):
            solution = self._antenna_calculation(question)
            method = 'antenna_calculation'
        elif any(word in question.lower() for word in ['—Å–∏–≥–Ω–∞–ª', '—á–∞—Å—Ç–æ—Ç–∞']):
            solution = self._signal_analysis(question)
            method = 'signal_analysis'
        else:
            solution = self._general_radiomechanics_answer(question)
            method = 'general_radiomechanics'
        
        processing_time = (datetime.now() - start_time).total_seconds()
        
        return {
            'response': solution,
            'method': method,
            'processing_time': processing_time,
            'knowledge_used': ['radiomechanics', 'antennas', 'signals']
        }
    
    def _handle_general(self, question: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        start_time = datetime.now()
        
        # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if any(word in question.lower() for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello']):
            solution = "–ü—Ä–∏–≤–µ—Ç! –Ø Rubin AI, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏."
        elif any(word in question.lower() for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é']):
            solution = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å. –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!"
        elif any(word in question.lower() for word in ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å']):
            solution = "–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏."
        else:
            solution = "–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º, —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–æ–π, –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏ –∏–ª–∏ —Ä–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–æ–π."
        
        processing_time = (datetime.now() - start_time).total_seconds()
        
        return {
            'response': solution,
            'method': 'general_chat',
            'processing_time': processing_time,
            'knowledge_used': ['general_knowledge']
        }
    
    # –ú–µ—Ç–æ–¥—ã —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á
    def _solve_equation(self, question: str) -> str:
        """–†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–π"""
        # –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π
        if 'x^2' in question or 'x¬≤' in question:
            return "–î–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–∏–¥–∞ ax¬≤ + bx + c = 0 –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É–ª—É: x = (-b ¬± ‚àö(b¬≤-4ac)) / 2a"
        else:
            return "–î–ª—è —Ä–µ—à–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."
    
    def _apply_physics_formula(self, question: str) -> str:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª"""
        if '–∑–∞–∫–æ–Ω –æ–º–∞' in question.lower():
            return "–ó–∞–∫–æ–Ω –û–º–∞: U = I √ó R, –≥–¥–µ U - –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, I - —Ç–æ–∫, R - —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ"
        elif '–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è' in question.lower():
            return "–ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è: E = 0.5 √ó m √ó v¬≤, –≥–¥–µ m - –º–∞—Å—Å–∞, v - —Å–∫–æ—Ä–æ—Å—Ç—å"
        else:
            return "–ü—Ä–∏–º–µ–Ω—è—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ–∏–∑–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É–ª—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."
    
    def _create_visualization(self, question: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        return "–°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫/–¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –†–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å matplotlib –∏–ª–∏ plotly –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤."
    
    def _general_math_solution(self, question: str) -> str:
        """–û–±—â–µ–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ"""
        return "–ü—Ä–∏–º–µ–Ω—è—é –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. –ò—Å–ø–æ–ª—å–∑—É—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ä–º—É–ª—ã –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è."
    
    def _generate_code(self, question: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞"""
        return "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–¥ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. –£—á–∏—Ç—ã–≤–∞—é –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞."
    
    def _explain_algorithm(self, question: str) -> str:
        """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
        return "–û–±—ä—è—Å–Ω—è—é –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ—à–∞–≥–æ–≤–æ, –≤–∫–ª—é—á–∞—è –≤—Ä–µ–º–µ–Ω–Ω—É—é –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å."
    
    def _debug_code(self, question: str) -> str:
        """–û—Ç–ª–∞–¥–∫–∞ –∫–æ–¥–∞"""
        return "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
    
    def _general_programming_answer(self, question: str) -> str:
        """–û–±—â–∏–π –æ—Ç–≤–µ—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é"""
        return "–û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è –∑–Ω–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö –∏ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è."
    
    def _analyze_circuit(self, question: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Å—Ö–µ–º"""
        return "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫—É—é —Å—Ö–µ–º—É, –ø—Ä–∏–º–µ–Ω—è—é –∑–∞–∫–æ–Ω—ã –ö–∏—Ä—Ö–≥–æ—Ñ–∞ –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ø–µ–π."
    
    def _electrical_calculation(self, question: str) -> str:
        """–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã"""
        return "–í—ã–ø–æ–ª–Ω—è—é —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã, –ø—Ä–∏–º–µ–Ω—è—é –∑–∞–∫–æ–Ω –û–º–∞ –∏ –¥—Ä—É–≥–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –∑–∞–∫–æ–Ω—ã."
    
    def _general_electrical_answer(self, question: str) -> str:
        """–û–±—â–∏–π –æ—Ç–≤–µ—Ç –ø–æ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ"""
        return "–û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∑–Ω–∞–Ω–∏—è —Å—Ö–µ–º, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç–æ–≤."
    
    def _plc_programming(self, question: str) -> str:
        """–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ PLC"""
        return "–°–æ–∑–¥–∞—é –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è PLC, –∏—Å–ø–æ–ª—å–∑—É—é Ladder Logic –∏–ª–∏ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤."
    
    def _control_logic(self, question: str) -> str:
        """–õ–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        return "–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é –ª–æ–≥–∏–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π, —É—á–∏—Ç—ã–≤–∞—é —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏."
    
    def _general_controller_answer(self, question: str) -> str:
        """–û–±—â–∏–π –æ—Ç–≤–µ—Ç –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º"""
        return "–û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º –∏ —Å–∏—Å—Ç–µ–º–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏."
    
    def _antenna_calculation(self, question: str) -> str:
        """–†–∞—Å—á–µ—Ç –∞–Ω—Ç–µ–Ω–Ω"""
        return "–í—ã–ø–æ–ª–Ω—è—é —Ä–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω—Ç–µ–Ω–Ω—ã, —É—á–∏—Ç—ã–≤–∞—é —á–∞—Å—Ç–æ—Ç—É, –¥–∏–∞–≥—Ä–∞–º–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –¥—Ä—É–≥–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏."
    
    def _signal_analysis(self, question: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        return "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–¥–∏–æ—Å–∏–≥–Ω–∞–ª, —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é –º–æ–¥—É–ª—è—Ü–∏—é, —Å–ø–µ–∫—Ç—Ä –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
    
    def _general_radiomechanics_answer(self, question: str) -> str:
        """–û–±—â–∏–π –æ—Ç–≤–µ—Ç –ø–æ —Ä–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–µ"""
        return "–û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ —Ä–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∑–Ω–∞–Ω–∏—è –∞–Ω—Ç–µ–Ω–Ω, —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Ä–∞–¥–∏–æ–ø–µ—Ä–µ–¥–∞—á–∏."
    
    def train_on_data(self, training_data: List[Dict[str, Any]]):
        """–û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if not ML_AVAILABLE or not self.model:
            logger.warning("‚ö†Ô∏è ML –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ")
            return
        
        logger.info(f"üéì –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ {len(training_data)} –ø—Ä–∏–º–µ—Ä–∞—Ö")
        
        self.model.train()
        for epoch in range(10):  # –ü—Ä–æ—Å—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ
            total_loss = 0
            for data in training_data:
                question = data['question']
                category = data['category']
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ç–µ–Ω–∑–æ—Ä—ã
                input_vector = torch.FloatTensor(self._text_to_vector(question))
                target = torch.LongTensor([self._category_to_index(category)])
                
                # Forward pass
                output = self.model(input_vector)
                loss = nn.CrossEntropyLoss()(output.unsqueeze(0), target)
                
                # Backward pass
                self.optimizer.zero_grad()
                loss.backward()
                self.optimizer.step()
                
                total_loss += loss.item()
            
            logger.info(f"üìä –≠–ø–æ—Ö–∞ {epoch + 1}, —Å—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {total_loss / len(training_data):.4f}")
        
        logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    def _category_to_index(self, category: str) -> int:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∏–Ω–¥–µ–∫—Å"""
        categories = ['mathematics', 'programming', 'electrical', 'controllers', 'radiomechanics', 'general']
        return categories.index(category) if category in categories else 5
    
    def get_knowledge_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∑–Ω–∞–Ω–∏–π"""
        return {
            'total_categories': len(self.knowledge_base),
            'available_methods': sum(len(cat.get('methods', [])) for cat in self.knowledge_base.values()),
            'response_templates': sum(len(templates) for templates in self.response_templates.values()),
            'neural_network_available': ML_AVAILABLE and self.model is not None,
            'training_data_size': len(self.training_data)
        }

class NeuralNetwork(nn.Module):
    """–ü—Ä–æ—Å—Ç–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self, input_size: int, hidden_size: int, output_size: int):
        super(NeuralNetwork, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.relu = nn.ReLU()
        self.dropout = nn.Dropout(0.2)
        self.fc2 = nn.Linear(hidden_size, hidden_size // 2)
        self.fc3 = nn.Linear(hidden_size // 2, output_size)
    
    def forward(self, x):
        x = self.fc1(x)
        x = self.relu(x)
        x = self.dropout(x)
        x = self.fc2(x)
        x = self.relu(x)
        x = self.fc3(x)
        return x

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
neural_rubin = EnhancedNeuralRubinAI()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_questions = [
        "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x^2 + 5x + 6 = 0",
        "–ù–∞–ø–∏—à–∏ –∫–æ–¥ –Ω–∞ Python –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞",
        "–†–∞—Å—Å—á–∏—Ç–∞–π —Ç–æ–∫ –≤ —Ü–µ–ø–∏ —Å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ–º 10 –û–º –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ–º 220 –í",
        "–°–æ–∑–¥–∞–π –ø—Ä–æ–≥—Ä–∞–º–º—É PLC –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º",
        "–†–∞—Å—Å—á–∏—Ç–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω—Ç–µ–Ω–Ω—ã –¥–ª—è —á–∞—Å—Ç–æ—Ç—ã 2.4 –ì–ì—Ü"
    ]
    
    print("üß† –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENHANCED NEURAL RUBIN AI")
    print("=" * 50)
    
    for question in test_questions:
        print(f"\nüìù –í–æ–ø—Ä–æ—Å: {question}")
        response = neural_rubin.generate_response(question)
        print(f"üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {response['category']}")
        print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response['confidence']:.2f}")
        print(f"üí° –û—Ç–≤–µ—Ç: {response['response']}")
        print("-" * 30)
    
    # –°–≤–æ–¥–∫–∞ –∑–Ω–∞–Ω–∏–π
    knowledge = neural_rubin.get_knowledge_summary()
    print(f"\nüìö –°–í–û–î–ö–ê –ó–ù–ê–ù–ò–ô:")
    print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {knowledge['total_categories']}")
    print(f"–ú–µ—Ç–æ–¥–æ–≤: {knowledge['available_methods']}")
    print(f"–®–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤: {knowledge['response_templates']}")
    print(f"–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å: {'‚úÖ' if knowledge['neural_network_available'] else '‚ùå'}")
