#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Mathematical Response Formatter
==============================

–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥.
"""

import logging
from typing import Dict, Any
from datetime import datetime

class MathematicalResponseFormatter:
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    def create_structured_response(self, solution: Dict[str, Any], 
                                 category: str, processing_time: float) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
        formatted_response = self.format_solution(solution, category)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        response = {
            "response": formatted_response,
            "provider": "Mathematical Solver",
            "category": f"mathematics_{category}",
            "solution_data": {
                "problem_type": category,
                "final_answer": solution.get("final_answer", "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"),
                "confidence": solution.get("confidence", 0.0),
                "steps": solution.get("steps", []),
                "explanation": solution.get("explanation", ""),
                "verification": solution.get("verification", False)
            },
            "processing_time": processing_time,
            "timestamp": datetime.now().isoformat(),
            "success": True
        }
        
        self.logger.info(f"–°–æ–∑–¥–∞–Ω —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è {category}")
        return response
    
    def format_solution(self, solution: Dict[str, Any], category: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_emoji = {
            "geometry": "üìê",
            "physics": "‚ö°",
            "arithmetic": "üî¢"
        }
        
        emoji = category_emoji.get(category, "üßÆ")
        category_name = {
            "geometry": "–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞",
            "physics": "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞", 
            "arithmetic": "–ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞"
        }.get(category, "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞")
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        formatted = f"{emoji} **{category_name}**\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        steps = solution.get("steps", [])
        if steps:
            formatted += "**üìã –ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ:**\n"
            for i, step in enumerate(steps, 1):
                formatted += f"{i}. {step}\n"
            formatted += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        final_answer = solution.get("final_answer", "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        formatted += f"**‚úÖ –û—Ç–≤–µ—Ç: {final_answer}**\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        explanation = solution.get("explanation", "")
        if explanation:
            formatted += f"**üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {explanation}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence = solution.get("confidence", 0.0)
        if confidence > 0:
            confidence_percent = confidence * 100
            formatted += f"**üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {confidence_percent:.0f}%\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
        verification = solution.get("verification", False)
        if verification:
            formatted += "**‚úì –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ**"
        
        return formatted
    
    def format_error_response(self, error_message: str, category: str = None) -> Dict[str, Any]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ"""
        
        response = {
            "response": f"‚ùå **–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏**\n\n{error_message}",
            "provider": "Mathematical Solver",
            "category": f"mathematics_{category}" if category else "mathematics_error",
            "success": False,
            "error": error_message,
            "timestamp": datetime.now().isoformat()
        }
        
        return response
    
    def format_simple_response(self, answer: str, category: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π"""
        
        category_emoji = {
            "geometry": "üìê",
            "physics": "‚ö°", 
            "arithmetic": "üî¢"
        }
        
        emoji = category_emoji.get(category, "üßÆ")
        return f"{emoji} **–û—Ç–≤–µ—Ç:** {answer}"

















