#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π API —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π Smart Dispatcher —Å –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ë–∞–∑–æ–π –ó–Ω–∞–Ω–∏–π
"""

from flask import Flask, request, jsonify
import logging
import json
from datetime import datetime
from enhanced_smart_dispatcher import get_enhanced_dispatcher
from intelligent_knowledge_chat import get_rubin_chat

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
enhanced_dispatcher = get_enhanced_dispatcher()
knowledge_chat = get_rubin_chat()

@app.route('/api/enhanced/chat', methods=['POST'])
def enhanced_chat():
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —á–∞—Ç —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    try:
        data = request.get_json()
        message = data.get('message', '')
        user_id = data.get('user_id', 'default')
        enable_knowledge = data.get('enable_knowledge', True)
        
        if not message:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        logger.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {message[:50]}...")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        dispatcher_result = enhanced_dispatcher.route_question(message)
        
        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
        knowledge_enhancement = ""
        if enable_knowledge:
            try:
                knowledge_result = knowledge_chat.process_message(message, user_id)
                if knowledge_result and len(knowledge_result) > 100:
                    knowledge_enhancement = f"\n\n**üß† –î–û–ü–û–õ–ù–ï–ù–ò–Ø –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô:**\n{knowledge_result}"
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        final_response = dispatcher_result['response']
        if knowledge_enhancement:
            final_response += knowledge_enhancement
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        meta_info = f"""
        
**üìä –ú–ï–¢–ê–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–¢–í–ï–¢–ê:**
‚Ä¢ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(final_response)} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏: {dispatcher_result['complexity']['detail_level']}/4
‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞: {dispatcher_result['complexity']['level']}
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–æ–¥—É–ª–µ–º: {dispatcher_result['server_type']}
‚Ä¢ –£–ª—É—á—à–µ–Ω –∑–Ω–∞–Ω–∏—è–º–∏: {'–î–∞' if knowledge_enhancement else '–ù–µ—Ç'}
‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ~{dispatcher_result['complexity']['estimated_time']} —Å–µ–∫—É–Ω–¥
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ' if dispatcher_result['success'] else '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏'}
"""
        
        final_response += meta_info
        
        return jsonify({
            'response': final_response,
            'user_id': user_id,
            'timestamp': datetime.now().isoformat(),
            'metadata': {
                'success': dispatcher_result['success'],
                'server_type': dispatcher_result['server_type'],
                'complexity': dispatcher_result['complexity'],
                'response_length': len(final_response),
                'enhanced': dispatcher_result['enhanced'],
                'knowledge_integration': bool(knowledge_enhancement)
            }
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ enhanced chat endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/enhanced/analyze', methods=['POST'])
def analyze_question():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
    try:
        data = request.get_json()
        question = data.get('question', '')
        
        if not question:
            return jsonify({'error': '–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        complexity = enhanced_dispatcher.analyze_question_complexity(question)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ—Ä–≤–µ—Ä–∞
        server_type = enhanced_dispatcher._determine_server_type(question)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        server_info = enhanced_dispatcher.servers.get(server_type, {})
        server_available = False
        
        if server_info:
            try:
                import requests
                health_url = f"http://localhost:{server_info['port']}{server_info['endpoint']}"
                response = requests.get(health_url, timeout=2)
                server_available = response.status_code == 200
            except:
                server_available = False
        
        return jsonify({
            'question': question,
            'analysis': {
                'complexity': complexity,
                'server_type': server_type,
                'server_available': server_available,
                'estimated_response_length': complexity['detail_level'] * 5000 + 2000,
                'processing_time': complexity['estimated_time']
            },
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ analyze endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/enhanced/stats', methods=['GET'])
def get_enhanced_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        dispatcher_stats = enhanced_dispatcher.get_system_stats()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        knowledge_stats = knowledge_chat.get_knowledge_stats()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_stats = {
            'dispatcher': dispatcher_stats,
            'knowledge_base': knowledge_stats,
            'integration': {
                'knowledge_base_integration': enhanced_dispatcher.knowledge_base_integration,
                'enhanced_responses': True,
                'detailed_analysis': True
            },
            'timestamp': datetime.now().isoformat()
        }
        
        return jsonify(total_stats)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ stats endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/enhanced/configure', methods=['POST'])
def configure_enhanced():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    try:
        data = request.get_json()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
        if 'knowledge_integration' in data:
            enhanced_dispatcher.knowledge_base_integration = data['knowledge_integration']
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        if 'response_templates' in data:
            enhanced_dispatcher.response_templates.update(data['response_templates'])
        
        return jsonify({
            'status': 'success',
            'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            'settings': {
                'knowledge_integration': enhanced_dispatcher.knowledge_base_integration,
                'response_templates_count': len(enhanced_dispatcher.response_templates)
            }
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ configure endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/enhanced/health', methods=['GET'])
def enhanced_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        dispatcher_stats = enhanced_dispatcher.get_system_stats()
        knowledge_available = dispatcher_stats['knowledge_base_available']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if dispatcher_stats['available_servers'] >= 5 and knowledge_available:
            status = 'excellent'
            message = '–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ç–ª–∏—á–Ω–æ'
        elif dispatcher_stats['available_servers'] >= 3:
            status = 'good'
            message = '–û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç'
        else:
            status = 'degraded'
            message = '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏—Å—Ç–µ–º—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
        
        return jsonify({
            'status': status,
            'message': message,
            'components': {
                'dispatcher': 'healthy',
                'knowledge_base': 'healthy' if knowledge_available else 'unavailable',
                'servers_available': dispatcher_stats['available_servers'],
                'total_servers': dispatcher_stats['total_servers']
            },
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ health check: {e}")
        return jsonify({
            'status': 'unhealthy',
            'error': str(e)
        }), 500

@app.route('/api/enhanced/demo', methods=['GET'])
def demo_enhanced():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        demo_questions = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–∫–æ–Ω –û–º–∞?",
            "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x^2 + 5x + 6 = 0",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä?",
            "–ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ Python –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏",
            "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –ü–õ–ö"
        ]
        
        demo_results = []
        
        for question in demo_questions:
            result = enhanced_dispatcher.route_question(question)
            demo_results.append({
                'question': question,
                'success': result['success'],
                'server_type': result['server_type'],
                'complexity': result['complexity']['level'],
                'response_length': result['response_length'],
                'preview': result['response'][:200] + "..." if len(result['response']) > 200 else result['response']
            })
        
        return jsonify({
            'demo_results': demo_results,
            'summary': {
                'total_questions': len(demo_questions),
                'successful_responses': sum(1 for r in demo_results if r['success']),
                'average_response_length': sum(r['response_length'] for r in demo_results) // len(demo_results),
                'complexity_distribution': {
                    'simple': sum(1 for r in demo_results if r['complexity'] == 'simple'),
                    'medium': sum(1 for r in demo_results if r['complexity'] == 'medium'),
                    'complex': sum(1 for r in demo_results if r['complexity'] == 'complex'),
                    'expert': sum(1 for r in demo_results if r['complexity'] == 'expert')
                }
            },
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ demo endpoint: {e}")
        return jsonify({'error': str(e)}), 500

@app.errorhandler(404)
def not_found(error):
    return jsonify({'error': 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞ Rubin AI")
    print("üì° –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
    print("  POST /api/enhanced/chat - –£–ª—É—á—à–µ–Ω–Ω—ã–π —á–∞—Ç —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏")
    print("  POST /api/enhanced/analyze - –ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–∞")
    print("  GET  /api/enhanced/stats - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("  POST /api/enhanced/configure - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print("  GET  /api/enhanced/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    print("  GET  /api/enhanced/demo - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.run(host='0.0.0.0', port=8094, debug=True)