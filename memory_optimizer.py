#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø–∞–º—è—Ç–∏ –¥–ª—è Rubin AI v2.0
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
"""

import psutil
import gc
import time
import logging
from datetime import datetime
from typing import Dict, List, Optional
import threading

class MemoryOptimizer:
    """–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø–∞–º—è—Ç–∏ –¥–ª—è Rubin AI"""
    
    def __init__(self, threshold_mb: int = 500, cleanup_interval: int = 300):
        self.threshold_mb = threshold_mb
        self.cleanup_interval = cleanup_interval
        self.logger = logging.getLogger("rubin_ai.memory_optimizer")
        self.is_monitoring = False
        self.monitor_thread = None
        
    def get_memory_usage(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"""
        process = psutil.Process()
        memory_info = process.memory_info()
        
        return {
            'rss_mb': memory_info.rss / 1024 / 1024,  # –§–∏–∑–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å
            'vms_mb': memory_info.vms / 1024 / 1024,  # –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å
            'percent': process.memory_percent(),
            'available_mb': psutil.virtual_memory().available / 1024 / 1024
        }
    
    def cleanup_memory(self) -> Dict[str, float]:
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
        before = self.get_memory_usage()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        collected = gc.collect()
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            import sys
            # –û—á–∏—Å—Ç–∫–∞ –º–æ–¥—É–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
            modules_to_remove = []
            for module_name, module in sys.modules.items():
                if hasattr(module, '__file__') and module.__file__:
                    if 'cache' in module_name.lower() or 'temp' in module_name.lower():
                        modules_to_remove.append(module_name)
            
            for module_name in modules_to_remove:
                if module_name in sys.modules:
                    del sys.modules[module_name]
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –º–æ–¥—É–ª–µ–π: {e}")
        
        after = self.get_memory_usage()
        
        return {
            'before_mb': before['rss_mb'],
            'after_mb': after['rss_mb'],
            'freed_mb': before['rss_mb'] - after['rss_mb'],
            'collected_objects': collected
        }
    
    def should_optimize(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞–º—è—Ç—å"""
        memory_usage = self.get_memory_usage()
        return memory_usage['rss_mb'] > self.threshold_mb
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏"""
        if self.is_monitoring:
            return
            
        self.is_monitoring = True
        self.monitor_thread = threading.Thread(target=self._monitor_loop, daemon=True)
        self.monitor_thread.start()
        self.logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ –∑–∞–ø—É—â–µ–Ω")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏"""
        self.is_monitoring = False
        if self.monitor_thread:
            self.monitor_thread.join()
        self.logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.is_monitoring:
            try:
                if self.should_optimize():
                    self.logger.warning("–ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –ø–∞–º—è—Ç–∏, –∑–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
                    result = self.cleanup_memory()
                    self.logger.info(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {result['freed_mb']:.2f} –ú–ë")
                
                time.sleep(self.cleanup_interval)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø–∞–º—è—Ç–∏: {e}")
                time.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def get_system_stats(self) -> Dict[str, any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        memory = psutil.virtual_memory()
        cpu = psutil.cpu_percent(interval=1)
        
        return {
            'timestamp': datetime.now().isoformat(),
            'memory': {
                'total_mb': memory.total / 1024 / 1024,
                'available_mb': memory.available / 1024 / 1024,
                'used_mb': memory.used / 1024 / 1024,
                'percent': memory.percent
            },
            'cpu_percent': cpu,
            'process_memory': self.get_memory_usage()
        }

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏"""
    logging.basicConfig(level=logging.INFO)
    
    optimizer = MemoryOptimizer(threshold_mb=200, cleanup_interval=30)
    
    print("üß† Rubin AI Memory Optimizer")
    print("=" * 40)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = optimizer.get_system_stats()
    print(f"üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –ü–∞–º—è—Ç—å —Å–∏—Å—Ç–µ–º—ã: {stats['memory']['used_mb']:.1f} –ú–ë / {stats['memory']['total_mb']:.1f} –ú–ë ({stats['memory']['percent']:.1f}%)")
    print(f"  –ü–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞: {stats['process_memory']['rss_mb']:.1f} –ú–ë")
    print(f"  CPU: {stats['cpu_percent']:.1f}%")
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    optimizer.start_monitoring()
    
    try:
        print("\n‚è≥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        while True:
            time.sleep(10)
            stats = optimizer.get_system_stats()
            print(f"üìà –ü–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞: {stats['process_memory']['rss_mb']:.1f} –ú–ë")
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        optimizer.stop_monitoring()
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()







