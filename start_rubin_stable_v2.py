#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°—Ç–∞–±–∏–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ Rubin AI v2.0 —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º
"""

import os
import sys
import time
import subprocess
import signal
import psutil
import socket
from pathlib import Path

class RubinStarter:
    def __init__(self):
        self.processes = []
        self.ports = {
            'ai_chat': 8084,
            'static_web': 8085,
            'electrical': 8087,
            'documents': 8088,
            'radiomechanics': 8089,
            'controllers': 8090
        }
    
    def is_port_in_use(self, port):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç"""
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(1)
                result = s.connect_ex(('localhost', port))
                return result == 0
        except:
            return False
    
    def kill_process_on_port(self, port):
        """–£–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É"""
        try:
            for proc in psutil.process_iter(['pid', 'name', 'connections']):
                try:
                    if proc.info['connections']:
                        for conn in proc.info['connections']:
                            if conn.laddr.port == port:
                                print(f"–ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å {proc.info['name']} (PID: {proc.info['pid']}) –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                                proc.kill()
                                print(f"–ü—Ä–æ—Ü–µ—Å—Å {proc.info['pid']} –∑–∞–≤–µ—Ä—à–µ–Ω")
                                time.sleep(1)
                                return True
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    continue
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –ø–æ—Ä—Ç–∞ {port}: {e}")
        return False
    
    def kill_all_python_processes(self):
        """–£–±–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)"""
        try:
            for proc in psutil.process_iter(['pid', 'name']):
                try:
                    if 'python' in proc.info['name'].lower():
                        print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ Python: {proc.info['name']} (PID: {proc.info['pid']})")
                        proc.kill()
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    continue
            time.sleep(2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python: {e}")
    
    def start_server(self, name, script_path, port):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        try:
            if self.is_port_in_use(port):
                print(f"–ü–æ—Ä—Ç {port} –∑–∞–Ω—è—Ç, –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º...")
                self.kill_process_on_port(port)
                time.sleep(1)
            
            if self.is_port_in_use(port):
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç {port}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º {name}")
                return False
            
            print(f"–ó–∞–ø—É—Å–∫ {name} –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
            process = subprocess.Popen(
                [sys.executable, script_path],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                creationflags=subprocess.CREATE_NEW_PROCESS_GROUP if os.name == 'nt' else 0
            )
            
            self.processes.append((name, process, port))
            time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            
            if self.is_port_in_use(port):
                print(f"‚úÖ {name} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
                return True
            else:
                print(f"‚ùå {name} –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                return False
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {e}")
            return False
    
    def start_all_servers(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã"""
        print("üéØ –°–¢–ê–ë–ò–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö RUBIN AI v2.0")
        print("=" * 60)
        
        # –°–Ω–∞—á–∞–ª–∞ —É–±–∏–≤–∞–µ–º –≤—Å–µ Python –ø—Ä–æ—Ü–µ—Å—Å—ã
        print("üîß –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        self.kill_all_python_processes()
        time.sleep(3)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã
        servers = [
            ("AI –ß–∞—Ç (–û—Å–Ω–æ–≤–Ω–æ–π)", "api/rubin_ai_v2_server.py", 8084),
            ("–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞", "api/electrical_api.py", 8087),
            ("–†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞", "api/radiomechanics_api.py", 8089),
            ("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã", "api/controllers_api.py", 8090),
            ("–î–æ–∫—É–º–µ–Ω—Ç—ã", "api/documents_api.py", 8088),
            ("–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –í–µ–±-—Å–µ—Ä–≤–µ—Ä", "static_web_server.py", 8085)
        ]
        
        successful_servers = []
        
        for name, script, port in servers:
            if self.start_server(name, script, port):
                successful_servers.append((name, port))
        
        return successful_servers
    
    def check_server_status(self, port):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            import requests
            response = requests.get(f"http://localhost:{port}/health", timeout=5)
            return response.status_code == 200
        except:
            return False
    
    def show_status(self, successful_servers):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        print("\n" + "=" * 60)
        print("üìä –°–¢–ê–¢–£–° –ó–ê–ü–£–©–ï–ù–ù–´–• –°–ï–†–í–ï–†–û–í:")
        print("=" * 60)
        
        for name, port in successful_servers:
            if self.check_server_status(port):
                print(f"‚úÖ {name}: –û–ù–õ–ê–ô–ù (–ø–æ—Ä—Ç {port})")
            else:
                print(f"‚ùå {name}: –û–§–§–õ–ê–ô–ù (–ø–æ—Ä—Ç {port})")
        
        print("\nüåê –î–û–°–¢–£–ü–ù–´–ï –ò–ù–¢–ï–†–§–ï–ô–°–´:")
        print("   ü§ñ AI –ß–∞—Ç: http://localhost:8084/RubinIDE.html")
        print("   ‚öôÔ∏è Developer: http://localhost:8084/RubinDeveloper.html")
        print("   üìä –°—Ç–∞—Ç—É—Å: http://localhost:8084/status_check.html")
        print("   üìö –î–æ–∫—É–º–µ–Ω—Ç—ã: http://localhost:8088/DocumentsManager.html")
        print("   üåê –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π: http://localhost:8085/RubinIDE.html")
        
        print("\nüîç –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï API:")
        print("   ‚ö° –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞: http://localhost:8087/api/electrical/status")
        print("   üì° –†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞: http://localhost:8089/api/radiomechanics/status")
        print("   üéõÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã: http://localhost:8090/api/controllers/status")
        print("   üìö –î–æ–∫—É–º–µ–Ω—Ç—ã API: http://localhost:8088/health")
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        for name, process, port in self.processes:
            try:
                process.terminate()
                process.wait(timeout=5)
                print(f"‚úÖ {name} –∑–∞–≤–µ—Ä—à–µ–Ω")
            except:
                try:
                    process.kill()
                    print(f"üî® {name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                except:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å {name}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        try:
            successful_servers = self.start_all_servers()
            
            if not successful_servers:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞!")
                return False
            
            self.show_status(successful_servers)
            
            print("\n‚è≥ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                pass
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
        finally:
            self.cleanup()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    starter = RubinStarter()
    success = starter.run()
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()






















