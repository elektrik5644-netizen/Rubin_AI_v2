#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã Rubin AI —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π MCSetup
"""

import subprocess
import time
import requests
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_service(port, service_name, timeout=10):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        response = requests.get(f"http://localhost:{port}/api/health", timeout=timeout)
        return response.status_code == 200
    except:
        return False

def start_service(script_name, service_name, port=None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å"""
    try:
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {service_name}...")
        process = subprocess.Popen(
            ['python', script_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
        if port:
            for i in range(30):  # –ñ–¥–µ–º –¥–æ 30 —Å–µ–∫—É–Ω–¥
                if check_service(port, service_name, timeout=2):
                    logger.info(f"‚úÖ {service_name} –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                    return process
                time.sleep(1)
            
            logger.warning(f"‚ö†Ô∏è {service_name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        
        return process
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {service_name}: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã Rubin AI —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π MCSetup")
    logger.info("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    services = [
        {
            'script': 'smart_dispatcher.py',
            'name': 'Smart Dispatcher',
            'port': 8080,
            'required': True
        },
        {
            'script': 'mcsetup_bridge_server.py',
            'name': 'MCSetup Bridge',
            'port': 8096,
            'required': True
        },
        {
            'script': 'graph_analyzer_server.py',
            'name': 'Graph Analyzer',
            'port': 8097,
            'required': True
        },
        {
            'script': 'general_server.py',
            'name': 'General Server',
            'port': 8085,
            'required': False
        },
        {
            'script': 'math_server.py',
            'name': 'Math Server',
            'port': 8086,
            'required': False
        },
        {
            'script': 'electrical_server.py',
            'name': 'Electrical Server',
            'port': 8087,
            'required': False
        },
        {
            'script': 'programming_server.py',
            'name': 'Programming Server',
            'port': 8088,
            'required': False
        },
        {
            'script': 'controllers_server.py',
            'name': 'Controllers Server',
            'port': 9000,
            'required': False
        },
        {
            'script': 'gai_server.py',
            'name': 'GAI Server',
            'port': 8104,
            'required': False
        }
    ]
    
    processes = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    for service in services:
        if service['required']:
            process = start_service(service['script'], service['name'], service['port'])
            if process:
                processes.append((process, service['name']))
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å {service['name']}")
                return False
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
    time.sleep(5)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    for service in services:
        if service['required']:
            if check_service(service['port'], service['name']):
                logger.info(f"‚úÖ {service['name']} —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                logger.error(f"‚ùå {service['name']} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
    for service in services:
        if not service['required']:
            process = start_service(service['script'], service['name'], service['port'])
            if process:
                processes.append((process, service['name']))
                time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    logger.info("üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    time.sleep(3)
    
    for service in services:
        if check_service(service['port'], service['name']):
            logger.info(f"‚úÖ {service['name']} ({service['port']}) - —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            logger.warning(f"‚ö†Ô∏è {service['name']} ({service['port']}) - –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é MCSetup
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ MCSetup...")
    try:
        # –¢–µ—Å—Ç MCSetup Bridge
        response = requests.post(
            "http://localhost:8096/api/mcsetup/status",
            timeout=5
        )
        if response.status_code == 200:
            logger.info("‚úÖ MCSetup Bridge - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            logger.warning("‚ö†Ô∏è MCSetup Bridge - –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
        
        # –¢–µ—Å—Ç Graph Analyzer
        response = requests.post(
            "http://localhost:8097/api/graph/health",
            timeout=5
        )
        if response.status_code == 200:
            logger.info("‚úÖ Graph Analyzer - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            logger.warning("‚ö†Ô∏è Graph Analyzer - –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
        
        # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Rubin AI
        response = requests.post(
            "http://localhost:8080/api/chat",
            json={'message': '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ—Ç–æ—Ä–æ–≤ MCSetup'},
            timeout=10
        )
        if response.status_code == 200:
            logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Rubin AI - —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            logger.warning("‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Rubin AI - –ø—Ä–æ–±–ª–µ–º—ã")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
    
    logger.info("=" * 60)
    logger.info("üéâ –°–∏—Å—Ç–µ–º–∞ Rubin AI —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π MCSetup –∑–∞–ø—É—â–µ–Ω–∞!")
    logger.info("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
    logger.info("  - Smart Dispatcher: http://localhost:8080")
    logger.info("  - MCSetup Bridge: http://localhost:8096")
    logger.info("  - Graph Analyzer: http://localhost:8097")
    logger.info("  - General Server: http://localhost:8085")
    logger.info("  - Math Server: http://localhost:8086")
    logger.info("  - Electrical Server: http://localhost:8087")
    logger.info("  - Programming Server: http://localhost:8088")
    logger.info("  - Controllers Server: http://localhost:9000")
    logger.info("  - GAI Server: http://localhost:8104")
    logger.info("")
    logger.info("üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    logger.info("  - –ê–Ω–∞–ª–∏–∑ –º–æ—Ç–æ—Ä–æ–≤: curl -X POST http://localhost:8096/api/mcsetup/analyze/motors")
    logger.info("  - –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤: curl -X POST http://localhost:8097/api/graph/analyze/motors")
    logger.info("  - –ß–∞—Ç —Å Rubin: curl -X POST http://localhost:8080/api/chat -H 'Content-Type: application/json' -d '{\"message\": \"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ—Ç–æ—Ä—ã MCSetup\"}'")
    logger.info("")
    logger.info("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        for process, name in processes:
            try:
                process.terminate()
                logger.info(f"üõë {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except:
                pass
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    main()



