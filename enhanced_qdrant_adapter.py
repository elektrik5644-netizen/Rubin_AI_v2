#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π Qdrant –∞–¥–∞–ø—Ç–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
"""

import json
import logging
import hashlib
import time
import os
from typing import Dict, List, Optional, Any
from pathlib import Path

try:
    from qdrant_client import QdrantClient
    from qdrant_client.http import models
    from qdrant_client.http.models import Distance, VectorParams, PointStruct
    QDRANT_AVAILABLE = True
except ImportError:
    QDRANT_AVAILABLE = False

try:
    from sentence_transformers import SentenceTransformer
    SENTENCE_TRANSFORMERS_AVAILABLE = True
except ImportError:
    SENTENCE_TRANSFORMERS_AVAILABLE = False

class EnhancedQdrantAdapter:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Qdrant"""
    
    def __init__(self, config_path: str = "config/qdrant_config.json", use_embedded: bool = True):
        self.logger = logging.getLogger("rubin_ai.qdrant_enhanced")
        self.client = None
        self.config = None
        self.embedding_model = None
        self.is_connected = False
        self.use_embedded = use_embedded
        
        if not QDRANT_AVAILABLE:
            self.logger.error("‚ùå Qdrant –∫–ª–∏–µ–Ω—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        self.load_config(config_path)
        self.connect()
        self.initialize_embedding_model()
    
    def load_config(self, config_path: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config_file = Path(config_path)
            if config_file.exists():
                with open(config_file, 'r', encoding='utf-8') as f:
                    self.config = json.load(f)
                self.logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Qdrant –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {config_path}")
            else:
                self.config = {"qdrant": {"use_embedded": True}}
                self.logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.config = {"qdrant": {"use_embedded": True}}
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant"""
        try:
            if self.use_embedded:
                # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
                self.client = QdrantClient(":memory:")
                self.logger.info("‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º Qdrant –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            else:
                # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
                qdrant_config = self.config["qdrant"]
                self.client = QdrantClient(
                    host=qdrant_config["host"],
                    port=qdrant_config["port"],
                    timeout=qdrant_config.get("timeout", 30)
                )
                self.logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            self.is_connected = True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant: {e}")
            self.is_connected = False
    
    def initialize_embedding_model(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
        if not SENTENCE_TRANSFORMERS_AVAILABLE:
            self.logger.warning("‚ö†Ô∏è SentenceTransformers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏")
            return
        
        try:
            self.embedding_model = SentenceTransformer('all-MiniLM-L6-v2')
            self.logger.info("‚úÖ –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
            self.embedding_model = None
    
    def create_embedding(self, text: str) -> List[float]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞"""
        if self.embedding_model:
            try:
                embedding = self.embedding_model.encode(text)
                return embedding.tolist()
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")
        
        # Fallback: –ø—Ä–æ—Å—Ç–æ–π —Ö—ç—à-—ç–º–±–µ–¥–¥–∏–Ω–≥
        return self._create_simple_embedding(text)
    
    def _create_simple_embedding(self, text: str, size: int = 384) -> List[float]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö—ç—à–∞"""
        hash_obj = hashlib.sha256(text.encode('utf-8'))
        hash_bytes = hash_obj.digest()
        
        embedding = []
        for i in range(size):
            byte_index = i % len(hash_bytes)
            embedding.append((hash_bytes[byte_index] - 128) / 128.0)
        
        return embedding
    
    def create_collection(self, collection_name: str, vector_size: int = 384, distance: str = "Cosine"):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ Qdrant"""
        if not self.is_connected:
            self.logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant")
            return False
        
        try:
            collections = self.client.get_collections()
            existing_collections = [col.name for col in collections.collections]
            
            if collection_name in existing_collections:
                self.logger.info(f"üìã –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return True
            
            distance_map = {
                "Cosine": Distance.COSINE,
                "Euclidean": Distance.EUCLID,
                "Dot": Distance.DOT
            }
            
            self.client.create_collection(
                collection_name=collection_name,
                vectors_config=VectorParams(
                    size=vector_size,
                    distance=distance_map.get(distance, Distance.COSINE)
                )
            )
            
            self.logger.info(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} —Å–æ–∑–¥–∞–Ω–∞")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {collection_name}: {e}")
            return False
    
    def add_document(self, collection_name: str, document_id: str, text: str, 
                    metadata: Optional[Dict] = None) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é"""
        if not self.is_connected:
            return False
        
        try:
            embedding = self.create_embedding(text)
            
            payload = {
                "text": text,
                "timestamp": time.time(),
                "document_id": document_id
            }
            if metadata:
                payload.update(metadata)
            
            point = PointStruct(
                id=document_id,
                vector=embedding,
                payload=payload
            )
            
            self.client.upsert(
                collection_name=collection_name,
                points=[point]
            )
            
            self.logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç {document_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ {collection_name}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return False
    
    def search_similar(self, collection_name: str, query_text: str, 
                      limit: int = 10, score_threshold: float = 0.7) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        if not self.is_connected:
            return []
        
        try:
            query_embedding = self.create_embedding(query_text)
            
            search_result = self.client.search(
                collection_name=collection_name,
                query_vector=query_embedding,
                limit=limit,
                score_threshold=score_threshold
            )
            
            results = []
            for point in search_result:
                results.append({
                    "id": point.id,
                    "score": point.score,
                    "text": point.payload.get("text", ""),
                    "metadata": {k: v for k, v in point.payload.items() if k != "text"}
                })
            
            self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            return results
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return []
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞"""
        return {
            "connected": self.is_connected,
            "qdrant_available": QDRANT_AVAILABLE,
            "embedding_model_available": SENTENCE_TRANSFORMERS_AVAILABLE,
            "embedding_model_loaded": self.embedding_model is not None,
            "use_embedded": self.use_embedded,
            "timestamp": time.time()
        }
