#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ—Å—Ç–∞ Gemini-Rubin
"""

import requests
import json
import time

BRIDGE_URL = "http://localhost:8082"

def test_bridge_status():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ—Å—Ç–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ—Å—Ç–∞...")
    try:
        response = requests.get(f"{BRIDGE_URL}/api/gemini/status", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ú–æ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {data.get('bridge')}")
            print(f"üìä Rubin AI: {data.get('rubin_ai_status')}")
            print(f"üî¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {data.get('active_sessions')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: HTTP {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_teaching():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—É—á–µ–Ω–∏–µ Rubin"""
    print("\nüìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è Rubin...")
    
    teaching_instructions = [
        {
            "instruction": "–ü—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∏ –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π —Ñ–æ—Ä–º—É–ª—ã –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã",
            "context": "electrical"
        },
        {
            "instruction": "–ü—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö –≤–∫–ª—é—á–∞–π –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
            "context": "controllers"
        },
        {
            "instruction": "–ü—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏",
            "context": "mathematics"
        }
    ]
    
    for i, instruction in enumerate(teaching_instructions, 1):
        print(f"\n{i}. –û–±—É—á–µ–Ω–∏–µ: {instruction['instruction'][:50]}...")
        try:
            response = requests.post(
                f"{BRIDGE_URL}/api/gemini/teach",
                json=instruction,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('status') == 'success':
                    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {data.get('message')}")
                    print(f"   üìù –û—Ç–≤–µ—Ç Rubin: {data.get('rubin_ai_response', 'OK')[:100]}...")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {data.get('message')}")
            else:
                print(f"   ‚ùå HTTP {response.status_code}: {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        time.sleep(1)

def test_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ Rubin"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ Rubin...")
    
    analysis_requests = [
        {
            "type": "performance",
            "query": "–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã Rubin AI?"
        },
        {
            "type": "architecture", 
            "query": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Rubin"
        },
        {
            "type": "optimization",
            "query": "–ö–∞–∫–∏–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤?"
        }
    ]
    
    for i, request_data in enumerate(analysis_requests, 1):
        print(f"\n{i}. –ê–Ω–∞–ª–∏–∑ ({request_data['type']}): {request_data['query'][:50]}...")
        try:
            response = requests.post(
                f"{BRIDGE_URL}/api/gemini/analyze",
                json=request_data,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('status') == 'success':
                    print(f"   ‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω")
                    print(f"   üìä –û—Ç–≤–µ—Ç Rubin: {data.get('rubin_ai_response', '')[:150]}...")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {data.get('message')}")
            else:
                print(f"   ‚ùå HTTP {response.status_code}: {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        time.sleep(1)

def test_feedback():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"""
    print("\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...")
    
    feedback_data = {
        "type": "improvement",
        "content": "Rubin –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö. –†–µ–∫–æ–º–µ–Ω–¥—É—é –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤.",
        "category": "general"
    }
    
    try:
        response = requests.post(
            f"{BRIDGE_URL}/api/gemini/feedback",
            json=feedback_data,
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('status') == 'success':
                print(f"‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–µ—Ä–µ–¥–∞–Ω–∞: {data.get('message')}")
                print(f"üìù –û—Ç–≤–µ—Ç Rubin: {data.get('rubin_ai_response', 'OK')[:100]}...")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {data.get('message')}")
        else:
            print(f"‚ùå HTTP {response.status_code}: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def get_sessions_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏—è—Ö"""
    print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏—è—Ö –æ–±—É—á–µ–Ω–∏—è...")
    try:
        response = requests.get(f"{BRIDGE_URL}/api/gemini/sessions", timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get('status') == 'success':
                stats = data.get('statistics', {})
                print(f"üìà –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {stats.get('total_sessions', 0)}")
                print(f"üîÑ –í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {stats.get('total_interactions', 0)}")
                print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏–π: {stats.get('successful_teachings', 0)}")
                print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏–π: {stats.get('failed_teachings', 0)}")
                
                categories = stats.get('categories_taught', {})
                if categories:
                    print("üìö –û–±—É—á–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
                    for category, count in categories.items():
                        print(f"   ‚Ä¢ {category}: {count} —Ä–∞–∑")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {data.get('message')}")
        else:
            print(f"‚ùå HTTP {response.status_code}: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    print("üåâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ—Å—Ç–∞ Gemini-Rubin")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ—Å—Ç–∞
    if not test_bridge_status():
        print("‚ùå –ú–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ gemini_rubin_bridge.py –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8082")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_teaching()
    test_analysis()
    test_feedback()
    get_sessions_info()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üí° –¢–µ–ø–µ—Ä—å Gemini –º–æ–∂–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å Rubin —á–µ—Ä–µ–∑ –º–æ—Å—Ç")

if __name__ == "__main__":
    main()






