#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import json

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    print("=== –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• RUBIN AI ===\n")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect("rubin_ai_v2.db")
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        print(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {[table[0] for table in tables]}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        cursor.execute("SELECT COUNT(*) FROM documents")
        doc_count = cursor.fetchone()[0]
        print(f"üìÑ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {doc_count}")
        
        if doc_count > 0:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            cursor.execute("""
                SELECT category, COUNT(*) as count 
                FROM documents 
                GROUP BY category 
                ORDER BY count DESC
            """)
            categories = cursor.fetchall()
            
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            for category, count in categories:
                print(f"   {category}: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            cursor.execute("""
                SELECT file_name, category, created_at, LENGTH(content) as content_length
                FROM documents 
                ORDER BY created_at DESC 
                LIMIT 10
            """)
            recent_docs = cursor.fetchall()
            
            print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
            for doc in recent_docs:
                file_name, category, created_at, content_length = doc
                print(f"   üìÑ {file_name} ({category}) - {content_length} —Å–∏–º–≤–æ–ª–æ–≤ - {created_at}")
            
            # –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            keywords = ["–ü–ò–î", "—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞", "Python", "–∞–Ω—Ç–µ–Ω–Ω–∞", "–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä"]
            
            print(f"\nüîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:")
            for keyword in keywords:
                cursor.execute("""
                    SELECT file_name, category 
                    FROM documents 
                    WHERE content LIKE ? OR file_name LIKE ?
                    LIMIT 5
                """, (f'%{keyword}%', f'%{keyword}%'))
                
                results = cursor.fetchall()
                print(f"   '{keyword}': {len(results)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                for result in results:
                    print(f"      - {result[0]} ({result[1]})")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        try:
            cursor.execute("SELECT COUNT(*) FROM document_vectors")
            vector_count = cursor.fetchone()[0]
            print(f"\nüß† –í–µ–∫—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {vector_count}")
        except:
            print(f"\nüß† –¢–∞–±–ª–∏—Ü–∞ –≤–µ–∫—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        conn.close()
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

def search_specific_content():
    """–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
    
    print(f"\n=== –ü–û–ò–°–ö –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –°–û–î–ï–†–ñ–ò–ú–û–ì–û ===")
    
    try:
        conn = sqlite3.connect("rubin_ai_v2.db")
        cursor = conn.cursor()
        
        # –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞–º–∏
        cursor.execute("""
            SELECT file_name, category, SUBSTR(content, 1, 200) as preview
            FROM documents 
            WHERE content LIKE '%–ü–ò–î%' OR content LIKE '%PID%'
            LIMIT 3
        """)
        
        pid_docs = cursor.fetchall()
        print(f"\nüéØ –î–æ–∫—É–º–µ–Ω—Ç—ã —Å –ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞–º–∏:")
        for doc in pid_docs:
            file_name, category, preview = doc
            print(f"   üìÑ {file_name} ({category})")
            print(f"      –ü—Ä–µ–≤—å—é: {preview}...")
            print()
        
        # –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å Python
        cursor.execute("""
            SELECT file_name, category, SUBSTR(content, 1, 200) as preview
            FROM documents 
            WHERE content LIKE '%Python%' OR content LIKE '%python%'
            LIMIT 3
        """)
        
        python_docs = cursor.fetchall()
        print(f"üêç –î–æ–∫—É–º–µ–Ω—Ç—ã —Å Python:")
        for doc in python_docs:
            file_name, category, preview = doc
            print(f"   üìÑ {file_name} ({category})")
            print(f"      –ü—Ä–µ–≤—å—é: {preview}...")
            print()
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

if __name__ == "__main__":
    check_database()
    search_specific_content()