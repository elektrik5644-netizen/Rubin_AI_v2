#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–Ω–∞–Ω–∏–π –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –¥–ª—è Rubin AI
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏, —è–∑—ã–∫–∞—Ö –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö
"""

import re
import logging
from typing import Dict, List, Optional
from datetime import datetime

class ProgrammingKnowledgeHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–Ω–∞–Ω–∏–π –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é
        self.knowledge_base = {
            'cpp_vs_python': {
                'keywords': ['c++', 'python', '—Å—Ä–∞–≤–Ω–∏', 'compare', 'vs', '–ø—Ä–æ—Ç–∏–≤', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', 'automation'],
                'response_ru': """üíª **C++ vs Python –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:**

**C++ - –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
‚Ä¢ **–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å** - –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º—ã–π —è–∑—ã–∫, –±—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
‚Ä¢ **–ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –¥–æ—Å—Ç—É–ø** - –ø—Ä—è–º–∞—è —Ä–∞–±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é, —Ä–µ–≥–∏—Å—Ç—Ä–∞–º–∏, –∂–µ–ª–µ–∑–æ–º
‚Ä¢ **–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å** - –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
‚Ä¢ **–ú–∞–ª–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏** - –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã—Ö —Å–∏—Å—Ç–µ–º
‚Ä¢ **–†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è** - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∂–µ—Å—Ç–∫–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
‚Ä¢ **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å PLC** - –ª–µ–≥–∫–∞—è —Ä–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏

**C++ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:**
‚Ä¢ **–°–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏** - –º–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ **–í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏** - –¥–æ–ª–≥–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é** - —Ä–∏—Å–∫ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏ –∏ –æ—à–∏–±–æ–∫
‚Ä¢ **–ü–æ—Ä—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å** - –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞

---

**Python - –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
‚Ä¢ **–ë—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞** - –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
‚Ä¢ **–ë–æ–≥–∞—Ç—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏** - NumPy, Pandas, Matplotlib, SciPy
‚Ä¢ **–ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏–∑—É—á–µ–Ω–∏—è** - –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –≤—Ö–æ–¥–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
‚Ä¢ **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å** - –±—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ **–ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å** - —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ª—é–±–æ–π –û–°
‚Ä¢ **–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö** - –æ—Ç–ª–∏—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö

**Python - –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:**
‚Ä¢ **–ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å** - –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã–π —è–∑—ã–∫ –º–µ–¥–ª–µ–Ω–Ω–µ–µ
‚Ä¢ **–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏** - –±–æ–ª—å—à–µ RAM —á–µ–º C++
‚Ä¢ **GIL –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è** - –ø—Ä–æ–±–ª–µ–º—ã —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å—é
‚Ä¢ **–ù–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏** - –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–±–æ—Ä—â–∏–∫–∞ –º—É—Å–æ—Ä–∞

---

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É:**

**–í—ã–±–∏—Ä–∞–π—Ç–µ C++ –¥–ª—è:**
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª—è–º–∏ –∏ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞–º–∏
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –∏ PLC
‚Ä¢ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º
‚Ä¢ –í—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

**–í—ã–±–∏—Ä–∞–π—Ç–µ Python –¥–ª—è:**
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏–∏ (SCADA)
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ –ü—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
‚Ä¢ –ú–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —á–µ—Ä–µ–∑ API

**–ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (–ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ):**
‚Ä¢ **C++** - –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ **Python** - –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –æ—Ç—á–µ—Ç—ã
‚Ä¢ **–°–≤—è–∑—å —á–µ—Ä–µ–∑:** TCP/IP, REST API, shared memory, —Ñ–∞–π–ª—ã

**–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏:**
‚Ä¢ C++ + Python —á–µ—Ä–µ–∑ pybind11 –∏–ª–∏ ctypes
‚Ä¢ C++ –¥–ª—è –¥—Ä–∞–π–≤–µ—Ä–æ–≤ PLC, Python –¥–ª—è HMI
‚Ä¢ C++ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã + Python –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚Ä¢ C++ –∞–ª–≥–æ—Ä–∏—Ç–º—ã + Python –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

‚úÖ **–í—ã–≤–æ–¥: –í—ã–±–æ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏. –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥!**""",
                
                'response_en': """üíª **C++ vs Python for Industrial Automation:**

**C++ - Advantages:**
‚Ä¢ **High Performance** - compiled language, fast execution
‚Ä¢ **Low-level Access** - direct memory, register, hardware access
‚Ä¢ **Deterministic** - predictable execution time
‚Ä¢ **Low Memory Usage** - critical for embedded systems
‚Ä¢ **Real-time Support** - hard real-time requirements
‚Ä¢ **PLC Integration** - easy work with industrial protocols

**C++ - Disadvantages:**
‚Ä¢ **Development Complexity** - lots of code for simple tasks
‚Ä¢ **Development Time** - long debugging and testing
‚Ä¢ **Memory Management** - risk of memory leaks and errors
‚Ä¢ **Portability** - platform and compiler dependencies

---

**Python - Advantages:**
‚Ä¢ **Rapid Development** - simple and clear syntax
‚Ä¢ **Rich Libraries** - NumPy, Pandas, Matplotlib, SciPy
‚Ä¢ **Easy to Learn** - low entry barrier for new developers
‚Ä¢ **Interpreted** - fast testing and prototyping
‚Ä¢ **Cross-platform** - works on any OS
‚Ä¢ **Data Analysis** - excellent data processing tools

**Python - Disadvantages:**
‚Ä¢ **Lower Performance** - interpreted language is slower
‚Ä¢ **Memory Usage** - more RAM than C++
‚Ä¢ **GIL Limitations** - multithreading issues
‚Ä¢ **Not Real-time** - unpredictable garbage collector delays

---

**Selection Recommendations:**

**Choose C++ for:**
‚Ä¢ Motor and servo control
‚Ä¢ Real-time signal processing
‚Ä¢ Microcontroller and PLC programming
‚Ä¢ Safety-critical systems
‚Ä¢ High-frequency measurements and control

**Choose Python for:**
‚Ä¢ Monitoring and dispatching (SCADA)
‚Ä¢ Production data analysis
‚Ä¢ Web control interfaces
‚Ä¢ Algorithm prototyping
‚Ä¢ Machine learning for predictive maintenance
‚Ä¢ System integration via APIs

**Hybrid Approach (best solution):**
‚Ä¢ **C++** - real-time critical components
‚Ä¢ **Python** - data analysis, interfaces, reports
‚Ä¢ **Communication via:** TCP/IP, REST API, shared memory, files

**Popular Combinations:**
‚Ä¢ C++ + Python via pybind11 or ctypes
‚Ä¢ C++ for PLC drivers, Python for HMI
‚Ä¢ C++ microservices + Python web interface
‚Ä¢ C++ algorithms + Python analytics

‚úÖ **Conclusion: Choice depends on specific task. For maximum efficiency use hybrid approach!**"""
            },
            
            'industrial_programming': {
                'keywords': ['–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', 'industrial programming', 'plc', 'scada', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è'],
                'response_ru': """üè≠ **–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ:**

## **–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è PLC**

**Ladder Logic (LD):**
‚Ä¢ **–ü—Ä–∏–Ω—Ü–∏–ø:** –í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –≤–∏–¥–µ —Ä–µ–ª–µ–π–Ω—ã—Ö —Å—Ö–µ–º
‚Ä¢ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:** –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–µ–Ω —ç–ª–µ–∫—Ç—Ä–∏–∫–∞–º
‚Ä¢ **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:** –ü—Ä–æ—Å—Ç—ã–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

**Structured Text (ST):**
‚Ä¢ **–ü—Ä–∏–Ω—Ü–∏–ø:** –¢–µ–∫—Å—Ç–æ–≤—ã–π —è–∑—ã–∫ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è (Pascal/C)
‚Ä¢ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:** –ú–æ—â–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
‚Ä¢ **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:** –°–ª–æ–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞

**Function Block Diagram (FBD):**
‚Ä¢ **–ü—Ä–∏–Ω—Ü–∏–ø:** –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞–º–∏
‚Ä¢ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:** –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å, –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
‚Ä¢ **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:** PID-—Ä–µ–≥—É–ª—è—Ç–æ—Ä—ã, —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

## **–°—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏**

**Siemens TIA Portal:**
‚Ä¢ –Ø–∑—ã–∫–∏: LAD, STL, FBD, SCL, GRAPH
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å HMI –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞

**Allen-Bradley Studio 5000:**
‚Ä¢ –Ø–∑—ã–∫–∏: Ladder, Structured Text, Function Block
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å FactoryTalk

**Schneider Electric Unity Pro:**
‚Ä¢ –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å

## **–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã**

‚Ä¢ **Modbus RTU/TCP** - –ø—Ä–æ—Å—Ç–æ–π, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–π
‚Ä¢ **Profibus** - –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π, –Ω–∞–¥–µ–∂–Ω—ã–π  
‚Ä¢ **Ethernet/IP** - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–π
‚Ä¢ **OPC UA** - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π, –±–µ–∑–æ–ø–∞—Å–Ω—ã–π

## **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º**

**–£—Ä–æ–≤–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:**
‚Ä¢ **–£—Ä–æ–≤–µ–Ω—å 0:** –î–∞—Ç—á–∏–∫–∏, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
‚Ä¢ **–£—Ä–æ–≤–µ–Ω—å 1:** –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã (PLC, DCS)
‚Ä¢ **–£—Ä–æ–≤–µ–Ω—å 2:** HMI, SCADA —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ **–£—Ä–æ–≤–µ–Ω—å 3:** MES —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ **–£—Ä–æ–≤–µ–Ω—å 4:** ERP —Å–∏—Å—Ç–µ–º—ã

‚úÖ **–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!**""",
                
                'response_en': """üè≠ **Industrial Programming - Complete Guide:**

## **PLC Programming Languages**

**Ladder Logic (LD):**
‚Ä¢ **Principle:** Visual programming like relay circuits
‚Ä¢ **Advantages:** Intuitive for electricians
‚Ä¢ **Application:** Simple logical operations

**Structured Text (ST):**
‚Ä¢ **Principle:** High-level text language (Pascal/C-like)
‚Ä¢ **Advantages:** Powerful capabilities, readability
‚Ä¢ **Application:** Complex algorithms, mathematics

**Function Block Diagram (FBD):**
‚Ä¢ **Principle:** Graphical programming with blocks
‚Ä¢ **Advantages:** Modularity, code reuse
‚Ä¢ **Application:** PID controllers, control systems

## **Development Environments**

**Siemens TIA Portal:**
‚Ä¢ Languages: LAD, STL, FBD, SCL, GRAPH
‚Ä¢ HMI integration and diagnostics

**Allen-Bradley Studio 5000:**
‚Ä¢ Languages: Ladder, Structured Text, Function Block
‚Ä¢ FactoryTalk integration

**Schneider Electric Unity Pro:**
‚Ä¢ Modular architecture, openness

## **Communication Protocols**

‚Ä¢ **Modbus RTU/TCP** - simple, widespread
‚Ä¢ **Profibus** - high-speed, reliable
‚Ä¢ **Ethernet/IP** - modern, scalable
‚Ä¢ **OPC UA** - universal, secure

## **System Architecture**

**Automation Levels:**
‚Ä¢ **Level 0:** Sensors, actuators
‚Ä¢ **Level 1:** Controllers (PLC, DCS)
‚Ä¢ **Level 2:** HMI, SCADA systems
‚Ä¢ **Level 3:** MES systems
‚Ä¢ **Level 4:** ERP systems

‚úÖ **Industrial programming requires knowledge of production specifics and safety standards!**"""
            },
            
            'algorithms': {
                'keywords': ['–∞–ª–≥–æ—Ä–∏—Ç–º', 'algorithm', '–∫–æ–Ω–≤–µ–π–µ—Ä', 'conveyor', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', 'control'],
                'response_ru': """üîß **–ê–ª–≥–æ—Ä–∏—Ç–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:**

## **–ê–ª–≥–æ—Ä–∏—Ç–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ–π–µ—Ä–æ–º (Python):**

```python
import time
import threading
from enum import Enum

class ConveyorState(Enum):
    STOPPED = 0
    RUNNING = 1
    ERROR = 2
    MAINTENANCE = 3

class ConveyorController:
    def __init__(self):
        self.state = ConveyorState.STOPPED
        self.speed = 0  # –º/–º–∏–Ω
        self.items_count = 0
        self.emergency_stop = False
        self.sensors = {
            'start_button': False,
            'stop_button': False,
            'emergency': False,
            'overload': False,
            'item_detected': False
        }
    
    def start_conveyor(self):
        \"\"\"–ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ–π–µ—Ä–∞\"\"\"
        if self.emergency_stop:
            print("‚ùå –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!")
            return False
        
        if self.sensors['overload']:
            print("‚ùå –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–≤–µ–π–µ—Ä–∞!")
            return False
        
        self.state = ConveyorState.RUNNING
        self.speed = 10  # –º/–º–∏–Ω
        print("‚úÖ –ö–æ–Ω–≤–µ–π–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        return True
    
    def stop_conveyor(self):
        \"\"\"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–≤–µ–π–µ—Ä–∞\"\"\"
        self.state = ConveyorState.STOPPED
        self.speed = 0
        print("üõë –ö–æ–Ω–≤–µ–π–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def emergency_stop_conveyor(self):
        \"\"\"–ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞\"\"\"
        self.emergency_stop = True
        self.state = ConveyorState.ERROR
        self.speed = 0
        print("üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê!")
    
    def monitor_sensors(self):
        \"\"\"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∞—Ç—á–∏–∫–æ–≤\"\"\"
        while True:
            if self.sensors['emergency']:
                self.emergency_stop_conveyor()
            
            if self.sensors['overload'] and self.state == ConveyorState.RUNNING:
                print("‚ö†Ô∏è –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞! –°–Ω–∏–∂–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å")
                self.speed = max(5, self.speed - 1)
            
            if self.sensors['item_detected']:
                self.items_count += 1
                print(f"üì¶ –ü—Ä–µ–¥–º–µ—Ç #{self.items_count} –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
            
            time.sleep(0.1)  # 100–º—Å —Ü–∏–∫–ª
```

## **–ê–ª–≥–æ—Ä–∏—Ç–º –ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞ (C++):**

```cpp
class PIDController {
private:
    double kp, ki, kd;  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    double prev_error, integral;
    
public:
    PIDController(double p, double i, double d) 
        : kp(p), ki(i), kd(d), prev_error(0), integral(0) {}
    
    double calculate(double setpoint, double measured_value, double dt) {
        double error = setpoint - measured_value;
        
        // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è
        double proportional = kp * error;
        
        // –ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è
        integral += error * dt;
        double integral_term = ki * integral;
        
        // –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è
        double derivative = (error - prev_error) / dt;
        double derivative_term = kd * derivative;
        
        prev_error = error;
        
        return proportional + integral_term + derivative_term;
    }
};
```

‚úÖ **–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã: –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!**""",
                
                'response_en': """üîß **Control Algorithms in Industrial Automation:**

## **Conveyor Control Algorithm (Python):**

```python
import time
import threading
from enum import Enum

class ConveyorState(Enum):
    STOPPED = 0
    RUNNING = 1
    ERROR = 2
    MAINTENANCE = 3

class ConveyorController:
    def __init__(self):
        self.state = ConveyorState.STOPPED
        self.speed = 0  # m/min
        self.items_count = 0
        self.emergency_stop = False
        self.sensors = {
            'start_button': False,
            'stop_button': False,
            'emergency': False,
            'overload': False,
            'item_detected': False
        }
    
    def start_conveyor(self):
        \"\"\"Start conveyor\"\"\"
        if self.emergency_stop:
            print("‚ùå Emergency stop active!")
            return False
        
        if self.sensors['overload']:
            print("‚ùå Conveyor overload!")
            return False
        
        self.state = ConveyorState.RUNNING
        self.speed = 10  # m/min
        print("‚úÖ Conveyor started")
        return True
    
    def stop_conveyor(self):
        \"\"\"Stop conveyor\"\"\"
        self.state = ConveyorState.STOPPED
        self.speed = 0
        print("üõë Conveyor stopped")
    
    def emergency_stop_conveyor(self):
        \"\"\"Emergency stop\"\"\"
        self.emergency_stop = True
        self.state = ConveyorState.ERROR
        self.speed = 0
        print("üö® EMERGENCY STOP!")
    
    def monitor_sensors(self):
        \"\"\"Sensor monitoring\"\"\"
        while True:
            if self.sensors['emergency']:
                self.emergency_stop_conveyor()
            
            if self.sensors['overload'] and self.state == ConveyorState.RUNNING:
                print("‚ö†Ô∏è Overload! Reducing speed")
                self.speed = max(5, self.speed - 1)
            
            if self.sensors['item_detected']:
                self.items_count += 1
                print(f"üì¶ Item #{self.items_count} detected")
            
            time.sleep(0.1)  # 100ms cycle
```

## **PID Controller Algorithm (C++):**

```cpp
class PIDController {
private:
    double kp, ki, kd;  // Coefficients
    double prev_error, integral;
    
public:
    PIDController(double p, double i, double d) 
        : kp(p), ki(i), kd(d), prev_error(0), integral(0) {}
    
    double calculate(double setpoint, double measured_value, double dt) {
        double error = setpoint - measured_value;
        
        // Proportional term
        double proportional = kp * error;
        
        // Integral term
        integral += error * dt;
        double integral_term = ki * integral;
        
        // Derivative term
        double derivative = (error - prev_error) / dt;
        double derivative_term = kd * derivative;
        
        prev_error = error;
        
        return proportional + integral_term + derivative_term;
    }
};
```

‚úÖ **Key principles: safety, reliability, performance!**"""
            },
            
            'best_practices': {
                'keywords': ['–ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏', 'best practices', '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', 'recommendations'],
                'response_ru': """üìã **–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:**

## **–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞**
‚Ä¢ **Version Control** - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Git
‚Ä¢ **Code Review** - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∫–æ–ª–ª–µ–≥–∞–º–∏
‚Ä¢ **Testing** - unit —Ç–µ—Å—Ç—ã, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
‚Ä¢ **Documentation** - –ø–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API
‚Ä¢ **Continuous Integration** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞ –∏ —Ç–µ—Å—Ç—ã

## **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å**
‚Ä¢ **Fail-Safe** - –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ
‚Ä¢ **Redundancy** - —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
‚Ä¢ **Watchdog** - –∫–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
‚Ä¢ **Input Validation** - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ **Error Handling** - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫

## **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**
‚Ä¢ **Real-time Constraints** - —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
‚Ä¢ **Memory Management** - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
‚Ä¢ **Algorithm Optimization** - –≤—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
‚Ä¢ **Profiling** - –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ **Caching** - –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö

## **–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã**
‚Ä¢ **IEC 61131-3** - —Å—Ç–∞–Ω–¥–∞—Ä—Ç —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è PLC
‚Ä¢ **IEC 61508** - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
‚Ä¢ **ISO 26262** - –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
‚Ä¢ **MISRA C** - —Å—Ç–∞–Ω–¥–∞—Ä—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ C

‚úÖ **–°–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∏ –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º!**""",
                
                'response_en': """üìã **Industrial Programming Best Practices:**

## **Development**
‚Ä¢ **Version Control** - mandatory Git usage
‚Ä¢ **Code Review** - peer code review
‚Ä¢ **Testing** - unit tests, integration tests
‚Ä¢ **Documentation** - detailed API documentation
‚Ä¢ **Continuous Integration** - automated build and tests

## **Safety**
‚Ä¢ **Fail-Safe** - safe state on failure
‚Ä¢ **Redundancy** - backup of critical functions
‚Ä¢ **Watchdog** - system health monitoring
‚Ä¢ **Input Validation** - validate all inputs
‚Ä¢ **Error Handling** - handle all possible errors

## **Performance**
‚Ä¢ **Real-time Constraints** - meet timing requirements
‚Ä¢ **Memory Management** - efficient memory usage
‚Ä¢ **Algorithm Optimization** - choose optimal algorithms
‚Ä¢ **Profiling** - measure performance
‚Ä¢ **Caching** - cache frequently used data

## **Standards**
‚Ä¢ **IEC 61131-3** - PLC programming languages standard
‚Ä¢ **IEC 61508** - functional safety
‚Ä¢ **ISO 26262** - automotive safety
‚Ä¢ **MISRA C** - safe C programming standard

‚úÖ **Following standards and best practices is critical for industrial systems!**"""
            }
        }
        
        self.logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–Ω–∞–Ω–∏–π –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def detect_topic(self, message: str) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º—ã –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        message_lower = message.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–µ–º—É –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        topic_priorities = [
            'cpp_vs_python',
            'algorithms', 
            'industrial_programming',
            'best_practices'
        ]
        
        for topic in topic_priorities:
            keywords = self.knowledge_base[topic]['keywords']
            matches = sum(1 for keyword in keywords if keyword in message_lower)
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–º—É
            if matches >= 2:  # –ú–∏–Ω–∏–º—É–º 2 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞
                return topic
            elif matches >= 1 and topic == 'cpp_vs_python':
                # –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                return topic
        
        return None
    
    def detect_language(self, message: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        cyrillic_chars = len(re.findall(r'[–∞-—è—ë]', message.lower()))
        latin_chars = len(re.findall(r'[a-z]', message.lower()))
        
        return 'ru' if cyrillic_chars > latin_chars else 'en'
    
    def handle_request(self, message: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –∏ —è–∑—ã–∫
            topic = self.detect_topic(message)
            language = self.detect_language(message)
            
            if not topic:
                # –û–±—â–∏–π –æ—Ç–≤–µ—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é
                return self._get_general_programming_response(language)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            response_key = f'response_{language}'
            knowledge = self.knowledge_base[topic]
            
            if response_key in knowledge:
                response_text = knowledge[response_key]
            else:
                # Fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π –µ—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
                response_text = knowledge.get('response_ru', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
            
            self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å: —Ç–µ–º–∞='{topic}', —è–∑—ã–∫='{language}'")
            
            return {
                'response': response_text,
                'provider': 'Programming Knowledge Handler',
                'category': 'programming',
                'topic': topic,
                'language': language,
                'success': True,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {
                'response': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}',
                'provider': 'Programming Knowledge Handler',
                'category': 'programming',
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
    
    def _get_general_programming_response(self, language: str) -> Dict:
        """–û–±—â–∏–π –æ—Ç–≤–µ—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é"""
        if language == 'ru':
            response = """üíª **–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - –º–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è!**

**–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏:**
‚Ä¢ **–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è** - C++, Python, C#, Java
‚Ä¢ **PLC –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ** - Ladder Logic, Structured Text
‚Ä¢ **SCADA —Å–∏—Å—Ç–µ–º—ã** - WinCC, FactoryTalk, Citect
‚Ä¢ **–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã** - Modbus, Profibus, Ethernet/IP
‚Ä¢ **–ê–ª–≥–æ—Ä–∏—Ç–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è** - –ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä—ã, –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
‚Ä¢ **–í—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —Å–∏—Å—Ç–µ–º—ã** - –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã, —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è

**–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:**
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ–º —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –í—ã–±–æ—Ä–æ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
‚Ä¢ –õ—É—á—à–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º

**–ó–∞–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å** - –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "–°—Ä–∞–≤–Ω–∏ C++ –∏ Python –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"
‚Ä¢ "–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ–π–µ—Ä–æ–º?"
‚Ä¢ "–ö–∞–∫–∏–µ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è?"

‚úÖ **–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é!**"""
        else:
            response = """üíª **Industrial Programming - My Specialization!**

**Main Areas:**
‚Ä¢ **Programming Languages** - C++, Python, C#, Java
‚Ä¢ **PLC Programming** - Ladder Logic, Structured Text
‚Ä¢ **SCADA Systems** - WinCC, FactoryTalk, Citect
‚Ä¢ **Industrial Protocols** - Modbus, Profibus, Ethernet/IP
‚Ä¢ **Control Algorithms** - PID controllers, state machines
‚Ä¢ **Embedded Systems** - microcontrollers, real-time

**I can help with:**
‚Ä¢ Programming language comparisons
‚Ä¢ Technology selection for projects
‚Ä¢ Control and automation algorithms
‚Ä¢ Development best practices
‚Ä¢ Industrial system architecture

**Ask a specific question** - for example:
‚Ä¢ "Compare C++ and Python for automation"
‚Ä¢ "How to write conveyor control algorithm?"
‚Ä¢ "What are industrial programming best practices?"

‚úÖ **Ready to help with any programming questions!**"""
        
        return {
            'response': response,
            'provider': 'Programming Knowledge Handler',
            'category': 'programming',
            'topic': 'general',
            'language': language,
            'success': True,
            'timestamp': datetime.now().isoformat()
        }
    
    def get_supported_topics(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–µ–º"""
        return list(self.knowledge_base.keys())
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        return {
            'supported_topics': len(self.knowledge_base),
            'topics': list(self.knowledge_base.keys()),
            'supported_languages': ['ru', 'en']
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_programming_handler_instance = None

def get_programming_handler() -> ProgrammingKnowledgeHandler:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    global _programming_handler_instance
    if _programming_handler_instance is None:
        _programming_handler_instance = ProgrammingKnowledgeHandler()
    return _programming_handler_instance

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    import logging
    logging.basicConfig(level=logging.INFO)
    
    handler = ProgrammingKnowledgeHandler()
    
    test_questions = [
        "–°—Ä–∞–≤–Ω–∏ C++ –∏ Python –¥–ª—è –∑–∞–¥–∞—á –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏",
        "Compare C++ and Python for automation",
        "–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ–π–µ—Ä–æ–º?",
        "What are the best practices for industrial programming?",
        "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ PLC",
        "–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞—Ç—å?"
    ]
    
    print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–Ø ===")
    for question in test_questions:
        print(f"\n–í–æ–ø—Ä–æ—Å: {question}")
        result = handler.handle_request(question)
        print(f"–¢–µ–º–∞: {result.get('topic', 'N/A')}")
        print(f"–Ø–∑—ã–∫: {result.get('language', 'N/A')}")
        print(f"–£—Å–ø–µ—Ö: {result.get('success', False)}")
        print("–û—Ç–≤–µ—Ç:", result['response'][:200] + "..." if len(result['response']) > 200 else result['response'])
    
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {handler.get_statistics()}")