#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üè• HEALTH & DEMO UNDERSTANDING MODULE
====================================
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –¥–µ–º–æ
"""

import requests
import json
import time
from datetime import datetime

class HealthDemoUnderstanding:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –∏ –¥–µ–º–æ"""
    
    def __init__(self):
        self.servers = {
            'smart_dispatcher': {'port': 8080, 'endpoint': '/api/health'},
            'learning_server': {'port': 8091, 'endpoint': '/api/learning/health'},
            'controllers_server': {'port': 9000, 'endpoint': '/api/health'},
            'math_server': {'port': 8086, 'endpoint': '/api/health'}
        }
        
        self.health_keywords = [
            '–∑–¥–æ—Ä–æ–≤', '—Ä–∞–±–æ—Ç–∞–µ—Ç', '—Å—Ç–∞—Ç—É—Å', '—Å–µ—Ä–≤–µ—Ä', '–º–æ–¥—É–ª—å', '—Å–∏—Å—Ç–µ–º–∞',
            '–ø—Ä–æ–±–ª–µ–º', '–æ—à–∏–±–∫', '–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω', '–ø—Ä–æ–≤–µ—Ä', '–¥–∏–∞–≥–Ω–æ—Å—Ç'
        ]
        
        self.demo_keywords = [
            '–¥–µ–º–æ', '–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è', '–ø–æ–∫–∞–∑–∞—Ç—å', '–∑–∞–ø—É—Å—Ç–∏—Ç—å', '–ø—Ä–∏–º–µ—Ä',
            '—Ç–µ—Å—Ç', '–ø—Ä–æ–≤–µ—Ä', '—Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏'
        ]
    
    def check_server_health(self, server_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
        if server_name not in self.servers:
            return False, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {server_name}"
        
        config = self.servers[server_name]
        url = f"http://localhost:{config['port']}{config['endpoint']}"
        
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                return True, "–ó–¥–æ—Ä–æ–≤"
            else:
                return False, f"–û—à–∏–±–∫–∞ {response.status_code}"
        except Exception as e:
            return False, f"–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)[:30]}"
    
    def check_all_servers(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        results = {}
        healthy_count = 0
        
        for server_name in self.servers:
            is_healthy, status = self.check_server_health(server_name)
            results[server_name] = {'healthy': is_healthy, 'status': status}
            if is_healthy:
                healthy_count += 1
        
        return results, healthy_count, len(self.servers)
    
    def is_health_question(self, question):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –æ –∑–¥–æ—Ä–æ–≤—å–µ"""
        question_lower = question.lower()
        return any(keyword in question_lower for keyword in self.health_keywords)
    
    def is_demo_question(self, question):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –æ –¥–µ–º–æ"""
        question_lower = question.lower()
        return any(keyword in question_lower for keyword in self.demo_keywords)
    
    def generate_health_response(self, question):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ –∑–¥–æ—Ä–æ–≤—å–µ"""
        results, healthy_count, total_count = self.check_all_servers()
        
        response = f"""üè• **–°–¢–ê–¢–£–° –ó–î–û–†–û–í–¨–Ø RUBIN AI**

**üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:** {healthy_count}/{total_count} —Å–µ—Ä–≤–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç

**üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:**
"""
        
        for server_name, result in results.items():
            status_icon = "‚úÖ" if result['healthy'] else "‚ùå"
            response += f"‚Ä¢ {status_icon} {server_name}: {result['status']}\n"
        
        if healthy_count == total_count:
            response += f"""
**üéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!**
Rubin AI –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–¥–æ—Ä–æ–≤ –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.
"""
        else:
            response += f"""
**‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:**
{total_count - healthy_count} —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç.
–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.
"""
        
        return response
    
    def generate_demo_response(self, question):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ –¥–µ–º–æ"""
        return f"""üé¨ **–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø RUBIN AI**

**üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–º–æ:**
‚Ä¢ `demo_solution_final.py` - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —à–∞–±–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ `demo_rubin_self_learning.py` - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è Rubin AI
‚Ä¢ `test_rubin_health_understanding.py` - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
‚Ä¢ `vmb630_advanced_architecture.py` - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

**üöÄ –ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ:**
```bash
python demo_solution_final.py
python demo_rubin_self_learning.py
python test_rubin_health_understanding.py
```

**üìã –ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –¥–µ–º–æ:**
‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–±–µ–≥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
‚Ä¢ –°–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–ø—ã—Ç–∞
‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

**üí° Rubin AI –º–æ–∂–µ—Ç –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑ PLC —Ñ–∞–π–ª–æ–≤ –∏ –ø–æ–∏—Å–∫ –æ—à–∏–±–æ–∫
‚Ä¢ –†–µ—à–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
‚Ä¢ –ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º
‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
"""

def test_health_demo_understanding():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –∏ –¥–µ–º–æ"""
    print("üè• –¢–ï–°–¢ –ü–û–ù–ò–ú–ê–ù–ò–Ø –ó–î–û–†–û–í–¨–Ø –ò –î–ï–ú–û")
    print("=" * 50)
    
    understanding = HealthDemoUnderstanding()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    test_questions = [
        "–ö–∞–∫ –¥–µ–ª–∞? –í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?",
        "–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
        "–ö–∞–∫–∏–µ —Å–µ—Ä–≤–µ—Ä—ã —É —Ç–µ–±—è —Ä–∞–±–æ—Ç–∞—é—Ç?",
        "–ï—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π?",
        "–ß—Ç–æ —Å –¥–µ–º–æ? –†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è?",
        "–ú–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ?",
        "–ü–æ–∫–∞–∂–∏ –º–Ω–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Ä–∞–±–æ—Ç—ã"
    ]
    
    for question in test_questions:
        print(f"\nüìù –í–æ–ø—Ä–æ—Å: {question}")
        print("-" * 40)
        
        if understanding.is_health_question(question):
            print("üè• –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –≤–æ–ø—Ä–æ—Å –æ –∑–¥–æ—Ä–æ–≤—å–µ")
            response = understanding.generate_health_response(question)
            print("üìã –û—Ç–≤–µ—Ç:")
            print(response[:300] + "..." if len(response) > 300 else response)
        
        elif understanding.is_demo_question(question):
            print("üé¨ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –≤–æ–ø—Ä–æ—Å –æ –¥–µ–º–æ")
            response = understanding.generate_demo_response(question)
            print("üìã –û—Ç–≤–µ—Ç:")
            print(response[:300] + "..." if len(response) > 300 else response)
        
        else:
            print("‚ùì –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞")
            print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")

if __name__ == "__main__":
    test_health_demo_understanding()










