#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è Rubin AI —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
"""

import json
import random
import logging
import re
from datetime import datetime
from typing import Dict, List, Any, Tuple
from neural_rubin_v2 import EnhancedNeuralRubinAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ImprovedRubinAITraining:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è Rubin AI"""
    
    def __init__(self):
        self.neural_rubin = EnhancedNeuralRubinAI()
        self.training_data = []
        self.validation_data = []
        self.test_data = []
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        self._generate_training_data()
        
        logger.info("üéì –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è Rubin AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        logger.info(f"üìä –û–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤: {len(self.training_data)}")
    
    def _generate_training_data(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π"""
        
        # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
        math_data = [
            {"question": "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x^2 + 5x + 6 = 0", "category": "mathematics"},
            {"question": "–ù–∞–π–¥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–∏ f(x) = x^3 + 2x^2 + 1", "category": "mathematics"},
            {"question": "–í—ã—á–∏—Å–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞–ª –æ—Ç 0 –¥–æ 1 —Ñ—É–Ω–∫—Ü–∏–∏ x^2", "category": "mathematics"},
            {"question": "–ù–∞–π–¥–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø—Ä–∏ —Ç–æ–∫–µ 2 –ê –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–∏ 5 –û–º", "category": "mathematics"},
            {"question": "–†–∞—Å—Å—á–∏—Ç–∞–π –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫—É—é —ç–Ω–µ—Ä–≥–∏—é —Ç–µ–ª–∞ –º–∞—Å—Å–æ–π 10 –∫–≥ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 5 –º/—Å", "category": "mathematics"},
            {"question": "–°–æ–∑–¥–∞–π –≥—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ y = sin(x)", "category": "mathematics"},
            {"question": "–ù–∞–π–¥–∏ –∫–æ—Ä–Ω–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è 2x^2 - 8x + 6 = 0", "category": "mathematics"},
            {"question": "–í—ã—á–∏—Å–ª–∏ –ø–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ 3, 4, 5", "category": "mathematics"},
            {"question": "–ù–∞–π–¥–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é —Ä–∞—Å—Ç–≤–æ—Ä–∞ —Å 0.5 –º–æ–ª—å –≤–µ—â–µ—Å—Ç–≤–∞ –≤ 2 –ª —Ä–∞—Å—Ç–≤–æ—Ä–∞", "category": "mathematics"},
            {"question": "–ü–æ—Å—Ç—Ä–æ–π –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö: –Ø–±–ª–æ–∫–∏ 25, –ë–∞–Ω–∞–Ω—ã 30, –ê–ø–µ–ª—å—Å–∏–Ω—ã 20", "category": "mathematics"},
            {"question": "–†–µ—à–∏ —Å–∏—Å—Ç–µ–º—É —É—Ä–∞–≤–Ω–µ–Ω–∏–π", "category": "mathematics"},
            {"question": "–ù–∞–π–¥–∏ –ø—Ä–µ–¥–µ–ª —Ñ—É–Ω–∫—Ü–∏–∏", "category": "mathematics"},
            {"question": "–í—ã—á–∏—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å –º–∞—Ç—Ä–∏—Ü—ã", "category": "mathematics"},
            {"question": "–ù–∞–π–¥–∏ –æ–±—Ä–∞—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É", "category": "mathematics"},
            {"question": "–†–µ—à–∏ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ", "category": "mathematics"}
        ]
        
        # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
        programming_data = [
            {"question": "–ù–∞–ø–∏—à–∏ –∫–æ–¥ –Ω–∞ Python –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞", "category": "programming"},
            {"question": "–û–±—ä—è—Å–Ω–∏ –∞–ª–≥–æ—Ä–∏—Ç–º –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", "category": "programming"},
            {"question": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ–∫—É—Ä—Å–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏?", "category": "programming"},
            {"question": "–°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å –Ω–∞ Python –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏", "category": "programming"},
            {"question": "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ", "category": "programming"},
            {"question": "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "category": "programming"},
            {"question": "–ö–∞–∫ –æ—Ç–ª–∞–¥–∏—Ç—å –æ—à–∏–±–∫—É –≤ –∫–æ–¥–µ?", "category": "programming"},
            {"question": "–ù–∞–ø–∏—à–∏ –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö", "category": "programming"},
            {"question": "–û–±—ä—è—Å–Ω–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Singleton", "category": "programming"},
            {"question": "–°–æ–∑–¥–∞–π REST API –Ω–∞ Flask", "category": "programming"},
            {"question": "–ù–∞–ø–∏—à–∏ –∫–æ–¥ –Ω–∞ JavaScript", "category": "programming"},
            {"question": "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "category": "programming"},
            {"question": "–°–æ–∑–¥–∞–π –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "category": "programming"},
            {"question": "–ù–∞–ø–∏—à–∏ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–¥–∞", "category": "programming"},
            {"question": "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID", "category": "programming"}
        ]
        
        # –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞
        electrical_data = [
            {"question": "–†–∞—Å—Å—á–∏—Ç–∞–π —Ç–æ–∫ –≤ —Ü–µ–ø–∏ —Å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ–º 10 –û–º –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ–º 220 –í", "category": "electrical"},
            {"question": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ö–µ–º—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤", "category": "electrical"},
            {"question": "–†–∞—Å—Å—á–∏—Ç–∞–π –º–æ—â–Ω–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–ø–∏", "category": "electrical"},
            {"question": "–û–±—ä—è—Å–Ω–∏ –∑–∞–∫–æ–Ω –ö–∏—Ä—Ö–≥–æ—Ñ–∞ –¥–ª—è —Ç–æ–∫–æ–≤", "category": "electrical"},
            {"question": "–†–∞—Å—Å—á–∏—Ç–∞–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "category": "electrical"},
            {"question": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞–±–æ—Ç—É —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä–∞", "category": "electrical"},
            {"question": "–†–∞—Å—Å—á–∏—Ç–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã RC-—Ü–µ–ø–∏", "category": "electrical"},
            {"question": "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä–∞", "category": "electrical"},
            {"question": "–†–∞—Å—Å—á–∏—Ç–∞–π –∏–Ω–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞—Ç—É—à–∫–∏", "category": "electrical"},
            {"question": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ö–µ–º—É –º–æ—Å—Ç–æ–≤–æ–≥–æ –≤—ã–ø—Ä—è–º–∏—Ç–µ–ª—è", "category": "electrical"},
            {"question": "–†–∞—Å—Å—á–∏—Ç–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞", "category": "electrical"},
            {"question": "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –¥–∏–æ–¥–∞", "category": "electrical"},
            {"question": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ö–µ–º—É —É—Å–∏–ª–∏—Ç–µ–ª—è", "category": "electrical"},
            {"question": "–†–∞—Å—Å—á–∏—Ç–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞", "category": "electrical"},
            {"question": "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞", "category": "electrical"}
        ]
        
        # –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
        controllers_data = [
            {"question": "–°–æ–∑–¥–∞–π –ø—Ä–æ–≥—Ä–∞–º–º—É PLC –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º", "category": "controllers"},
            {"question": "–ù–∞–ø–∏—à–∏ –ª–æ–≥–∏–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ–π–µ—Ä–æ–º", "category": "controllers"},
            {"question": "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã PID-—Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞", "category": "controllers"},
            {"question": "–°–æ–∑–¥–∞–π –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏", "category": "controllers"},
            {"question": "–ù–∞—Å—Ç—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", "category": "controllers"},
            {"question": "–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª Modbus", "category": "controllers"},
            {"question": "–°–æ–∑–¥–∞–π –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å–≤–µ—â–µ–Ω–∏–µ–º", "category": "controllers"},
            {"question": "–ù–∞–ø–∏—à–∏ –ª–æ–≥–∏–∫—É –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "category": "controllers"},
            {"question": "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã SCADA —Å–∏—Å—Ç–µ–º—ã", "category": "controllers"},
            {"question": "–°–æ–∑–¥–∞–π –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å–æ—Å–æ–º", "category": "controllers"},
            {"question": "–ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —Ä–æ–±–æ—Ç–∞", "category": "controllers"},
            {"question": "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –¥–∞—Ç—á–∏–∫–∞", "category": "controllers"},
            {"question": "–°–æ–∑–¥–∞–π –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —Å—Ç–∞–Ω–∫–∞", "category": "controllers"},
            {"question": "–ù–∞–ø–∏—à–∏ –ª–æ–≥–∏–∫—É –¥–ª—è –∫–æ–Ω–≤–µ–π–µ—Ä–∞", "category": "controllers"},
            {"question": "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞", "category": "controllers"}
        ]
        
        # –†–∞–¥–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞
        radiomechanics_data = [
            {"question": "–†–∞—Å—Å—á–∏—Ç–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω—Ç–µ–Ω–Ω—ã –¥–ª—è —á–∞—Å—Ç–æ—Ç—ã 2.4 –ì–ì—Ü", "category": "radiomechanics"},
            {"question": "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —Ä–∞–¥–∏–æ–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞", "category": "radiomechanics"},
            {"question": "–†–∞—Å—Å—á–∏—Ç–∞–π –¥–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–¥–∏–æ—Å–≤—è–∑–∏", "category": "radiomechanics"},
            {"question": "–û–±—ä—è—Å–Ω–∏ –º–æ–¥—É–ª—è—Ü–∏—é AM –∏ FM", "category": "radiomechanics"},
            {"question": "–†–∞—Å—Å—á–∏—Ç–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∏–ø–æ–ª—å–Ω–æ–π –∞–Ω—Ç–µ–Ω–Ω—ã", "category": "radiomechanics"},
            {"question": "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —Ä–∞–¥–∏–æ–ø—Ä–∏–µ–º–Ω–∏–∫–∞", "category": "radiomechanics"},
            {"question": "–†–∞—Å—Å—á–∏—Ç–∞–π –∑–∞—Ç—É—Ö–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ", "category": "radiomechanics"},
            {"question": "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏", "category": "radiomechanics"},
            {"question": "–†–∞—Å—Å—á–∏—Ç–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Ä–∞–±–æ–ª–∏—á–µ—Å–∫–æ–π –∞–Ω—Ç–µ–Ω–Ω—ã", "category": "radiomechanics"},
            {"question": "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —Ä–∞–¥–∞—Ä–∞", "category": "radiomechanics"},
            {"question": "–†–∞—Å—Å—á–∏—Ç–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–ª–Ω–æ–≤–æ–¥–∞", "category": "radiomechanics"},
            {"question": "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–æ–π –ø–µ—á–∏", "category": "radiomechanics"},
            {"question": "–†–∞—Å—Å—á–∏—Ç–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä–∞", "category": "radiomechanics"},
            {"question": "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –ª–∞–∑–µ—Ä–∞", "category": "radiomechanics"},
            {"question": "–†–∞—Å—Å—á–∏—Ç–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–ª–æ–∫–Ω–∞", "category": "radiomechanics"}
        ]
        
        # –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        general_data = [
            {"question": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", "category": "general"},
            {"question": "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å", "category": "general"},
            {"question": "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?", "category": "general"},
            {"question": "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ", "category": "general"},
            {"question": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?", "category": "general"},
            {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?", "category": "general"},
            {"question": "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π", "category": "general"},
            {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ?", "category": "general"},
            {"question": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ?", "category": "general"},
            {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞?", "category": "general"},
            {"question": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!", "category": "general"},
            {"question": "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è", "category": "general"},
            {"question": "–ü–æ–º–æ–≥–∏ –º–Ω–µ", "category": "general"},
            {"question": "–ö–∞–∫ –¥–µ–ª–∞?", "category": "general"},
            {"question": "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?", "category": "general"}
        ]
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        all_data = math_data + programming_data + electrical_data + controllers_data + radiomechanics_data + general_data
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        random.shuffle(all_data)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ–±—É—á–∞—é—â—É—é, –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
        total_size = len(all_data)
        train_size = int(0.7 * total_size)
        val_size = int(0.15 * total_size)
        
        self.training_data = all_data[:train_size]
        self.validation_data = all_data[train_size:train_size + val_size]
        self.test_data = all_data[train_size + val_size:]
        
        logger.info(f"üìä –î–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã: –æ–±—É—á–µ–Ω–∏–µ {len(self.training_data)}, –≤–∞–ª–∏–¥–∞—Ü–∏—è {len(self.validation_data)}, —Ç–µ—Å—Ç {len(self.test_data)}")
    
    def train_with_rule_based_fallback(self):
        """–û–±—É—á–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª–æ-–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–∞–∫ fallback"""
        logger.info("üéì –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–æ-–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
        
        # –û–±—É—á–∞–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å
        self.neural_rubin.train_on_data(self.training_data)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª–æ-–æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª–æ-–æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é")
        
        test_questions = [
            "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x^2 + 5x + 6 = 0",
            "–ù–∞–ø–∏—à–∏ –∫–æ–¥ –Ω–∞ Python –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞", 
            "–†–∞—Å—Å—á–∏—Ç–∞–π —Ç–æ–∫ –≤ —Ü–µ–ø–∏ —Å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ–º 10 –û–º –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ–º 220 –í",
            "–°–æ–∑–¥–∞–π –ø—Ä–æ–≥—Ä–∞–º–º—É PLC –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º",
            "–†–∞—Å—Å—á–∏—Ç–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω—Ç–µ–Ω–Ω—ã –¥–ª—è —á–∞—Å—Ç–æ—Ç—ã 2.4 –ì–ì—Ü",
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
        ]
        
        for question in test_questions:
            category, confidence = self.neural_rubin._rule_based_categorization(question)
            logger.info(f"üìù '{question}' ‚Üí {category} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f})")
        
        logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    def evaluate_with_rule_based(self) -> Dict[str, float]:
        """–û—Ü–µ–Ω–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª–æ-–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        logger.info("üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å –ø—Ä–∞–≤–∏–ª–æ-–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
        
        correct_predictions = 0
        total_predictions = len(self.test_data)
        
        category_accuracy = {}
        
        for data in self.test_data:
            question = data['question']
            true_category = data['category']
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª–æ-–æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é
            predicted_category, confidence = self.neural_rubin._rule_based_categorization(question)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
            if predicted_category == true_category:
                correct_predictions += 1
                if true_category not in category_accuracy:
                    category_accuracy[true_category] = {'correct': 0, 'total': 0}
                category_accuracy[true_category]['correct'] += 1
            
            if true_category not in category_accuracy:
                category_accuracy[true_category] = {'correct': 0, 'total': 0}
            category_accuracy[true_category]['total'] += 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        overall_accuracy = correct_predictions / total_predictions
        
        # –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_accuracies = {}
        for category, stats in category_accuracy.items():
            category_accuracies[category] = stats['correct'] / stats['total']
        
        results = {
            'overall_accuracy': overall_accuracy,
            'total_samples': total_predictions,
            'correct_predictions': correct_predictions,
            'category_accuracies': category_accuracies
        }
        
        logger.info(f"üìä –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {overall_accuracy:.3f}")
        logger.info(f"üìä –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {correct_predictions}/{total_predictions}")
        
        for category, accuracy in category_accuracies.items():
            logger.info(f"üìä –¢–æ—á–Ω–æ—Å—Ç—å {category}: {accuracy:.3f}")
        
        return results
    
    def test_improved_categorization(self) -> List[Dict[str, Any]]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        test_questions = [
            "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x^2 + 5x + 6 = 0",
            "–ù–∞–ø–∏—à–∏ –∫–æ–¥ –Ω–∞ Python –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞",
            "–†–∞—Å—Å—á–∏—Ç–∞–π —Ç–æ–∫ –≤ —Ü–µ–ø–∏ —Å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ–º 10 –û–º –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ–º 220 –í",
            "–°–æ–∑–¥–∞–π –ø—Ä–æ–≥—Ä–∞–º–º—É PLC –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º",
            "–†–∞—Å—Å—á–∏—Ç–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω—Ç–µ–Ω–Ω—ã –¥–ª—è —á–∞—Å—Ç–æ—Ç—ã 2.4 –ì–ì—Ü",
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            "–û–±—ä—è—Å–Ω–∏ –∞–ª–≥–æ—Ä–∏—Ç–º –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏",
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ö–µ–º—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤",
            "–ù–∞–ø–∏—à–∏ –ª–æ–≥–∏–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ–π–µ—Ä–æ–º",
            "–û–±—ä—è—Å–Ω–∏ –º–æ–¥—É–ª—è—Ü–∏—é AM –∏ FM"
        ]
        
        results = []
        
        for question in test_questions:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª–æ-–æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é
            category, confidence = self.neural_rubin._rule_based_categorization(question)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_data = self.neural_rubin.category_handlers[category](question)
            
            results.append({
                'question': question,
                'category': category,
                'confidence': confidence,
                'response': response_data['response']
            })
        
        return results
    
    def generate_improved_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        evaluation = self.evaluate_with_rule_based()
        
        report = f"""
# üìä –£–õ–£–ß–®–ï–ù–ù–´–ô –û–¢–ß–ï–¢ –û–ë –û–ë–£–ß–ï–ù–ò–ò RUBIN AI

## üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- **–û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å**: {evaluation['overall_accuracy']:.3f} ({evaluation['correct_predictions']}/{evaluation['total_samples']})
- **–û–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤**: {len(self.training_data)}
- **–í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤**: {len(self.validation_data)}
- **–¢–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤**: {len(self.test_data)}

## üéØ –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
"""
        
        for category, accuracy in evaluation['category_accuracies'].items():
            report += f"- **{category}**: {accuracy:.3f}\n"
        
        report += f"""
## üß† –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
- **ML –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã**: {'‚úÖ' if self.neural_rubin.get_knowledge_summary()['neural_network_available'] else '‚ùå'}
- **–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π**: {self.neural_rubin.get_knowledge_summary()['total_categories']} –∫–∞—Ç–µ–≥–æ—Ä–∏–π
- **–ú–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏**: {self.neural_rubin.get_knowledge_summary()['available_methods']}
- **–®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤**: {self.neural_rubin.get_knowledge_summary()['response_templates']}

## üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–µ—Ç–æ–¥—ã
- **–ü—Ä–∞–≤–∏–ª–æ-–æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è**: ‚úÖ (fallback)
- **–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å**: {'‚úÖ' if self.neural_rubin.get_knowledge_summary()['neural_network_available'] else '‚ùå'}
- **–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π**: ‚úÖ (6 –∫–∞—Ç–µ–≥–æ—Ä–∏–π)

## üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
"""
        
        if evaluation['overall_accuracy'] < 0.7:
            report += "- ‚ö†Ô∏è –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∏–∂–µ 70%, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
        
        if evaluation['overall_accuracy'] >= 0.8:
            report += "- ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
        
        report += "- üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π\n"
        report += "- üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        report += "- üß† –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ ML –º–æ–¥–µ–ª—è–º–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
        
        return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéì –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –û–ë–£–ß–ï–ù–ò–Ø RUBIN AI")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è
    training_system = ImprovedRubinAITraining()
    
    # –û–±—É—á–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª–æ-–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    training_system.train_with_rule_based_fallback()
    
    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
    print("\nüìä –û–¶–ï–ù–ö–ê –ú–û–î–ï–õ–ò:")
    print("-" * 30)
    evaluation_results = training_system.evaluate_with_rule_based()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ô –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–ò:")
    print("-" * 45)
    test_results = training_system.test_improved_categorization()
    
    for result in test_results:
        print(f"\nüìù –í–æ–ø—Ä–æ—Å: {result['question']}")
        print(f"üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result['category']}")
        print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.3f}")
        print(f"üí° –û—Ç–≤–µ—Ç: {result['response'][:100]}...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
    report = training_system.generate_improved_report()
    print(f"\nüìã –£–õ–£–ß–®–ï–ù–ù–´–ô –û–¢–ß–ï–¢:")
    print(report)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    with open("improved_training_report.md", "w", encoding="utf-8") as f:
        f.write(report)
    
    print("\n‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ improved_training_report.md")

if __name__ == "__main__":
    main()










